{
  return new RelationshipIterator.BaseIterator(){
    private long highId=relationshipStore.getHighestPossibleIdInUse();
    private long currentId;
    private final RelationshipRecord reusableRecord=new RelationshipRecord(-1);
    @Override protected boolean fetchNext(){
      while (true) {
        while (currentId <= highId) {
          try {
            if (relationshipStore.fillRecord(currentId,reusableRecord,CHECK) && reusableRecord.inUse()) {
              return next(reusableRecord.getId());
            }
          }
  finally {
            currentId++;
          }
        }
        long newHighId=relationshipStore.getHighestPossibleIdInUse();
        if (newHighId > highId) {
          highId=newHighId;
        }
 else {
          break;
        }
      }
      return false;
    }
    @Override public <EXCEPTION extends Exception>boolean relationshipVisit(    long relationshipId,    RelationshipVisitor<EXCEPTION> visitor) throws EXCEPTION {
      visitor.visit(relationshipId,reusableRecord.getType(),reusableRecord.getFirstNode(),reusableRecord.getSecondNode());
      return false;
    }
  }
;
}
