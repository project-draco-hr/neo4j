{
  NodeRecord node=nodeStore.loadRecord(nodeId,null);
  if (node == null) {
    return true;
  }
  if (node.isDense()) {
    long groupId=node.getNextRel();
    while (groupId != Record.NO_NEXT_RELATIONSHIP.intValue()) {
      RelationshipGroupRecord group=relationshipGroupStore.getRecord(groupId);
      long outCount=countByFirstPrevPointer(nodeId,group.getFirstOut());
      long inCount=countByFirstPrevPointer(nodeId,group.getFirstIn());
      long loopCount=countByFirstPrevPointer(nodeId,group.getFirstLoop());
      visitor.visitDegree(group.getType(),(int)(outCount + loopCount),(int)(inCount + loopCount));
      groupId=group.getNext();
    }
  }
 else {
    PrimitiveIntObjectMap<int[]> degrees=Primitive.intObjectMap(5);
    StoreRelationshipIterator relationships;
    try {
      relationships=nodeListRelationships(nodeId,Direction.BOTH);
      while (relationships.hasNext()) {
        relationships.next();
        RelationshipRecord record=relationships.record();
        int[] byType=degrees.get(record.getType());
        if (byType == null) {
          degrees.put(record.getType(),byType=new int[3]);
        }
        byType[directionOf(nodeId,record).ordinal()]++;
      }
      degrees.visitEntries(new PrimitiveIntObjectVisitor<int[],RuntimeException>(){
        @Override public boolean visited(        int type,        int[] degrees) throws RuntimeException {
          visitor.visitDegree(type,degrees[0] + degrees[2],degrees[1] + degrees[2]);
          return false;
        }
      }
);
    }
 catch (    EntityNotFoundException e) {
    }
  }
  return false;
}
