{
  return argThat(new TypeSafeMatcher<Document>(){
    @Override protected boolean matchesSafely(    Document item){
      return equal(fields(document),fields(item));
    }
    @Override public void describeTo(    Description description){
      description.appendValue(document);
    }
    private Map<String,Fieldable> fields(    Document doc){
      Map<String,Fieldable> these=new HashMap<>();
      for (      Fieldable field : doc.getFields()) {
        these.put(field.name(),field);
      }
      return these;
    }
    boolean equal(    Map<String,Fieldable> these,    Map<String,Fieldable> those){
      if (!these.keySet().equals(those.keySet())) {
        return false;
      }
      for (      Map.Entry<String,Fieldable> entry : these.entrySet()) {
        if (!equal(entry.getValue(),those.get(entry.getKey()))) {
          return false;
        }
      }
      return true;
    }
    boolean equal(    Fieldable lhs,    Fieldable rhs){
      if (lhs.isBinary() && rhs.isBinary()) {
        return Arrays.equals(lhs.getBinaryValue(),rhs.getBinaryValue());
      }
      return lhs.stringValue().equals(rhs.stringValue());
    }
  }
);
}
