{
  final int labelId=7;
  final int pageSize=2;
  Query query=mock(Query.class);
  IndexSearcher searcher=mock(IndexSearcher.class);
  NumericDocValues rangeNDV=mock(NumericDocValues.class);
  when(rangeNDV.get(11)).thenReturn(0x1L);
  when(rangeNDV.get(16)).thenReturn(0x2L);
  when(rangeNDV.get(37)).thenReturn(0x3L);
  NumericDocValues labelNDV=mock(NumericDocValues.class);
  when(labelNDV.get(11)).thenReturn(0x01L);
  when(labelNDV.get(16)).thenReturn(0x03L);
  when(labelNDV.get(37)).thenReturn(0x30L);
  Map<String,NumericDocValues> docValues=MapUtil.genericMap("range",rangeNDV,"7",labelNDV);
  IndexReaderStub reader=new IndexReaderStub(docValues);
  reader.setElements(new String[]{"11","16","37"});
  final LeafReaderContext context=reader.getContext();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      DocValuesCollector collector=(DocValuesCollector)invocation.getArguments()[1];
      collector.doSetNextReader(context);
      collector.collect(11);
      collector.collect(16);
      collector.collect(37);
      return null;
    }
  }
).when(searcher).search(same(query),any(DocValuesCollector.class));
  PrimitiveLongIterator iterator=concat(new PageOfRangesIterator(format,searcher,pageSize,query,labelId));
  List<Long> longs=primitivesList(iterator);
  assertEquals(asList((1L << format.bitmapFormat().shift),(2L << format.bitmapFormat().shift),(2L << format.bitmapFormat().shift) + 1,(3L << format.bitmapFormat().shift) + 4,(3L << format.bitmapFormat().shift) + 5),longs);
  verify(searcher,times(1)).search(same(query),any(DocValuesCollector.class));
  verify(rangeNDV,times(3)).get(anyInt());
  verify(labelNDV,times(3)).get(anyInt());
  verifyNoMoreInteractions(searcher);
  verifyNoMoreInteractions(labelNDV);
  verifyNoMoreInteractions(rangeNDV);
}
