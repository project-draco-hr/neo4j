{
  super(config);
  readOnly=Boolean.parseBoolean((String)config.get(Config.READ_ONLY));
  backupSlave=Boolean.parseBoolean((String)config.get(Config.BACKUP_SLAVE));
  this.lockManager=(LockManager)config.get(LockManager.class);
  this.lockReleaser=(LockReleaser)config.get(LockReleaser.class);
  storeDir=(String)config.get("store_dir");
  String store=(String)config.get("neo_store");
  if (!config.containsKey(REBUILD_IDGENERATORS_FAST)) {
    config.put(REBUILD_IDGENERATORS_FAST,"true");
  }
  File file=new File(store);
  String create="" + config.get("create");
  if (!readOnly && !file.exists() && "true".equals(create)) {
    autoCreatePath(store);
    NeoStore.createStore(store,config);
  }
  neoStore=new NeoStore(config);
  xaContainer=XaContainer.create(this,(String)config.get("logical_log"),new CommandFactory(neoStore),new TransactionFactory(),config);
  if (!readOnly) {
    xaContainer.openLogicalLog();
  }
  if (!xaContainer.getResourceManager().hasRecoveredTransactions()) {
    neoStore.makeStoreOk();
  }
 else {
    logger.fine("Waiting for TM to take care of recovered " + "transactions.");
  }
  idGenerators=new ArrayMap<Class<?>,Store>(5,false,false);
  this.idGenerators.put(Node.class,neoStore.getNodeStore());
  this.idGenerators.put(Relationship.class,neoStore.getRelationshipStore());
  this.idGenerators.put(RelationshipType.class,neoStore.getRelationshipTypeStore());
  this.idGenerators.put(PropertyStore.class,neoStore.getPropertyStore());
  this.idGenerators.put(PropertyIndex.class,neoStore.getPropertyStore().getIndexStore());
  xaContainer.getLogicalLog().setKeepLogs(shouldKeepLog((String)config.get(Config.KEEP_LOGICAL_LOGS),"nioneodb"));
}
