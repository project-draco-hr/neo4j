{
  byte headerByte=cursor.getByte();
  boolean inUse=isInUse(headerByte);
  if (mode.shouldLoad(inUse)) {
    long firstNode=cursor.getInt() & 0xFFFFFFFFL;
    long firstNodeMod=(headerByte & 0xEL) << 31;
    long secondNode=cursor.getInt() & 0xFFFFFFFFL;
    long typeInt=cursor.getInt();
    long secondNodeMod=(typeInt & 0x70000000L) << 4;
    int type=(int)(typeInt & 0xFFFF);
    long firstPrevRel=cursor.getInt() & 0xFFFFFFFFL;
    long firstPrevRelMod=(typeInt & 0xE000000L) << 7;
    long firstNextRel=cursor.getInt() & 0xFFFFFFFFL;
    long firstNextRelMod=(typeInt & 0x1C00000L) << 10;
    long secondPrevRel=cursor.getInt() & 0xFFFFFFFFL;
    long secondPrevRelMod=(typeInt & 0x380000L) << 13;
    long secondNextRel=cursor.getInt() & 0xFFFFFFFFL;
    long secondNextRelMod=(typeInt & 0x70000L) << 16;
    long nextProp=cursor.getInt() & 0xFFFFFFFFL;
    long nextPropMod=(headerByte & 0xF0L) << 28;
    byte extraByte=cursor.getByte();
    record.initialize(inUse,BaseRecordFormat.longFromIntAndMod(nextProp,nextPropMod),BaseRecordFormat.longFromIntAndMod(firstNode,firstNodeMod),BaseRecordFormat.longFromIntAndMod(secondNode,secondNodeMod),type,BaseRecordFormat.longFromIntAndMod(firstPrevRel,firstPrevRelMod),BaseRecordFormat.longFromIntAndMod(firstNextRel,firstNextRelMod),BaseRecordFormat.longFromIntAndMod(secondPrevRel,secondPrevRelMod),BaseRecordFormat.longFromIntAndMod(secondNextRel,secondNextRelMod),(extraByte & 0x1) != 0,(extraByte & 0x2) != 0);
  }
}
