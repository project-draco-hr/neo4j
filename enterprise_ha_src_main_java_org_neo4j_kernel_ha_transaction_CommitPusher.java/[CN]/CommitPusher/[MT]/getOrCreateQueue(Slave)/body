{
  BlockingQueue<PullUpdateFuture> queue=pullUpdateQueues.get(slave.getServerId());
  if (queue == null) {
    queue=new ArrayBlockingQueue<>(PULL_UPDATES_QUEUE_SIZE);
    pullUpdateQueues.put(slave.getServerId(),queue);
    final BlockingQueue<PullUpdateFuture> finalQueue=queue;
    scheduler.schedule(masterTransactionPushing,new Runnable(){
      List<PullUpdateFuture> currentPulls=new ArrayList<>();
      @Override public void run(){
        try {
          while (true) {
            currentPulls.clear();
            currentPulls.add(finalQueue.take());
            finalQueue.drainTo(currentPulls);
            try {
              PullUpdateFuture pullUpdateFuture=currentPulls.get(0);
              Response<Void> response=pullUpdateFuture.getSlave().pullUpdates(pullUpdateFuture.getTxId());
              response.close();
              for (              PullUpdateFuture currentPull : currentPulls) {
                currentPull.done();
              }
            }
 catch (            Exception e) {
              for (              PullUpdateFuture currentPull : currentPulls) {
                currentPull.setException(e);
              }
            }
          }
        }
 catch (        InterruptedException e) {
        }
      }
    }
);
  }
  return queue;
}
