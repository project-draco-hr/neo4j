{
  try {
    lm.getReadLock(null);
    fail("Null parameter should throw exception");
  }
 catch (  Exception e) {
  }
  try {
    lm.getWriteLock(null);
    fail("Null parameter should throw exception");
  }
 catch (  Exception e) {
  }
  try {
    lm.releaseReadLock(null,null);
    fail("Null parameter should throw exception");
  }
 catch (  Exception e) {
  }
  try {
    lm.releaseWriteLock(null,null);
    fail("Null parameter should throw exception");
  }
 catch (  Exception e) {
  }
  Object entity=new Object();
  try {
    lm.releaseWriteLock(entity,null);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  try {
    lm.releaseReadLock(entity,null);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  lm.getReadLock(entity);
  try {
    lm.releaseWriteLock(entity,null);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  lm.releaseReadLock(entity,null);
  lm.getWriteLock(entity);
  try {
    lm.releaseReadLock(entity,null);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  lm.releaseWriteLock(entity,null);
  lm.getReadLock(entity);
  lm.getWriteLock(entity);
  lm.releaseWriteLock(entity,null);
  lm.releaseReadLock(entity,null);
  lm.getWriteLock(entity);
  lm.getReadLock(entity);
  lm.releaseReadLock(entity,null);
  lm.releaseWriteLock(entity,null);
  for (int i=0; i < 10; i++) {
    if ((i % 2) == 0) {
      lm.getWriteLock(entity);
    }
 else {
      lm.getReadLock(entity);
    }
  }
  for (int i=9; i >= 0; i--) {
    if ((i % 2) == 0) {
      lm.releaseWriteLock(entity,null);
    }
 else {
      lm.releaseReadLock(entity,null);
    }
  }
}
