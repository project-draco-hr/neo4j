':"\nif [ -z "$PYTHON" ]; then\n    PYTHON=python\nfi\n\n# If Neo4j Python bindings are installed: use the installed ones\nif ! $PYTHON -c "import neo4j" &> /dev/null; then\n    # Otherwise: set up PYTHONPATH to use the checked out source\n    SRC=$0\n    for (( c=3; c>0; c-- )); do\n        while [ -L "$SRC" ]; do\n            SRC=$(readlink $SRC)\n        done\n        SRC=$(cd $(dirname $SRC); pwd)\n    done\n\n    if [ -z "$PYTHONPATH" ]; then\n        PYTHONPATH="$SRC/main/python"\n    else\n        PYTHONPATH="$PYTHONPATH:$SRC/main/python"\n    fi\n    export PYTHONPATH\n\n    if [ -z "$JYTHONPATH" ]; then\n        JYTHONPATH="$SRC/main/python"\n    else\n        JYTHONPATH="$JYTHONPATH:$SRC/main/python"\n    fi\n    export JYTHONPATH\n    \n    CLASSPATH=$($SRC/bin/classpath)\n    if [ $? -ne 0 ]; then exit -1; fi\n    export CLASSPATH\nfi\n\n$PYTHON $0 "$@"\nexit $?\n":'
__all__ = ()
import unittest, doctest, sys, os, traceback, junit_xml
if (__name__ == '__main__'):
    params = {'--classpath': None, '--junit': None, }
    key = arg = None
    args = []
    for arg in sys.argv:
        if (key is not None):
            params[key] = arg
            key = None
        elif (arg.lower() in params):
            key = arg.lower()
        else:
            args.append(arg)
    if params['--classpath']:
        try:
            import java
        except:
            os.environ['CLASSPATH'] = params['--classpath']
        else:
            sys.path.extend(params['--classpath'].split(':'))
    if params['--junit']:
        runner = junit_xml.JUnitXMLTestRunner(params['--junit'])
    else:
        runner = None
    del key, arg, params
    modules = {}
    for candidate in os.listdir(os.path.dirname(os.path.abspath(__file__))):
        if candidate.endswith('.py'):
            candidate = candidate[:(-3)]
            try:
                exec ('from %s import *' % candidate)
            except:
                modules[candidate] = traceback.format_exc()
            else:
                modules[candidate] = None


    class ImportTestModules(unittest.TestCase):
        for _module in modules:
            if (modules[_module] is None):

                def _test(self):
                    pass
            else:

                def _test(self, name=_module, failure=modules[_module]):
                    sys.stderr.write(failure)
                    self.fail(('Failed to import test module "%s"' % name))
            exec ('test_import_%s = _test' % _module)


    class TestSuiteContainer(unittest.TestCase):
        pass

    def DocTestCases(module):
        try:
            return type(('doctest_%s' % module), (TestSuiteContainer,), {'__module__': module, 'test_suite': doctest.DocTestSuite(module), })
        except:

            def suite(self, failure=traceback.format_exc()):
                sys.stderr.write(str(failure))
                self.fail(('Failed to get doctests for "%s"' % (module,)))
            return type(('doctest_%s' % module), (unittest.TestCase,), {'__module__': module, 'test_suite': suite, })


    class CustomTestLoader(unittest.TestLoader):

        def loadTestsFromTestCase(self, testCaseClass):
            if (issubclass(testCaseClass, TestSuiteContainer) and (testCaseClass is not TestSuiteContainer)):
                return testCaseClass.test_suite
            return unittest.TestLoader.loadTestsFromTestCase(self, testCaseClass)
    neo4j_doctest = DocTestCases('neo4j')
    params = {'argv': args, 'testLoader': CustomTestLoader(), }
    if (runner is not None):
        params['testRunner'] = runner
    unittest.main(**params)
else:
    import neo4j


    class GraphDatabaseTest(unittest.TestCase):

        def setUp(self):
            testcase = type(self)
            for case in dir(testcase):
                if case.startswith('test_'):
                    break
            else:
                return
            (dirname, join) = (os.path.dirname, os.path.join)
            path = dirname(dirname(dirname(dirname(os.path.abspath(__file__)))))
            path = join(path, 'target', 'testdata', testcase.__module__)
            if os.path.exists(path):
                import shutil
                shutil.rmtree(path)
            path = join(path, testcase.__name__)
            self.graphdb = neo4j.GraphDatabase(path)
            print repr(self.graphdb)

        def tearDown(self):
            graphdb = getattr(self, 'graphdb', None)
            if (graphdb is not None):
                graphdb.shutdown()
