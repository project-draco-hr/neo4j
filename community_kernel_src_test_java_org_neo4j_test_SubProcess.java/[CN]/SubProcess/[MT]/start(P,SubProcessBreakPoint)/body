{
  DebuggerConnector debugger=null;
  if (breakpoints != null && breakpoints.length != 0)   debugger=new DebuggerConnector(breakpoints);
  DispatcherTrapImpl callback;
  try {
    callback=new DispatcherTrapImpl(this,parameter);
  }
 catch (  RemoteException e) {
    throw new RuntimeException("Failed to create local RMI endpoint.",e);
  }
  Process process;
  String pid;
  DebugDispatch debugDispatch=null;
synchronized (debugger != null ? DebuggerConnector.class : new Object()) {
    if (debugger != null) {
      process=start("java",debugger.listen(),"-cp",classPath(System.getProperty("java.class.path")),SubProcess.class.getName(),serialize(callback));
    }
 else {
      process=start("java","-cp",classPath(System.getProperty("java.class.path")),SubProcess.class.getName(),serialize(callback));
    }
    pid=getPid(process);
    pipe("[" + toString() + ":"+ pid+ "] ",process.getErrorStream(),System.err);
    pipe("[" + toString() + ":"+ pid+ "] ",process.getInputStream(),System.out);
    if (debugger != null) {
      debugDispatch=debugger.connect(toString() + ":" + pid);
    }
  }
  Dispatcher dispatcher=callback.get(process);
  if (dispatcher == null)   throw new IllegalStateException("failed to start sub process");
  Handler handler=new Handler(t,dispatcher,process,"<" + toString() + ":"+ pid+ ">");
  if (debugDispatch != null)   debugDispatch.handler=handler;
  return t.cast(Proxy.newProxyInstance(t.getClassLoader(),new Class[]{t},live(handler)));
}
