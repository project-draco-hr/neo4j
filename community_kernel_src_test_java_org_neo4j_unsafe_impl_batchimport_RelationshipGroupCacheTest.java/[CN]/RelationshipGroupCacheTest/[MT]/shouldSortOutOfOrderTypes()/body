{
  int nodeCount=100;
  RelationshipGroupCache cache=new RelationshipGroupCache(HEAP,ByteUnit.kibiBytes(40),nodeCount);
  int[] counts=new int[nodeCount];
  int groupCount=0;
  for (int nodeId=0; nodeId < counts.length; nodeId++) {
    counts[nodeId]=random.nextInt(10);
    setCount(cache,nodeId,counts[nodeId]);
    groupCount+=counts[nodeId];
  }
  assertEquals(nodeCount,cache.prepare(0));
  boolean thereAreMoreGroups=true;
  int cachedCount=0;
  int[] types=scrambledTypes(10);
  for (int i=0; thereAreMoreGroups; i++) {
    int typeId=types[i];
    thereAreMoreGroups=false;
    for (int nodeId=0; nodeId < nodeCount; nodeId++) {
      if (counts[nodeId] > 0) {
        thereAreMoreGroups=true;
        if (cache.put(new RelationshipGroupRecord(nodeId).initialize(true,typeId,-1,-1,-1,nodeId,-1))) {
          cachedCount++;
          counts[nodeId]--;
        }
      }
    }
  }
  assertEquals(groupCount,cachedCount);
  long currentNodeId=-1;
  int currentTypeId=-1;
  int readCount=0;
  for (  RelationshipGroupRecord group : cache) {
    assertTrue(group.getOwningNode() >= currentNodeId);
    if (group.getOwningNode() > currentNodeId) {
      currentNodeId=group.getOwningNode();
      currentTypeId=-1;
    }
    assertTrue(group.getType() > currentTypeId);
    readCount++;
  }
  assertEquals(cachedCount,readCount);
}
