{
  int nodeCount=1000;
  RelationshipGroupCache cache=new RelationshipGroupCache(HEAP,ByteUnit.kibiBytes(4),nodeCount);
  int[] counts=new int[nodeCount];
  for (int nodeId=0; nodeId < counts.length; nodeId++) {
    counts[nodeId]=random.nextInt(10);
    setCount(cache,nodeId,counts[nodeId]);
  }
  long toNodeId=cache.prepare(0);
  assertTrue(toNodeId < nodeCount);
  boolean thereAreMoreGroups=true;
  int cachedCount=0;
  while (thereAreMoreGroups) {
    thereAreMoreGroups=false;
    for (int nodeId=0; nodeId < nodeCount; nodeId++) {
      if (counts[nodeId] > 0) {
        thereAreMoreGroups=true;
        int typeId=counts[nodeId]--;
        if (cache.put(new RelationshipGroupRecord(nodeId).initialize(true,typeId,-1,-1,-1,nodeId,-1))) {
          cachedCount++;
        }
      }
    }
  }
  assertTrue(cachedCount >= toNodeId);
  int readCount=0;
  for (  RelationshipGroupRecord cachedGroup : cache) {
    assertTrue(cachedGroup.getOwningNode() >= 0 && cachedGroup.getOwningNode() < toNodeId);
    readCount++;
  }
  assertEquals(cachedCount,readCount);
}
