{
  String configName=method.getName();
  ConfigurationPrefix annotation=method.getDeclaringClass().getAnnotation(ConfigurationPrefix.class);
  String prefix=annotation == null ? "" : annotation.value();
  String key=prefix + configName;
  Object val=parameters.get(key);
  if (val == null) {
    if (args != null && args.length > 0)     return args[0];
 else     throw new IllegalArgumentException("Missing configuration parameter for " + method.getDeclaringClass().getName() + ":"+ key);
  }
  Class<?> returnType=method.getReturnType();
  if (!returnType.equals(val.getClass())) {
    try {
      if (returnType.equals(Boolean.class) || returnType.equals(Boolean.TYPE))       val=val.toString().equalsIgnoreCase("true") || val.toString().equalsIgnoreCase("yes");
 else       if (returnType.equals(Integer.class) || returnType.equals(Integer.TYPE))       val=Integer.parseInt(val.toString());
 else       if (returnType.equals(Long.class) || returnType.equals(Long.TYPE))       val=Long.parseLong(val.toString());
 else       if (returnType.equals(Float.class) || returnType.equals(Float.TYPE))       val=Float.parseFloat(val.toString());
 else       if (returnType.equals(Double.class) || returnType.equals(Double.TYPE))       val=Double.parseDouble(val.toString());
 else       if (returnType.isEnum()) {
        try {
          val=Enum.valueOf((Class<Enum>)returnType,val.toString().toLowerCase());
        }
 catch (        IllegalArgumentException e) {
          String options=Arrays.asList(((Object[])returnType.getMethod("values").invoke(null))).toString();
          if (args != null && args.length > 0) {
            log.warning("Value for configuration parameter '" + key + "' is not valid:"+ val+ ". Please use one of "+ options+ ". Using default instead:"+ args[0]);
            val=args[0];
          }
 else {
            throw new IllegalArgumentException("Value for configuration parameter '" + key + "' is not valid:"+ val+ ". Please use one of "+ options);
          }
        }
      }
    }
 catch (    NumberFormatException e) {
      if (args != null && args.length > 0) {
        log.warning("Number for configuration parameter '" + key + "' has wrong format:"+ val+ " Using default instead:"+ args[0]);
        val=args[0];
      }
 else {
        throw e;
      }
    }
    if (val instanceof Number && args != null && args.length == 3) {
      if (val instanceof Float) {
        if (((Float)val).compareTo((Float)args[1]) < 0)         val=args[1];
 else         if (((Float)val).compareTo((Float)args[2]) > 0)         val=args[2];
      }
 else       if (val instanceof Double) {
        if (((Double)val).compareTo((Double)args[1]) < 0)         val=args[1];
 else         if (((Double)val).compareTo((Double)args[2]) > 0)         val=args[2];
      }
 else       if (val instanceof Integer) {
        if (((Integer)val).compareTo((Integer)args[1]) < 0)         val=args[1];
 else         if (((Integer)val).compareTo((Integer)args[2]) > 0)         val=args[2];
      }
 else       if (val instanceof Long) {
        if (((Long)val).compareTo((Long)args[1]) < 0)         val=args[1];
 else         if (((Long)val).compareTo((Long)args[2]) > 0)         val=args[2];
      }
    }
  }
  return val;
}
