{
  pinEvent=tracer.beginPin(writeLock,filePageId,swapper);
  int chunkId=MuninnPagedFile.computeChunkId(filePageId);
  long chunkOffset=MuninnPagedFile.computeChunkOffset(filePageId);
  Object[][] tt=pagedFile.translationTable;
  if (tt.length <= chunkId) {
    tt=expandTranslationTableCapacity(chunkId);
  }
  Object[] chunk=tt[chunkId];
  Object item;
  do {
    item=UnsafeUtil.getObjectVolatile(chunk,chunkOffset);
    if (item != null && item.getClass() == MuninnPage.class) {
      MuninnPage page=(MuninnPage)item;
      if (tryLockPage(page)) {
        if (!page.isBoundTo(swapper,filePageId)) {
          unlockPage(page);
          item=null;
        }
      }
 else {
        item=null;
      }
    }
 else     if (item == null) {
      item=initiatePageFault(filePageId,chunkOffset,chunk);
    }
 else {
      item=awaitPageFault(item);
    }
  }
 while (item == null);
  pinCursorToPage((MuninnPage)item,filePageId,swapper);
}
