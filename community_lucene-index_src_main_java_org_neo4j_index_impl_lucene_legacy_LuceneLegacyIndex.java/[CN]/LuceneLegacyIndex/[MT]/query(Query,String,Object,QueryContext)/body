{
  List<EntityId> simpleTransactionStateIds=new ArrayList<>();
  Collection<EntityId> removedIdsFromTransactionState=Collections.emptySet();
  IndexSearcher fulltextTransactionStateSearcher=null;
  if (transaction != null) {
    if (keyForDirectLookup != null) {
      simpleTransactionStateIds.addAll(transaction.getAddedIds(this,keyForDirectLookup,valueForDirectLookup));
    }
 else {
      fulltextTransactionStateSearcher=transaction.getAdditionsAsSearcher(this,additionalParametersOrNull);
    }
    removedIdsFromTransactionState=keyForDirectLookup != null ? transaction.getRemovedIds(this,keyForDirectLookup,valueForDirectLookup) : transaction.getRemovedIds(this,query);
  }
  LegacyIndexHits idIterator=null;
  IndexReference searcher=null;
  dataSource.getReadLock();
  try {
    searcher=dataSource.getIndexSearcher(identifier);
  }
  finally {
    dataSource.releaseReadLock();
  }
  if (searcher != null) {
    try {
      PrimitiveLongSet idsModifiedInTransactionState=gatherIdsModifiedInTransactionState(simpleTransactionStateIds,fulltextTransactionStateSearcher,query);
      DocToIdIterator hits=new DocToIdIterator(search(searcher,fulltextTransactionStateSearcher,query,additionalParametersOrNull,removedIdsFromTransactionState),removedIdsFromTransactionState,searcher,idsModifiedInTransactionState);
      idIterator=simpleTransactionStateIds.isEmpty() ? hits : new CombinedIndexHits(Arrays.<LegacyIndexHits>asList(hits,new ConstantScoreIterator(simpleTransactionStateIds,Float.NaN)));
    }
 catch (    IOException e) {
      throw new RuntimeException("Unable to query " + this + " with "+ query,e);
    }
  }
  idIterator=idIterator == null ? new ConstantScoreIterator(simpleTransactionStateIds,0) : idIterator;
  return idIterator;
}
