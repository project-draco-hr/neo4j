{
  final RecordFormat recordFormat=new StandardRecordFormat();
  final int filePageCount=100;
  RandomPageCacheTestHarness harness=new RandomPageCacheTestHarness();
  harness.setConcurrencyLevel(6);
  harness.setUseAdversarialIO(false);
  harness.setCachePageCount(100);
  harness.setFilePageCount(filePageCount);
  harness.setCachePageSize(pageCachePageSize);
  harness.setFilePageSize(pageCachePageSize);
  harness.setInitialMappedFiles(3);
  harness.setCommandCount(10000);
  harness.disableCommands(Command.MapFile,Command.UnmapFile,Command.ReadRecord);
  harness.setVerification(new Phase(){
    @Override public void run(    PageCache pageCache,    EphemeralFileSystemAbstraction fs,    Set<File> filesTouched) throws Exception {
      for (      File file : filesTouched) {
        try (PagedFile pf=pageCache.map(file,pageCachePageSize);PageCursor cursor=pf.io(0,PF_SHARED_LOCK)){
          for (int pageId=0; pageId < filePageCount; pageId++) {
            cursor.next();
            recordFormat.assertRecordsWrittenCorrectly(cursor);
          }
        }
       }
    }
  }
);
  harness.run(10,TimeUnit.SECONDS);
}
