{
  generateFileWithRecords(file,recordCount,recordSize);
  int filePageSize2=filePageSize - 3;
  long maxPageIdCursor1=recordCount / recordsPerFilePage;
  File file2=new File("b");
  OutputStream outputStream=fs.openAsOutputStream(file2,false);
  long file2sizeBytes=(maxPageIdCursor1 + 17) * filePageSize2;
  for (int i=0; i < file2sizeBytes; i++) {
    outputStream.write('a');
  }
  outputStream.flush();
  outputStream.close();
  getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL);
  PagedFile pagedFile1=pageCache.map(file,filePageSize);
  PagedFile pagedFile2=pageCache.map(file2,filePageSize2);
  long pageId1=0;
  long pageId2=0;
  boolean moreWorkToDo;
  do {
    boolean cursorReady1;
    boolean cursorReady2;
    try (PageCursor cursor=pagedFile1.io(pageId1,PF_EXCLUSIVE_LOCK)){
      cursorReady1=cursor.next() && cursor.getCurrentPageId() < maxPageIdCursor1;
      if (cursorReady1) {
        writeRecords(cursor);
        pageId1++;
      }
    }
     try (PageCursor cursor=pagedFile2.io(pageId2,PF_EXCLUSIVE_LOCK | PF_NO_GROW)){
      cursorReady2=cursor.next();
      if (cursorReady2) {
        do {
          for (int i=0; i < filePageSize2; i++) {
            cursor.putByte((byte)'b');
          }
        }
 while (cursor.shouldRetry());
      }
      pageId2++;
    }
     moreWorkToDo=cursorReady1 || cursorReady2;
  }
 while (moreWorkToDo);
  pagedFile1.close();
  pagedFile2.close();
  assertThat(fs.getFileSize(file2),is(file2sizeBytes));
  InputStream inputStream=fs.openAsInputStream(file2);
  for (int i=0; i < file2sizeBytes; i++) {
    int b=inputStream.read();
    assertThat(b,is((int)'b'));
  }
  assertThat(inputStream.read(),is(-1));
  inputStream.close();
  StoreChannel channel=fs.open(file,"r");
  ByteBuffer bufB=ByteBuffer.allocate(recordSize);
  for (int i=0; i < recordCount; i++) {
    bufA.clear();
    channel.read(bufA);
    bufA.flip();
    bufB.clear();
    generateRecordForId(i,bufB);
    assertThat(bufB.array(),byteArray(bufA.array()));
  }
}
