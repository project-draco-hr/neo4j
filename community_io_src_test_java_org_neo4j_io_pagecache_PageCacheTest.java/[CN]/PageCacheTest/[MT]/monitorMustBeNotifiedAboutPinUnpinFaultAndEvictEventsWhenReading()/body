{
  CountingPageCacheMonitor monitor=new CountingPageCacheMonitor();
  generateFileWithRecords(file,recordCount,recordSize);
  getPageCache(fs,maxPages,pageCachePageSize,monitor);
  PagedFile pagedFile=pageCache.map(file,filePageSize);
  int countedPages=0;
  try (PageCursor cursor=pagedFile.io(0,PF_SHARED_LOCK)){
    while (cursor.next()) {
      assertTrue(cursor.next(cursor.getCurrentPageId()));
      countedPages++;
    }
  }
   assertThat("wrong count of pins",monitor.countPins(),is(countedPages * 2));
  assertThat("wrong count of unpins",monitor.countUnpins(),is(countedPages * 2));
  assertThat("wrong count of exclusive locks taken",monitor.countTakenExclusiveLocks(),is(0));
  assertThat("wrong count of shared locks taken",monitor.countTakenSharedLocks(),is(countedPages * 2));
  assertThat("wrong count of exclusive locks released",monitor.countReleasedExclusiveLocks(),is(0));
  assertThat("wrong count of shared locks released",monitor.countReleasedSharedLocks(),is(countedPages * 2));
  int faults=monitor.countFaults();
  assertThat("wrong count of faults",faults,greaterThanOrEqualTo(countedPages));
  assertThat("wrong count of evictions",monitor.countEvictions(),both(greaterThanOrEqualTo(countedPages - maxPages)).and(lessThanOrEqualTo(countedPages + faults)));
  pageCache.unmap(file);
}
