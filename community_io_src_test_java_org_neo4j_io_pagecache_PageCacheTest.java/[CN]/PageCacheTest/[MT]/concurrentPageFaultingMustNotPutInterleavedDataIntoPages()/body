{
  final int filePageCount=11;
  final RecordFormat recordFormat=new PageCountRecordFormat();
  RandomPageCacheTestHarness harness=new RandomPageCacheTestHarness();
  harness.setConcurrencyLevel(11);
  harness.setUseAdversarialIO(false);
  harness.setCachePageCount(3);
  harness.setCachePageSize(pageCachePageSize);
  harness.setFilePageCount(filePageCount);
  harness.setFilePageSize(pageCachePageSize);
  harness.setInitialMappedFiles(1);
  harness.setCommandCount(10000);
  harness.setRecordFormat(recordFormat);
  harness.disableCommands(Command.FlushCache,Command.FlushFile,Command.MapFile,Command.UnmapFile,Command.WriteRecord);
  harness.setPreparation(new Phase(){
    @Override public void run(    PageCache pageCache,    EphemeralFileSystemAbstraction fs,    Set<File> filesTouched) throws Exception {
      File file=filesTouched.iterator().next();
      try (PagedFile pf=pageCache.map(file,pageCachePageSize);PageCursor cursor=pf.io(0,PF_EXCLUSIVE_LOCK)){
        for (int pageId=0; pageId < filePageCount; pageId++) {
          cursor.next();
          recordFormat.fillWithRecords(cursor);
        }
      }
     }
  }
);
  harness.run(10,TimeUnit.SECONDS);
}
