{
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch unpinLatch=new CountDownLatch(1);
  final AtomicReference<Exception> exceptionRef=new AtomicReference<>();
  final PageCache cache=getPageCache(fs,maxPages,pageCachePageSize,PageCacheMonitor.NULL);
  final PagedFile pagedFile=cache.map(file,filePageSize);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      try (PageCursor cursorA=pagedFile.io(0,PF_EXCLUSIVE_LOCK | PF_SINGLE_PAGE)){
        assertTrue(cursorA.next());
        assertFalse(cursorA.next());
        startLatch.countDown();
        unpinLatch.await();
        cursorA.close();
      }
 catch (      Exception e) {
        exceptionRef.set(e);
      }
    }
  }
;
  Thread thread=new Thread(runnable);
  thread.start();
  startLatch.await();
  try (PageCursor cursorB=pagedFile.io(1,PF_EXCLUSIVE_LOCK | PF_SINGLE_PAGE)){
    assertTrue(cursorB.next());
    assertFalse(cursorB.next());
  }
   unpinLatch.countDown();
  Exception e=exceptionRef.get();
  if (e != null) {
    throw new Exception("Child thread got exception",e);
  }
}
