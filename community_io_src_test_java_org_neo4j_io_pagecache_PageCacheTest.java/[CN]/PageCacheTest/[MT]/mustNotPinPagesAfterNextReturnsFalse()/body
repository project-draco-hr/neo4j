{
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch unpinLatch=new CountDownLatch(1);
  final AtomicReference<Exception> exceptionRef=new AtomicReference<>();
  generateFileWithRecords(file("a"),recordsPerFilePage,recordSize);
  final PageCache cache=getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL);
  final PagedFile pagedFile=cache.map(file("a"),filePageSize);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      try (PageCursor cursorA=pagedFile.io(0,PF_EXCLUSIVE_LOCK | PF_NO_GROW)){
        assertTrue(cursorA.next());
        assertFalse(cursorA.next());
        startLatch.countDown();
        unpinLatch.await();
        cursorA.close();
      }
 catch (      Exception e) {
        exceptionRef.set(e);
      }
    }
  }
;
  executor.submit(runnable);
  startLatch.await();
  try (PageCursor cursorB=pagedFile.io(1,PF_EXCLUSIVE_LOCK)){
    assertTrue(cursorB.next());
    unpinLatch.countDown();
  }
  finally {
    pagedFile.close();
  }
  Exception e=exceptionRef.get();
  if (e != null) {
    throw new Exception("Child thread got exception",e);
  }
}
