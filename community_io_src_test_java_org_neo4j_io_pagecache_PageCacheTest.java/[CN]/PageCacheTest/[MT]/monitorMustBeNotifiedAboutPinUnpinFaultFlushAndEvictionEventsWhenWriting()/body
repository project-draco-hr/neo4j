{
  int pagesToGenerate=142;
  CountingPageCacheMonitor monitor=new CountingPageCacheMonitor();
  fs.create(file).close();
  getPageCache(fs,maxPages,pageCachePageSize,monitor);
  PagedFile pagedFile=pageCache.map(file,filePageSize);
  try (PageCursor cursor=pagedFile.io(0,PF_EXCLUSIVE_LOCK)){
    for (long i=0; i < pagesToGenerate; i++) {
      assertTrue(cursor.next());
      assertThat(cursor.getCurrentPageId(),is(i));
      assertTrue(cursor.next(i));
      assertThat(cursor.getCurrentPageId(),is(i));
      writeRecords(cursor);
    }
  }
  finally {
    pageCache.unmap(file);
  }
  assertThat("wrong count of pins",monitor.countPins(),is(pagesToGenerate * 2));
  assertThat("wrong count of unpins",monitor.countUnpins(),is(pagesToGenerate * 2));
  assertThat("wrong count of exclusive locks taken",monitor.countTakenExclusiveLocks(),is(pagesToGenerate * 2));
  assertThat("wrong count of shared locks taken",monitor.countTakenSharedLocks(),is(0));
  assertThat("wrong count of exclusive locks released",monitor.countReleasedExclusiveLocks(),is(pagesToGenerate * 2));
  assertThat("wrong count of shared locks released",monitor.countReleasedSharedLocks(),is(0));
  int faults=monitor.countFaults();
  assertThat("wrong count of faults",faults,greaterThanOrEqualTo(pagesToGenerate));
  assertThat("wrong count of evictions",monitor.countEvictions(),both(greaterThanOrEqualTo(pagesToGenerate - maxPages)).and(lessThanOrEqualTo(pagesToGenerate + faults)));
  assertThat(monitor.countFlushes(),greaterThanOrEqualTo(pagesToGenerate));
}
