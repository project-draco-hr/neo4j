{
  File fileA=new File("a");
  File fileB=new File("b");
  fs.create(fileA).close();
  fs.create(fileB).close();
  int filePageSizeA=pageCachePageSize - 2;
  int filePageSizeB=pageCachePageSize - 6;
  int pagesToWriteA=100;
  int pagesToWriteB=3;
  getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL);
  PagedFile pagedFileA=pageCache.map(fileA,filePageSizeA);
  try (PageCursor cursor=pagedFileA.io(0,PF_EXCLUSIVE_LOCK)){
    for (int i=0; i < pagesToWriteA; i++) {
      assertTrue(cursor.next());
      for (int j=0; j < filePageSizeA; j++) {
        cursor.putByte((byte)42);
      }
    }
  }
   PagedFile pagedFileB=pageCache.map(fileB,filePageSizeB);
  try (PageCursor cursor=pagedFileB.io(0,PF_EXCLUSIVE_LOCK)){
    for (int i=0; i < pagesToWriteB; i++) {
      assertTrue(cursor.next());
      cursor.putByte((byte)63);
    }
  }
   pagedFileA.close();
  pagedFileB.close();
  InputStream inputStream=fs.openAsInputStream(fileB);
  assertThat("first page first byte",inputStream.read(),is(63));
  for (int i=0; i < filePageSizeB - 1; i++) {
    assertThat("page 0 byte pos " + i,inputStream.read(),is(0));
  }
  assertThat("second page first byte",inputStream.read(),is(63));
  for (int i=0; i < filePageSizeB - 1; i++) {
    assertThat("page 1 byte pos " + i,inputStream.read(),is(0));
  }
  assertThat("third page first byte",inputStream.read(),is(63));
  for (int i=0; i < filePageSizeB - 1; i++) {
    assertThat("page 2 byte pos " + i,inputStream.read(),is(0));
  }
  assertThat("expect EOF",inputStream.read(),is(-1));
}
