{
  final AtomicInteger writeCount=new AtomicInteger();
  final AtomicInteger readCount=new AtomicInteger();
  DefaultPageCacheTracer tracer=new DefaultPageCacheTracer(){
    @Override public PinEvent beginPin(    boolean writeLock,    long filePageId,    PageSwapper swapper){
      (writeLock ? writeCount : readCount).getAndIncrement();
      return super.beginPin(writeLock,filePageId,swapper);
    }
  }
;
  generateFileWithRecords(file("a"),recordCount,recordSize);
  getPageCache(fs,maxPages,pageCachePageSize,tracer);
  int pinsForRead=13;
  int pinsForWrite=42;
  try (PagedFile pagedFile=pageCache.map(file("a"),filePageSize)){
    try (PageCursor cursor=pagedFile.io(0,PF_SHARED_READ_LOCK)){
      for (int i=0; i < pinsForRead; i++) {
        assertTrue(cursor.next());
      }
    }
     try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
      for (int i=0; i < pinsForWrite; i++) {
        assertTrue(cursor.next());
      }
    }
   }
   assertThat("wrong read pin count",readCount.get(),is(pinsForRead));
  assertThat("wrong write pin count",writeCount.get(),is(pinsForWrite));
}
