{
  long version=logVersion;
  long committedTx=previousLogLastCommittedTx;
  while (version >= 0) {
    Long cachedLastTx=logHeaderCache.get(version);
    if (cachedLastTx != null) {
      committedTx=cachedLastTx;
    }
 else {
      ReadableByteChannel logChannel=getLogicalLogOrMyselfCommitted(version,0);
      ByteBuffer buf=ByteBuffer.allocate(16);
      long[] header=readAndAssertLogHeader(buf,logChannel,version);
      committedTx=header[1];
      logHeaderCache.put(version,committedTx);
      logChannel.close();
    }
    if (committedTx < txId) {
      break;
    }
    version--;
  }
  if (version == -1) {
    throw new RuntimeException("txId:" + txId + " not found in any logical log "+ "(starting at "+ logVersion+ " and searching backwards");
  }
  return new long[]{version,committedTx};
}
