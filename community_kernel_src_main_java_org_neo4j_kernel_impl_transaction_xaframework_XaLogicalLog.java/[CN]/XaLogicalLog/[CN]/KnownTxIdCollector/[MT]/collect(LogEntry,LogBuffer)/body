{
  if (futureQueue.containsKey(nextExpectedTxId)) {
    List<LogEntry> list=futureQueue.remove(nextExpectedTxId);
    writeToBuffer(list,target);
    return commitEntryOf(list);
  }
  if (entry instanceof LogEntry.Start) {
    List<LogEntry> list=new LinkedList<LogEntry>();
    list.add(entry);
    transactions.put(entry.getIdentifier(),list);
  }
 else   if (entry instanceof LogEntry.Commit) {
    long commitTxId=((LogEntry.Commit)entry).getTxId();
    if (commitTxId < startTxId)     return null;
    identifier=entry.getIdentifier();
    List<LogEntry> entries=transactions.get(identifier);
    if (entries == null)     return null;
    entries.add(entry);
    if (nextExpectedTxId != startTxId) {
      if (commitTxId < nextExpectedTxId)       return null;
    }
    if (commitTxId != nextExpectedTxId) {
      futureQueue.put(commitTxId,entries);
      return null;
    }
    writeToBuffer(entries,target);
    nextExpectedTxId=commitTxId + 1;
    return entry;
  }
 else   if (entry instanceof LogEntry.Command || entry instanceof LogEntry.Prepare) {
    List<LogEntry> list=transactions.get(entry.getIdentifier());
    if (list != null) {
      list.add(entry);
    }
  }
 else   if (entry instanceof LogEntry.Done) {
    transactions.remove(entry.getIdentifier());
  }
 else {
    throw new RuntimeException("Unknown entry: " + entry);
  }
  return null;
}
