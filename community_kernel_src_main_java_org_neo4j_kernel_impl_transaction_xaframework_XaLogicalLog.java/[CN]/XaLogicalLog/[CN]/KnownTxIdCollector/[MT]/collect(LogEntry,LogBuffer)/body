{
  boolean interesting=false;
  if (entry instanceof LogEntry.Start) {
    List<LogEntry> list=new LinkedList<LogEntry>();
    list.add(entry);
    transactions.put(entry.getIdentifier(),list);
  }
 else   if (entry instanceof LogEntry.Commit) {
    long commitTxId=((LogEntry.Commit)entry).getTxId();
    if (commitTxId < startTxId)     return false;
    if (previousTxId != 0) {
      if (commitTxId == previousTxId)       return false;
      if (commitTxId != previousTxId + 1) {
        throw new RuntimeException("Unexpected tx " + commitTxId + " after "+ previousTxId+ ", starting from "+ startTxId);
      }
    }
 else     if (commitTxId != startTxId) {
      throw new RuntimeException("Unexpected tx " + commitTxId + ". Was expecting "+ startTxId);
    }
    interesting=true;
    identifier=entry.getIdentifier();
    List<LogEntry> entries=transactions.get(identifier);
    if (entries == null)     return false;
    entries.add(entry);
    writeToBuffer(entries,target);
    previousTxId=commitTxId;
  }
 else   if (entry instanceof LogEntry.Command || entry instanceof LogEntry.Prepare) {
    List<LogEntry> list=transactions.get(entry.getIdentifier());
    if (list != null) {
      list.add(entry);
    }
  }
 else   if (entry instanceof LogEntry.Done) {
    transactions.remove(entry.getIdentifier());
  }
 else {
    throw new RuntimeException("Unknown entry: " + entry);
  }
  return interesting;
}
