{
  for (int i=0; i < exclusiveLockCounts.length; i++) {
    PrimitiveLongIntMap exclusiveLocks=exclusiveLockCounts[i];
    PrimitiveLongIntMap sharedLocks=sharedLockCounts[i];
    if (exclusiveLocks != null) {
      int size=exclusiveLocks.size();
      exclusiveLocks.visitKeys(releaseExclusiveAndClearSharedVisitor.initialize(sharedLocks,lockMaps[i]));
      if (size <= 32) {
        exclusiveLocks.clear();
      }
 else {
        exclusiveLockCounts[i]=Primitive.longIntMap();
      }
    }
    if (sharedLocks != null) {
      int size=sharedLocks.size();
      sharedLocks.visitKeys(releaseSharedDontCheckExclusiveVisitor.initialize(lockMaps[i]));
      if (size <= 32) {
        sharedLocks.clear();
      }
 else {
        sharedLockCounts[i]=Primitive.longIntMap();
      }
    }
  }
}
