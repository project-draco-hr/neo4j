{
  Log log=mock(Log.class);
  ReflectiveProcedureCompiler procedureCompiler=new ReflectiveProcedureCompiler(new TypeMappers(),components,log);
  List<CallableProcedure> procs=procedureCompiler.compile(ProcedureWithDeprecation.class);
  verify(log).warn("Use of @Procedure(deprecatedBy) without @Deprecated in badProc");
  verifyNoMoreInteractions(log);
  for (  CallableProcedure proc : procs) {
    String name=proc.signature().name().name();
    proc.apply(new BasicContext(),new Object[0]);
switch (name) {
case "newProc":
      assertFalse("Should not be deprecated",proc.signature().isDeprecated());
    assertThat(proc.signature().deprecatedBy(),equalTo(ProcedureSignature.NOT_DEPRECATED));
  break;
case "oldProc":
case "badProc":
assertTrue("Should be deprecated",proc.signature().isDeprecated());
assertThat(proc.signature().deprecatedBy(),equalTo("newProc"));
break;
default :
fail("Unexpected procedure: " + name);
}
}
}
