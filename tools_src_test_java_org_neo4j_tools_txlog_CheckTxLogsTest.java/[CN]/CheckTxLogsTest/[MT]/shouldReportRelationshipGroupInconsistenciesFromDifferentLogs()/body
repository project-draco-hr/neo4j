{
  File log1=logFile(1);
  File log2=logFile(2);
  File log3=logFile(3);
  writeTxContent(log1,new Command.RelationshipGroupCommand().init(new RelationshipGroupRecord(42,-1,-1,-1,-1,-1,-1,false),new RelationshipGroupRecord(42,1,2,3,4,5,6,true)),new Command.PropertyCommand().init(propertyRecord(5,false,-1,-1),propertyRecord(5,true,-1,-1,777)),new Command.RelationshipGroupCommand().init(new RelationshipGroupRecord(21,1,2,3,4,5,6,true),new RelationshipGroupRecord(21,-1,-1,-1,-1,-1,-1,false)));
  writeTxContent(log2,new Command.RelationshipGroupCommand().init(new RelationshipGroupRecord(42,1,2,3,9,5,6,true),new RelationshipGroupRecord(42,1,2,3,4,5,6,true)));
  writeTxContent(log3,new Command.RelationshipGroupCommand().init(new RelationshipGroupRecord(53,1,2,3,4,5,6,true),new RelationshipGroupRecord(53,1,2,30,4,14,6,true)),new Command.RelationshipGroupCommand().init(new RelationshipGroupRecord(42,1,2,3,4,5,6,false),new RelationshipGroupRecord(42,1,2,3,4,5,6,false)));
  CapturingInconsistenciesHandler handler=new CapturingInconsistenciesHandler();
  CheckTxLogs checker=new CheckTxLogs(fsRule.get());
  checker.scan(new File[]{log1,log2,log3},handler,RELATIONSHIP_GROUP);
  assertEquals(2,handler.inconsistencies.size());
  RelationshipGroupRecord seenRecord1=(RelationshipGroupRecord)handler.inconsistencies.get(0).committed.record();
  RelationshipGroupRecord currentRecord1=(RelationshipGroupRecord)handler.inconsistencies.get(0).current.record();
  assertEquals(42,seenRecord1.getId());
  assertEquals(4,seenRecord1.getFirstLoop());
  assertEquals(42,currentRecord1.getId());
  assertEquals(9,currentRecord1.getFirstLoop());
  RelationshipGroupRecord seenRecord2=(RelationshipGroupRecord)handler.inconsistencies.get(1).committed.record();
  RelationshipGroupRecord currentRecord2=(RelationshipGroupRecord)handler.inconsistencies.get(1).current.record();
  assertEquals(42,seenRecord2.getId());
  assertTrue(seenRecord2.inUse());
  assertEquals(42,currentRecord2.getId());
  assertFalse(currentRecord2.inUse());
}
