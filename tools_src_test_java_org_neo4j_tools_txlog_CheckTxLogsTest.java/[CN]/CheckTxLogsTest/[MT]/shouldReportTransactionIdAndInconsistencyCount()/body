{
  File log=logFile(1);
  writeTxContent(log,0,new Command.NodeCommand(new NodeRecord(42,false,false,-1,-1,1),new NodeRecord(42,true,false,42,-1,1)),new Command.PropertyCommand(propertyRecord(5,false,-1,-1),propertyRecord(5,true,-1,-1,777)),new Command.NodeCommand(new NodeRecord(1,true,true,2,-1,1),new NodeRecord(1,true,false,-1,-1,1)),new Command.NodeCommand(new NodeRecord(5,true,true,2,-1,1),new NodeRecord(5,true,false,-1,-1,1)));
  writeTxContent(log,1,new Command.NodeCommand(new NodeRecord(2,false,false,-1,-1,1),new NodeRecord(2,true,false,-1,-1,1)),new Command.NodeCommand(new NodeRecord(5,true,true,2,-1,1),new NodeRecord(5,true,false,-1,-1,1)),new Command.NodeCommand(new NodeRecord(1,true,false,-1,-1,1),new NodeRecord(1,true,true,2,1,1)),new Command.NodeCommand(new NodeRecord(42,true,false,24,-1,1),new NodeRecord(42,true,false,24,5,1)));
  CapturingInconsistenciesHandler handler=new CapturingInconsistenciesHandler();
  CheckTxLogs checker=new CheckTxLogs(fsRule.get());
  checker.scan(new File[]{log},handler,NODE);
  assertEquals(2,handler.recordInconsistencies.size());
  assertEquals(0,handler.recordInconsistencies.get(0).committed.txId());
  assertEquals(1,handler.recordInconsistencies.get(0).current.txId());
  assertEquals(0,handler.recordInconsistencies.get(1).committed.txId());
  assertEquals(1,handler.recordInconsistencies.get(1).current.txId());
}
