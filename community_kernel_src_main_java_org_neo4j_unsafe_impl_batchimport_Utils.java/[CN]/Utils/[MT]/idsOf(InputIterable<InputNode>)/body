{
  return new InputIterable<Object>(){
    @Override public InputIterator<Object> iterator(){
      final InputIterator<InputNode> iterator=nodes.iterator();
      return new SourceInputIterator<Object,InputNode>(iterator){
        @Override public void close(){
          iterator.close();
        }
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public Object next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          return iterator.next().id();
        }
      }
;
    }
    @Override public boolean supportsMultiplePasses(){
      return false;
    }
  }
;
}
