{
  msgLog.logMessage("I am " + config.get(ClusterSettings.server_id) + ", moving to master");
  HaXaDataSourceManager xaDataSourceManager=resolver.resolveDependency(HaXaDataSourceManager.class);
synchronized (xaDataSourceManager) {
    final TransactionManager txManager=resolver.resolveDependency(TransactionManager.class);
    idGeneratorFactory.switchToMaster();
    Monitors monitors=resolver.resolveDependency(Monitors.class);
    MasterImpl.SPI spi=new DefaultMasterImplSPI(graphDb,logging,txManager,monitors);
    MasterImpl masterImpl=new MasterImpl(spi,logging,config);
    MasterServer masterServer=new MasterServer(masterImpl,logging,serverConfig(),new BranchDetectingTxVerifier(resolver),monitors);
    haCommunicationLife.add(masterImpl);
    haCommunicationLife.add(masterServer);
    masterDelegateHandler.setDelegate(masterImpl);
    haCommunicationLife.start();
    URI masterHaURI=URI.create("ha://" + (ServerUtil.getHostString(masterServer.getSocketAddress()).contains("0.0.0.0") ? me.getHost() : ServerUtil.getHostString(masterServer.getSocketAddress())) + ":"+ masterServer.getSocketAddress().getPort()+ "?serverId="+ config.get(ClusterSettings.server_id));
    clusterMemberAvailability.memberIsAvailable(HighAvailabilityModeSwitcher.MASTER,masterHaURI);
    msgLog.logMessage("I am " + config.get(ClusterSettings.server_id) + ", successfully moved to master");
    return masterHaURI;
  }
}
