{
  if (started) {
    throw new IllegalStateException("Neo4j instance already started");
  }
  Map<Object,Object> params=config.getParams();
  boolean useMemoryMapped=Boolean.parseBoolean((String)config.getInputParams().get(Config.USE_MEMORY_MAPPED_BUFFERS));
  if (useMemoryMapped) {
    params.put(Config.USE_MEMORY_MAPPED_BUFFERS,config.getInputParams().get(Config.USE_MEMORY_MAPPED_BUFFERS));
  }
  boolean dump=Boolean.parseBoolean((String)config.getInputParams().get(Config.DUMP_CONFIGURATION));
  storeDir=FileUtils.fixSeparatorsInPath(storeDir);
  new AutoConfigurator(storeDir,useMemoryMapped,dump).configure(subset(config.getInputParams(),Config.USE_MEMORY_MAPPED_BUFFERS));
  params.putAll(config.getInputParams());
  String separator=System.getProperty("file.separator");
  String store=storeDir + separator + "neostore";
  params.put("store_dir",storeDir);
  params.put("neo_store",store);
  params.put("create",String.valueOf(create));
  String logicalLog=storeDir + separator + "nioneo_logical.log";
  params.put("logical_log",logicalLog);
  byte resourceId[]="414141".getBytes();
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  config.getTxModule().registerDataSource(Config.DEFAULT_DATA_SOURCE_NAME,Config.NIO_NEO_DB_CLASS,resourceId,params);
  if (!config.isReadOnly() || config.isBackupSlave()) {
    try {
      Class clazz=Class.forName(Config.LUCENE_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + "/lucene");
      byte luceneId[]="162373".getBytes();
      registerLuceneDataSource("lucene",clazz.getName(),config.getTxModule(),storeDir + "/lucene",config.getLockManager(),luceneId,params);
    }
 catch (    ClassNotFoundException e) {
    }
    try {
      Class clazz=Class.forName(Config.LUCENE_FULLTEXT_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + "/lucene-fulltext");
      byte[] luceneId="262374".getBytes();
      registerLuceneDataSource("lucene-fulltext",clazz.getName(),config.getTxModule(),storeDir + "/lucene-fulltext",config.getLockManager(),luceneId,params);
    }
 catch (    ClassNotFoundException e) {
    }
    try {
      Class<?> cls=Class.forName("org.neo4j.index.impl.lucene.LuceneDataSource");
      config.getTxModule().registerDataSource("lucene-index",cls.getName(),"162374".getBytes(),config.getParams());
    }
 catch (    ClassNotFoundException e) {
    }
  }
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setPersistenceSource(Config.DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getGraphDbModule().init();
  config.getTxModule().start();
  config.getPersistenceModule().start(config.getTxModule().getTxManager(),persistenceSource,config.getSyncHookFactory());
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getGraphDbModule().start(config.getLockReleaser(),config.getPersistenceModule().getPersistenceManager(),params);
  if ("true".equals(params.get(Config.DUMP_CONFIGURATION))) {
    for (    Object key : params.keySet()) {
      if (key instanceof String) {
        Object value=params.get(key);
        if (value instanceof String) {
          System.out.println(key + "=" + value);
        }
      }
    }
  }
  if (config.getTxModule().getXaDataSourceManager().hasDataSource("lucene-index")) {
    config.getTxModule().getXaDataSourceManager().unregisterDataSource("lucene-index");
  }
  started=true;
  return Collections.unmodifiableMap(params);
}
