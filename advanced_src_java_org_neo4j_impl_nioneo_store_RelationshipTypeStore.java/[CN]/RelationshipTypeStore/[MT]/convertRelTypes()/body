{
  FileChannel fileChannel=getFileChannel();
  DynamicStringStore typeNameStore=new DynamicStringStore(getStorageFileName() + ".names");
  typeNameStore.makeStoreOk();
  System.out.println("Converting encoding on relationship type names");
  ByteBuffer buffer=ByteBuffer.allocate(5);
  fileChannel.position(0);
  int i=0;
  int reservedCount=1;
  int lastOkPos=0;
  while (fileChannel.read(buffer) == 5) {
    buffer.flip();
    byte inUse=buffer.get();
    int block=buffer.getInt();
    String name="RESERVED";
    if (block == -1) {
      name=name + reservedCount++;
    }
 else {
      try {
        Collection<DynamicRecord> records=typeNameStore.getRecords(block,null);
        name=getOldStringFor(records,block);
        for (        DynamicRecord record : records) {
          record.setInUse(false);
          typeNameStore.updateRecord(record);
        }
        int nextId=typeNameStore.nextBlockId();
        char[] chars=new char[name.length()];
        name.getChars(0,name.length(),chars,0);
        records=typeNameStore.allocateRecords(nextId,chars);
        for (        DynamicRecord record : records) {
          typeNameStore.updateRecord(record);
        }
        buffer.flip();
        buffer.putInt(nextId);
        buffer.flip();
        fileChannel.position(i * 5 + 1);
        fileChannel.write(buffer);
        lastOkPos=i;
      }
 catch (      IOException e) {
        name=null;
      }
    }
    System.out.println("ID[" + i + "] use["+ inUse+ "] blockId["+ block+ "] name["+ name+ "]");
    i++;
    buffer.clear();
  }
  typeNameStore.close();
  fileChannel.truncate((lastOkPos + 1) * 5);
}
