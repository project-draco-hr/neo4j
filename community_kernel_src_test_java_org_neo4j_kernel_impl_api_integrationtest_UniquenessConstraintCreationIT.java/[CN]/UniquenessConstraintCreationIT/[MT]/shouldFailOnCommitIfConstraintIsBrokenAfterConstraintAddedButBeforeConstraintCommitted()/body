{
  long node1;
  int foo, name;
{
    DataWriteOperations statement=dataWriteOperationsInNewTransaction();
    Node node=db.createNode(label("Foo"));
    node1=node.getId();
    node.setProperty("name","foo");
    foo=statement.labelGetForName("Foo");
    name=statement.propertyKeyGetForName("name");
    commit();
  }
  SchemaWriteOperations statement=schemaWriteOperationsInNewTransaction();
  statement.uniquenessConstraintCreate(foo,name);
  ExecutorService executor=Executors.newSingleThreadExecutor();
  long node2=executor.submit(new Callable<Long>(){
    @Override public Long call(){
      try (Transaction tx=db.beginTx()){
        Node node=db.createNode(label("Foo"));
        node.setProperty("name","foo");
        tx.success();
        return node.getId();
      }
     }
  }
).get();
  executor.shutdown();
  try {
    commit();
    fail("expected exception");
  }
 catch (  TransactionFailureException ex) {
    HeuristicRollbackException rollbackEx=(HeuristicRollbackException)ex.getCause();
    XAException xaEx=(XAException)rollbackEx.getCause();
    assertThat(xaEx.errorCode,equalTo(XAException.XA_RBINTEGRITY));
    ConstraintVerificationFailedKernelException verificationEx=(ConstraintVerificationFailedKernelException)xaEx.getCause();
    assertEquals(asSet(new ConstraintVerificationFailedKernelException.Evidence(new PreexistingIndexEntryConflictException("foo",node1,node2))),verificationEx.evidence());
  }
}
