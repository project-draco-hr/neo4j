{
  if (hasTxStateWithChanges()) {
    final AtomicBoolean clearState=new AtomicBoolean(false);
    txState().accept(new TxState.Visitor(){
      @Override public void visitNodeLabelChanges(      long id,      Set<Integer> added,      Set<Integer> removed){
      }
      @Override public void visitAddedIndex(      IndexDescriptor element,      boolean isConstraintIndex){
        SchemaIndexProvider.Descriptor providerDescriptor=providerMap.getDefaultProvider().getProviderDescriptor();
        IndexRule rule;
        if (isConstraintIndex) {
          rule=IndexRule.constraintIndexRule(schemaStorage.newRuleId(),element.getLabelId(),element.getPropertyKeyId(),providerDescriptor,null);
        }
 else {
          rule=IndexRule.indexRule(schemaStorage.newRuleId(),element.getLabelId(),element.getPropertyKeyId(),providerDescriptor);
        }
        persistenceManager.createSchemaRule(rule);
      }
      @Override public void visitRemovedIndex(      IndexDescriptor element,      boolean isConstraintIndex){
        try {
          IndexRule rule=schemaStorage.indexRule(element.getLabelId(),element.getPropertyKeyId());
          persistenceManager.dropSchemaRule(rule);
        }
 catch (        SchemaRuleNotFoundException e) {
          throw new ThisShouldNotHappenError("Tobias Lindaaker","Index to be removed should exist, since its existence should have " + "been validated earlier and the schema should have been locked.");
        }
      }
      @Override public void visitAddedConstraint(      UniquenessConstraint element){
        clearState.set(true);
        long constraintId=schemaStorage.newRuleId();
        IndexRule indexRule;
        try {
          indexRule=schemaStorage.indexRule(element.label(),element.propertyKeyId());
        }
 catch (        SchemaRuleNotFoundException e) {
          throw new ThisShouldNotHappenError("Jacob Hansson","Index is always created for the constraint before this point.");
        }
        persistenceManager.createSchemaRule(UniquenessConstraintRule.uniquenessConstraintRule(constraintId,element.label(),element.propertyKeyId(),indexRule.getId()));
        persistenceManager.setConstraintIndexOwner(indexRule,constraintId);
      }
      @Override public void visitRemovedConstraint(      UniquenessConstraint element){
        try {
          clearState.set(true);
          UniquenessConstraintRule rule=schemaStorage.uniquenessConstraint(element.label(),element.propertyKeyId());
          persistenceManager.dropSchemaRule(rule);
        }
 catch (        SchemaRuleNotFoundException e) {
          throw new ThisShouldNotHappenError("Tobias Lindaaker","Constraint to be removed should exist, since its existence should " + "have been validated earlier and the schema should have been locked.");
        }
        visitRemovedIndex(new IndexDescriptor(element.label(),element.propertyKeyId()),true);
      }
    }
);
    if (clearState.get()) {
      schemaState.clear();
    }
  }
}
