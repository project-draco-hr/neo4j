{
  api=dbRule.getGraphDatabaseAPI();
  String propKeyA="keyA";
  String propKeyB="keyB";
  String propKeyC="keyC";
  String propKeyD="keyD";
  String propKeyE="keyE";
  try (Transaction transaction=api.beginTx()){
    Node nodeA=api.createNode();
    nodeA.setProperty(propKeyA,"value");
    nodeA.setProperty(propKeyB,"value");
    nodeIdA=nodeA.getId();
    Node nodeB=api.createNode();
    nodeB.setProperty(propKeyA,"value");
    nodeB.setProperty(propKeyB,"value");
    nodeIdB=nodeB.getId();
    Node nodeC=api.createNode();
    nodeC.setProperty(propKeyA,"longer val");
    nodeC.setProperty(propKeyB,"longer val");
    nodeC.setProperty(propKeyC,"longer val");
    nodeC.setProperty(propKeyD,"longer val");
    nodeC.setProperty(propKeyE,"longer val");
    nodeIdC=nodeC.getId();
    transaction.success();
  }
   DependencyResolver resolver=api.getDependencyResolver();
  NeoStores neoStores=resolver.resolveDependency(RecordStorageEngine.class).testAccessNeoStores();
  nodeStore=neoStores.getNodeStore();
  propertyStore=neoStores.getPropertyStore();
  propertyKeyTokenStore=neoStores.getPropertyKeyTokenStore();
  tokenA=findTokenFor(propertyKeyTokenStore,propKeyA);
  Token tokenB=findTokenFor(propertyKeyTokenStore,propKeyB);
  Token tokenC=findTokenFor(propertyKeyTokenStore,propKeyC);
  Token tokenD=findTokenFor(propertyKeyTokenStore,propKeyD);
  Token tokenE=findTokenFor(propertyKeyTokenStore,propKeyE);
  replacePropertyKey(propertyStore,nodeStore.getRecord(nodeIdA),tokenB,tokenA);
  replacePropertyKey(propertyStore,nodeStore.getRecord(nodeIdB),tokenB,tokenA);
  NodeRecord nodeRecordC=nodeStore.getRecord(nodeIdC);
  replacePropertyKey(propertyStore,nodeRecordC,tokenB,tokenA);
  replacePropertyKey(propertyStore,nodeRecordC,tokenC,tokenA);
  replacePropertyKey(propertyStore,nodeRecordC,tokenD,tokenA);
  replacePropertyKey(propertyStore,nodeRecordC,tokenE,tokenA);
}
