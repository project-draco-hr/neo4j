{
  NonIndexedConflictResolver resolver=new NonIndexedConflictResolver(propertyKeyTokenStore,propertyStore);
  List<DuplicateCluster> clusterListA=new ArrayList<>();
  long propertyIdA=addDuplicateCluster(nodeIdA,clusterListA);
  List<DuplicateCluster> clusterListC=new ArrayList<>();
  long propertyIdC=addDuplicateCluster(nodeIdC,clusterListC);
  resolver.visited(0,clusterListA);
  resolver.visited(0,clusterListC);
  Token duplicateTokenA1=findTokenFor(propertyKeyTokenStore,"__DUPLICATE_keyA_1");
  Token duplicateTokenA2=findTokenFor(propertyKeyTokenStore,"__DUPLICATE_keyA_2");
  Token duplicateTokenA3=findTokenFor(propertyKeyTokenStore,"__DUPLICATE_keyA_3");
  Token duplicateTokenA4=findTokenFor(propertyKeyTokenStore,"__DUPLICATE_keyA_4");
  assertNotNull(duplicateTokenA1);
  assertNotNull(duplicateTokenA2);
  assertNotNull(duplicateTokenA3);
  assertNotNull(duplicateTokenA4);
  Set<Integer> propertyKeyIdsA=collectPropertyKeyIds(propertyIdA);
  assertThat(propertyKeyIdsA,contains(tokenA.id(),duplicateTokenA1.id()));
  Set<Integer> propertyKeyIdsC=collectPropertyKeyIds(propertyIdC);
  assertThat(propertyKeyIdsC,contains(tokenA.id(),duplicateTokenA1.id(),duplicateTokenA2.id(),duplicateTokenA3.id(),duplicateTokenA4.id()));
}
