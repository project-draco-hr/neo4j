{
  String filename=new File(target.makeGraphDbDir(),"dirty").getAbsolutePath();
  RandomAccessFile file=resources.add(new RandomAccessFile(filename,"rw"));
  final int blockSize=8;
  StoreChannel channel=new StoreFileChannel(file.getChannel());
  final PersistenceWindowPool pool=new PersistenceWindowPool(new File("test.store"),blockSize,channel,0,false,false,new ConcurrentHashMap<Long,PersistenceRow>(),BrickElementFactory.DEFAULT,PersistenceWindowPool.Monitor.NULL);
  final PersistenceWindow t1Row=pool.acquire(0,OperationType.WRITE);
  OtherThreadExecutor<Void> otherThread=new OtherThreadExecutor<>("other thread",null);
  Future<Throwable> future=otherThread.executeDontWait(new WorkerCommand<Void,Throwable>(){
    @Override public Throwable doWork(    Void state){
      PersistenceWindow t2Row=null;
      Throwable th=null;
      try {
        t2Row=pool.acquire(0,OperationType.READ);
        assertTrue(t1Row == t2Row);
        assertBufferContents(blockSize,t2Row);
        return null;
      }
 catch (      Throwable t) {
        th=t;
        return t;
      }
 finally {
        if (t2Row != null) {
          try {
            pool.release(t2Row);
          }
 catch (          IOException e) {
            if (th != null) {
              e.addSuppressed(th);
            }
            return e;
          }
        }
      }
    }
  }
);
  try {
    writeBufferContents(blockSize,t1Row);
    otherThread.waitUntilWaiting();
  }
  finally {
    pool.release(t1Row);
  }
  Throwable failure=future.get();
  if (failure != null) {
    throw launderedException(failure);
  }
  PersistenceWindow row=pool.acquire(0,OperationType.READ);
  assertFalse(t1Row == row);
  assertBufferContents(blockSize,row);
  pool.close();
  otherThread.close();
  file.close();
}
