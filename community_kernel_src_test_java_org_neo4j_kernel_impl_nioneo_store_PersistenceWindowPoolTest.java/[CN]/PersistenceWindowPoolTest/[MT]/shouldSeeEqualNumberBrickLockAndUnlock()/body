{
  String filename=new File(directory.directory(),"mapped.file").getAbsolutePath();
  RandomAccessFile file=resources.add(new RandomAccessFile(filename,"rw"));
  StoreChannel channel=new StoreFileChannel(file.getChannel());
  file.setLength(8 * 10);
  final AtomicInteger lockedCount=new AtomicInteger(), unlockedCount=new AtomicInteger();
  BrickElementFactory brickFactory=new BrickElementFactory(){
    @Override public BrickElement create(    final int index){
      return new BrickElement(index){
        @Override synchronized void lock(){
          assertEquals(0,index);
          super.lock();
          lockedCount.incrementAndGet();
        }
        @Override void unLock(){
          assertEquals(0,index);
          super.unLock();
          unlockedCount.incrementAndGet();
        }
      }
;
    }
  }
;
  PersistenceWindowPool pool=new PersistenceWindowPool(new File("test.store"),8,channel,10000,false,false,new ConcurrentHashMap<Long,PersistenceRow>(),brickFactory,StringLogger.DEV_NULL);
  try {
    pool.release(pool.acquire(0,OperationType.READ));
    assertEquals(1,lockedCount.get());
    assertEquals(1,unlockedCount.get());
  }
  finally {
    pool.close();
  }
}
