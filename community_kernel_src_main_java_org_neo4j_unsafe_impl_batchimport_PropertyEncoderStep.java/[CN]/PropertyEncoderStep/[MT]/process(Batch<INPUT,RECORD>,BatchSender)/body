{
  RelativeIdRecordAllocator stringAllocator=new RelativeIdRecordAllocator(stringDataSize);
  RelativeIdRecordAllocator arrayAllocator=new RelativeIdRecordAllocator(arrayDataSize);
  PropertyCreator propertyCreator=new PropertyCreator(stringAllocator,arrayAllocator,null,null);
  int blockCountGuess=(int)averageBlocksPerBatch.average();
  PropertyBlock[] propertyBlocks=new PropertyBlock[blockCountGuess == 0 ? batch.input.length : blockCountGuess + batch.input.length / 20];
  int blockCursor=0;
  for (int i=0; i < batch.input.length; i++) {
    stringAllocator.initialize();
    arrayAllocator.initialize();
    INPUT input=batch.input[i];
    if (!input.hasFirstPropertyId()) {
      int count=input.properties().length >> 1;
      if (blockCursor + count > propertyBlocks.length) {
        propertyBlocks=copyOf(propertyBlocks,max(propertyBlocks.length << 1,blockCursor + count));
      }
      propertyKeyHolder.propertyKeysAndValues(propertyBlocks,blockCursor,input.properties(),propertyCreator);
      batch.propertyBlocksLengths[i]=count;
      blockCursor+=count;
    }
  }
  batch.propertyBlocks=propertyBlocks;
  averageBlocksPerBatch.add(blockCursor);
  sender.send(batch);
}
