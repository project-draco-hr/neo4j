{
  final Dependencies dependencies=platformModule.dependencies;
  config=platformModule.config;
  final LogService logging=platformModule.logging;
  final FileSystemAbstraction fileSystem=platformModule.fileSystem;
  final File storeDir=platformModule.storeDir;
  final File clusterStateDirectory=createClusterStateDirectory(storeDir,fileSystem);
  final LifeSupport life=platformModule.life;
  final Monitors monitors=platformModule.monitors;
  logProvider=logging.getInternalLogProvider();
  final Supplier<DatabaseHealth> databaseHealthSupplier=dependencies.provideDependency(DatabaseHealth.class);
  LocalDatabase localDatabase=new LocalDatabase(platformModule.storeDir,new StoreFiles(new DefaultFileSystemAbstraction()),platformModule.dataSourceManager,platformModule.pageCache,fileSystem,databaseHealthSupplier);
  IdentityModule identityModule=new IdentityModule(platformModule,clusterStateDirectory);
  ClusteringModule clusteringModule=new ClusteringModule(discoveryServiceFactory,identityModule.myself(),platformModule,clusterStateDirectory);
  topologyService=clusteringModule.topologyService();
  long logThresholdMillis=config.get(CoreEdgeClusterSettings.unknown_address_logging_throttle);
  int maxQueueSize=config.get(CoreEdgeClusterSettings.outgoing_queue_size);
  final SenderService raftSender=new SenderService(new RaftChannelInitializer(new CoreReplicatedContentMarshal(),logProvider,monitors),logProvider,platformModule.monitors,maxQueueSize);
  life.add(raftSender);
  final MessageLogger<MemberId> messageLogger=createMessageLogger(config,life,identityModule.myself());
  RaftOutbound raftOutbound=new RaftOutbound(topologyService,raftSender,clusteringModule.clusterIdentity(),logProvider,logThresholdMillis);
  Outbound<MemberId,RaftMessages.RaftMessage> loggingOutbound=new LoggingOutbound<>(raftOutbound,identityModule.myself(),messageLogger);
  consensusModule=new ConsensusModule(identityModule.myself(),platformModule,loggingOutbound,clusterStateDirectory,topologyService);
  dependencies.satisfyDependency(consensusModule.raftMachine());
  ReplicationModule replicationModule=new ReplicationModule(identityModule.myself(),platformModule,config,consensusModule,loggingOutbound,clusterStateDirectory,fileSystem,logProvider);
  CoreStateMachinesModule coreStateMachinesModule=new CoreStateMachinesModule(identityModule.myself(),platformModule,clusterStateDirectory,config,replicationModule.getReplicator(),consensusModule.raftMachine(),dependencies,localDatabase);
  this.idGeneratorFactory=coreStateMachinesModule.idGeneratorFactory;
  this.idTypeConfigurationProvider=coreStateMachinesModule.idTypeConfigurationProvider;
  this.labelTokenHolder=coreStateMachinesModule.labelTokenHolder;
  this.propertyKeyTokenHolder=coreStateMachinesModule.propertyKeyTokenHolder;
  this.relationshipTypeTokenHolder=coreStateMachinesModule.relationshipTypeTokenHolder;
  this.lockManager=coreStateMachinesModule.lockManager;
  this.commitProcessFactory=coreStateMachinesModule.commitProcessFactory;
  this.accessCapability=new LeaderCanWrite(consensusModule.raftMachine());
  CoreServerModule coreServerModule=new CoreServerModule(identityModule,platformModule,consensusModule,coreStateMachinesModule,replicationModule,clusterStateDirectory,clusteringModule,localDatabase,messageLogger,databaseHealthSupplier);
  editionInvariants(platformModule,dependencies,config,logging,life);
  dependencies.satisfyDependency(lockManager);
  life.add(consensusModule.raftTimeoutService());
  life.add(coreServerModule.membershipWaiterLifecycle);
}
