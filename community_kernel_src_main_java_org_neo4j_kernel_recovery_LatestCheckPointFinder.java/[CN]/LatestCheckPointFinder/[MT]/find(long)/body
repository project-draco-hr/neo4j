{
  long version=fromVersionBackwards;
  LogEntryStart latestStartEntry=null;
  long oldestVersionFound=-1;
  while (version >= INITIAL_LOG_VERSION) {
    LogVersionedStoreChannel channel=PhysicalLogFile.tryOpenForVersion(logFiles,fileSystem,version);
    if (channel == null) {
      return new LatestCheckPoint(null,false,oldestVersionFound);
    }
    oldestVersionFound=version;
    CheckPoint latestCheckPoint=null;
    ReadableVersionableLogChannel recoveredDataChannel=new ReadAheadLogChannel(channel,NO_MORE_CHANNELS,DEFAULT_READ_AHEAD_SIZE);
    try (LogEntryCursor<ReadableVersionableLogChannel> cursor=new LogEntryCursor<>(recoveredDataChannel,logEntryReader)){
      LogEntry entry;
      while (cursor.next()) {
        entry=cursor.get();
        if (entry instanceof CheckPoint) {
          latestCheckPoint=entry.as();
        }
        if (entry instanceof LogEntryStart && (latestStartEntry == null || version == fromVersionBackwards)) {
          latestStartEntry=entry.as();
        }
      }
    }
     if (latestCheckPoint != null) {
      boolean commitsAfterCheckPoint=latestStartEntry != null && latestStartEntry.getStartPosition().compareTo(latestCheckPoint.getLogPosition()) > 0;
      return new LatestCheckPoint(latestCheckPoint,commitsAfterCheckPoint,oldestVersionFound);
    }
    version--;
  }
  return new LatestCheckPoint(null,latestStartEntry != null,oldestVersionFound);
}
