{
  CountsRecordState seenState=new CountsRecordState();
  final CountsAccessor.Initializer initializer=new CountsAccessor.Initializer(seenState,seenState);
  List<CountsRecordState.Difference> differences=state.verify(new CountsVisitor.Visitable(){
    @Override public void accept(    final CountsVisitor verifier){
      tracker.accept(CountsVisitor.Adapter.multiplex(initializer,verifier));
    }
  }
);
  seenState.accept(new CountsVisitor(){
    @Override public void visitNodeCount(    int labelId,    long count){
      long expected=tracker.nodeCount(labelId,newDoubleLongRegister()).readSecond();
      assertEquals("Should be able to read visited state.",expected,count);
    }
    @Override public void visitRelationshipCount(    int startLabelId,    int typeId,    int endLabelId,    long count){
      long expected=tracker.relationshipCount(startLabelId,typeId,endLabelId,newDoubleLongRegister()).readSecond();
      assertEquals("Should be able to read visited state.",expected,count);
    }
    @Override public void visitIndexStatistics(    int labelId,    int propertyKeyId,    long updates,    long size){
      Register.DoubleLongRegister output=tracker.indexUpdatesAndSize(labelId,propertyKeyId,newDoubleLongRegister());
      assertEquals("Should be able to read visited state.",output.readFirst(),updates);
      assertEquals("Should be able to read visited state.",output.readSecond(),size);
    }
    @Override public void visitIndexSample(    int labelId,    int propertyKeyId,    long unique,    long size){
      Register.DoubleLongRegister output=tracker.indexSample(labelId,propertyKeyId,newDoubleLongRegister());
      assertEquals("Should be able to read visited state.",output.readFirst(),unique);
      assertEquals("Should be able to read visited state.",output.readSecond(),size);
    }
  }
);
  if (!differences.isEmpty()) {
    StringBuilder errors=new StringBuilder().append("Counts differ in ").append(differences.size()).append(" places...");
    for (    CountsRecordState.Difference difference : differences) {
      errors.append("\n\t").append(difference);
    }
    throw new AssertionError(errors.toString());
  }
}
