{
  try {
    if (!fs.fileExists(alphaFile) || !fs.fileExists(betaFile)) {
      throw new UnderlyingStorageException("Expected both counts store files " + alphaFile + " and "+ betaFile+ " to exist. You may "+ "recreate the counts store by shutting down the database first, deleting the counts store "+ "files manually and then restarting the database");
    }
    CountsStore alphaStore=openVerifiedCountsStore(fs,pageCache,alphaFile);
    CountsStore betaStore=openVerifiedCountsStore(fs,pageCache,betaFile);
    boolean isAlphaCorrupted=alphaStore == null;
    boolean isBetaCorrupted=betaStore == null;
    if (isAlphaCorrupted && isBetaCorrupted) {
      throw new UnderlyingStorageException("Neither of the two store files could be properly opened. Please shut down the database and " + "delete " + alphaFile + " and "+ betaFile+ " to have the database recreate the counts"+ "store on next startup");
    }
    if (isAlphaCorrupted) {
      logger.debug("CountsStore picked " + betaFile + " since "+ alphaFile+ " could not be opened "+ "(txId="+ betaStore.lastTxId()+ ", minorVersion="+ betaStore.minorVersion()+ ")");
      return betaStore;
    }
    if (isBetaCorrupted) {
      logger.debug("CountsStore picked " + alphaFile + " since "+ betaFile+ " could not be opened "+ "(txId="+ alphaStore.lastTxId()+ ", minorVersion="+ alphaStore.minorVersion()+ ")");
      return alphaStore;
    }
    if (isAlphaStoreMoreRecent(alphaStore,betaStore)) {
      logger.debug("CountsStore picked " + alphaFile + " (txId="+ alphaStore.lastTxId()+ ", "+ "minorVersion="+ alphaStore.minorVersion()+ "), against "+ betaFile+ " "+ "(txId="+ betaStore.lastTxId()+ ", minorVersion="+ betaStore.minorVersion()+ ")");
      betaStore.close();
      return alphaStore;
    }
 else {
      logger.debug("CountsStore picked " + betaFile + " file (txId="+ betaStore.lastTxId()+ ", "+ "minorVersion="+ betaStore.minorVersion()+ "), against "+ alphaFile+ " "+ "(txId="+ alphaStore.lastTxId()+ ", minorVersion="+ alphaStore.minorVersion()+ ")");
      alphaStore.close();
      return betaStore;
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException(e);
  }
}
