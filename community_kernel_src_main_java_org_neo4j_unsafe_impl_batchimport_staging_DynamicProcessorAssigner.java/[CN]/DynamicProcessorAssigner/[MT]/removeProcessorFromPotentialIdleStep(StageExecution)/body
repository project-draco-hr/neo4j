{
  Pair<Step<?>,Float> fastest=execution.stepsOrderedBy(Keys.avg_processing_time,true).iterator().next();
  float threshold=1f - (1f / fastest.first().numberOfProcessors());
  if (fastest.other() < threshold) {
    Step<?> fastestStep=fastest.first();
    long doneBatches=batches(fastestStep);
    if (batchesPassedSinceLastChange(fastestStep,doneBatches) >= config.movingAverageSize()) {
      if (fastestStep.decrementNumberOfProcessors()) {
        lastChangedProcessors.put(fastestStep,doneBatches);
        return true;
      }
    }
  }
  return false;
}
