{
  assumeTrue(!SystemUtils.IS_OS_WINDOWS);
  int NUMBER_OF_RECORDS=1000000;
  File storeDir=testDirectory.graphDbDir();
  Config config=new Config(stringMap(pagecache_memory.name(),mmapSize(NUMBER_OF_RECORDS,NodeRecordFormat.RECORD_SIZE)),NodeStore.Configuration.class);
  DefaultFileSystemAbstraction fileSystemAbstraction=new DefaultFileSystemAbstraction();
  DefaultIdGeneratorFactory idGeneratorFactory=new DefaultIdGeneratorFactory(fileSystemAbstraction);
  PageCache pageCache=pageCacheRule.getPageCache(fileSystemAbstraction,config);
  StoreFactory storeFactory=new StoreFactory(storeDir,config,idGeneratorFactory,pageCache,fileSystemAbstraction,NullLogProvider.getInstance());
  NeoStores neoStores=storeFactory.openAllNeoStores(true);
  NodeStore nodeStore=neoStores.getNodeStore();
  int iterations=2 * NUMBER_OF_RECORDS;
  long startingId=nodeStore.nextId();
  long nodeId=startingId;
  for (int i=0; i < iterations; i++) {
    NodeRecord record=new NodeRecord(nodeId,false,i,0);
    record.setInUse(true);
    nodeStore.updateRecord(record);
    nodeId=nodeStore.nextId();
  }
  NodeRecord record=new NodeRecord(0,false,0,0);
  for (int i=0; i < iterations; i++) {
    record.setId(startingId + i);
    nodeStore.getRecord(i,record,NORMAL);
    assertTrue("record[" + i + "] should be in use",record.inUse());
    assertThat("record[" + i + "] should have nextRelId of "+ i,record.getNextRel(),is((long)i));
  }
  neoStores.close();
}
