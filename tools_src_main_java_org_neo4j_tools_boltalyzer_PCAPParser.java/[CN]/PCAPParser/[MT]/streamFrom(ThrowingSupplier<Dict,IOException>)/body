{
  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(new Iterator<Dict>(){
    private Dict next=supplier.get();
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public Dict next(){
      try {
        Dict current=next;
        next=supplier.get();
        return current;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
,Spliterator.IMMUTABLE),false);
}
