{
  createGraph("a TO b","b TO c","c TO d","a TO e","e TO f","f TO c");
  try (Transaction tx=beginTx()){
    PathEvaluator<Integer> evaluator=new PathEvaluator.Adapter<Integer>(){
      @Override public Evaluation evaluate(      Path path,      BranchState<Integer> state){
        return ofIncludes(path.endNode().getProperty("name").equals("c") && state.getState() == 3);
      }
    }
;
    expectPaths(getGraphDb().traversalDescription().uniqueness(Uniqueness.NODE_PATH).expand(new RelationshipWeightExpander(),new InitialBranchState.State<>(1,1)).evaluator(evaluator).traverse(getNodeWithName("a")),"a,b,c");
    tx.success();
  }
 }
