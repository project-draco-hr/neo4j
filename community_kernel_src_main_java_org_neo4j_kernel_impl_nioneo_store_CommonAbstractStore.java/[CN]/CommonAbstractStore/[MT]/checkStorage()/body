{
  if (config != null) {
    Boolean isReadOnly=Boolean.parseBoolean((String)config.get(Config.READ_ONLY));
    if (isReadOnly != null) {
      readOnly=isReadOnly;
    }
  }
  if (config != null) {
    String str=(String)config.get("backup_slave");
    if ("true".equals(str)) {
      backupSlave=true;
    }
  }
  if (!new File(storageFileName).exists()) {
    throw new IllegalStateException("No such store[" + storageFileName + "]");
  }
  try {
    if (!readOnly || backupSlave) {
      this.fileChannel=new RandomAccessFile(storageFileName,"rw").getChannel();
    }
 else {
      this.fileChannel=new RandomAccessFile(storageFileName,"r").getChannel();
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to open file " + storageFileName,e);
  }
  try {
    if ((!readOnly || backupSlave) && grabFileLock) {
      this.fileLock=this.fileChannel.tryLock();
      if (fileLock == null) {
        fileChannel.close();
        throw new IllegalStateException("Unable to lock store [" + storageFileName + "], this is usually a result of some "+ "other Neo4j kernel running using the same store.");
      }
    }
  }
 catch (  IOException e) {
    closeFileChannelIfOpened();
    throw new UnderlyingStorageException("Unable to lock store[" + storageFileName + "]");
  }
catch (  OverlappingFileLockException e) {
    closeFileChannelIfOpened();
    throw new IllegalStateException("Unable to lock store [" + storageFileName + "], this is usually caused by another Neo4j kernel already running in "+ "this JVM for this particular store");
  }
}
