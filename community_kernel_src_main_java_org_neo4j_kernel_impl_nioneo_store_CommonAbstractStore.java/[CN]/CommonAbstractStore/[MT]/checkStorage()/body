{
  readOnly=configuration.get(Configuration.read_only);
  backupSlave=configuration.get(Configuration.backup_slave);
  if (!fileSystemAbstraction.fileExists(storageFileName)) {
    throw new IllegalStateException("No such store[" + storageFileName + "] for "+ fileSystemAbstraction);
  }
  try {
    this.fileChannel=fileSystemAbstraction.open(storageFileName,readOnly ? "r" : "rw");
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to open file " + storageFileName,e);
  }
  try {
    if ((!readOnly || backupSlave)) {
      this.fileLock=fileSystemAbstraction.tryLock(storageFileName,fileChannel);
      if (fileLock == null) {
        throw new IllegalStateException("Unable to lock store [" + storageFileName + "], this is usually a result of some "+ "other Neo4j kernel running using the same store.");
      }
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to lock store[" + storageFileName + "]",e);
  }
catch (  OverlappingFileLockException e) {
    throw new IllegalStateException("Unable to lock store [" + storageFileName + "], this is usually caused by another Neo4j kernel already running in "+ "this JVM for this particular store");
  }
}
