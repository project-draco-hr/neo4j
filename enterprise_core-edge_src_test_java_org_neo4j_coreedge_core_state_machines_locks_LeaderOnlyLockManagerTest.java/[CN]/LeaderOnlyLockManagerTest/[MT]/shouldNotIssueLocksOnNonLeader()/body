{
  MemberId me=member(0);
  MemberId leader=member(1);
  ReplicatedLockTokenStateMachine replicatedLockStateMachine=new ReplicatedLockTokenStateMachine(new InMemoryStateStorage(new ReplicatedLockTokenState()));
  DirectReplicator replicator=new DirectReplicator(replicatedLockStateMachine);
  LeaderLocator leaderLocator=mock(LeaderLocator.class);
  when(leaderLocator.getLeader()).thenReturn(leader);
  Locks locks=mock(Locks.class);
  when(locks.newClient()).thenReturn(mock(Locks.Client.class));
  LeaderOnlyLockManager lockManager=new LeaderOnlyLockManager(me,replicator,leaderLocator,locks,LEADER_LOCK_TOKEN_TIMEOUT,replicatedLockStateMachine);
  Locks.Client lockClient=lockManager.newClient();
  try {
    lockClient.acquireExclusive(ResourceTypes.NODE,0L);
    fail("Should have thrown exception");
  }
 catch (  AcquireLockTimeoutException e) {
  }
}
