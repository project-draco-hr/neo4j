{
  int replicationFactor=desiredReplicationFactor;
  if (externalAuthorServerId != null) {
    replicationFactor--;
  }
  if (replicationFactor == 0) {
    return;
  }
  Collection<ReplicationContext> committers=new HashSet<>();
  try {
    int successfulReplications=0;
    Iterator<Slave> slaveList=filter(replicationStrategy.prioritize(slaves.getSlaves()).iterator(),externalAuthorServerId);
    CompletionNotifier notifier=new CompletionNotifier();
    for (int i=0; i < replicationFactor && slaveList.hasNext(); i++) {
      Slave slave=slaveList.next();
      committers.add(new ReplicationContext(slaveCommitters.submit(slaveCommitter(dataSource,slave,txId,notifier)),slave));
    }
    Collection<ReplicationContext> toAdd=new ArrayList<>();
    Collection<ReplicationContext> toRemove=new ArrayList<>();
    while (!committers.isEmpty() && successfulReplications < replicationFactor) {
      toAdd.clear();
      toRemove.clear();
      for (      ReplicationContext context : committers) {
        if (!context.future.isDone()) {
          continue;
        }
        if (isSuccessful(context)) {
          successfulReplications++;
        }
 else         if (slaveList.hasNext()) {
          Slave newSlave=slaveList.next();
          toAdd.add(new ReplicationContext(slaveCommitters.submit(slaveCommitter(dataSource,newSlave,txId,notifier)),newSlave));
        }
        toRemove.add(context);
      }
      if (!toAdd.isEmpty()) {
        committers.addAll(toAdd);
      }
      if (!toRemove.isEmpty()) {
        committers.removeAll(toRemove);
      }
      if (!committers.isEmpty()) {
        notifier.waitForAnyCompletion();
      }
    }
    if (!(successfulReplications >= replicationFactor)) {
      log.logMessage("Transaction " + txId + " for "+ dataSource.getName()+ " couldn't commit on enough slaves, desired "+ replicationFactor+ ", but could only commit at "+ successfulReplications);
    }
  }
 catch (  Throwable t) {
    log.logMessage("Unknown error commit master transaction at slave",t);
  }
 finally {
    for (    ReplicationContext context : committers) {
      context.future.cancel(false);
    }
  }
}
