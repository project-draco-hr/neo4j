{
  int ruleId1=0;
  int ruleId2=1;
  int labelId=1;
  int propertyKeyId=2;
  DynamicRecord record1=inUse(dynamicRecord(ruleId1));
  DynamicRecord record2=inUse(dynamicRecord(ruleId2));
  SchemaIndexProvider.Descriptor providerDescriptor=new SchemaIndexProvider.Descriptor("in-memory","1.0");
  IndexRule rule1=IndexRule.constraintIndexRule(ruleId1,labelId,propertyKeyId,providerDescriptor,(long)ruleId1);
  UniquenessConstraintRule rule2=UniquenessConstraintRule.uniquenessConstraintRule(ruleId2,labelId,propertyKeyId,ruleId1);
  when(checker().ruleAccess.loadSingleSchemaRule(ruleId1)).thenReturn(rule1);
  when(checker().ruleAccess.loadSingleSchemaRule(ruleId2)).thenReturn(rule2);
  add(inUse(new LabelTokenRecord(labelId)));
  add(inUse(new PropertyKeyTokenRecord(propertyKeyId)));
  check(record1);
  check(record2);
  SchemaRecordCheck obligationChecker=checker().forObligationChecking();
  ConsistencyReport.SchemaConsistencyReport report=check(obligationChecker,record1);
  check(obligationChecker,record2);
  verify(report).constraintIndexRuleNotReferencingBack(record2);
}
