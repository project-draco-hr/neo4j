{
  long startNode=createBasicTraversableGraph();
  List<Object> hits=serialize(actions.traverse(startNode,new HashMap<String,Object>(),TraverserReturnType.fullpath));
  for (  Object hit : hits) {
    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)hit;
    @SuppressWarnings("unchecked") Collection<Object> relationships=(Collection<Object>)map.get("relationships");
    for (    Object rel : relationships) {
      @SuppressWarnings("unchecked") Map<String,Object> relationship=(Map<String,Object>)rel;
      RelationshipRepresentationTest.verifySerialisation(relationship);
    }
    @SuppressWarnings("unchecked") Collection<Object> nodes=(Collection<Object>)map.get("nodes");
    for (    Object n : nodes) {
      @SuppressWarnings("unchecked") Map<String,Object> node=(Map<String,Object>)n;
      NodeRepresentationTest.verifySerialisation(node);
    }
    assertThat(map,hasKey("start"));
    assertThat(map,hasKey("end"));
    assertThat(map,hasKey("length"));
  }
}
