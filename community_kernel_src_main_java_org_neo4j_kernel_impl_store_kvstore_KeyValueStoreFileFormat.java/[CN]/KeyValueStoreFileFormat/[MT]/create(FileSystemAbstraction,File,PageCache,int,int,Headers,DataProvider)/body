{
  if (keySize <= 0 || keySize > maxSize || valueSize <= 0 || valueSize > maxSize) {
    throw new IllegalArgumentException(String.format("Invalid sizes: keySize=%d, valueSize=%d, format maxSize=%d",keySize,valueSize,maxSize));
  }
  if (fs.fileExists(path)) {
    fs.truncate(path,0);
  }
  BigEndianByteArrayBuffer key=new BigEndianByteArrayBuffer(new byte[keySize]);
  BigEndianByteArrayBuffer value=new BigEndianByteArrayBuffer(new byte[valueSize]);
  writeFormatSpecifier(value);
  if (!validFormatSpecifier(value.buffer,keySize)) {
    throw new IllegalArgumentException("Invalid Format specifier: " + BigEndianByteArrayBuffer.toString(value.buffer));
  }
  int pageSize=pageSize(pages,keySize,valueSize);
  try (KeyValueWriter writer=newWriter(fs,path,value,pages,pageSize,keySize,valueSize);DataProvider data=dataProvider){
    if (!writer.writeHeader(key,value)) {
      throw new IllegalStateException("The format specifier should be a valid header value");
    }
    for (    HeaderField<?> header : headerFields) {
      headers.write(header,value);
      if (!writer.writeHeader(key,value)) {
        throw new IllegalArgumentException("Invalid header value. " + header + ": "+ value);
      }
    }
    if (headerFields.length == 0) {
      if (!writer.writeHeader(key,value)) {
        throw new IllegalStateException("A padding header should be valid.");
      }
    }
    long dataEntries=0;
    for (; data != null && data.visit(key,value); dataEntries++) {
      writer.writeData(key,value);
    }
    key.clear();
    value.clear();
    value.putIntegerAtEnd(dataEntries);
    if (!writer.writeHeader(key,value)) {
      throw new IllegalStateException("The trailing size header should be valid");
    }
    writer.writeTrailer(fileTrailer());
    return writer.openStoreFile();
  }
 }
