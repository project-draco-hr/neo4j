{
  Iterator<Integer> source=new RangeIterator(8);
  CachingIterator<Integer> caching=new CachingIterator<Integer>(source);
  try {
    caching.previous();
    fail("Should throw exception");
  }
 catch (  NoSuchElementException e) {
  }
  try {
    caching.current();
    fail("Should throw exception");
  }
 catch (  NoSuchElementException e) {
  }
  assertEquals(0,caching.position());
  assertTrue(caching.hasNext());
  assertEquals(0,caching.position());
  assertFalse(caching.hasPrevious());
  assertEquals((Integer)0,caching.next());
  assertTrue(caching.hasNext());
  assertTrue(caching.hasPrevious());
  assertEquals((Integer)1,caching.next());
  assertTrue(caching.hasPrevious());
  assertEquals((Integer)1,caching.current());
  assertEquals((Integer)2,caching.next());
  assertEquals((Integer)2,caching.current());
  assertEquals((Integer)3,(Integer)caching.position());
  assertEquals((Integer)2,caching.current());
  assertTrue(caching.hasPrevious());
  assertEquals((Integer)2,caching.previous());
  assertEquals((Integer)2,caching.current());
  assertEquals((Integer)2,(Integer)caching.position());
  assertEquals((Integer)1,caching.previous());
  assertEquals((Integer)1,caching.current());
  assertEquals((Integer)1,(Integer)caching.position());
  assertEquals((Integer)0,caching.previous());
  assertEquals((Integer)0,(Integer)caching.position());
  assertFalse(caching.hasPrevious());
  try {
    caching.position(-1);
    fail("Shouldn't be able to set a lower value than 0");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals((Integer)0,caching.current());
  assertEquals(0,caching.position(3));
  try {
    caching.current();
    fail("Shouldn't be able to call current() after a call to position(int)");
  }
 catch (  NoSuchElementException e) {
  }
  assertTrue(caching.hasNext());
  assertEquals((Integer)3,caching.next());
  assertEquals((Integer)3,caching.current());
  assertTrue(caching.hasPrevious());
  assertEquals((Integer)4,caching.next());
  assertEquals(5,caching.position());
  assertEquals((Integer)4,caching.previous());
  assertEquals((Integer)4,caching.current());
  assertEquals((Integer)4,caching.current());
  assertEquals(4,caching.position());
  assertEquals((Integer)3,caching.previous());
  assertEquals(3,caching.position());
  try {
    caching.position(9);
    fail("Shouldn't be able to set a position which is too big");
  }
 catch (  NoSuchElementException e) {
  }
  assertEquals(3,caching.position(8));
  assertTrue(caching.hasPrevious());
  assertFalse(caching.hasNext());
  try {
    caching.next();
    fail("Shouldn't be able to go beyond last item");
  }
 catch (  NoSuchElementException e) {
  }
  assertEquals(8,caching.position());
  assertEquals((Integer)7,caching.previous());
  assertEquals((Integer)6,caching.previous());
  assertEquals(6,caching.position(0));
  assertEquals((Integer)0,caching.next());
}
