{
  RandomAccessFile file=new RandomAccessFile(new File(storeDir,"nioneo_logical.log.v0"),"r");
  ByteBuffer buffer=allocate(10000);
  try {
    FileChannel channel=file.getChannel();
    readLogHeader(buffer,channel,true);
    final AtomicInteger counted=new AtomicInteger();
    LogDeserializer deserializer=new LogDeserializer(buffer,XaCommandReaderFactory.DEFAULT);
    Consumer<LogEntry,IOException> consumer=new Consumer<LogEntry,IOException>(){
      long lastOne=-1;
      @Override public boolean accept(      LogEntry entry) throws IOException {
        if (entry instanceof LogEntry.TwoPhaseCommit) {
          long txId=((LogEntry.TwoPhaseCommit)entry).getTxId();
          if (lastOne != -1) {
            assertEquals(lastOne + 1,txId);
          }
          lastOne=txId;
          counted.incrementAndGet();
        }
        return true;
      }
    }
;
    Cursor<LogEntry,IOException> c=deserializer.cursor(channel);
    while (c.next(consumer))     ;
    assertEquals(expectedCount,counted.get());
  }
  finally {
    file.close();
  }
}
