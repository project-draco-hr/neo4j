{
  CountsStore.createEmpty(pageCache,alpha,ALL_STORES_VERSION);
  SortedKeyValueStore.Writer<CountsKey,Register.DoubleLongRegister> writer;
  try (CountsStore counts=CountsStore.open(fs,pageCache,alpha)){
    writer=counts.newWriter(beta,lastCommittedTxId);
    writer.valueRegister().write(0,21);
    writer.visit(nodeKey(0));
    writer.valueRegister().write(0,32);
    writer.visit(relationshipKey(1,2,3));
    writer.close();
  }
   try (CountsStore updated=(CountsStore)writer.openForReading()){
    assertEquals(21,get(updated,nodeKey(0)));
    assertEquals(32,get(updated,relationshipKey(1,2,3)));
    assertEquals(lastCommittedTxId,updated.lastTxId());
    assertEquals(BASE_MINOR_VERSION,updated.minorVersion());
    assertEquals(2,updated.totalRecordsStored());
    assertEquals(beta,updated.file());
    updated.accept(new KeyValueRecordVisitor<CountsKey,Register.DoubleLongRegister>(){
      private final Register.DoubleLongRegister valueRegister=Registers.newDoubleLongRegister();
      @Override public Register.DoubleLongRegister valueRegister(){
        return valueRegister;
      }
      @Override public void visit(      CountsKey key){
        key.accept(new CountsVisitor(){
          @Override public void visitNodeCount(          int labelId,          long count){
            assertEquals(0,labelId);
            assertEquals(21,count);
          }
          @Override public void visitRelationshipCount(          int startLabelId,          int typeId,          int endLabelId,          long count){
            assertEquals(1,startLabelId);
            assertEquals(2,typeId);
            assertEquals(3,endLabelId);
            assertEquals(32,count);
          }
          @Override public void visitIndexCount(          int labelId,          int propertyKeyId,          long count){
          }
        }
,valueRegister);
      }
    }
);
  }
 }
