{
  TransactionCommitProcess commitProcess=mock(TransactionCommitProcess.class);
  GlobalSessionTrackerState<RaftTestMember> sessionTracker=mock(GlobalSessionTrackerState.class);
  when(sessionTracker.validateOperation(any(),any())).thenReturn(true);
  Stubber stubber=doThrow(new RuntimeException());
  stubber.when(sessionTracker).update(any(),any(),anyLong());
  stubber.doNothing().when(sessionTracker).update(any(),any(),anyLong());
  ReplicatedTransactionStateMachine<RaftTestMember> rtsm=new ReplicatedTransactionStateMachine<>(commitProcess,new GlobalSession<>(UUID.randomUUID(),RaftTestMember.member(1)),mock(LockTokenManager.class,RETURNS_MOCKS),new CommittingTransactionsRegistry(),sessionTracker,NullLogProvider.getInstance());
  TransactionRepresentation tx=new PhysicalTransactionRepresentation(Collections.emptySet());
  ReplicatedTransaction<RaftTestMember> rtx=ReplicatedTransactionFactory.createImmutableReplicatedTransaction(tx,new GlobalSession<>(UUID.randomUUID(),RaftTestMember.member(2)),new LocalOperationId(1,0));
  try {
    rtsm.onReplicated(rtx,99);
    fail("test setup should have resulted in an exception by now");
  }
 catch (  RuntimeException totallyExpectedByTestSetup) {
  }
  reset(commitProcess);
  rtsm.setLastCommittedIndex(99);
  rtsm.onReplicated(rtx,99);
  verifyZeroInteractions(commitProcess);
  verify(sessionTracker,times(2)).update(any(),any(),eq(99L));
}
