{
  File file=Files.createTempFile("pagecachestress",".bin").toFile();
  file.deleteOnExit();
  PagedFile pagedFile=pageCache.map(file,recordsPerPage * recordVerifierUpdater.getRecordSize());
  List<Updater> updaters=new LinkedList<>();
  for (int threadNumber=0; threadNumber < numberOfThreads; threadNumber++) {
    updaters.add(new Updater(pagedFile,condition,maxPages,recordsPerPage,recordVerifierUpdater,threadNumber));
  }
  ExecutorService executorService=Executors.newFixedThreadPool(numberOfThreads);
  try {
    Collection<Verifier> verifiers=new LinkedList<>();
    for (    Future<Verifier> future : executorService.invokeAll(updaters)) {
      verifiers.add(future.get());
    }
    for (    Future<Void> future : executorService.invokeAll(verifiers)) {
      future.get();
    }
  }
  finally {
    executorService.shutdown();
  }
  new ChecksumVerifier().verify(pagedFile,recordsPerPage,recordVerifierUpdater);
  pageCache.unmap(file);
}
