{
  final PhysicalLogFiles logFiles=new PhysicalLogFiles(directory.directory(),"log",fs);
  File file=logFiles.getLogFileForVersion(logVersion);
  writeSomeData(file,new Visitor<Pair<LogEntryWriter,Consumer<LogPositionMarker>>,IOException>(){
    @Override public boolean visit(    Pair<LogEntryWriter,Consumer<LogPositionMarker>> pair) throws IOException {
      LogEntryWriter writer=pair.first();
      Consumer<LogPositionMarker> consumer=pair.other();
      LogPositionMarker marker=new LogPositionMarker();
      consumer.accept(marker);
      LogPosition lastCommittedTxPosition=marker.newPosition();
      writer.writeStartEntry(0,1,2l,3l,new byte[0]);
      lastCommittedTxStartEntry=new LogEntryStart(0,1,2l,3l,new byte[0],lastCommittedTxPosition);
      writer.writeCommitEntry(4l,5l);
      lastCommittedTxCommitEntry=new OnePhaseCommit(4l,5l);
      writer.writeCheckPointEntry(lastCommittedTxPosition);
      expectedCheckPointEntry=new CheckPoint(lastCommittedTxPosition);
      consumer.accept(marker);
      writer.writeStartEntry(0,1,6l,4l,new byte[0]);
      expectedStartEntry=new LogEntryStart(0,1,6l,4l,new byte[0],marker.newPosition());
      writer.writeCommitEntry(5l,7l);
      expectedCommitEntry=new OnePhaseCommit(5l,7l);
      return true;
    }
  }
);
  LifeSupport life=new LifeSupport();
  Recovery.Monitor monitor=mock(Recovery.Monitor.class);
  final AtomicBoolean recoveryRequiredCalled=new AtomicBoolean();
  try {
    RecoveryLabelScanWriterProvider provider=mock(RecoveryLabelScanWriterProvider.class);
    RecoveryLegacyIndexApplierLookup lookup=mock(RecoveryLegacyIndexApplierLookup.class);
    RecoveryIndexingUpdatesValidator validator=mock(RecoveryIndexingUpdatesValidator.class);
    StoreFlusher flusher=mock(StoreFlusher.class);
    final LogEntryReader<ReadableLogChannel> reader=new VersionAwareLogEntryReader<>(LogEntryVersion.CURRENT.byteCode());
    LatestCheckPointFinder finder=new LatestCheckPointFinder(logFiles,fs,reader);
    life.add(new Recovery(new DefaultRecoverySPI(provider,lookup,flusher,mock(NeoStores.class),null,logFiles,fs,logVersionRepository,finder,validator){
      @Override public Visitor<LogVersionedStoreChannel,IOException> getRecoverer(){
        return new Visitor<LogVersionedStoreChannel,IOException>(){
          @Override public boolean visit(          LogVersionedStoreChannel element) throws IOException {
            try (ReadableVersionableLogChannel channel=new ReadAheadLogChannel(element,NO_MORE_CHANNELS)){
              assertEquals(lastCommittedTxStartEntry,reader.readLogEntry(channel));
              assertEquals(lastCommittedTxCommitEntry,reader.readLogEntry(channel));
              assertEquals(expectedCheckPointEntry,reader.readLogEntry(channel));
              assertEquals(expectedStartEntry,reader.readLogEntry(channel));
              assertEquals(expectedCommitEntry,reader.readLogEntry(channel));
              assertNull(reader.readLogEntry(channel));
              return true;
            }
           }
        }
;
      }
      @Override public void recoveryRequired(){
        recoveryRequiredCalled.set(true);
      }
    }
,monitor));
    life.add(new PhysicalLogFile(fs,logFiles,50,transactionIdStore,logVersionRepository,mock(PhysicalLogFile.Monitor.class),new TransactionMetadataCache(10,100)));
    life.start();
    InOrder order=inOrder(monitor);
    order.verify(monitor,times(1)).recoveryRequired(any(LogPosition.class));
    order.verify(monitor,times(1)).logRecovered(any(LogPosition.class));
    order.verify(monitor,times(1)).recoveryCompleted();
    assertTrue(recoveryRequiredCalled.get());
  }
  finally {
    life.shutdown();
  }
}
