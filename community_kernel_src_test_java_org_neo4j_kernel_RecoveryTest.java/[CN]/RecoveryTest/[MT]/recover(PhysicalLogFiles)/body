{
  LifeSupport life=new LifeSupport();
  Recovery.Monitor monitor=mock(Recovery.Monitor.class);
  final AtomicBoolean recoveryRequired=new AtomicBoolean();
  try {
    RecoveryLabelScanWriterProvider provider=mock(RecoveryLabelScanWriterProvider.class);
    RecoveryLegacyIndexApplierLookup lookup=mock(RecoveryLegacyIndexApplierLookup.class);
    RecoveryIndexingUpdatesValidator validator=mock(RecoveryIndexingUpdatesValidator.class);
    StoreFlusher flusher=mock(StoreFlusher.class);
    final LogEntryReader<ReadableLogChannel> reader=new VersionAwareLogEntryReader<>(LogEntryVersion.CURRENT.byteCode());
    LatestCheckPointFinder finder=new LatestCheckPointFinder(logFiles,fs,reader);
    TransactionMetadataCache metadataCache=new TransactionMetadataCache(10,100);
    LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,50,transactionIdStore,logVersionRepository,mock(PhysicalLogFile.Monitor.class),metadataCache));
    LogicalTransactionStore txStore=new PhysicalLogicalTransactionStore(logFile,metadataCache);
    TransactionRepresentationStoreApplier storeApplier=mock(TransactionRepresentationStoreApplier.class);
    life.add(new Recovery(new DefaultRecoverySPI(provider,lookup,flusher,mock(NeoStores.class),logFiles,fs,logVersionRepository,finder,validator,transactionIdStore,txStore,storeApplier){
      @Override public Visitor<CommittedTransactionRepresentation,Exception> startRecovery(){
        recoveryRequired.set(true);
        return super.startRecovery();
      }
    }
,monitor));
    life.start();
  }
  finally {
    life.shutdown();
  }
  return recoveryRequired.get();
}
