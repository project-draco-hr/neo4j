{
  if (getBlockSize() <= 0) {
    throw new InvalidRecordException("Illegal blockSize: " + getBlockSize());
  }
  logger.fine("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  if (fileSystemAbstraction.fileExists(getStorageFileName() + ".id")) {
    boolean success=fileSystemAbstraction.deleteFile(getStorageFileName() + ".id");
    assert success;
  }
  createIdGenerator(getStorageFileName() + ".id");
  openIdGenerator(false);
  setHighId(1);
  FileChannel fileChannel=getFileChannel();
  long highId=0;
  long defraggedCount=0;
  try {
    long fileSize=fileChannel.size();
    boolean fullRebuild=true;
    if ((boolean)conf.get(Configuration.rebuild_idgenerators_fast)) {
      fullRebuild=false;
      highId=findHighIdBackwards();
    }
    ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[1]);
    LinkedList<Long> freeIdList=new LinkedList<Long>();
    if (fullRebuild) {
      for (long i=1; i * getBlockSize() < fileSize; i++) {
        fileChannel.position(i * getBlockSize());
        byteBuffer.clear();
        fileChannel.read(byteBuffer);
        byteBuffer.flip();
        if (!isRecordInUse(byteBuffer)) {
          freeIdList.add(i);
        }
 else {
          highId=i;
          setHighId(highId + 1);
          while (!freeIdList.isEmpty()) {
            freeBlockId(freeIdList.removeFirst());
            defraggedCount++;
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to rebuild id generator " + getStorageFileName(),e);
  }
  setHighId(highId + 1);
  logger.fine("[" + getStorageFileName() + "] high id="+ getHighId()+ " (defragged="+ defraggedCount+ ")");
  if (stringLogger != null) {
    stringLogger.logMessage(getStorageFileName() + " rebuild id generator, highId=" + getHighId()+ " defragged count="+ defraggedCount,true);
  }
  closeIdGenerator();
  openIdGenerator(false);
}
