{
  String activeFileName=fileName + ".active";
  if (!new File(activeFileName).exists()) {
    if (new File(fileName).exists()) {
      open(fileName);
    }
 else {
      setActiveLog(LOG1);
      open(fileName + ".1");
    }
  }
 else {
    FileChannel fc=new RandomAccessFile(activeFileName,"rw").getChannel();
    byte bytes[]=new byte[256];
    ByteBuffer buf=ByteBuffer.wrap(bytes);
    int read=fc.read(buf);
    fc.close();
    if (read != 4) {
      throw new IllegalStateException("Read " + read + " bytes from "+ activeFileName+ " but expected 4");
    }
    buf.flip();
    char c=buf.asCharBuffer().get();
    File copy=new File(fileName + ".copy");
    if (copy.exists()) {
      copy.delete();
    }
    if (c == CLEAN) {
      String newLog=fileName + ".1";
      if (new File(newLog).exists()) {
        throw new IllegalStateException("Active marked as clean but log " + newLog + " exist");
      }
      setActiveLog(LOG1);
      open(newLog);
    }
 else     if (c == LOG1) {
      String newLog=fileName + ".1";
      if (!new File(newLog).exists()) {
        throw new IllegalStateException("Active marked as 1 but no " + newLog + " exist");
      }
      currentLog=LOG1;
      File otherLog=new File(fileName + ".2");
      if (otherLog.exists()) {
        otherLog.delete();
      }
      open(newLog);
    }
 else     if (c == LOG2) {
      String newLog=fileName + ".2";
      if (!new File(newLog).exists()) {
        throw new IllegalStateException("Active marked as 2 but no " + newLog + " exist");
      }
      File otherLog=new File(fileName + ".1");
      if (otherLog.exists()) {
        otherLog.delete();
      }
      currentLog=LOG2;
      open(newLog);
    }
 else {
      throw new IllegalStateException("Unkown active log: " + c);
    }
  }
  writeBuffer=new MemoryMappedLogBuffer(fileChannel);
}
