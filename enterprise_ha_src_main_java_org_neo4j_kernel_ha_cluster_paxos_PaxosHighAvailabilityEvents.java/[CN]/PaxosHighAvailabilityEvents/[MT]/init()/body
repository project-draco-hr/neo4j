{
  serializer=new AtomicBroadcastSerializer();
  cluster.addClusterListener(new ClusterListener.Adapter(){
    private volatile ClusterConfiguration clusterConfiguration;
    @Override public void joinedCluster(    URI member){
      final URI coordinator=clusterConfiguration.getElected(ClusterConfiguration.COORDINATOR);
      if (coordinator.equals(serverClusterId)) {
        try {
          cluster.broadcast(serializer.broadcast(new MasterIsElected(serverClusterId)));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    @Override public void enteredCluster(    ClusterConfiguration clusterConfiguration){
      this.clusterConfiguration=clusterConfiguration;
    }
    @Override public void elected(    String role,    URI electedMember){
      try {
        if (electedMember.equals(serverClusterId)) {
          cluster.broadcast(serializer.broadcast(new MasterIsElected(serverClusterId)));
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
);
  cluster.addAtomicBroadcastListener(new AtomicBroadcastListener(){
    @Override public void receive(    Payload payload){
      try {
        final Object value=serializer.receive(payload);
        if (value instanceof MasterIsElected) {
          Listeners.notifyListeners(listeners,new Listeners.Notification<HighAvailabilityListener>(){
            @Override public void notify(            HighAvailabilityListener listener){
              listener.masterIsElected(((MasterIsElected)value).getMasterUri());
            }
          }
);
        }
 else         if (value instanceof MemberIsAvailable) {
          Listeners.notifyListeners(listeners,new Listeners.Notification<HighAvailabilityListener>(){
            @Override public void notify(            HighAvailabilityListener listener){
              MemberIsAvailable memberIsAvailable=(MemberIsAvailable)value;
              listener.memberIsAvailable(memberIsAvailable.getRole(),memberIsAvailable.getClusterUri(),memberIsAvailable.getInstanceUris());
            }
          }
);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
  }
);
}
