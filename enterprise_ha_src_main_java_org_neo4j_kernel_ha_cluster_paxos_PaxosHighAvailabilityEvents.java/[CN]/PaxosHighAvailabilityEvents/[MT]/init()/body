{
  serializer=new AtomicBroadcastSerializer();
  cluster.addClusterListener(new ClusterListener.Adapter(){
    @Override public void joinedCluster(    URI member){
    }
    @Override public void enteredCluster(    ClusterConfiguration clusterConfiguration){
      PaxosHighAvailabilityEvents.this.clusterConfiguration=clusterConfiguration;
      cluster.refreshSnapshot();
      for (      Map.Entry<String,URI> memberRoles : clusterConfiguration.getRoles().entrySet()) {
        elected(memberRoles.getKey(),memberRoles.getValue());
      }
    }
    @Override public void elected(    String role,    final URI electedMember){
      if (role.equals(ClusterConfiguration.COORDINATOR)) {
        Listeners.notifyListeners(listeners,new Listeners.Notification<HighAvailabilityListener>(){
          @Override public void notify(          HighAvailabilityListener listener){
            listener.masterIsElected(electedMember);
          }
        }
);
      }
    }
  }
);
  cluster.addAtomicBroadcastListener(new AtomicBroadcastListener(){
    @Override public void receive(    Payload payload){
      try {
        final Object value=serializer.receive(payload);
        if (value instanceof MemberIsAvailable) {
          final MemberIsAvailable memberIsAvailable=(MemberIsAvailable)value;
          snapshot.availableMember(memberIsAvailable);
          Listeners.notifyListeners(listeners,new Listeners.Notification<HighAvailabilityListener>(){
            @Override public void notify(            HighAvailabilityListener listener){
              listener.memberIsAvailable(memberIsAvailable.getRole(),memberIsAvailable.getClusterUri(),memberIsAvailable.getInstanceUris());
            }
          }
);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
  }
);
  cluster.setSnapshotProvider(new HighAvailabilitySnapshotProvider());
}
