{
  return addAction(new ClusterAction(){
    @Override public void run(){
      Cluster joinCluster=servers.get(joinServer - 1).newClient(Cluster.class);
      for (      final Cluster cluster : out) {
        if (cluster.equals(joinCluster)) {
          out.remove(cluster);
          logger.getLogger().fine("Join:" + cluster.toString());
          if (joinServers.length == 0) {
            if (in.isEmpty()) {
              cluster.create("default");
            }
 else {
              URI[] toJoin=new URI[servers.size()];
              for (int i=0; i < servers.size(); i++) {
                toJoin[i]=servers.get(i).getServer().boundAt();
              }
              final Future<ClusterConfiguration> result=cluster.join("default",toJoin);
              Runnable joiner=new Runnable(){
                @Override public void run(){
                  try {
                    ClusterConfiguration clusterConfiguration=result.get();
                    logger.getLogger().fine("**** Cluster configuration:" + clusterConfiguration);
                  }
 catch (                  Exception e) {
                    logger.getLogger().warning("**** Node could not join cluster:" + e.getMessage());
                    out.add(cluster);
                  }
                }
              }
;
              network.addFutureWaiter(result,joiner);
            }
          }
 else {
            URI[] instanceUris=new URI[joinServers.length];
            for (int i=0; i < joinServers.length; i++) {
              int server=joinServers[i];
              instanceUris[i]=URI.create("server" + server);
            }
            final Future<ClusterConfiguration> result=cluster.join("default",instanceUris);
            Runnable joiner=new Runnable(){
              @Override public void run(){
                try {
                  ClusterConfiguration clusterConfiguration=result.get();
                  logger.getLogger().fine("**** Cluster configuration:" + clusterConfiguration);
                }
 catch (                Exception e) {
                  logger.getLogger().warning("**** Node " + joinServer + " could not join cluster:"+ e.getMessage());
                  if (!(e.getCause() instanceof IllegalStateException)) {
                    cluster.create("default");
                  }
 else {
                    logger.getLogger().warning("*** Incorrectly configured cluster? " + e.getCause().getMessage());
                  }
                }
              }
            }
;
            network.addFutureWaiter(result,joiner);
          }
          break;
        }
      }
    }
  }
,time);
}
