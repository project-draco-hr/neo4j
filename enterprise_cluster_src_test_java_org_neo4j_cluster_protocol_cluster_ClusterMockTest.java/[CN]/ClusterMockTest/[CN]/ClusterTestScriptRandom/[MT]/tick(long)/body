{
  if (time >= (rounds() - 100) * 10) {
    return;
  }
  if (time == 0) {
    logger.getLogger().fine("Random seed:" + seed + "L");
  }
  if (random.nextDouble() >= 0.8) {
    double inOrOut=(in.size() - out.size()) / ((double)servers.size());
    double whatToDo=random.nextDouble() + inOrOut;
    logger.getLogger().fine("What to do:" + whatToDo);
    if (whatToDo < 0.5 && !out.isEmpty()) {
      int idx=random.nextInt(out.size());
      final Cluster cluster=out.remove(idx);
      if (in.isEmpty()) {
        cluster.create("default");
      }
 else {
        final Future<ClusterConfiguration> result=cluster.join("default",URI.create(in.get(0).toString()));
        Runnable joiner=new Runnable(){
          @Override public void run(){
            try {
              ClusterConfiguration clusterConfiguration=result.get();
              logger.getLogger().fine("**** Cluster configuration:" + clusterConfiguration);
            }
 catch (            Exception e) {
              logger.getLogger().fine("**** Node could not join cluster:" + e.getMessage());
              out.add(cluster);
            }
          }
        }
;
        network.addFutureWaiter(result,joiner);
      }
      logger.getLogger().fine("Enter cluster:" + cluster.toString());
    }
 else     if (!in.isEmpty()) {
      int idx=random.nextInt(in.size());
      Cluster cluster=in.remove(idx);
      cluster.leave();
      logger.getLogger().fine("Leave cluster:" + cluster.toString());
    }
  }
}
