{
  logger.getLogger().fine("Verify configurations");
  List<URI> members=null;
  Map<String,InstanceId> roles=null;
  Set<InstanceId> failed=null;
  List<AssertionError> errors=new LinkedList<AssertionError>();
  List<TestProtocolServer> protocolServers=network.getServers();
  for (int j=0; j < protocolServers.size(); j++) {
    StateMachines stateMachines=protocolServers.get(j).getServer().getStateMachines();
    State<?,?> clusterState=stateMachines.getStateMachine(ClusterMessage.class).getState();
    if (!clusterState.equals(ClusterState.entered)) {
      logger.getLogger().fine("Instance " + (j + 1) + " is not in the cluster ("+ clusterState+ ")");
      continue;
    }
    ClusterContext context=(ClusterContext)stateMachines.getStateMachine(ClusterMessage.class).getContext();
    HeartbeatContext heartbeatContext=(HeartbeatContext)stateMachines.getStateMachine(HeartbeatMessage.class).getContext();
    ClusterConfiguration clusterConfiguration=context.getConfiguration();
    if (!clusterConfiguration.getMemberURIs().isEmpty()) {
      logger.getLogger().fine("   Server " + (j + 1) + ": Cluster:"+ clusterConfiguration.getMemberURIs()+ ", Roles:"+ clusterConfiguration.getRoles()+ ", Failed:"+ heartbeatContext.getFailed());
      if (members == null) {
        members=clusterConfiguration.getMemberURIs();
        roles=clusterConfiguration.getRoles();
        failed=heartbeatContext.getFailed();
      }
 else {
        verifyConfigurations(stateMachines,members,roles,failed,errors);
      }
    }
  }
  assertEquals(description + ": In:" + in+ ", Out:"+ out,protocolServers.size(),Iterables.count(Iterables.<Cluster,List<Cluster>>flatten(in,out)));
  if (!errors.isEmpty()) {
    for (    AssertionError error : errors) {
      logger.getLogger().severe(error.toString());
    }
    throw errors.get(0);
  }
}
