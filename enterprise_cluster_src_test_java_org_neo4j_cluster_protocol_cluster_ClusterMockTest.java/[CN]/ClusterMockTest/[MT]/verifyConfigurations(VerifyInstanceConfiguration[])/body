{
  logger.getLogger().fine("Verify configurations against given");
  List<URI> members;
  Map<String,InstanceId> roles;
  Set<InstanceId> failed;
  List<AssertionError> errors=new LinkedList<AssertionError>();
  List<TestProtocolServer> protocolServers=network.getServers();
  assertEquals("You must provide a configuration for all instances",protocolServers.size(),toCheckAgainst.length);
  for (int j=0; j < protocolServers.size(); j++) {
    members=toCheckAgainst[j].members;
    roles=toCheckAgainst[j].roles;
    failed=toCheckAgainst[j].failed;
    StateMachines stateMachines=protocolServers.get(j).getServer().getStateMachines();
    State<?,?> clusterState=stateMachines.getStateMachine(ClusterMessage.class).getState();
    if (!clusterState.equals(ClusterState.entered)) {
      logger.getLogger().warning("Instance " + (j + 1) + " is not in the cluster ("+ clusterState+ ")");
      continue;
    }
    ClusterContext context=(ClusterContext)stateMachines.getStateMachine(ClusterMessage.class).getContext();
    HeartbeatContext heartbeatContext=(HeartbeatContext)stateMachines.getStateMachine(HeartbeatMessage.class).getContext();
    ClusterConfiguration clusterConfiguration=context.getConfiguration();
    if (!clusterConfiguration.getMemberURIs().isEmpty()) {
      logger.getLogger().fine("   Server " + (j + 1) + ": Cluster:"+ clusterConfiguration.getMemberURIs()+ ", Roles:"+ clusterConfiguration.getRoles()+ ", Failed:"+ heartbeatContext.getFailed());
      verifyConfigurations(stateMachines,members,roles,failed,errors);
    }
  }
  if (!errors.isEmpty()) {
    for (    AssertionError error : errors) {
      logger.getLogger().severe(error.toString());
    }
    throw errors.get(0);
  }
}
