{
  if (xidIdentMap.size() > 0) {
    throw new RuntimeException("Active transactions found: " + xidIdentMap.size() + ", can't make new log file");
  }
  WeakReference<MappedByteBuffer> bufferWeakRef=null;
  if (writeBuffer != null) {
    MappedByteBuffer mappedBuffer=writeBuffer.getMappedBuffer();
    if (mappedBuffer != null) {
      bufferWeakRef=new WeakReference<MappedByteBuffer>(mappedBuffer);
      mappedBuffer=null;
    }
    writeBuffer=null;
  }
  try {
    fileChannel.close();
  }
 catch (  IOException e) {
    throw new RuntimeException("Unable to close log[" + fileName + "]",e);
  }
  File file=new File(fileName);
  if (!file.exists()) {
    throw new RuntimeException("Logical log[" + fileName + "] not found");
  }
  try {
    String saveName=fileName + ".recovered-" + System.currentTimeMillis();
    file.renameTo(new File(saveName));
  }
 catch (  Exception e) {
    boolean renamed=false;
    String saveName=fileName + ".recovered-" + System.currentTimeMillis();
    try {
      renamed=file.renameTo(new File(saveName));
    }
 catch (    Exception ee) {
    }
    for (int i=0; i < 3 && !renamed; i++) {
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ee) {
      }
      try {
        System.gc();
        renamed=file.delete();
      }
 catch (      Exception ee) {
      }
    }
    if (!renamed && bufferWeakRef != null) {
      try {
        clean(bufferWeakRef.get());
        renamed=file.delete();
      }
 catch (      Exception ee) {
      }
    }
    if (!renamed) {
      throw new RuntimeException("Unable to rename recovered " + "log file[" + fileName + "]");
    }
  }
  try {
    this.open();
  }
 catch (  IOException e) {
    throw new RuntimeException("Unable to open new log[" + fileName + "]",e);
  }
}
