{
  ValueContext _localctx=new ValueContext(_ctx,getState());
  enterRule(_localctx,0,RULE_value);
  try {
    setState(66);
switch (getInterpreter().adaptivePredict(_input,0,_ctx)) {
case 1:
      enterOuterAlt(_localctx,1);
{
      setState(56);
      node();
    }
  break;
case 2:
enterOuterAlt(_localctx,2);
{
setState(57);
relationship();
}
break;
case 3:
enterOuterAlt(_localctx,3);
{
setState(58);
path();
}
break;
case 4:
enterOuterAlt(_localctx,4);
{
setState(59);
integer();
}
break;
case 5:
enterOuterAlt(_localctx,5);
{
setState(60);
floatingPoint();
}
break;
case 6:
enterOuterAlt(_localctx,6);
{
setState(61);
string();
}
break;
case 7:
enterOuterAlt(_localctx,7);
{
setState(62);
bool();
}
break;
case 8:
enterOuterAlt(_localctx,8);
{
setState(63);
nullValue();
}
break;
case 9:
enterOuterAlt(_localctx,9);
{
setState(64);
list();
}
break;
case 10:
enterOuterAlt(_localctx,10);
{
setState(65);
map();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
