{
  long modifiers=cursor.getByte();
  long firstNode=cursor.getInt() & 0xFFFFFFFFL;
  long firstNodeMod=(modifiers & FIRST_NODE_BIT) << 32;
  long secondNode=cursor.getInt() & 0xFFFFFFFFL;
  long secondNodeMod=(modifiers & SECOND_NODE_BIT) << 31;
  long firstPrevRel=cursor.getInt() & 0xFFFFFFFFL;
  long firstPrevRelMod=(modifiers & FIRST_PREV_REL_BIT) << 30;
  long firstNextRel=cursor.getInt() & 0xFFFFFFFFL;
  long firstNextRelMod=(modifiers & FIRST_NEXT_REL_BIT) << 29;
  long secondPrevRel=cursor.getInt() & 0xFFFFFFFFL;
  long secondPrevRelMod=(modifiers & SECOND_RREV_REL_BIT) << 28;
  long secondNextRel=cursor.getInt() & 0xFFFFFFFFL;
  long secondNextRelMod=(modifiers & SECOND_NEXT_REL_BIT) << 27;
  long nextProp=cursor.getInt() & 0xFFFFFFFFL;
  long nextPropMod=(modifiers & NEXT_PROP_BIT) << 26;
  record.initialize(inUse,BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(nextProp,nextPropMod),BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstNode,firstNodeMod),BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondNode,secondNodeMod),type,BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstPrevRel,firstPrevRelMod),BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstNextRel,firstNextRelMod),BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondPrevRel,secondPrevRelMod),BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondNextRel,secondNextRelMod),has(headerByte,FIRST_IN_FIRST_CHAIN_BIT),has(headerByte,FIRST_IN_SECOND_CHAIN_BIT));
}
