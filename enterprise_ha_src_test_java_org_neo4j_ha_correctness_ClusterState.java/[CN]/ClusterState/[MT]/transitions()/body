{
  final Iterator<ClusterAction> actions=pendingActions.iterator();
  final Iterator<ClusterInstance> instancesWithTimeouts=filter(HAS_TIMEOUTS,instances).iterator();
  return new PrefetchingIterator<Pair<ClusterAction,ClusterState>>(){
    @Override protected Pair<ClusterAction,ClusterState> fetchNextOrNull(){
      try {
        if (actions.hasNext()) {
          ClusterAction action=actions.next();
          return Pair.of(action,performAction(action));
        }
 else         if (instancesWithTimeouts.hasNext()) {
          ClusterInstance instance=instancesWithTimeouts.next();
          return performNextTimeoutFrom(instance);
        }
 else {
          return null;
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}
