{
  Config config=dependencyResolver.resolveDependency(Config.class);
  InternalAbstractGraphDatabase gdb=dependencyResolver.resolveDependency(InternalAbstractGraphDatabase.class);
  TransactionManager txManager=dependencyResolver.resolveDependency(TransactionManager.class);
  IndexStore indexStore=dependencyResolver.resolveDependency(IndexStore.class);
  XaFactory xaFactory=dependencyResolver.resolveDependency(XaFactory.class);
  FileSystemAbstraction fileSystemAbstraction=dependencyResolver.resolveDependency(FileSystemAbstraction.class);
  XaDataSourceManager xaDataSourceManager=dependencyResolver.resolveDependency(XaDataSourceManager.class);
  LuceneDataSource luceneDataSource=new LuceneDataSource(config,indexStore,fileSystemAbstraction,xaFactory);
  xaDataSourceManager.registerDataSource(luceneDataSource);
  IndexConnectionBroker<LuceneXaConnection> broker=config.getBoolean(Configuration.read_only) ? new ReadOnlyIndexConnectionBroker<LuceneXaConnection>(txManager) : new ConnectionBroker(txManager,luceneDataSource);
  for (Iterator<WeakReference<LuceneIndexImplementation>> iterator=previousProviders.iterator(); iterator.hasNext(); ) {
    WeakReference<LuceneIndexImplementation> previousProvider=iterator.next();
    LuceneIndexImplementation indexImplementation=previousProvider.get();
    if (indexImplementation == null)     iterator.remove();
 else     if (indexImplementation.matches(gdb))     indexImplementation.reset(luceneDataSource,broker);
  }
  LuceneIndexImplementation indexImplementation=new LuceneIndexImplementation(gdb,luceneDataSource,broker);
  previousProviders.add(new WeakReference<LuceneIndexImplementation>(indexImplementation));
  return indexImplementation;
}
