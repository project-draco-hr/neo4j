{
  this.expander=expander;
  this.uniqueness=uniqueness;
  this.expectedResult=expectedResult;
  factory=new BestFirstSelectorFactory<Integer,Integer>(interest){
    private final CostEvaluator<Integer> evaluator=CommonEvaluators.intCostEvaluator(length);
    @Override protected Integer getStartData(){
      return 0;
    }
    @Override protected Integer addPriority(    TraversalBranch source,    Integer currentAggregatedValue,    Integer value){
      return value + currentAggregatedValue;
    }
    @Override protected Integer calculateValue(    TraversalBranch next){
      return next.length() == 0 ? 0 : evaluator.getCost(next.lastRelationship(),Direction.BOTH);
    }
  }
;
}
