{
  this.addOptionDefinition("o",new OptionDefinition(OptionValueType.MUST,"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]"));
  this.addOptionDefinition("r",new OptionDefinition(OptionValueType.MUST,"The relationship type(s) expressed as a JSON string " + "(supports regex matching of the types) f.ex. " + "\"MY_REL_TYPE:out,.*_HAS_.*:both\". Matching is case-insensitive."));
  this.addOptionDefinition("f",new OptionDefinition(OptionValueType.MUST,"Filters node property keys/values. Supplied either as a single " + "value or as a JSON string where both keys and values can " + "contain regex. Starting/ending {} brackets are optional. Examples:\n"+ "\"username\"\n"+ "   nodes which has property 'username' gets listed\n"+ "\".*name: ma.*, age: ''\"\n"+ "   nodes which has any key matching '.*name' where the "+ "property value\n"+ "   for that key matches 'ma.*' AND has the 'age' property gets listed"));
  this.addOptionDefinition("i",new OptionDefinition(OptionValueType.NONE,"Filters are case-insensitive (case-sensitive by default)"));
  this.addOptionDefinition("l",new OptionDefinition(OptionValueType.NONE,"Filters matches more loosely, i.e. it's considered a match if " + "just a part of a value matches the pattern, not necessarily " + "the whole value"));
  this.addOptionDefinition("c",OPTION_DEF_FOR_C);
  this.addOptionDefinition("d",new OptionDefinition(OptionValueType.MUST,"Depth limit"));
  this.addOptionDefinition("u",new OptionDefinition(OptionValueType.MUST,"Uniqueness of the entities encountered during traversal " + niceEnumAlternatives(Uniqueness.class)));
}
