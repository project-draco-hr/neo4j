{
  assumeTrue(!osIsWindows());
  int NUMBER_OF_RECORDS=1000000;
  File storeDir=TargetDirectory.forTest(getClass()).makeGraphDbDir();
  Config config=new Config(stringMap(nodestore_mapped_memory_size.name(),mmapSize(NUMBER_OF_RECORDS,NodeStore.RECORD_SIZE),Configuration.use_memory_mapped_buffers.name(),"true",Configuration.store_dir.name(),storeDir.getPath()),NodeStore.Configuration.class);
  DefaultIdGeneratorFactory idGeneratorFactory=new DefaultIdGeneratorFactory();
  Monitors monitors=new Monitors();
  DefaultFileSystemAbstraction fileSystemAbstraction=new DefaultFileSystemAbstraction();
  PageCache pageCache=pageCacheRule.getPageCache(fileSystemAbstraction,config);
  StoreFactory storeFactory=new StoreFactory(config,idGeneratorFactory,pageCache,fileSystemAbstraction,StringLogger.DEV_NULL,new DefaultTxHook(),monitors);
  File fileName=new File(storeDir,NeoStore.DEFAULT_NAME + ".nodestore.db");
  storeFactory.createEmptyStore(fileName,storeFactory.buildTypeDescriptorAndVersion(NodeStore.TYPE_DESCRIPTOR));
  NodeStore nodeStore=new NodeStore(fileName,config,idGeneratorFactory,pageCache,fileSystemAbstraction,StringLogger.DEV_NULL,null,StoreVersionMismatchHandler.THROW_EXCEPTION,monitors);
  int iterations=2 * NUMBER_OF_RECORDS;
  long startingId=nodeStore.nextId();
  long nodeId=startingId;
  for (int i=0; i < iterations; i++) {
    NodeRecord record=new NodeRecord(nodeId,false,i,0);
    record.setInUse(true);
    nodeStore.updateRecord(record);
    nodeId=nodeStore.nextId();
  }
  NodeRecord record=new NodeRecord(0,false,0,0);
  for (int i=0; i < iterations; i++) {
    record.setId(startingId + i);
    nodeStore.getRecord(i,record);
    assertTrue("record[" + i + "] should be in use",record.inUse());
    assertThat("record[" + i + "] should have nextRelId of "+ i,record.getNextRel(),is((long)i));
  }
  nodeStore.close();
}
