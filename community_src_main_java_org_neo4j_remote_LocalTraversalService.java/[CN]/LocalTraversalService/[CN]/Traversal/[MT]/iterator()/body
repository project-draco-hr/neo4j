{
  return new Iterator<TraversalPosition>(){
    final Set<Node> visited=new HashSet<Node>();
    int returned=0;
    Position current;
    Position last=start;
    S store=initStore();
{
      visited.add(start.currentNode());
      if (shouldReturn(start)) {
        current=start;
      }
      if (shouldExpand(last)) {
        extendStore(store,new Expansion(start,types,directions));
      }
    }
    public boolean hasNext(){
      if (current != null) {
        return true;
      }
 else       if (last == null) {
        return false;
      }
 else {
        Position next=expand(last);
        if (next != null) {
          current=next;
          return true;
        }
 else {
          last=null;
          return false;
        }
      }
    }
    public TraversalPosition next(){
      if (hasNext()) {
        last=current;
        current=null;
        returned++;
        return last;
      }
 else {
        throw new NoSuchElementException();
      }
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    private Position expand(    Position position){
      Expansion expansion=current(store);
      while (expansion != null) {
        if (!expansion.hasNext()) {
          removeCurrent(store);
          expansion=current(store);
          continue;
        }
        Relationship relation=expansion.next();
        if (!visited.add(expansion.otherNode(relation))) {
          continue;
        }
        Position candidate=expansion.position(returned,relation);
        if (shouldExpand(candidate)) {
          extendStore(store,new Expansion(candidate,types,directions));
        }
        if (shouldReturn(candidate)) {
          return candidate;
        }
      }
      return null;
    }
  }
;
}
