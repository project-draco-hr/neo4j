{
  URL resourceLoc=getClass().getClassLoader().getResource("browser");
  assertNotNull(resourceLoc);
  final AtomicInteger explainCount=new AtomicInteger(0);
  final AtomicInteger executionCount=new AtomicInteger(0);
  Files.walkFileTree(Paths.get(resourceLoc.toURI()),new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attributes) throws IOException {
      final GraphDatabaseService database=new TestGraphDatabaseFactory().newImpermanentDatabase();
      String fileName=file.getFileName().toString();
      if (fileName.endsWith(".html")) {
        String content=FileUtils.readTextFile(file.toFile(),StandardCharsets.UTF_8);
        Elements cypherElements=Jsoup.parse(content).select("pre.runnable").not(".standalone-example");
        for (        Element cypherElement : cypherElements) {
          String statement=replaceAngularExpressions(cypherElement.text());
          if (!statement.startsWith(":")) {
            if (shouldExplain(statement)) {
              System.out.println(statement);
              try (Transaction transaction=database.beginTx()){
                Iterable<Notification> notifications=database.execute(prependExplain(statement)).getNotifications();
                List<Status.Statement> ignorableStatusCodes=new ArrayList<>();
                if (hasWarningInHtml(cypherElement)) {
                  ignorableStatusCodes.add(Status.Statement.CartesianProduct);
                  ignorableStatusCodes.add(Status.Statement.UnboundedPatternWarning);
                }
                List<Notification> filteredNotifications=new ArrayList<>();
                for (                Notification notification : notifications) {
                  if (!hasIgnorableNotificationCode(notification,ignorableStatusCodes)) {
                    filteredNotifications.add(notification);
                  }
                }
                assertThat(format("Query [%s] should only produce %s notifications. [%s]",ignorableStatusCodes,statement,fileName),filteredNotifications,empty());
                explainCount.incrementAndGet();
                transaction.success();
              }
 catch (              QueryExecutionException e) {
                throw new AssertionError(format("Failed to explain query [%s] in file [%s]",statement,file),e);
              }
            }
            try (Transaction transaction=database.beginTx()){
              database.execute(statement);
              executionCount.incrementAndGet();
              transaction.success();
            }
 catch (            QueryExecutionException e) {
              throw new AssertionError(format("Failed to execute query [%s] in file [%s]",statement,file),e);
            }
          }
        }
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
  assertTrue("Static files should contain at least one valid cypher statement",executionCount.intValue() >= 1);
  System.out.printf("Explained %s cypher statements extracted from HTML files, with no notifications.%n",explainCount);
  System.out.printf("Executed %s cypher statements extracted from HTML files, with no errors.%n",executionCount);
}
