{
  int vNodePropCount=verifyProperties(node,otherNode);
  int vNodeIndexProviderProCount=verifyIndexProvider(node,otherNode,refDb,otherDb);
  Set<Long> otherRelIds=new HashSet<Long>();
  for (  Relationship otherRel : otherNode.getRelationships(Direction.OUTGOING)) {
    otherRelIds.add(otherRel.getId());
  }
  int vRelCount=0;
  int vRelPropCount=0;
  for (  Relationship rel : node.getRelationships(Direction.OUTGOING)) {
    Relationship otherRel=otherDb.getRelationshipById(rel.getId());
    vRelPropCount+=verifyProperties(rel,otherRel);
    if (rel.getStartNode().getId() != otherRel.getStartNode().getId()) {
      throw new RuntimeException("Start node differs on " + rel);
    }
    if (rel.getEndNode().getId() != otherRel.getEndNode().getId()) {
      throw new RuntimeException("End node differs on " + rel);
    }
    if (!rel.getType().name().equals(otherRel.getType().name())) {
      throw new RuntimeException("Type differs on " + rel);
    }
    otherRelIds.remove(rel.getId());
    vRelCount++;
  }
  if (!otherRelIds.isEmpty()) {
    fail("Other node " + otherNode + " has more relationships "+ otherRelIds);
  }
  return new int[]{vRelCount,vNodePropCount,vRelPropCount,-1,vNodeIndexProviderProCount};
}
