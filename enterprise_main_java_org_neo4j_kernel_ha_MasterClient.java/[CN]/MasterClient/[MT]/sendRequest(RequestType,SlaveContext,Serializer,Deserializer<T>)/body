{
  try {
    ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
    buffer.writeByte(type.ordinal());
    if (type.includesSlaveContext()) {
      writeSlaveContext(buffer,slaveContext);
    }
    serializer.write(buffer);
    Channel channel=getChannel();
    ((InputReader)channel.getPipeline().get("transactionReader")).setDeserializer(deserializer);
    channel.write(buffer);
    @SuppressWarnings("unchecked") BlockingReadHandler<Response<T>> reader=(BlockingReadHandler<Response<T>>)channel.getPipeline().get("blockingHandler");
    Response<T> result=reader.read(20,TimeUnit.SECONDS);
    if (result == null) {
      throw new HaCommunicationException("Channel has been closed");
    }
    return result;
  }
 catch (  IOException e) {
    throw new HaCommunicationException(e);
  }
catch (  InterruptedException e) {
    throw new HaCommunicationException(e);
  }
catch (  Exception e) {
    throw new HaCommunicationException(e);
  }
}
