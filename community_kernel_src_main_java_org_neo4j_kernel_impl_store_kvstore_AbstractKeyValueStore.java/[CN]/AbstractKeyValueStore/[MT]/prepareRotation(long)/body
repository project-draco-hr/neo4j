{
  try (LockWrapper ignored=writeLock(updateLock)){
    ProgressiveState<Key> prior=state;
    if (prior.storedVersion() == version && !prior.hasChanges()) {
      return new PreparedRotation(){
        @Override public long rotate() throws IOException {
          return version;
        }
      }
;
    }
    final RotationState<Key> rotation=prior.prepareRotation(version);
    state=rotation;
    return new PreparedRotation(){
      @Override public long rotate() throws IOException {
        final long version=rotation.version();
        ProgressiveState<Key> next=rotation.rotate(rotationStrategy,new Consumer<Headers.Builder>(){
          @Override public void accept(          Headers.Builder value){
            updateHeaders(value,version);
          }
        }
);
        try (LockWrapper ignored=writeLock(updateLock)){
          state=next;
        }
  finally {
          rotation.close();
        }
        return version;
      }
    }
;
  }
 }
