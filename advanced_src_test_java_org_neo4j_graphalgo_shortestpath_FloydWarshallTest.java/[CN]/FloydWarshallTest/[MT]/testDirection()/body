{
  graph.makeEdge("a","b");
  graph.makeEdge("b","c");
  graph.makeEdge("c","d");
  graph.makeEdge("d","a");
  graph.makeEdge("s","a");
  graph.makeEdge("b","s");
  graph.makeEdge("e","c");
  graph.makeEdge("d","e");
  new FloydWarshall<Double>(0.0,Double.MAX_VALUE,Direction.OUTGOING,new CostEvaluator<Double>(){
    public Double getCost(    Relationship relationship,    boolean backwards){
      assertFalse(backwards);
      return 1.0;
    }
  }
,new org.neo4j.graphalgo.shortestpath.std.DoubleAdder(),new org.neo4j.graphalgo.shortestpath.std.DoubleComparator(),graph.getAllNodes(),graph.getAllEdges()).calculate();
  new FloydWarshall<Double>(0.0,Double.MAX_VALUE,Direction.INCOMING,new CostEvaluator<Double>(){
    public Double getCost(    Relationship relationship,    boolean backwards){
      assertTrue(backwards);
      return 1.0;
    }
  }
,new org.neo4j.graphalgo.shortestpath.std.DoubleAdder(),new org.neo4j.graphalgo.shortestpath.std.DoubleComparator(),graph.getAllNodes(),graph.getAllEdges()).calculate();
}
