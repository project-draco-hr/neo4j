{
  txState.accept(new TxState.VisitorAdapter(){
    @Override public void visitCreatedNode(    long id){
      NodeImpl node=nodeCache.getIfCached(id);
      if (node instanceof NodeImplReservation) {
        nodeCache.put(node=new NodeImpl(id),true);
      }
    }
    @Override public void visitNodePropertyChanges(    long id,    Iterator<DefinedProperty> added,    Iterator<DefinedProperty> changed,    Iterator<Integer> removed){
      NodeImpl node=nodeCache.getIfCached(id);
      if (node != null) {
        node.commitPropertyMaps(translateAddedAndChangedProperties(added,changed),removed);
      }
    }
    @Override public void visitNodeRelationshipChanges(    long id,    RelationshipChangesForNode added,    RelationshipChangesForNode removed){
      NodeImpl node=nodeCache.getIfCached(id);
      if (node != null) {
        node.commitRelationshipMaps(translateAddedRelationships(added),translateRemovedRelationships(removed));
      }
    }
    @Override public void visitRelPropertyChanges(    long id,    Iterator<DefinedProperty> added,    Iterator<DefinedProperty> changed,    Iterator<Integer> removed){
      RelationshipImpl relationship=relationshipCache.getIfCached(id);
      if (relationship != null) {
        relationship.commitPropertyMaps(translateAddedAndChangedProperties(added,changed),removed);
      }
    }
    @Override public void visitGraphPropertyChanges(    Iterator<DefinedProperty> added,    Iterator<DefinedProperty> changed,    Iterator<Integer> removed){
      graphProperties.commitPropertyMaps(translateAddedAndChangedProperties(added,changed),removed);
    }
    private PrimitiveIntObjectMap<DefinedProperty> translateAddedAndChangedProperties(    Iterator<DefinedProperty> added,    Iterator<DefinedProperty> changed){
      if (added == null && changed == null) {
        return null;
      }
      PrimitiveIntObjectMap<DefinedProperty> result=org.neo4j.collection.primitive.Primitive.intObjectMap();
      translateProperties(added,result);
      translateProperties(changed,result);
      return result;
    }
    private void translateProperties(    Iterator<DefinedProperty> properties,    PrimitiveIntObjectMap<DefinedProperty> result){
      if (properties != null) {
        while (properties.hasNext()) {
          DefinedProperty property=properties.next();
          result.put(property.propertyKeyId(),property);
        }
      }
    }
    private PrimitiveIntObjectMap<RelIdArray> translateAddedRelationships(    RelationshipChangesForNode added){
      if (added == null) {
        return null;
      }
      PrimitiveIntObjectMap<RelIdArray> result=org.neo4j.collection.primitive.Primitive.intObjectMap();
      PrimitiveIntIterator types=added.getTypesChanged();
      while (types.hasNext()) {
        int type=types.next();
        Iterator<Long> loopsChanges=added.loopsChanges(type);
        RelIdArray idArray=loopsChanges == null ? new RelIdArray(type) : new RelIdArrayWithLoops(type);
        addIds(idArray,added.outgoingChanges(type),DirectionWrapper.OUTGOING);
        addIds(idArray,added.incomingChanges(type),DirectionWrapper.INCOMING);
        addIds(idArray,loopsChanges,DirectionWrapper.BOTH);
        result.put(type,idArray);
      }
      return result;
    }
    private void addIds(    RelIdArray idArray,    Iterator<Long> ids,    DirectionWrapper direction){
      if (ids != null) {
        while (ids.hasNext()) {
          idArray.add(ids.next(),direction);
        }
      }
    }
    private PrimitiveIntObjectMap<PrimitiveLongSet> translateRemovedRelationships(    RelationshipChangesForNode removed){
      if (removed == null) {
        return null;
      }
      PrimitiveIntObjectMap<PrimitiveLongSet> result=org.neo4j.collection.primitive.Primitive.intObjectMap();
      PrimitiveIntIterator types=removed.getTypesChanged();
      while (types.hasNext()) {
        int type=types.next();
        PrimitiveLongSet ids=org.neo4j.collection.primitive.Primitive.longSet();
        addIds(ids,removed.outgoingChanges(type));
        addIds(ids,removed.incomingChanges(type));
        addIds(ids,removed.loopsChanges(type));
      }
      return result;
    }
    private void addIds(    PrimitiveLongSet set,    Iterator<Long> ids){
      if (ids != null) {
        while (ids.hasNext()) {
          set.add(ids.next());
        }
      }
    }
  }
);
}
