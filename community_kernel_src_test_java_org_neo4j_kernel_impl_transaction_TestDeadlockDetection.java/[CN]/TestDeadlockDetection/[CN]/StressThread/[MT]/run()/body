{
  try {
    while (!go) {
      try {
        sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    java.util.Stack<Object> lockStack=new java.util.Stack<Object>();
    java.util.Stack<ResourceObject> resourceStack=new java.util.Stack<ResourceObject>();
    try {
      for (int i=0; i < numberOfIterations; i++) {
        int depth=depthCount;
        do {
          float f=rand.nextFloat();
          int n=rand.nextInt(resources.length);
          if (f < readWriteRatio) {
            lm.getReadLock(resources[n]);
            lockStack.push(READ);
          }
 else {
            lm.getWriteLock(resources[n]);
            lockStack.push(WRITE);
          }
          resourceStack.push(resources[n]);
        }
 while (--depth > 0);
        while (!lockStack.isEmpty()) {
          if (lockStack.pop() == READ) {
            lm.releaseReadLock(resourceStack.pop(),null);
          }
 else {
            lm.releaseWriteLock(resourceStack.pop(),null);
          }
        }
      }
    }
 catch (    DeadlockDetectedException e) {
    }
 finally {
      while (!lockStack.isEmpty()) {
        if (lockStack.pop() == READ) {
          lm.releaseReadLock(resourceStack.pop(),null);
        }
 else {
          lm.releaseWriteLock(resourceStack.pop(),null);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
