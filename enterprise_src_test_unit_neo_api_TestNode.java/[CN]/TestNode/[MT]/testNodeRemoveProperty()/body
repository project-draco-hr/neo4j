{
  try {
    String key1="key1";
    String key2="key2";
    Integer int1=new Integer(1);
    Integer int2=new Integer(2);
    String string1=new String("1");
    String string2=new String("2");
    Node node1=NodeManager.getManager().createNode();
    Node node2=NodeManager.getManager().createNode();
    try {
      node1.removeProperty(key1);
      fail("Remove of non existing property should throw exception.");
    }
 catch (    NotFoundException e) {
    }
    try {
      node1.removeProperty(null);
      fail("Remove null property should throw exception.");
    }
 catch (    NotFoundException e) {
    }
    node1.setProperty(key1,int1);
    node2.setProperty(key1,string1);
    node1.setProperty(key2,string2);
    node2.setProperty(key2,int2);
    try {
      node1.removeProperty(null);
      fail("Null argument should result in exception.");
    }
 catch (    NotFoundException e) {
    }
    assertEquals(int1,node1.removeProperty(key1));
    assertEquals(string1,node2.removeProperty(key1));
    try {
      node2.removeProperty(key1);
      fail("Remove of non existing property should fail.");
    }
 catch (    NotFoundException e) {
      try {
        TransactionFactory.getUserTransaction().setRollbackOnly();
      }
 catch (      javax.transaction.SystemException se) {
        fail("Mark as rollback only failed. " + se);
      }
    }
  }
 catch (  NotFoundException e) {
    fail("" + e);
  }
catch (  IllegalValueException e) {
    fail("" + e);
  }
}
