{
  final Node commonNode;
  try (Transaction tx=slave1.beginTx()){
    commonNode=slave1.createNode();
    tx.success();
  }
   OtherThreadExecutor<HighlyAvailableGraphDatabase> thread2=new OtherThreadExecutor<>("T2",slave2);
  Transaction tx1=slave1.beginTx();
  Transaction tx2=thread2.execute(new BeginTx());
  tx1.acquireReadLock(commonNode);
  thread2.execute(new AcquireReadLockOnReferenceNode(tx2,commonNode));
  Future<Lock> writeLockFuture=thread2.executeDontWait(new AcquireWriteLock(tx2,new Callable<Node>(){
    @Override public Node call() throws Exception {
      return commonNode;
    }
  }
));
  for (int i=0; i < 10; i++) {
    thread2.waitUntilThreadState(Thread.State.TIMED_WAITING,Thread.State.WAITING);
    Thread.sleep(2);
  }
  try {
    tx1.acquireWriteLock(commonNode);
    writeLockFuture.get();
    fail("Deadlock exception should have been thrown");
  }
 catch (  DeadlockDetectedException e) {
  }
 finally {
    tx1.close();
  }
  thread2.execute(new FinishTx(tx2,true));
  thread2.close();
}
