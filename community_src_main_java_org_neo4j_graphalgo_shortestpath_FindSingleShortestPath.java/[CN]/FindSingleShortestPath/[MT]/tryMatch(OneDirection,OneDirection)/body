{
  if (!direction.iterator.hasNext()) {
    return false;
  }
  Node node=direction.iterator.next();
  if (otherDirection.path.containsKey(node)) {
    matchNode=node;
    doneCalculation=true;
    return true;
  }
  if (direction.currentDepth + 1 <= direction.depth) {
    for (int i=0; i < relTypesAndDirections.length / 2; i++) {
      RelationshipType type=(RelationshipType)relTypesAndDirections[i * 2];
      Direction dir=(Direction)relTypesAndDirections[i * 2 + 1];
      for (      Relationship rel : node.getRelationships(type,dir)) {
        Node otherNode=rel.getOtherNode(node);
        Relationship oldRel=direction.path.put(otherNode,rel);
        if (oldRel == null) {
          direction.nextNodeList.add(otherNode);
        }
 else {
          direction.path.put(otherNode,oldRel);
        }
      }
    }
  }
  return false;
}
