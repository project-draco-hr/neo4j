{
  StageControl control=mock(StageControl.class);
  final CountDownLatch latch=new CountDownLatch(1);
  final ProcessorStep<Void> step=new BlockingProcessorStep(control,0,latch);
  step.start(ORDER_SEND_DOWNSTREAM);
  step.processors(2);
  for (int i=0; i < step.processors(0) + 1; i++) {
    step.receive(i,null);
  }
  Future<Void> receiveFuture=t2.execute(new WorkerCommand<Void,Void>(){
    @Override public Void doWork(    Void state) throws Exception {
      step.receive(step.processors(0),null);
      return null;
    }
  }
);
  t2.get().waitUntilThreadState(Thread.State.TIMED_WAITING);
  latch.countDown();
  receiveFuture.get();
}
