{
  final Node root=tx(new Callable<Node>(){
    @Override public Node call() throws Exception {
      return graphdb.createNode();
    }
  }
);
  final Node original=tx(new Callable<Node>(){
    @Override public Node call() throws Exception {
      Node node=graphdb.createNode();
      node.setProperty("key","original");
      return node;
    }
  }
);
  final CountDownLatch removerSetUp=latch(), waitChainSetUp=latch();
  txThread("remover",new Runnable(){
    @Override public void run(){
      original.removeProperty("key");
      removerSetUp.countDown();
      await(waitChainSetUp);
    }
  }
);
  await(removerSetUp);
  clearCaches();
  awaitWaitingState(txThread("blocker",new Runnable(){
    @Override public void run(){
      original.removeProperty("not existing");
      root.setProperty("key","root");
    }
  }
));
  clearCaches();
  final AtomicBoolean precondition=new AtomicBoolean(false);
  final CountDownLatch readyToBlockOnLock=latch(), done=latch();
  Thread offender=thread("offender",new Runnable(){
    @Override public void run(){
      try {
        tx(new Runnable(){
          @Override public void run(){
            precondition.set("original".equals(original.getProperty("key")));
            readyToBlockOnLock.countDown();
            original.removeProperty("key");
          }
        }
);
      }
  finally {
        done.countDown();
      }
    }
  }
);
  await(readyToBlockOnLock);
  awaitWaitingState(offender);
  clearCaches();
  waitChainSetUp.countDown();
  await(done);
  clearCaches();
  assertThat(root,inTx(graphdb,hasProperty("key")));
  assertTrue("invalid precondition",precondition.get());
}
