{
  final Node root=graphdb.getReferenceNode();
  tx(new Runnable(){
    @Override public void run(){
      root.setProperty("tx","main");
      root.setProperty("a",1);
      root.setProperty("b",2);
      root.setProperty("c",3);
      root.setProperty("d",4);
    }
  }
);
  final CountDownLatch writerSetUp=latch(), waitChainSetUp=latch();
  txThread("writer",new Runnable(){
    @Override public void run(){
      root.setProperty("e",5);
      writerSetUp.countDown();
      await(waitChainSetUp);
      root.setProperty("tx","writer");
    }
  }
);
  await(writerSetUp);
  awaitWaitingState(txThread("remover",new Runnable(){
    @Override public void run(){
      root.removeProperty("tx");
    }
  }
));
  clearCaches();
  final AtomicBoolean precondition=new AtomicBoolean(false);
  final CountDownLatch offenderSetUp=latch(), done=latch();
  Thread offender=thread("offender",new Runnable(){
    @Override public void run(){
      try {
        tx(new Runnable(){
          @Override public void run(){
            for (            @SuppressWarnings("unused") String key : root.getPropertyKeys())             precondition.set(true);
            offenderSetUp.countDown();
            root.setProperty("tx","offender");
          }
        }
);
      }
  finally {
        done.countDown();
      }
    }
  }
);
  await(offenderSetUp);
  awaitWaitingState(offender);
  clearCaches();
  waitChainSetUp.countDown();
  await(done);
  clearCaches();
  assertThat(root,inTx(graphdb,hasProperty("tx").withValue("offender")));
  assertTrue("node should not have any properties when entering second tx",precondition.get());
}
