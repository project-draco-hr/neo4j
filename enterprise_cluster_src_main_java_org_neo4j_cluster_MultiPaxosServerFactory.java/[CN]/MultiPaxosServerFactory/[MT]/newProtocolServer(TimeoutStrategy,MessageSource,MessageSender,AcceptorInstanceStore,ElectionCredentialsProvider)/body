{
  LatencyCalculator latencyCalculator=new LatencyCalculator(timeoutStrategy,input);
  DelayedDirectExecutor executor=new DelayedDirectExecutor();
  ConnectedStateMachines connectedStateMachines=new ConnectedStateMachines(input,output,latencyCalculator,executor);
  Timeouts timeouts=connectedStateMachines.getTimeouts();
  connectedStateMachines.addMessageProcessor(latencyCalculator);
  AcceptorContext acceptorContext=new AcceptorContext(logging,acceptorInstanceStore);
  LearnerContext learnerContext=new LearnerContext();
  ProposerContext proposerContext=new ProposerContext();
  final ClusterContext clusterContext=new ClusterContext(proposerContext,learnerContext,new ClusterConfiguration(initialConfig.getName(),initialConfig.getMembers()),timeouts,executor,logging);
  final HeartbeatContext heartbeatContext=new HeartbeatContext(clusterContext,learnerContext,executor);
  final MultiPaxosContext context=new MultiPaxosContext(clusterContext,proposerContext,learnerContext,heartbeatContext,timeouts);
  ElectionContext electionContext=new ElectionContext(Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(ClusterConfiguration.COORDINATOR)),clusterContext,heartbeatContext);
  SnapshotContext snapshotContext=new SnapshotContext(clusterContext,learnerContext);
  AtomicBroadcastContext atomicBroadcastContext=new AtomicBroadcastContext(clusterContext,executor);
  connectedStateMachines.addStateMachine(new StateMachine(atomicBroadcastContext,AtomicBroadcastMessage.class,AtomicBroadcastState.start));
  connectedStateMachines.addStateMachine(new StateMachine(acceptorContext,AcceptorMessage.class,AcceptorState.start));
  connectedStateMachines.addStateMachine(new StateMachine(context,ProposerMessage.class,ProposerState.start));
  connectedStateMachines.addStateMachine(new StateMachine(context,LearnerMessage.class,LearnerState.start));
  connectedStateMachines.addStateMachine(new StateMachine(heartbeatContext,HeartbeatMessage.class,HeartbeatState.start));
  connectedStateMachines.addStateMachine(new StateMachine(electionContext,ElectionMessage.class,ElectionState.start));
  connectedStateMachines.addStateMachine(new StateMachine(snapshotContext,SnapshotMessage.class,SnapshotState.start));
  connectedStateMachines.addStateMachine(new StateMachine(clusterContext,ClusterMessage.class,ClusterState.start));
  final ProtocolServer server=new ProtocolServer(connectedStateMachines,logging);
  server.addBindingListener(new BindingListener(){
    @Override public void listeningAt(    URI me){
      clusterContext.setMe(me);
    }
  }
);
  connectedStateMachines.addMessageProcessor(new HeartbeatRefreshProcessor(connectedStateMachines.getOutgoing()));
  input.addMessageProcessor(new HeartbeatIAmAliveProcessor(connectedStateMachines.getOutgoing()));
  server.newClient(Cluster.class).addClusterListener(new HeartbeatJoinListener(connectedStateMachines.getOutgoing()));
  heartbeatContext.addHeartbeatListener(new HeartbeatFailedReelectionListener(server.newClient(Election.class)));
  clusterContext.addClusterListener(new ClusterLeaveReelectionListener(server.newClient(Election.class)));
  electionContext.setElectionCredentialsProvider(electionCredentialsProvider);
  StateMachineRules rules=new StateMachineRules(connectedStateMachines.getOutgoing()).rule(ClusterState.start,ClusterMessage.create,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.created),internal(SnapshotMessage.join)).rule(ClusterState.acquiringConfiguration,ClusterMessage.configurationResponse,ClusterState.joining,internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(AtomicBroadcastMessage.join)).rule(ClusterState.acquiringConfiguration,ClusterMessage.configurationResponse,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.join),internal(SnapshotMessage.join)).rule(ClusterState.joining,ClusterMessage.configurationChanged,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.join),internal(SnapshotMessage.join)).rule(ClusterState.joining,ClusterMessage.joinFailure,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.entered,ClusterMessage.leave,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(SnapshotMessage.leave),internal(ElectionMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.entered,ClusterMessage.leave,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.leaving,ClusterMessage.configurationChanged,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.leaving,ClusterMessage.leaveTimedout,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave));
  connectedStateMachines.addStateTransitionListener(rules);
  return server;
}
