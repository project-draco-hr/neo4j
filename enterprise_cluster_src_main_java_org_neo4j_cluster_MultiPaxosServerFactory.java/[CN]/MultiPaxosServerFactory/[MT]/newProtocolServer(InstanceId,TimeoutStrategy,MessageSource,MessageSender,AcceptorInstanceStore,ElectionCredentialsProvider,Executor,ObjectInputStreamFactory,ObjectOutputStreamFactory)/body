{
  DelayedDirectExecutor executor=new DelayedDirectExecutor();
  StateMachines stateMachines=new StateMachines(input,output,timeoutStrategy,executor,stateMachineExecutor,me);
  Timeouts timeouts=stateMachines.getTimeouts();
  final MultiPaxosContext context=new MultiPaxosContext(me,Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(ClusterConfiguration.COORDINATOR)),new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs()),executor,logging,objectInputStreamFactory,objectOutputStreamFactory,acceptorInstanceStore,timeouts);
  SnapshotContext snapshotContext=new SnapshotContext(context.getClusterContext(),context.getLearnerContext());
  stateMachines.addStateMachine(new StateMachine(context.getAtomicBroadcastContext(),AtomicBroadcastMessage.class,AtomicBroadcastState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getAcceptorContext(),AcceptorMessage.class,AcceptorState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getProposerContext(),ProposerMessage.class,ProposerState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getLearnerContext(),LearnerMessage.class,LearnerState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getHeartbeatContext(),HeartbeatMessage.class,HeartbeatState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getElectionContext(),ElectionMessage.class,ElectionState.start,logging));
  stateMachines.addStateMachine(new StateMachine(snapshotContext,SnapshotMessage.class,SnapshotState.start,logging));
  stateMachines.addStateMachine(new StateMachine(context.getClusterContext(),ClusterMessage.class,ClusterState.start,logging));
  final ProtocolServer server=new ProtocolServer(me,stateMachines,logging);
  server.addBindingListener(new BindingListener(){
    @Override public void listeningAt(    URI me){
      context.getClusterContext().setBoundAt(me);
    }
  }
);
  stateMachines.addMessageProcessor(new HeartbeatRefreshProcessor(stateMachines.getOutgoing(),context.getClusterContext()));
  input.addMessageProcessor(new HeartbeatIAmAliveProcessor(stateMachines.getOutgoing(),context.getClusterContext()));
  server.newClient(Cluster.class).addClusterListener(new HeartbeatJoinListener(stateMachines.getOutgoing()));
  context.getHeartbeatContext().addHeartbeatListener(new HeartbeatReelectionListener(server.newClient(Election.class),logging.getMessagesLog(ClusterLeaveReelectionListener.class)));
  context.getClusterContext().addClusterListener(new ClusterLeaveReelectionListener(server.newClient(Election.class),logging.getMessagesLog(ClusterLeaveReelectionListener.class)));
  context.getElectionContext().setElectionCredentialsProvider(electionCredentialsProvider);
  StateMachineRules rules=new StateMachineRules(stateMachines.getOutgoing()).rule(ClusterState.start,ClusterMessage.create,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.created),internal(SnapshotMessage.join)).rule(ClusterState.discovery,ClusterMessage.configurationResponse,ClusterState.joining,internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(AtomicBroadcastMessage.join)).rule(ClusterState.discovery,ClusterMessage.configurationResponse,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.join),internal(SnapshotMessage.join)).rule(ClusterState.joining,ClusterMessage.configurationChanged,ClusterState.entered,internal(AtomicBroadcastMessage.entered),internal(ProposerMessage.join),internal(AcceptorMessage.join),internal(LearnerMessage.join),internal(HeartbeatMessage.join),internal(ElectionMessage.join),internal(SnapshotMessage.join)).rule(ClusterState.joining,ClusterMessage.joinFailure,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.entered,ClusterMessage.leave,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(SnapshotMessage.leave),internal(ElectionMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.entered,ClusterMessage.leave,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.leaving,ClusterMessage.configurationChanged,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave)).rule(ClusterState.leaving,ClusterMessage.leaveTimedout,ClusterState.start,internal(AtomicBroadcastMessage.leave),internal(AcceptorMessage.leave),internal(LearnerMessage.leave),internal(HeartbeatMessage.leave),internal(ElectionMessage.leave),internal(SnapshotMessage.leave),internal(ProposerMessage.leave));
  stateMachines.addStateTransitionListener(rules);
  return server;
}
