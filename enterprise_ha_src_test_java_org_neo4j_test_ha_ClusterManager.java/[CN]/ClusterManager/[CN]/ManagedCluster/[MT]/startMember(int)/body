{
  Clusters.Member member=spec.getMembers().get(serverId - 1);
  StringBuilder initialHosts=new StringBuilder(spec.getMembers().get(0).getHost());
  for (int i=1; i < spec.getMembers().size(); i++)   initialHosts.append(",").append(spec.getMembers().get(i).getHost());
  File parent=new File(root,name);
  URI clusterUri=new URI("cluster://" + member.getHost());
  if (member.isFullHaMember()) {
    int clusterPort=clusterUri.getPort();
    int haPort=clusterUri.getPort() + 3000;
    GraphDatabaseBuilder graphDatabaseBuilder=new HighlyAvailableGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(new File(parent,"server" + serverId).getAbsolutePath()).setConfig(ClusterSettings.cluster_name,name).setConfig(ClusterSettings.initial_hosts,initialHosts.toString()).setConfig(ClusterSettings.server_id,serverId + "").setConfig(ClusterSettings.cluster_server,"0.0.0.0:" + clusterPort).setConfig(HaSettings.ha_server,":" + haPort).setConfig(OnlineBackupSettings.online_backup_enabled,Settings.FALSE).setConfig(commonConfig);
    if (instanceConfig.containsKey(serverId)) {
      graphDatabaseBuilder.setConfig(instanceConfig.get(serverId));
    }
    config(graphDatabaseBuilder,name,serverId);
    final HighlyAvailableGraphDatabaseProxy graphDatabase=new HighlyAvailableGraphDatabaseProxy(graphDatabaseBuilder);
    members.put(serverId,graphDatabase);
    life.add(new LifecycleAdapter(){
      @Override public void stop() throws Throwable {
        graphDatabase.get().shutdown();
      }
    }
);
  }
 else {
    Map<String,String> config=MapUtil.stringMap(ClusterSettings.cluster_name.name(),name,ClusterSettings.initial_hosts.name(),initialHosts.toString(),ClusterSettings.server_id.name(),serverId + "",ClusterSettings.cluster_server.name(),"0.0.0.0:" + clusterUri.getPort(),GraphDatabaseSettings.store_dir.name(),new File(parent,"arbiter" + serverId).getAbsolutePath());
    Config config1=new Config(config);
    Logging clientLogging=life.add(new LogbackService(config1,(LoggerContext)StaticLoggerBinder.getSingleton().getLoggerFactory()));
    ObjectStreamFactory objectStreamFactory=new ObjectStreamFactory();
    life.add(new FutureLifecycleAdapter<ClusterClient>(new ClusterClient(ClusterClient.adapt(config1),clientLogging,new NotElectableElectionCredentialsProvider(),objectStreamFactory,objectStreamFactory)));
  }
}
