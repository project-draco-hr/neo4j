{
  Clusters.Member member=spec.getMembers().get(serverId - 1);
  int haPort=new URI("cluster://" + member.getHost()).getPort() + 3000;
  GraphDatabaseBuilder graphDatabaseBuilder=new HighlyAvailableGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(new File(new File(root,name),"server" + serverId).getAbsolutePath()).setConfig(ClusterSettings.cluster_name,name).setConfig(ClusterSettings.initial_hosts,spec.getMembers().get(0).getHost()).setConfig(ClusterSettings.cluster_server,member.getHost()).setConfig(HaSettings.server_id,serverId + "").setConfig(HaSettings.ha_server,":" + haPort).setConfig(commonConfig);
  config(graphDatabaseBuilder,name,serverId);
  final GraphDatabaseService graphDatabase=graphDatabaseBuilder.newGraphDatabase();
  members.put(serverId,(HighlyAvailableGraphDatabase)graphDatabase);
  life.add(new LifecycleAdapter(){
    @Override public void stop() throws Throwable {
      graphDatabase.shutdown();
    }
  }
);
}
