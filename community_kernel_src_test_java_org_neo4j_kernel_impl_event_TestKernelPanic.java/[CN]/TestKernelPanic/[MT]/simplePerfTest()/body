{
  File dir=TargetDirectory.forTest(getClass()).cleanDirectory("foobar");
  final GraphDatabaseService db=new GraphDatabaseFactory().newEmbeddedDatabase(dir.getAbsolutePath());
  ExecutorService es=Executors.newFixedThreadPool(6);
  final Random r=new Random();
  final List<Node> nodes=new ArrayList<>(300);
  try (org.neo4j.graphdb.Transaction tx=db.beginTx()){
    for (int i=0; i < 300; i++) {
      nodes.add(db.createNode());
    }
    tx.success();
  }
   long startedAt=System.currentTimeMillis();
  final CountDownLatch cdl=new CountDownLatch(COUNT);
  for (int i=0; i < COUNT; i++) {
    es.execute(new Runnable(){
      @Override public void run(){
        try (org.neo4j.graphdb.Transaction tx=db.beginTx()){
          for (int j=0; j < 400; j++) {
            Node node1=nodes.get(r.nextInt(100));
            Node node2=nodes.get(r.nextInt(100));
            node1.createRelationshipTo(node2,DynamicRelationshipType.withName("foo"));
          }
          tx.success();
        }
  finally {
          cdl.countDown();
        }
      }
    }
);
  }
  cdl.await();
  es.shutdown();
  System.out.println("Took " + (System.currentTimeMillis() - startedAt));
}
