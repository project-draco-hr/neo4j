{
  this.filesystemFacade=config.get(Configuration.ephemeral) ? LuceneFilesystemFacade.MEMORY : LuceneFilesystemFacade.FS;
  indexSearchers=new IndexClockCache(config.get(Configuration.lucene_searcher_cache_size));
  caching=new Cache();
  File storeDir=config.get(Configuration.store_dir);
  this.baseStorePath=this.filesystemFacade.ensureDirectoryExists(new File(storeDir,"index"));
  this.filesystemFacade.cleanWriteLocks(baseStorePath);
  boolean allowUpgrade=config.get(Configuration.allow_store_upgrade);
  this.providerStore=newIndexStore(baseStorePath,fileSystemAbstraction,allowUpgrade);
  this.typeCache=new IndexTypeCache(indexStore);
  boolean isReadOnly=config.get(Configuration.read_only);
  nodeEntityType=new EntityType(){
    @Override public Document newDocument(    Object entityId){
      return IndexType.newBaseDocument((Long)entityId);
    }
    @Override public Class<? extends PropertyContainer> getType(){
      return Node.class;
    }
  }
;
  relationshipEntityType=new EntityType(){
    @Override public Document newDocument(    Object entityId){
      RelationshipId relId=(RelationshipId)entityId;
      Document doc=IndexType.newBaseDocument(relId.id);
      doc.add(new Field(LuceneIndex.KEY_START_NODE_ID,"" + relId.startNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      doc.add(new Field(LuceneIndex.KEY_END_NODE_ID,"" + relId.endNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      return doc;
    }
    @Override public Class<? extends PropertyContainer> getType(){
      return Relationship.class;
    }
  }
;
  XaCommandFactory cf=new LuceneCommandFactory();
  XaTransactionFactory tf=new LuceneTransactionFactory();
  DependencyResolver dummy=new DependencyResolver(){
    @Override public <T>T resolveDependency(    Class<T> type) throws IllegalArgumentException {
      return (T)LuceneDataSource.this.config;
    }
  }
;
  xaContainer=xaFactory.newXaContainer(this,new File(this.baseStorePath,"lucene.log"),cf,tf,TransactionStateFactory.noStateFactory(null),new TransactionInterceptorProviders(new HashSet<TransactionInterceptorProvider>(),dummy));
  closed=false;
  if (!isReadOnly) {
    try {
      xaContainer.openLogicalLog();
    }
 catch (    IOException e) {
      throw new RuntimeException("Unable to open lucene log in " + this.baseStorePath,e);
    }
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
}
