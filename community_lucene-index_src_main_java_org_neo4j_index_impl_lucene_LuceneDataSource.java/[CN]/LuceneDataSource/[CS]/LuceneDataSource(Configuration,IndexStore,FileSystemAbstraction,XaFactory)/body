{
  super(DEFAULT_BRANCH_ID,DEFAULT_NAME);
  indexSearchers=new IndexSearcherLruCache(config.lucene_searcher_cache_size(Integer.MAX_VALUE));
  indexWriters=new IndexWriterLruCache(config.lucene_writer_cache_size(Integer.MAX_VALUE));
  caching=new Cache();
  String storeDir=config.store_dir();
  this.baseStorePath=getStoreDir(storeDir).first();
  cleanWriteLocks(baseStorePath);
  this.indexStore=indexStore;
  boolean allowUpgrade=config.allow_store_upgrade(false);
  this.providerStore=newIndexStore(storeDir,fileSystemAbstraction,allowUpgrade);
  this.typeCache=new IndexTypeCache(indexStore);
  boolean isReadOnly=config.read_only(false);
  this.directoryGetter=config.ephemeral(false) ? DirectoryGetter.MEMORY : DirectoryGetter.FS;
  nodeEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      return IndexType.newBaseDocument((Long)entityId);
    }
    public Class<? extends PropertyContainer> getType(){
      return Node.class;
    }
  }
;
  relationshipEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      RelationshipId relId=(RelationshipId)entityId;
      Document doc=IndexType.newBaseDocument(relId.id);
      doc.add(new Field(LuceneIndex.KEY_START_NODE_ID,"" + relId.startNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      doc.add(new Field(LuceneIndex.KEY_END_NODE_ID,"" + relId.endNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      return doc;
    }
    public Class<? extends PropertyContainer> getType(){
      return Relationship.class;
    }
  }
;
  XaCommandFactory cf=new LuceneCommandFactory();
  XaTransactionFactory tf=new LuceneTransactionFactory();
  xaContainer=xaFactory.newXaContainer(this,this.baseStorePath + File.separator + "lucene.log",cf,tf,null,null);
  if (!isReadOnly) {
    try {
      xaContainer.openLogicalLog();
    }
 catch (    IOException e) {
      throw new RuntimeException("Unable to open lucene log in " + this.baseStorePath,e);
    }
    setKeepLogicalLogsIfSpecified(config.online_backup_enabled(false) ? "true" : config.keep_logical_logs(null),DEFAULT_NAME);
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
}
