{
  super(params);
  int searcherSize=parseInt(params,Config.LUCENE_SEARCHER_CACHE_SIZE);
  indexSearchers=new IndexSearcherLruCache(searcherSize);
  int writerSize=parseInt(params,Config.LUCENE_WRITER_CACHE_SIZE);
  indexWriters=new IndexWriterLruCache(writerSize);
  caching=new Cache();
  String storeDir=(String)params.get("store_dir");
  this.baseStorePath=getStoreDir(storeDir).first();
  cleanWriteLocks(baseStorePath);
  this.indexStore=(IndexStore)params.get(IndexStore.class);
  FileSystemAbstraction fileSystem=(FileSystemAbstraction)params.get(FileSystemAbstraction.class);
  this.providerStore=newIndexStore(storeDir,fileSystem);
  this.typeCache=new IndexTypeCache(indexStore);
  boolean isReadOnly=false;
  this.directoryGetter=parseBoolean(params,"ephemeral",false) ? DirectoryGetter.MEMORY : DirectoryGetter.FS;
  isReadOnly=parseBoolean(params,"read_only",false);
  nodeEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      return IndexType.newBaseDocument((Long)entityId);
    }
    public Class<? extends PropertyContainer> getType(){
      return Node.class;
    }
  }
;
  relationshipEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      RelationshipId relId=(RelationshipId)entityId;
      Document doc=IndexType.newBaseDocument(relId.id);
      doc.add(new Field(LuceneIndex.KEY_START_NODE_ID,"" + relId.startNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      doc.add(new Field(LuceneIndex.KEY_END_NODE_ID,"" + relId.endNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      return doc;
    }
    public Class<? extends PropertyContainer> getType(){
      return Relationship.class;
    }
  }
;
  XaCommandFactory cf=new LuceneCommandFactory();
  XaTransactionFactory tf=new LuceneTransactionFactory();
  xaContainer=XaContainer.create(this,this.baseStorePath + File.separator + "lucene.log",cf,tf,null,params);
  if (!isReadOnly) {
    try {
      xaContainer.openLogicalLog();
    }
 catch (    IOException e) {
      throw new RuntimeException("Unable to open lucene log in " + this.baseStorePath,e);
    }
    setKeepLogicalLogsIfSpecified((String)params.get(Config.KEEP_LOGICAL_LOGS),DEFAULT_NAME);
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
}
