{
  Setting<Integer> root=setting("root",INTEGER,"4");
  Setting<Integer> setting=setting("foo",INTEGER,root);
  assertThat(setting.apply(map(stringMap("foo","1"))),equalTo(1));
  assertThat(setting.apply(map(stringMap())),equalTo(4));
  Setting<String> a=setting("A",STRING,"A");
  Setting<String> b=setting("B",STRING,"B",a);
  Setting<String> c=setting("C",STRING,"C",b);
  Setting<String> d=setting("D",STRING,b);
  Setting<String> e=setting("E",STRING,d);
  assertThat(c.apply(map(stringMap("C","X"))),equalTo("X"));
  assertThat(c.apply(map(stringMap("B","X"))),equalTo("X"));
  assertThat(c.apply(map(stringMap("A","X"))),equalTo("X"));
  assertThat(c.apply(map(stringMap("A","Y","B","X"))),equalTo("X"));
  assertThat(d.apply(map(stringMap())),equalTo("B"));
  assertThat(e.apply(map(stringMap())),equalTo("B"));
  Setting<String> x=setting("X",STRING,NO_DEFAULT);
  Setting<String> y=setting("Y",STRING,MANDATORY,x);
  try {
    y.apply(Functions.<String,String>nullFunction());
  }
 catch (  IllegalArgumentException e1) {
  }
}
