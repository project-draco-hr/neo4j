{
  final Config config=dependencies.config();
  boolean queryLogEnabled=config.get(GraphDatabaseSettings.log_queries);
  final File queryLogFile=config.get(GraphDatabaseSettings.log_queries_filename);
  if (!queryLogEnabled) {
    return createEmptyAdapter();
  }
  if (queryLogFile == null) {
    dependencies.logger().getInternalLog(getClass()).warn(GraphDatabaseSettings.log_queries.name() + " is enabled but no " + GraphDatabaseSettings.log_queries_filename.name()+ " has not been provided in configuration, hence query logging is suppressed");
    return createEmptyAdapter();
  }
  return new LifecycleAdapter(){
    Closeable closable;
    @Override public void init() throws Throwable {
      final FileSystemAbstraction fileSystem=dependencies.fileSystem();
      Long thresholdMillis=config.get(GraphDatabaseSettings.log_queries_threshold);
      Long rotationThreshold=config.get(GraphDatabaseSettings.log_queries_rotation_threshold);
      int maxArchives=config.get(GraphDatabaseSettings.log_queries_max_archives);
      FormattedLog.Builder logBuilder=FormattedLog.withUTCTimeZone();
      Log log;
      if (rotationThreshold == 0) {
        OutputStream logOutputStream=createOrOpenAsOuputStream(fileSystem,queryLogFile,true);
        log=logBuilder.toOutputStream(logOutputStream);
        closable=logOutputStream;
      }
 else {
        JobScheduler jobScheduler=dependencies.jobScheduler();
        RotatingFileOutputStreamSupplier rotatingSupplier=new RotatingFileOutputStreamSupplier(fileSystem,queryLogFile,rotationThreshold,0,maxArchives,jobScheduler.executor(JobScheduler.Groups.queryLogRotation));
        log=logBuilder.toOutputStream(rotatingSupplier);
        closable=rotatingSupplier;
      }
      QueryLogger logger=new QueryLogger(Clock.SYSTEM_CLOCK,log,thresholdMillis);
      dependencies.monitoring().addMonitorListener(logger);
    }
    @Override public void shutdown() throws Throwable {
      closable.close();
    }
  }
;
}
