{
  if (method.getName().equals("toString")) {
    return me.toString();
  }
  if (method.getName().equals("equals")) {
    return ((StateMachineProxyHandler)Proxy.getInvocationHandler(arg)).getStateMachineProxyFactory().me.equals(me);
  }
  String conversationId=conversations.getNextConversationId();
  try {
    Class<? extends MessageType> messageType=stateMachine.getMessageType();
    MessageType typeAsEnum=(MessageType)Enum.valueOf((Class<? extends Enum>)messageType,method.getName());
    Message<?> message=Message.internal(typeAsEnum,arg);
    if (me != null) {
      message.setHeader(Message.CONVERSATION_ID,conversationId).setHeader(Message.CREATED_BY,me.toString());
    }
    if (method.getReturnType().equals(Void.TYPE)) {
      stateMachines.process(message);
      return null;
    }
 else {
      ResponseFuture future=new ResponseFuture(conversationId,typeAsEnum);
      responseFutureMap.put(conversationId,future);
      stateMachines.process(message);
      return future;
    }
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalStateException("No state machine can handle the method " + method.getName());
  }
}
