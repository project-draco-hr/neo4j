{
  String dbMode=configProperties.getProperty(Configurator.DB_MODE_KEY,EnterpriseNeoServerBootstrapper.DatabaseMode.SINGLE.name());
  dbMode=dbMode.toUpperCase();
  if (dbMode.equals(EnterpriseNeoServerBootstrapper.DatabaseMode.SINGLE.name()))   return true;
  if (!dbMode.equals(EnterpriseNeoServerBootstrapper.DatabaseMode.HA.name())) {
    failureMessage=String.format("Illegal value for %s \"%s\" in %s",Configurator.DB_MODE_KEY,dbMode,Configurator.NEO_SERVER_CONFIG_FILE_KEY);
    return false;
  }
  String dbTuningFilename=configProperties.getProperty(Configurator.DB_TUNING_PROPERTY_FILE_KEY);
  if (dbTuningFilename == null) {
    failureMessage=String.format("High-Availability mode requires %s to be set in %s",Configurator.DB_TUNING_PROPERTY_FILE_KEY,Configurator.NEO_SERVER_CONFIG_FILE_KEY);
    return false;
  }
 else {
    File dbTuningFile=new File(dbTuningFilename);
    if (!dbTuningFile.exists()) {
      failureMessage=String.format("No database tuning file at [%s]",dbTuningFile.getAbsoluteFile());
      return false;
    }
 else {
      Properties dbTuning=new Properties();
      try {
        InputStream tuningStream=new FileInputStream(dbTuningFile);
        try {
          dbTuning.load(tuningStream);
        }
  finally {
          tuningStream.close();
        }
      }
 catch (      IOException e) {
        failureMessage=e.getMessage();
        return false;
      }
      String machineId=null;
      try {
        machineId=getSinglePropertyFromCandidates(dbTuning,HighlyAvailableGraphDatabase.CONFIG_KEY_SERVER_ID,HighlyAvailableGraphDatabase.CONFIG_KEY_OLD_SERVER_ID,"<not set>");
        if (Integer.parseInt(machineId) < 0)         throw new NumberFormatException();
      }
 catch (      NumberFormatException e) {
        failureMessage=String.format("%s in %s needs to be a non-negative integer, not %s",HighlyAvailableGraphDatabase.CONFIG_KEY_SERVER_ID,dbTuningFilename,machineId);
        return false;
      }
catch (      IllegalArgumentException e) {
        failureMessage=String.format("%s in %s",e.getMessage(),dbTuningFilename);
        return false;
      }
      String[] zkServers=null;
      try {
        zkServers=getSinglePropertyFromCandidates(dbTuning,HighlyAvailableGraphDatabase.CONFIG_KEY_COORDINATORS,HighlyAvailableGraphDatabase.CONFIG_KEY_OLD_COORDINATORS,"").split(",");
      }
 catch (      IllegalArgumentException e) {
        failureMessage=String.format("%s in %s",e.getMessage(),dbTuningFilename);
        return false;
      }
      if (zkServers.length <= 0) {
        failureMessage=String.format("%s in %s needs to specify at least one server",HighlyAvailableGraphDatabase.CONFIG_KEY_SERVER_ID,dbTuningFilename);
        return false;
      }
      for (      String zk : zkServers) {
        if (!zk.contains(":")) {
          failureMessage=String.format("Invalid server config \"%s\" for %s in %s",zk,HighlyAvailableGraphDatabase.CONFIG_KEY_SERVER_ID,dbTuningFilename);
          return false;
        }
      }
    }
  }
  return true;
}
