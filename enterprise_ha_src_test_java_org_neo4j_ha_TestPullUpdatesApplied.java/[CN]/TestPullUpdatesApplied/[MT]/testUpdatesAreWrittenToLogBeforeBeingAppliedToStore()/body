{
  int master=getCurrentMaster();
  addNode(master);
  int toKill=(master + 1) % dbs.length;
  HighlyAvailableGraphDatabase dbToKill=dbs[toKill];
  final CountDownLatch latch1=new CountDownLatch(1);
  final HighlyAvailableGraphDatabase masterDb=dbs[master];
  masterDb.getDependencyResolver().resolveDependency(ClusterClient.class).addClusterListener(new ClusterListener.Adapter(){
    @Override public void leftCluster(    InstanceId member){
      latch1.countDown();
      masterDb.getDependencyResolver().resolveDependency(ClusterClient.class).removeClusterListener(this);
    }
  }
);
  dbToKill.shutdown();
  if (!latch1.await(60,TimeUnit.SECONDS)) {
    throw new IllegalStateException("Timeout waiting for instance to leave cluster");
  }
  addNode(master);
  File targetDirectory=dir.directory("" + toKill,false);
  final CountDownLatch latch2=new CountDownLatch(1);
  masterDb.getDependencyResolver().resolveDependency(ClusterClient.class).addHeartbeatListener(new HeartbeatListener.Adapter(){
    @Override public void failed(    InstanceId server){
      latch2.countDown();
      masterDb.getDependencyResolver().resolveDependency(ClusterClient.class).removeHeartbeatListener(this);
    }
  }
);
  dbToKill.shutdown();
  runInOtherJvmToGetExitCode(new String[]{targetDirectory.getAbsolutePath(),"" + toKill});
  if (!latch2.await(60,TimeUnit.SECONDS)) {
    throw new IllegalStateException("Timeout waiting for instance to fail");
  }
  Thread.sleep(15000);
  start(toKill,false);
  boolean hasBranchedData=new File(targetDirectory,"branched").listFiles().length > 0;
  assertFalse(hasBranchedData);
}
