{
  Set<String> idents=new TreeSet<>();
  idents.add("n");
  idents.add("node2");
  NotificationDetail identifierDetail=NotificationDetail.Factory.cartesianProduct(idents);
  Notification notification=CARTESIAN_PRODUCT.notification(InputPosition.empty,identifierDetail);
  assertThat(notification.getTitle(),equalTo("This query builds a cartesian product between disconnected patterns."));
  assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
  assertThat(notification.getCode(),equalTo("Neo.ClientNotification.Statement.CartesianProduct"));
  assertThat(notification.getPosition(),equalTo(InputPosition.empty));
  assertThat(notification.getDescription(),equalTo("If a part of a query contains multiple disconnected patterns, this will build a cartesian product " + "between all those parts. This may produce a large amount of data and slow down query processing. While " + "occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross "+ "product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH "+ "(identifiers are: (n, node2))"));
}
