{
  ElectionContext context=mock(ElectionContext.class);
  MessageHolder holder=mock(MessageHolder.class);
  when(context.electionOk()).thenReturn(true);
  when(context.isInCluster()).thenReturn(true);
  when(context.isElector()).thenReturn(true);
  final InstanceId myInstanceId=new InstanceId(1);
  Map<InstanceId,URI> members=new HashMap<InstanceId,URI>();
  members.put(myInstanceId,URI.create("ha://me"));
  when(context.getMembers()).thenReturn(members);
  final String role="master";
  when(context.getPossibleRoles()).thenReturn(Collections.<ElectionRole>singletonList(new ElectionRole(role)));
  when(context.getElected(role)).thenReturn(myInstanceId);
  when(context.getLogger()).thenReturn(mock(StringLogger.class));
  election.handle(context,Message.<ElectionMessage>internal(performRoleElections),holder);
  verify(holder,times(1)).offer(Matchers.argThat(new MessageArgumentMatcher<ElectionMessage>().onMessageType(ElectionMessage.vote).withPayload(role)));
  verify(context,times(0)).setTimeout(Matchers.<String>any(),Matchers.<Message>any());
}
