{
  String coordinatorRole="coordinator";
  InstanceId votingInstance=new InstanceId(2);
  Comparable<Object> voteCredentialComparable=new Comparable<Object>(){
    @Override public int compareTo(    Object o){
      return 0;
    }
  }
;
  ElectionContext context=mock(ElectionContext.class);
  when(context.getLog(Mockito.<Class>any())).thenReturn(NullLog.getInstance());
  when(context.getNeededVoteCount()).thenReturn(3);
  when(context.getVoteCount(coordinatorRole)).thenReturn(3);
  when(context.voted(coordinatorRole,votingInstance,voteCredentialComparable,4)).thenReturn(true);
  MessageHolder holder=mock(MessageHolder.class);
  Message vote=Message.to(ElectionMessage.voted,URI.create("cluster://elector"),new ElectionMessage.VersionedVotedData(coordinatorRole,votingInstance,voteCredentialComparable,4));
  election.handle(context,vote,holder);
  verify(context,times(1)).forgetElection(coordinatorRole);
}
