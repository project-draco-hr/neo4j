{
  return new GraphDatabaseBuilder.DatabaseCreator(){
    @Override @SuppressWarnings("deprecation") public GraphDatabaseService newDatabase(    Map<String,String> config){
      return new EnterpriseFacadeFactory(){
        @Override protected PlatformModule createPlatform(        File storeDir,        Map<String,String> params,        Dependencies dependencies,        GraphDatabaseFacade graphDatabaseFacade){
          return new ImpermanentGraphDatabase.ImpermanentPlatformModule(storeDir,params,databaseInfo(),dependencies,graphDatabaseFacade){
            @Override protected FileSystemAbstraction createFileSystemAbstraction(){
              FileSystemAbstraction fs=state.getFileSystem();
              if (fs != null) {
                return fs;
              }
 else {
                return super.createFileSystemAbstraction();
              }
            }
            @Override protected LogService createLogService(            LogProvider logProvider){
              final LogProvider internalLogProvider=state.getInternalLogProvider();
              if (internalLogProvider == null) {
                return super.createLogService(logProvider);
              }
              final LogProvider userLogProvider=state.databaseDependencies().userLogProvider();
              return new AbstractLogService(){
                @Override public LogProvider getUserLogProvider(){
                  return userLogProvider;
                }
                @Override public LogProvider getInternalLogProvider(){
                  return internalLogProvider;
                }
              }
;
            }
          }
;
        }
      }
.newFacade(storeDir,config,GraphDatabaseDependencies.newDependencies(state.databaseDependencies()));
    }
  }
;
}
