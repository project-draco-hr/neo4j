USAGE = 'Usage: testasciidoc.py [OPTIONS] COMMAND\n\nRun AsciiDoc conformance tests specified in configuration FILE.\n\nCommands:\n  list                          List tests\n  run [NUMBER] [BACKEND]        Execute tests\n  update [NUMBER] [BACKEND]     Regenerate and update test data\n\nOptions:\n  -f, --conf-file=CONF_FILE\n        Use configuration file CONF_FILE (default configuration file is\n        testasciidoc.conf in testasciidoc.py directory)\n  --force\n        Update all test data overwriting existing data'
__version__ = '0.1.1'
__copyright__ = 'Copyright (C) 2009 Stuart Rackham'
import os, sys, re, StringIO, difflib
import asciidocapi
BACKENDS = ('html4', 'xhtml11', 'docbook', 'wordpress', 'html5')
BACKEND_EXT = {'html4': '.html', 'xhtml11': '.html', 'docbook': '.xml', 'wordpress': '.html', 'slidy': '.html', 'html5': '.html', }
if (__name__ == '__main__'):
    import getopt
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], 'f:', ['force'])
    except getopt.GetoptError:
        usage('illegal command options')
        sys.exit(1)
    if (len(args) == 0):
        usage()
        sys.exit(1)
    conffile = os.path.join(os.path.dirname(sys.argv[0]), 'testasciidoc.conf')
    force = False
    for (o, v) in opts:
        if (o == '--force'):
            force = True
        if (o in ('-f', '--conf-file')):
            conffile = v
    if (not os.path.isfile(conffile)):
        message(('missing CONF_FILE: %s' % conffile))
        sys.exit(1)
    tests = AsciiDocTests(conffile)
    cmd = args[0]
    number = None
    backend = None
    for arg in args[1:3]:
        try:
            number = int(arg)
        except ValueError:
            backend = arg
    if (backend and (backend not in BACKENDS)):
        message(('illegal BACKEND: %s' % backend))
        sys.exit(1)
    if ((number is not None) and (number not in range(1, (len(tests.tests) + 1)))):
        message(('illegal test NUMBER: %d' % number))
        sys.exit(1)
    if (cmd == 'run'):
        tests.run(number, backend)
        if tests.failed:
            exit(1)
    elif (cmd == 'update'):
        tests.update(number, backend, force=force)
    elif (cmd == 'list'):
        tests.list()
    else:
        usage(('illegal COMMAND: %s' % cmd))
