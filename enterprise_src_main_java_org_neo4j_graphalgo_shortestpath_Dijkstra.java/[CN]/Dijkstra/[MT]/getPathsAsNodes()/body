{
  if (startNode == null || endNode == null) {
    throw new RuntimeException("Start or end node undefined.");
  }
  calculateMultiple();
  if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0) {
    return null;
  }
  Set<List<Node>> paths=new HashSet<List<Node>>();
  for (  Node middleNode : foundPathsMiddleNodes) {
    List<List<Node>> paths1=Util.constructAllPathsToNodeAsNodes(middleNode,predecessors1,true,false);
    List<List<Node>> paths2=Util.constructAllPathsToNodeAsNodes(middleNode,predecessors2,false,true);
    for (    List<Node> part1 : paths1) {
      for (      List<Node> part2 : paths2) {
        LinkedList<Node> path=new LinkedList<Node>();
        path.addAll(part1);
        path.addAll(part2);
        paths.add(path);
      }
    }
  }
  return new LinkedList<List<Node>>(paths);
}
