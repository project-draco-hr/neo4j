{
  return new IndexUpdater(){
    @Override public void withDefaultStringProperties(    long... nodeIds){
      Collection<Pair<Long,String>> entries=new ArrayList<>(nodeIds.length);
      for (      long nodeId : nodeIds) {
        entries.add(of(nodeId,"value" + nodeId));
      }
      withStringProperties(entries);
    }
    @Override public void withStringProperties(    Collection<Pair<Long,String>> nodesWithValues){
      final int labelId=descriptor.getLabelId();
      final int propertyKeyId=descriptor.getPropertyKeyId();
      for (      Pair<Long,String> entry : nodesWithValues) {
        long nodeId=entry.first();
        state.nodeDoCreate(nodeId);
        state.nodeDoAddLabel(labelId,nodeId);
        Property propertyBefore=noNodeProperty(nodeId,propertyKeyId);
        DefinedProperty propertyAfter=stringProperty(propertyKeyId,entry.other());
        state.nodeDoReplaceProperty(nodeId,propertyBefore,propertyAfter);
        state.indexDoUpdateProperty(descriptor,nodeId,null,propertyAfter);
      }
    }
    @Override public <T extends Number>void withNumberProperties(    Collection<Pair<Long,T>> nodesWithValues){
      final int labelId=descriptor.getLabelId();
      final int propertyKeyId=descriptor.getPropertyKeyId();
      for (      Pair<Long,T> entry : nodesWithValues) {
        long nodeId=entry.first();
        state.nodeDoCreate(nodeId);
        state.nodeDoAddLabel(labelId,nodeId);
        Property propertyBefore=noNodeProperty(nodeId,propertyKeyId);
        DefinedProperty propertyAfter=numberProperty(propertyKeyId,entry.other());
        state.nodeDoReplaceProperty(nodeId,propertyBefore,propertyAfter);
        state.indexDoUpdateProperty(descriptor,nodeId,null,propertyAfter);
      }
    }
    @Override public void withBooleanProperties(    Collection<Pair<Long,Boolean>> nodesWithValues){
      final int labelId=descriptor.getLabelId();
      final int propertyKeyId=descriptor.getPropertyKeyId();
      for (      Pair<Long,Boolean> entry : nodesWithValues) {
        long nodeId=entry.first();
        state.nodeDoCreate(nodeId);
        state.nodeDoAddLabel(labelId,nodeId);
        Property propertyBefore=noNodeProperty(nodeId,propertyKeyId);
        DefinedProperty propertyAfter=booleanProperty(propertyKeyId,entry.other());
        state.nodeDoReplaceProperty(nodeId,propertyBefore,propertyAfter);
        state.indexDoUpdateProperty(descriptor,nodeId,null,propertyAfter);
      }
    }
  }
;
}
