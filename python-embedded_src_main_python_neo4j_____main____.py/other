':"\n# Locate (good enough) absolute path for the Neo4j library\nFILE=$0\nwhile [ -L "$FILE" ]; do\n    FILE=$(readlink $FILE)\ndone\nDIR=$(cd `dirname $FILE`; pwd)\nFILE=$(basename $FILE)\nif [ "__main__.py" != "$FILE" ]; then\n    echo Neo4j library has been obscured >&2\n    exit -1 \nfi\nwhile [ -L "$DIR" ]; do\n    DIR=$(readlink $DIR)\ndone\nif [ "neo4j" != "$(basename $DIR)" ]; then\n    echo Neo4j library has been obscured >&2\n    exit -1\nfi\nDIR=$(dirname $DIR)\nwhile [ -L "$DIR" ]; do\n    DIR=$(readlink $DIR)\ndone\n\n# Set up the Python path\nif [ -z "$PYTHONPATH" ]; then\n    PYTHONPATH="$DIR"\nelse\n    PYTHONPATH="$DIR:$PYTHONPATH"\nfi\nexport PYTHONPATH\n\nBIN=$(dirname $(dirname $DIR))/bin\nif [ -d "$BIN" -a -f "$BIN/classpath" -a -x "$BIN/classpath" ]; then\n    CLASSPATH=$($BIN/classpath)\n    export CLASSPATH\nfi\n\n# Launch the __main__\npython "$DIR/neo4j/$FILE" "$@"\n# Exit with same exit code\nexit $?\n":'
USAGE = 'USAGE: neo4j <graphdb path> [<script> ...]\n\nWhere   <graphdb  path>   is  the   path  to   your   graph  database,\nand <script> is a script to execute. You can provide multiple scripts,\nif no script is provided, an interactive (Python) shell is started.\n'
if (__name__ != '__main__'):
    raise ImportError(('neo4j.__main__ is not meant to be imported.It is meant to be used as an executable.\n\n' + USAGE))
else:
    import sys, os
    path = sys.argv[0]
    if (not os.path.isdir(path)):
        path = os.path.dirname(path)
    if (path in sys.path):
        sys.path.remove(path)
    path = os.path.dirname(os.path.abspath(path))
    if (path not in sys.path):
        sys.path.insert(0, path)
    import neo4j

    def run(script, env):
        exec script in env

    def script(infile):

        def main(env):
            run(infile.read(), env)
        return main

    def scripts(paths):
        for path in paths:
            if (not os.path.isfile(path)):
                raise TypeError(('Script <%s> does not exits.' % (path,)))

        def main(env):
            for path in paths:
                with open(path) as infile:
                    script(infile)(dict(env))
        return main

    def interactive(env):
        from code import InteractiveConsole
        InteractiveConsole(locals=env).interact(banner='Neo4j Python bindings interactive console')
    try:
        if (len(sys.argv) > 2):
            main = scripts(sys.argv[2:])
        elif (len(sys.argv) < 2):
            raise TypeError('No database path specified')
        elif (not sys.stdin.isatty()):
            main = script(sys.stdin)
        else:
            main = interactive
        if os.path.isfile(sys.argv[1]):
            raise TypeError('Database path is a file')
        elif (not os.path.exists(sys.argv[1])):
            sys.stderr.write(('WARNING: Database path <%s> does not exist, a Neo4j database will be created.\n' % (sys.argv[1],)))
    except:
        sys.stderr.write((str(sys.exc_info()[1]) + '\n\n'))
        sys.stderr.write(USAGE)
        sys.exit((-1))
    graphdb = neo4j.GraphDatabase(sys.argv[1])
    try:
        main({'graphdb': graphdb, })
    finally:
        graphdb.shutdown()
