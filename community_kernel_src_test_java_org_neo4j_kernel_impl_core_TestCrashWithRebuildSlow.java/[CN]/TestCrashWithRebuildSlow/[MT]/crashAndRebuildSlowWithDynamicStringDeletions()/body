{
  File storeDir=new File("dir").getAbsoluteFile();
  final GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().setFileSystem(fs.get()).newImpermanentDatabase(storeDir);
  List<Long> deletedNodeIds=produceNonCleanDefraggedStringStore(db);
  Map<IdType,Long> highIdsBeforeCrash=getHighIds(db);
  long checksumBefore=fs.get().checksum();
  long checksumBefore2=fs.get().checksum();
  assertThat(checksumBefore,Matchers.equalTo(checksumBefore2));
  EphemeralFileSystemAbstraction snapshot=fs.snapshot(shutdownDbAction(db));
  long snapshotChecksum=snapshot.checksum();
  if (snapshotChecksum != checksumBefore) {
    try (OutputStream out=new FileOutputStream(testDir.file("snapshot.zip"))){
      snapshot.dumpZip(out);
    }
     try (OutputStream out=new FileOutputStream(testDir.file("fs.zip"))){
      fs.get().dumpZip(out);
    }
   }
  assertThat(snapshotChecksum,equalTo(checksumBefore));
  assertNumberOfFreeIdsEquals(storeDir,snapshot,0);
  GraphDatabaseAPI newDb=(GraphDatabaseAPI)new TestGraphDatabaseFactory().setFileSystem(snapshot).newImpermanentDatabaseBuilder(storeDir).setConfig(GraphDatabaseSettings.rebuild_idgenerators_fast,Settings.FALSE).newGraphDatabase();
  Map<IdType,Long> highIdsAfterCrash=getHighIds(newDb);
  assertEquals(highIdsBeforeCrash,highIdsAfterCrash);
  try (Transaction tx=newDb.beginTx()){
    int nameCount=0;
    int relCount=0;
    for (    Node node : newDb.getAllNodes()) {
      nameCount++;
      assertThat(node,inTx(newDb,hasProperty("name"),true));
      relCount+=count(node.getRelationships(Direction.OUTGOING));
    }
    assertEquals(16,nameCount);
    assertEquals(12,relCount);
    List<Long> newIds=new ArrayList<>();
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    assertThat(newIds,is(deletedNodeIds));
    tx.success();
  }
  finally {
    newDb.shutdown();
  }
}
