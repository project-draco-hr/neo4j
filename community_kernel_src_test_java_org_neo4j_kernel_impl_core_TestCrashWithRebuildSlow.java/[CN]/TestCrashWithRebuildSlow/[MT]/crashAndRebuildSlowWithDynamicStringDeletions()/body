{
  String storeDir=new File("dir").getAbsolutePath();
  final GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().setFileSystem(fs.get()).newImpermanentDatabase(storeDir);
  List<Long> deletedNodeIds=produceNonCleanDefraggedStringStore(db);
  Map<IdType,Long> highIdsBeforeCrash=getHighIds(db);
  EphemeralFileSystemAbstraction snapshot=fs.snapshot(shutdownDb(db));
  assertNumberOfFreeIdsEquals(storeDir,snapshot,0);
  GraphDatabaseAPI newDb=(GraphDatabaseAPI)new TestGraphDatabaseFactory().setFileSystem(snapshot).newImpermanentDatabaseBuilder(storeDir).setConfig(GraphDatabaseSettings.rebuild_idgenerators_fast,Settings.FALSE).newGraphDatabase();
  assertEquals(highIdsBeforeCrash,getHighIds(newDb));
  try (Transaction tx=newDb.beginTx()){
    int nameCount=0;
    int relCount=0;
    for (    Node node : GlobalGraphOperations.at(newDb).getAllNodes()) {
      nameCount++;
      assertThat(node,inTx(newDb,hasProperty("name"),true));
      relCount+=count(node.getRelationships(Direction.OUTGOING));
    }
    assertEquals(16,nameCount);
    assertEquals(12,relCount);
    List<Long> newIds=new ArrayList<>();
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    newIds.add(newDb.createNode().getId());
    assertThat(newIds,is(deletedNodeIds));
    tx.success();
  }
  finally {
    newDb.shutdown();
  }
}
