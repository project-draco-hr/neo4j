{
  RelationshipRecord record=new RelationshipRecord(id);
  long inUseByte=cursor.getByte(offset + IN_USE);
  long firstNode=cursor.getUnsignedInt(offset + FIRST_NODE);
  long secondNode=cursor.getUnsignedInt(offset + SECOND_NODE);
  long typeInt=cursor.getInt(offset + TYPE);
  long firstPrevRel=cursor.getUnsignedInt(offset + FIRST_PREV_REL);
  long firstNextRel=cursor.getUnsignedInt(offset + FIRST_NEXT_REL);
  long secondPrevRel=cursor.getUnsignedInt(offset + SECOND_PREV_REL);
  long secondNextRel=cursor.getUnsignedInt(offset + SECOND_NEXT_REL);
  long nextProp=cursor.getUnsignedInt(offset + NEXT_PROP);
  byte extraByte=cursor.getByte(offset + EXTRA);
  record.setFirstNode(longFromIntAndMod(firstNode,(inUseByte & 0xEL) << 31));
  record.setSecondNode(longFromIntAndMod(secondNode,(typeInt & 0x70000000L) << 4));
  record.setType((int)(typeInt & 0xFFFF));
  record.setInUse((inUseByte & 0x1) == Record.IN_USE.intValue());
  record.setFirstPrevRel(longFromIntAndMod(firstPrevRel,(typeInt & 0xE000000L) << 7));
  record.setFirstNextRel(longFromIntAndMod(firstNextRel,(typeInt & 0x1C00000L) << 10));
  record.setSecondPrevRel(longFromIntAndMod(secondPrevRel,(typeInt & 0x380000L) << 13));
  record.setSecondNextRel(longFromIntAndMod(secondNextRel,(typeInt & 0x70000L) << 16));
  record.setFirstInFirstChain((extraByte & 0x1) != 0);
  record.setFirstInSecondChain((extraByte & 0x2) != 0);
  record.setNextProp(longFromIntAndMod(nextProp,(inUseByte & 0xF0L) << 28));
  return record;
}
