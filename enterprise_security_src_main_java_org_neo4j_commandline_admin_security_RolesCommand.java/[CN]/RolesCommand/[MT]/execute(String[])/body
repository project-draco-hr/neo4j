{
  Args parsedArgs=Args.parse(args);
  if (parsedArgs.orphans().size() < 1) {
    throw new IncorrectUsage("Missing arguments: expected at least one sub-command as argument: " + "'list', 'create', 'delete', 'assign', or 'remove'");
  }
  String command=parsedArgs.orphans().size() > 0 ? parsedArgs.orphans().get(0) : null;
  String roleName=parsedArgs.orphans().size() > 1 ? parsedArgs.orphans().get(1) : null;
  String username=parsedArgs.orphans().size() > 2 ? parsedArgs.orphans().get(2) : null;
  try {
switch (command.trim().toLowerCase()) {
case "list":
      listRoles(roleName);
    break;
case "create":
  if (roleName == null) {
    throw new IncorrectUsage("Missing arguments: 'roles create' expects roleName argument");
  }
createRole(roleName);
break;
case "delete":
if (roleName == null) {
throw new IncorrectUsage("Missing arguments: 'roles delete' expects roleName argument");
}
deleteRole(roleName);
break;
case "assign":
if (roleName == null || username == null) {
throw new IncorrectUsage("Missing arguments: 'roles assign' expects roleName and username arguments");
}
assignRole(roleName,username);
break;
case "remove":
if (roleName == null || username == null) {
throw new IncorrectUsage("Missing arguments: 'roles remove' expects roleName and username arguments");
}
removeRole(roleName,username);
break;
default :
throw new IncorrectUsage("Unknown roles command: " + command);
}
}
 catch (IncorrectUsage e) {
throw e;
}
catch (Exception e) {
throw new CommandFailed("Failed to run 'roles " + command + "' on '"+ roleName+ "': "+ e.getMessage(),e);
}
catch (Throwable t) {
throw new CommandFailed("Failed to run 'roles " + command + "' on '"+ roleName+ "': "+ t.getMessage(),new RuntimeException(t.getMessage()));
}
}
