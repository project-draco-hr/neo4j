{
  Class<? extends Number> leftClazz=left.getClass();
  Class<? extends Number> rightClazz=right.getClass();
  if (leftClazz == rightClazz) {
    return ((Comparable<Number>)left).compareTo(right);
  }
 else {
    if ((left instanceof Double) || (left instanceof Float)) {
      double lhs=left.doubleValue();
      if (right instanceof Long) {
        long rhs=right.longValue();
        return MathUtil.compareDoubleAgainstLong(lhs,rhs);
      }
      return Double.compare(lhs,right.doubleValue());
    }
    if ((right instanceof Double) || (right instanceof Float)) {
      double rhs=right.doubleValue();
      if (left instanceof Long) {
        long lhs=left.longValue();
        return MathUtil.compareLongAgainstDouble(lhs,rhs);
      }
      return Double.compare(left.doubleValue(),rhs);
    }
    if (leftClazz.equals(Long.class)) {
      if (rightClazz.equals(Integer.class) || rightClazz.equals(Short.class) || rightClazz.equals(Byte.class)) {
        return Long.compare(left.longValue(),right.longValue());
      }
    }
 else     if (leftClazz.equals(Integer.class)) {
      if (rightClazz.equals(Long.class)) {
        return Long.compare(left.longValue(),right.longValue());
      }
 else       if (rightClazz.equals(Short.class) || rightClazz.equals(Byte.class)) {
        return Integer.compare(left.intValue(),right.intValue());
      }
    }
 else     if (leftClazz.equals(Short.class)) {
      if (rightClazz.equals(Long.class)) {
        return Long.compare(left.longValue(),right.longValue());
      }
 else       if (rightClazz.equals(Integer.class)) {
        return Integer.compare(left.intValue(),right.intValue());
      }
 else       if (rightClazz.equals(Byte.class)) {
        return Short.compare(left.shortValue(),right.shortValue());
      }
    }
 else     if (leftClazz.equals(Byte.class)) {
      if (rightClazz.equals(Long.class)) {
        return Long.compare(left.longValue(),right.longValue());
      }
 else       if (rightClazz.equals(Integer.class)) {
        return Integer.compare(left.intValue(),right.intValue());
      }
 else       if (rightClazz.equals(Short.class)) {
        return Short.compare(left.shortValue(),right.shortValue());
      }
    }
    throw new IllegalArgumentException(format("Comparing numbers %s and %s (with type %s and %s) is not supported",left,right,leftClazz,rightClazz));
  }
}
