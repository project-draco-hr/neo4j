{
  if (breakpoints.isEmpty()) {
synchronized (breakpoints) {
      if (breakpoints.isEmpty()) {
        List<Throwable> failures=new ArrayList<Throwable>();
        final Object CLAIMED=new Object();
        Map<String,Object> bpDefs=new HashMap<String,Object>();
        ForeignBreakpoints foreign=getTestClass().getJavaClass().getAnnotation(ForeignBreakpoints.class);
        if (foreign != null)         for (        BreakpointDef def : foreign.value()) {
          String name=def.name();
          if (name.isEmpty())           name=def.method();
          if (null != bpDefs.put(name,def))           failures.add(new Exception("Multiple definitions of the breakpoint \"" + name + "\""));
        }
        for (        FrameworkMethod method : getTestClass().getAnnotatedMethods(BreakpointTrigger.class)) {
          String name=method.getAnnotation(BreakpointTrigger.class).value();
          if (name.isEmpty())           name=method.getName();
          if (null != bpDefs.put(name,method))           failures.add(new Exception("Multiple definitions of the breakpoint \"" + name + "\""));
        }
        for (        FrameworkMethod handler : getTestClass().getAnnotatedMethods(BreakpointHandler.class)) {
          for (          String name : handler.getAnnotation(BreakpointHandler.class).value()) {
            Object bp=bpDefs.get(name);
            if (bp == null) {
              failures.add(new Exception("No such breakpoint: \"" + name + "\", referenced from: "+ handler));
            }
 else             if (bp == CLAIMED) {
              failures.add(new Exception("Multiple handlers for breakpoint: \"" + name + "\", referenced from: "+ handler));
            }
 else             if (bp instanceof BreakpointDef) {
              try {
                for (                BreakpointDispatcher dispatch : createForeignBreakpoints((BreakpointDef)bp,handler)) {
                  breakpoints.put(name,dispatch);
                }
              }
 catch (              Exception exc) {
                failures.add(exc);
              }
            }
 else             if (bp instanceof FrameworkMethod) {
              breakpoints.put(name,new BreakpointDispatcher(((FrameworkMethod)bp).getAnnotation(BreakpointTrigger.class).on(),getTestClass().getJavaClass(),((FrameworkMethod)bp).getMethod(),handler));
            }
 else {
              failures.add(new Exception("Internal error, unknown breakpoint def: " + bp));
            }
            bpDefs.put(name,CLAIMED);
          }
        }
        if (bpDefs.size() != breakpoints.size())         for (        Object bp : bpDefs.values()) {
          if (bp != CLAIMED)           failures.add(new Exception("Unhandled breakpoint: " + bp));
        }
        if (!failures.isEmpty()) {
          if (failures.size() == 1)           throw failures.get(0);
          throw new MultipleFailureException(failures);
        }
      }
    }
  }
  return breakpoints.values().toArray(new BreakPoint[breakpoints.size()]);
}
