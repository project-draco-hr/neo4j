{
  final Random rand=new Random();
  final Map<String,Object> probabilities=map(alternatingPercentileAndProvider);
  final int[] percentiles=new int[probabilities.size()];
  Object[] raw=probabilities.keySet().toArray();
  for (int i=0; i < raw.length; i++) {
    percentiles[i]=(int)raw[i];
  }
  Arrays.sort(percentiles);
  return new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      float r=rand.nextInt(100);
      for (int i=0; i < percentiles.length; i++) {
        if (r <= percentiles[i]) {
          return ((Provider<?>)probabilities.get(percentiles[i])).instance();
        }
      }
      return ((Provider<?>)probabilities.get(percentiles[percentiles.length - 1])).instance();
    }
  }
;
}
