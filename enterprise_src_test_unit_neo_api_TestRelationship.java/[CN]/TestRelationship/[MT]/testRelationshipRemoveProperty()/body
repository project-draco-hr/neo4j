{
  try {
    Integer int1=new Integer(1);
    Integer int2=new Integer(2);
    String string1=new String("1");
    String string2=new String("2");
    Node node1=NodeManager.getManager().createNode();
    Node node2=NodeManager.getManager().createNode();
    Relationship rel1=NodeManager.getManager().createRelationship(node1,node2,MyRelTypes.TEST);
    Relationship rel2=NodeManager.getManager().createRelationship(node2,node1,MyRelTypes.TEST);
    try {
      rel1.removeProperty(key1);
      fail("Remove of non existing property should throw exception.");
    }
 catch (    NotFoundException e) {
    }
    try {
      rel1.removeProperty(null);
      fail("Remove null property should throw exception.");
    }
 catch (    NotFoundException e) {
    }
    rel1.setProperty(key1,int1);
    rel2.setProperty(key1,string1);
    rel1.setProperty(key2,string2);
    rel2.setProperty(key2,int2);
    try {
      rel1.removeProperty(null);
      fail("Null argument should result in exception.");
    }
 catch (    NotFoundException e) {
    }
    assertEquals(int1,rel1.removeProperty(key1));
    assertEquals(string1,rel2.removeProperty(key1));
    try {
      rel2.removeProperty(key1);
      fail("Remove of non existing property should fail.");
    }
 catch (    NotFoundException e) {
      TransactionFactory.getUserTransaction().setRollbackOnly();
    }
  }
 catch (  IllegalValueException e) {
    fail("" + e);
  }
catch (  NotFoundException e) {
    fail("" + e);
  }
catch (  javax.transaction.SystemException e) {
    fail("" + e);
  }
}
