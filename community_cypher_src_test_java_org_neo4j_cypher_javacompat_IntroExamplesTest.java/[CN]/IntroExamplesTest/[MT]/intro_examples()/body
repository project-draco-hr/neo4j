{
  Writer fw=gen.get().getFW("target/docs/dev/",gen.get().getTitle());
  data.get();
  fw.append("\nImagine an example graph like\n\n");
  fw.append(AsciidocHelper.createGraphViz("Example Graph",graphdb(),"cypher-intro"));
  fw.append("For example, here is a query which finds a user called John in an index and then traverses the graph looking for friends of Johns friends (though not his direct friends) before returning both John and any friends-of-friends that are found.");
  fw.append("\n");
  String query="START john=node:node_auto_index(name = 'John') " + "MATCH john-[:friend]->()-[:friend]->fof RETURN john, fof ";
  fw.append(createCypherSnippet(query));
  fw.append("\nResulting in \n");
  fw.append(createQueryResultSnippet(engine.execute(query).toString()));
  fw.append("Next up we will add filtering to set all four parts " + "in motion:\n\nIn this next example, we take a list of users " + "(by node ID) and traverse the graph looking for those other "+ "users that have an outgoing +friend+ relationship, returning "+ "only those followed users who have a +name+ property starting with +S+.");
  query="START user=node(" + data.get().get("Joe").getId() + ","+ data.get().get("John").getId()+ ","+ data.get().get("Sara").getId()+ ","+ data.get().get("Maria").getId()+ ","+ data.get().get("Steve").getId()+ ") MATCH user-[:friend]->follower WHERE follower.name =~ /S.*/ RETURN user, follower.name ";
  fw.append("\n");
  fw.append(createCypherSnippet(query));
  fw.append("\nResulting in\n");
  fw.append(createQueryResultSnippet(engine.execute(query).toString()));
  fw.close();
}
