{
  Node firstNode=null;
  Node secondNode=null;
  Relationship rel=null;
  firstNode=getGraphDb().createNode();
  assertNotNull("Failure creating first node",firstNode);
  secondNode=getGraphDb().createNode();
  assertNotNull("Failure creating second node",secondNode);
  rel=firstNode.createRelationshipTo(secondNode,MyRelTypes.TEST);
  assertNotNull("Relationship is null",rel);
  RelationshipType relType=rel.getType();
  assertNotNull("Relationship's type is is null",relType);
  assertTrue(firstNode.getRelationships(relType).iterator().hasNext());
  assertTrue(secondNode.getRelationships(relType).iterator().hasNext());
  Iterable<Relationship> allRels=null;
  allRels=firstNode.getRelationships();
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=firstNode.getRelationships(relType);
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=secondNode.getRelationships();
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=secondNode.getRelationships(relType);
  assertTrue(this.objectExistsInIterable(rel,allRels));
  Node[] relNodes=rel.getNodes();
  assertEquals("A relationship should always be connected to exactly " + "two nodes",relNodes.length,2);
  assertTrue("Relationship says that it isn't connected to firstNode",this.objectExistsInArray(firstNode,relNodes));
  assertTrue("Relationship says that it isn't connected to secondNode",this.objectExistsInArray(secondNode,relNodes));
  assertTrue("The other node should be secondNode but it isn't",rel.getOtherNode(firstNode).equals(secondNode));
  assertTrue("The other node should be firstNode but it isn't",rel.getOtherNode(secondNode).equals(firstNode));
  rel.delete();
  secondNode.delete();
  firstNode.delete();
}
