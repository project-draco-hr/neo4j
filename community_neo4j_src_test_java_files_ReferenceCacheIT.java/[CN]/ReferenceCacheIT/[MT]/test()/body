{
  int nrPeople=1000;
  int nrAddresses=100000;
  int nrPhones=50000;
  Map<String,String>[] people=new HashMap[nrPeople];
  Map<String,String>[] addresses=new HashMap[nrAddresses];
  String[] phones=new String[nrAddresses];
  for (int i=0; i < nrAddresses; i++) {
    addresses[i]=new HashMap<>();
    addresses[i].put("street","STREET" + i);
    addresses[i].put("city","CITY" + i);
    addresses[i].put("zipcode","ZIPCODE" + i);
    addresses[i].put("state","STATE" + i);
    addresses[i].put("uuid","AUUID" + i);
  }
  for (int i=0; i < nrPhones; i++) {
    phones[i]="" + i;
  }
  try (Transaction tx=db.beginTx()){
    engine.execute("CREATE INDEX ON :Person(first_name)");
    engine.execute("CREATE INDEX ON :Person(last_name)");
    engine.execute("CREATE INDEX ON :Person(uuid)");
    engine.execute("CREATE INDEX ON :Address(uuid)");
    engine.execute("CREATE INDEX ON :Phone(number)");
    tx.success();
  }
   Random random=new Random(System.currentTimeMillis());
  for (int i=0; i < Integer.MAX_VALUE; i++) {
    System.out.println("====== Start " + i + " ======");
    try (Transaction tx=db.beginTx()){
      updatePeople(i,people,nrPeople);
      for (int j=0; j < nrPeople; j++) {
        Map<String,String> address1=addresses[random.nextInt(nrAddresses)];
        Map<String,String> address2=addresses[random.nextInt(nrAddresses)];
        String phone=phones[random.nextInt(nrPhones)];
        engine.execute("CREATE (n:Person {props})",Collections.<String,Object>singletonMap("props",people[j]));
        engine.execute("MERGE (n: Address {uuid: {props}.uuid}) ON CREATE SET n = {props}",Collections.<String,Object>singletonMap("props",address1));
        engine.execute("MERGE (n: Address {uuid: {props}.uuid}) ON CREATE SET n = {props}",Collections.<String,Object>singletonMap("props",address2));
        engine.execute("MERGE (n: Phone {number: {number}}) ",Collections.<String,Object>singletonMap("number",phone));
        Map<String,Object> params=new HashMap<>();
        params.put("person_uuid",people[j].get("uuid"));
        params.put("addr1_uuid",address1.get("uuid"));
        params.put("addr2_uuid",address2.get("uuid"));
        params.put("phone_number",phone);
        engine.execute("MATCH (person: Person {uuid: {person_uuid}})," + "      (addr1: Address {uuid: {addr1_uuid}})," + "      (addr2: Address {uuid: {addr2_uuid}}),"+ "      (phone: Phone {number: {phone_number}})"+ "CREATE (person)-[: ADDRESS]->(addr1),"+ "       (person)-[: ADDRESS]->(addr2),"+ "       (person)-[: PHONE]->(phone) ",params);
      }
      tx.success();
    }
     System.out.println("====== End " + i + " ======");
  }
  db.shutdown();
}
