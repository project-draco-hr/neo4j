{
  int numberOfCloses=0;
  java.util.Random random=new java.util.Random(System.currentTimeMillis());
  int capacity=random.nextInt(1024) + 1024;
  int grabSize=random.nextInt(128) + 128;
  IdGenerator.createGenerator("testIdGenerator.id");
  IdGenerator idGenerator=new IdGenerator("testIdGenerator.id",grabSize);
  java.util.ArrayList<Integer> idsTaken=new java.util.ArrayList<Integer>();
  float releaseIndex=0.25f;
  float closeIndex=0.05f;
  int currentIdCount=0;
  try {
    while (currentIdCount < capacity) {
      float rIndex=random.nextFloat();
      if (rIndex < releaseIndex && currentIdCount > 0) {
        idGenerator.freeId(idsTaken.remove(random.nextInt(currentIdCount)).intValue());
        currentIdCount--;
      }
 else {
        idsTaken.add(new Integer(idGenerator.nextId()));
        currentIdCount++;
      }
      if (rIndex > (1.0f - closeIndex) || rIndex < closeIndex) {
        idGenerator.close();
        grabSize=random.nextInt(128) + 128;
        idGenerator=new IdGenerator("testIdGenerator.id",grabSize);
        numberOfCloses++;
      }
    }
    idGenerator.close();
  }
  finally {
    File file=new File("testIdGenerator.id");
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
}
