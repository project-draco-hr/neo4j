{
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      final Iterable<Iterator<T>> iterators=toList(map(new Function<Iterable<T>,Iterator<T>>(){
        @Override public Iterator<T> map(        Iterable<T> iterable){
          return iterable.iterator();
        }
      }
,Iterables.iterable(iterables)));
      return new Iterator<T>(){
        Iterator<Iterator<T>> iterator;
        Iterator<T> iter;
        @Override public boolean hasNext(){
          for (          Iterator<T> iterator : iterators) {
            if (iterator.hasNext()) {
              return true;
            }
          }
          return false;
        }
        @Override public T next(){
          if (iterator == null) {
            iterator=iterators.iterator();
          }
          while (iterator.hasNext()) {
            iter=iterator.next();
            if (iter.hasNext())             return iter.next();
          }
          iterator=null;
          return next();
        }
        @Override public void remove(){
          if (iter != null)           iter.remove();
        }
      }
;
    }
  }
;
}
