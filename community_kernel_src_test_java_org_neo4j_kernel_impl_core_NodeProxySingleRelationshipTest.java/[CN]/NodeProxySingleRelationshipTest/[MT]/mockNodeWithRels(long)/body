{
  NodeProxy.NodeActions nodeActions=mock(NodeProxy.NodeActions.class);
  final RelationshipProxy.RelationshipActions relActions=mock(RelationshipProxy.RelationshipActions.class);
  when(nodeActions.newRelationshipProxy(anyLong())).thenAnswer(new Answer<RelationshipProxy>(){
    @Override public RelationshipProxy answer(    InvocationOnMock invocation) throws Throwable {
      return new RelationshipProxy(relActions,(Long)invocation.getArguments()[0]);
    }
  }
);
  GraphDatabaseService gds=mock(GraphDatabaseService.class);
  when(gds.getRelationshipById(REL_ID)).thenReturn(mock(Relationship.class));
  when(gds.getRelationshipById(REL_ID + 1)).thenReturn(mock(Relationship.class));
  when(nodeActions.getGraphDatabase()).thenReturn(gds);
  NodeProxy nodeImpl=new NodeProxy(nodeActions,1);
  Statement stmt=mock(Statement.class);
  ReadOperations readOps=mock(ReadOperations.class);
  when(stmt.readOperations()).thenReturn(readOps);
  when(nodeActions.statement()).thenReturn(stmt);
  when(readOps.relationshipTypeGetForName(loves.name())).thenReturn(2);
  when(readOps.nodeGetRelationships(1,Direction.OUTGOING,2)).thenReturn(iterator(relIds));
  return nodeImpl;
}
