{
  NodeProxy.NodeActions nodeActions=mock(NodeProxy.NodeActions.class);
  final RelationshipProxy.RelationshipActions relActions=mock(RelationshipProxy.RelationshipActions.class);
  when(nodeActions.newRelationshipProxy(anyLong(),anyLong(),anyInt(),anyLong())).then(new Answer<Relationship>(){
    @Override public Relationship answer(    InvocationOnMock invocation) throws Throwable {
      Long id=(Long)invocation.getArguments()[0];
      Long startNode=(Long)invocation.getArguments()[1];
      Integer type=(Integer)invocation.getArguments()[2];
      Long endNode=(Long)invocation.getArguments()[3];
      return new RelationshipProxy(relActions,id,startNode,type,endNode);
    }
  }
);
  GraphDatabaseService gds=mock(GraphDatabaseService.class);
  when(gds.getRelationshipById(REL_ID)).thenReturn(mock(Relationship.class));
  when(gds.getRelationshipById(REL_ID + 1)).thenReturn(mock(Relationship.class));
  when(nodeActions.getGraphDatabase()).thenReturn(gds);
  NodeProxy nodeImpl=new NodeProxy(nodeActions,1);
  Statement stmt=mock(Statement.class);
  ReadOperations readOps=mock(ReadOperations.class);
  when(stmt.readOperations()).thenReturn(readOps);
  when(nodeActions.statement()).thenReturn(stmt);
  when(readOps.relationshipTypeGetForName(loves.name())).thenReturn(2);
  when(readOps.nodeGetRelationships(eq(1L),eq(Direction.OUTGOING),eq(2))).thenAnswer(new Answer<RelationshipIterator>(){
    @Override public RelationshipIterator answer(    InvocationOnMock invocation) throws Throwable {
      return new RelationshipIterator.BaseIterator(){
        int pos;
        long relId;
        @Override protected boolean fetchNext(){
          if (pos < relIds.length) {
            relId=relIds[pos++];
            return true;
          }
 else {
            return false;
          }
        }
        @Override public <EXCEPTION extends Exception>boolean relationshipVisit(        long relationshipId,        RelationshipVisitor<EXCEPTION> visitor) throws EXCEPTION {
          visitor.visit(relId,2,1,10 * relId + 2);
          return false;
        }
      }
;
    }
  }
);
  return nodeImpl;
}
