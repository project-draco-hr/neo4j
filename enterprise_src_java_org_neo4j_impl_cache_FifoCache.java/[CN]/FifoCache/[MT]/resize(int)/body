{
  if (newMaxSize < 1) {
    throw new IllegalArgumentException("newMaxSize=" + newMaxSize);
  }
  if (newMaxSize > maxSize) {
    maxSize=newMaxSize;
  }
 else {
    maxSize=newMaxSize;
    java.util.Iterator<Map.Entry<K,E>> itr=cache.entrySet().iterator();
    cache=new LinkedHashMap<K,E>(){
      protected boolean removeEldestEntry(      Map.Entry<K,E> eldest){
        if (super.size() > maxSize) {
          super.remove(eldest.getKey());
          elementCleaned(eldest.getValue());
        }
        return false;
      }
    }
;
    while (itr.hasNext()) {
      Map.Entry<K,E> mapEntry=itr.next();
      cache.put(mapEntry.getKey(),mapEntry.getValue());
    }
  }
}
