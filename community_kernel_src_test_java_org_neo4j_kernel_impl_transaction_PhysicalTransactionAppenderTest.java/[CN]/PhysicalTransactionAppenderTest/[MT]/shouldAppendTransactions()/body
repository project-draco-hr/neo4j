{
  LogFile logFile=mock(LogFile.class);
  when(logFile.getWriter()).thenReturn(channel);
  long txId=15;
  TransactionMetadataCache positionCache=new TransactionMetadataCache(10,100);
  TransactionIdStore transactionIdStore=mock(TransactionIdStore.class);
  when(transactionIdStore.nextCommittingTransactionId()).thenReturn(txId);
  TransactionAppender appender=new PhysicalTransactionAppender(logFile,positionCache,transactionIdStore,BYPASS);
  PhysicalTransactionRepresentation transaction=new PhysicalTransactionRepresentation(singleCreateNodeCommand());
  final byte[] additionalHeader=new byte[]{1,2,5};
  final int masterId=2, authorId=1;
  final long timeStarted=12345, latestCommittedTxWhenStarted=4545, timeCommitted=timeStarted + 10;
  transaction.setHeader(additionalHeader,masterId,authorId,timeStarted,latestCommittedTxWhenStarted,timeCommitted,-1);
  appender.append(transaction);
  final LogEntryReader<ReadableVersionableLogChannel> logEntryReader=new LogEntryReaderFactory().versionable();
  try (PhysicalTransactionCursor<ReadableVersionableLogChannel> reader=new PhysicalTransactionCursor<>(channel,logEntryReader)){
    reader.next();
    TransactionRepresentation tx=reader.get().getTransactionRepresentation();
    assertArrayEquals(additionalHeader,tx.additionalHeader());
    assertEquals(masterId,tx.getMasterId());
    assertEquals(authorId,tx.getAuthorId());
    assertEquals(timeStarted,tx.getTimeStarted());
    assertEquals(timeCommitted,tx.getTimeCommitted());
    assertEquals(latestCommittedTxWhenStarted,tx.getLatestCommittedTxWhenStarted());
  }
 }
