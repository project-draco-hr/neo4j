{
  final Dependencies dependencies=platformModule.dependencies;
  final Config config=platformModule.config;
  final LogService logging=platformModule.logging;
  final FileSystemAbstraction fileSystem=platformModule.fileSystem;
  final LifeSupport life=platformModule.life;
  LogProvider logProvider=logging.getInternalLogProvider();
  final Supplier<DatabaseHealth> databaseHealthSupplier=dependencies.provideDependency(DatabaseHealth.class);
  StateStorage<Long> lastFlushedStorage;
  try {
    lastFlushedStorage=life.add(new DurableStateStorage<>(fileSystem,clusterStateDirectory,ReplicationModule.LAST_FLUSHED_NAME,new LongIndexMarshal(),config.get(CoreEdgeClusterSettings.last_flushed_state_size),databaseHealthSupplier,logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  consensusModule.raftMembershipManager().setRecoverFromIndex(lastFlushedStorage.getInitialState());
  ListenSocketAddress raftListenAddress=config.get(CoreEdgeClusterSettings.raft_listen_address);
  RaftServer raftServer=new RaftServer(new CoreReplicatedContentMarshal(),raftListenAddress,logProvider);
  LoggingInbound<RaftMessages.StoreIdAwareMessage> loggingRaftInbound=new LoggingInbound<>(raftServer,messageLogger,myself);
  NonBlockingChannels nonBlockingChannels=new NonBlockingChannels();
  CoreToCoreClient.ChannelInitializer channelInitializer=new CoreToCoreClient.ChannelInitializer(logProvider,nonBlockingChannels);
  int maxQueueSize=config.get(CoreEdgeClusterSettings.outgoing_queue_size);
  long logThresholdMillis=config.get(CoreEdgeClusterSettings.unknown_address_logging_throttle);
  CoreToCoreClient coreToCoreClient=life.add(new CoreToCoreClient(logProvider,channelInitializer,platformModule.monitors,maxQueueSize,nonBlockingChannels,discoveryService,logThresholdMillis));
  channelInitializer.setOwner(coreToCoreClient);
  StoreFetcher storeFetcher=new StoreFetcher(logProvider,fileSystem,platformModule.pageCache,new StoreCopyClient(coreToCoreClient),new TxPullClient(coreToCoreClient),new TransactionLogCatchUpFactory());
  CoreStateApplier coreStateApplier=new CoreStateApplier(logProvider);
  CoreStateDownloader downloader=new CoreStateDownloader(localDatabase,storeFetcher,coreToCoreClient,logProvider);
  InFlightMap<Long,RaftLogEntry> inFlightMap=new InFlightMap<>();
  NotMyselfSelectionStrategy someoneElse=new NotMyselfSelectionStrategy(discoveryService,myself);
  CoreState coreState=new CoreState(consensusModule.raftInstance(),localDatabase,logProvider,someoneElse,downloader,new CommandApplicationProcess(coreStateMachinesModule.coreStateMachines,consensusModule.raftLog(),config.get(CoreEdgeClusterSettings.state_machine_apply_max_batch_size),config.get(CoreEdgeClusterSettings.state_machine_flush_window_size),databaseHealthSupplier,logProvider,replicationModule.getProgressTracker(),lastFlushedStorage,replicationModule.getSessionTracker(),coreStateApplier,inFlightMap,platformModule.monitors));
  dependencies.satisfyDependency(coreState);
  life.add(new PruningScheduler(coreState,platformModule.jobScheduler,config.get(CoreEdgeClusterSettings.raft_log_pruning_frequency)));
  int queueSize=config.get(CoreEdgeClusterSettings.raft_in_queue_size);
  int maxBatch=config.get(CoreEdgeClusterSettings.raft_in_queue_max_batch);
  BatchingMessageHandler batchingMessageHandler=new BatchingMessageHandler(coreState,queueSize,maxBatch,logProvider);
  long electionTimeout=config.get(CoreEdgeClusterSettings.leader_election_timeout);
  MembershipWaiter membershipWaiter=new MembershipWaiter(myself,platformModule.jobScheduler,electionTimeout * 4,coreState,logProvider);
  long joinCatchupTimeout=config.get(CoreEdgeClusterSettings.join_catch_up_timeout);
  membershipWaiterLifecycle=new MembershipWaiterLifecycle(membershipWaiter,joinCatchupTimeout,consensusModule.raftInstance(),logProvider);
  life.add(new ContinuousJob(platformModule.jobScheduler,new JobScheduler.Group("raft-batch-handler",NEW_THREAD),batchingMessageHandler));
  loggingRaftInbound.registerHandler(batchingMessageHandler);
  CatchupServer catchupServer=new CatchupServer(logProvider,localDatabase,platformModule.dependencies.provideDependency(TransactionIdStore.class),platformModule.dependencies.provideDependency(LogicalTransactionStore.class),new DataSourceSupplier(platformModule),new CheckpointerSupplier(platformModule.dependencies),coreState,config.get(CoreEdgeClusterSettings.transaction_listen_address),platformModule.monitors);
  startupLifecycle=new LifeSupport();
  startupLifecycle.add(coreState);
  startupLifecycle.add(raftServer);
  startupLifecycle.add(catchupServer);
}
