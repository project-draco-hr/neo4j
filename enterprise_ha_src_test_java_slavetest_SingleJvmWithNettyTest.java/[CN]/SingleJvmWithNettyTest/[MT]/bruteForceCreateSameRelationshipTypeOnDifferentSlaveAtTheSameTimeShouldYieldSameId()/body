{
  int slaves=3;
  initializeDbs(slaves);
  for (int i=0; i < 10; i++) {
    final RelationshipType relType=DynamicRelationshipType.withName("Rel" + i);
    final CountDownLatch latch=new CountDownLatch(1);
    List<Thread> threads=new ArrayList<Thread>();
    for (int s=0; s < slaves; s++) {
      final GraphDatabaseAPI db=getSlave(s);
      Thread thread=new Thread(){
        @Override public void run(){
          try {
            latch.await();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
          Transaction tx=db.beginTx();
          try {
            db.createNode().createRelationshipTo(db.createNode(),relType);
            tx.success();
          }
  finally {
            tx.finish();
          }
        }
      }
;
      thread.start();
      threads.add(thread);
    }
    latch.countDown();
    for (    Thread thread : threads) {
      thread.join();
    }
    List<GraphDatabaseAPI> dbs=new ArrayList<GraphDatabaseAPI>();
    dbs.add(getMasterHaDb());
    for (int s=0; s < slaves; s++)     dbs.add(getSlave(s));
    int highestId=0;
    for (    GraphDatabaseAPI db : dbs) {
      RelationshipTypeHolder holder=db.getNodeManager().getRelationshipTypeHolder();
      highestId=highestIdOf(holder,highestId);
      Set<String> types=new HashSet<String>();
      for (int j=0; j <= highestId; j++) {
        RelationshipType type=holder.getRelationshipType(j);
        if (type != null) {
          assertTrue(type.name() + " already existed for " + db,types.add(type.name()));
        }
      }
    }
  }
  pullUpdates();
}
