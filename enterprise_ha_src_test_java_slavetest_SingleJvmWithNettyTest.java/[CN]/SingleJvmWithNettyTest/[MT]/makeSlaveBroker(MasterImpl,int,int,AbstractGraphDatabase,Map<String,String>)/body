{
  final Machine masterMachine=new Machine(masterId,-1,1,-1,"localhost:" + Protocol.PORT);
  int readTimeout=getConfigInt(config,CONFIG_KEY_READ_TIMEOUT,TEST_READ_TIMEOUT);
  final Master client=new MasterClient(masterMachine.getServer().first(),masterMachine.getServer().other(),graphDb,ConnectionLostHandler.NO_ACTION,readTimeout,getConfigInt(config,CONFIG_KEY_LOCK_READ_TIMEOUT,readTimeout),Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT);
  return new AbstractBroker(id,graphDb){
    public boolean iAmMaster(){
      return false;
    }
    public Pair<Master,Machine> getMasterReally(    boolean allowChange){
      return getMaster();
    }
    public Pair<Master,Machine> getMaster(){
      return Pair.of(client,masterMachine);
    }
    public Object instantiateMasterServer(    AbstractGraphDatabase graphDb){
      throw new UnsupportedOperationException("cannot instantiate master server on slave");
    }
  }
;
}
