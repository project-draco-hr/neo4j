{
  Iterable<StoreFile> filesToMove;
  StoreFile[] idFilesToDelete;
switch (versionToUpgradeFrom(fileSystem,storeDir)) {
case Legacy19Store.LEGACY_VERSION:
    filesToMove=Arrays.asList(StoreFile.NODE_STORE,StoreFile.RELATIONSHIP_STORE,StoreFile.RELATIONSHIP_GROUP_STORE,StoreFile.LABEL_TOKEN_STORE,StoreFile.NODE_LABEL_STORE,StoreFile.LABEL_TOKEN_NAMES_STORE,StoreFile.PROPERTY_STORE,StoreFile.PROPERTY_KEY_TOKEN_STORE,StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE,StoreFile.SCHEMA_STORE,StoreFile.COUNTS_STORE_LEFT,StoreFile.COUNTS_STORE_RIGHT);
  idFilesToDelete=allExcept(StoreFile.RELATIONSHIP_GROUP_STORE);
break;
case Legacy20Store.LEGACY_VERSION:
filesToMove=Arrays.asList(StoreFile.NODE_STORE,StoreFile.RELATIONSHIP_STORE,StoreFile.RELATIONSHIP_GROUP_STORE,StoreFile.COUNTS_STORE_LEFT,StoreFile.COUNTS_STORE_RIGHT);
idFilesToDelete=allExcept(StoreFile.RELATIONSHIP_GROUP_STORE);
break;
case Legacy21Store.LEGACY_VERSION:
filesToMove=Arrays.asList(StoreFile.NODE_STORE,StoreFile.COUNTS_STORE_LEFT,StoreFile.COUNTS_STORE_RIGHT,StoreFile.PROPERTY_STORE,StoreFile.PROPERTY_KEY_TOKEN_STORE,StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE);
idFilesToDelete=new StoreFile[]{};
break;
default :
throw new IllegalStateException("Unknown version to upgrade from: " + versionToUpgradeFrom);
}
StoreFile.fileOperation(DELETE,fileSystem,migrationDir,null,Iterables.<StoreFile,StoreFile>iterable(idFilesToDelete),true,false,StoreFileType.ID);
StoreFile.fileOperation(MOVE,fileSystem,migrationDir,storeDir,filesToMove,true,true,StoreFileType.values());
ensureStoreVersions(storeDir);
updateOrAddNeoStoreFieldsAsPartOfMigration(migrationDir,storeDir);
legacyLogs.operate(DELETE,storeDir,null);
legacyLogs.deleteUnusedLogFiles(storeDir);
}
