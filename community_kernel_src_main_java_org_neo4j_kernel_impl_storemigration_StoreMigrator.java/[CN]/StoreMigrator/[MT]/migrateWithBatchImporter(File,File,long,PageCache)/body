{
  prepareBatchImportMigration(storeDir,migrationDir);
  LegacyStore legacyStore;
switch (versionToUpgradeFrom) {
case Legacy19Store.LEGACY_VERSION:
    legacyStore=new Legacy19Store(fileSystem,new File(storeDir,NeoStore.DEFAULT_NAME));
  break;
case Legacy20Store.LEGACY_VERSION:
legacyStore=new Legacy20Store(fileSystem,new File(storeDir,NeoStore.DEFAULT_NAME));
break;
default :
throw new IllegalStateException("Unknown version to upgrade from: " + versionToUpgradeFrom);
}
BatchImporter importer=new ParallelBatchImporter(migrationDir.getAbsolutePath(),fileSystem,new Configuration.OverrideFromConfig(config),logging,migrationBatchImporterMonitor(legacyStore,progressMonitor),parallel(),readHighTokenIds(storeDir,lastTxId));
Iterable<InputNode> nodes=legacyNodesAsInput(legacyStore);
Iterable<InputRelationship> relationships=legacyRelationshipsAsInput(legacyStore);
importer.doImport(Inputs.input(nodes,relationships,IdMappings.actual()));
progressMonitor.finished();
if (legacyStore instanceof Legacy19Store) {
Legacy19Store legacy19Store=(Legacy19Store)legacyStore;
try (PropertyStore propertyStore=storeFactory(pageCache,migrationDir).newPropertyStore()){
migratePropertyKeys(legacy19Store,propertyStore);
}
 }
legacyStore.close();
}
