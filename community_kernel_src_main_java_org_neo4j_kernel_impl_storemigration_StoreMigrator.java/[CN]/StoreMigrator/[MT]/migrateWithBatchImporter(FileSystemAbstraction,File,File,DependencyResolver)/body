{
  LegacyStore legacyStore;
switch (versionToUpgradeFrom) {
case Legacy19Store.LEGACY_VERSION:
    legacyStore=new Legacy19Store(fileSystem,new File(storeDir,NeoStore.DEFAULT_NAME));
  break;
case Legacy20Store.LEGACY_VERSION:
legacyStore=new Legacy20Store(fileSystem,new File(storeDir,NeoStore.DEFAULT_NAME));
break;
default :
throw new IllegalStateException("Unknown version to upgrade from: " + versionToUpgradeFrom);
}
ExecutionMonitor executionMonitor=new CoarseBoundedProgressExecutionMonitor(legacyStore.getNodeStoreReader().getMaxId(),legacyStore.getRelStoreReader().getMaxId()){
@Override protected void percent(int percent){
progressMonitor.percentComplete(percent);
}
}
;
BatchImporter importer=new ParallelBatchImporter(migrationDir.getAbsolutePath(),fileSystem,new Configuration.OverrideFromConfig(config),logging,executionMonitor);
Iterable<InputNode> nodes=legacyNodesAsInput(legacyStore);
Iterable<InputRelationship> relationships=legacyRelationshipsAsInput(legacyStore);
importer.doImport(nodes,relationships,IdMappings.actual());
progressMonitor.finished();
if (legacyStore instanceof Legacy19Store) {
Legacy19Store legacy19Store=(Legacy19Store)legacyStore;
LifeSupport life=new LifeSupport();
life.start();
PageCache pageCache=createPageCache(fileSystem,"migrator-dedup-properties",life);
PropertyStore propertyStore=storeFactory(fileSystem,pageCache,migrationDir).newPropertyStore();
try {
migratePropertyKeys(legacy19Store,propertyStore);
}
  finally {
propertyStore.close();
life.shutdown();
}
}
legacyStore.close();
}
