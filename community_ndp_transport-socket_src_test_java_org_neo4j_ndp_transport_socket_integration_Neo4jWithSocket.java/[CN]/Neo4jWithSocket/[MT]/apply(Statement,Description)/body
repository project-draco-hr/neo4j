{
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      final GraphDatabaseService gdb=new TestGraphDatabaseFactory().newImpermanentDatabase();
      final GraphDatabaseAPI api=((GraphDatabaseAPI)gdb);
      final LogService logging=api.getDependencyResolver().resolveDependency(LogService.class);
      final Sessions sessions=life.add(new StandardSessions(api,logging));
      PrimitiveLongObjectMap<Function<Channel,SocketProtocol>> availableVersions=longObjectMap();
      availableVersions.put(SocketProtocolV1.VERSION,new Function<Channel,SocketProtocol>(){
        @Override public SocketProtocol apply(        Channel channel){
          return new SocketProtocolV1(logging,sessions.newSession(),channel);
        }
      }
);
      socketTransport=new SocketTransport(new HostnamePort("localhost:7687"),availableVersions);
      wsTransport=new WebSocketTransport(new HostnamePort("localhost:7688"),availableVersions);
      life.add(new NettyServer(asList(socketTransport,wsTransport)));
      life.start();
      try {
        statement.evaluate();
      }
  finally {
        life.shutdown();
        gdb.shutdown();
      }
    }
  }
;
}
