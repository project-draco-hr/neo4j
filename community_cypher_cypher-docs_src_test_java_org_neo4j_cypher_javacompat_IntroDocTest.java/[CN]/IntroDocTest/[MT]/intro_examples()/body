{
  try (Transaction ignored=graphdb.beginTx()){
    Writer fw=AsciiDocGenerator.getFW(DOCS_TARGET,gen.get().getTitle());
    data.get();
    fw.append("\nImagine an example graph like the following one:\n\n");
    fw.append(AsciiDocGenerator.dumpToSeparateFileWithType(new File(DOCS_TARGET),"intro.graph",AsciidocHelper.createGraphVizWithNodeId("Example Graph",graphdb(),"cypher-intro")));
    fw.append("\nFor example, here is a query which finds a user called John and then traverses " + "the graph looking for friends of Johns friends (though not his direct friends) before returning " + "both John and any friends-of-friends that are found.");
    fw.append("\n\n");
    String query="MATCH (john {name: 'John'})-[:friend]->()-[:friend]->(fof) RETURN john, fof ";
    fw.append(AsciiDocGenerator.dumpToSeparateFileWithType(new File(DOCS_TARGET),"intro.query",createCypherSnippet(query)));
    fw.append("\nResulting in:\n\n");
    fw.append(AsciiDocGenerator.dumpToSeparateFileWithType(new File(DOCS_TARGET),"intro.result",createQueryResultSnippet(engine.execute(query).dumpToString())));
    fw.append("\nNext up we will add filtering to set more parts " + "in motion:\n\nIn this next example, we take a list of users " + "and traverse the graph looking for those other "+ "users that have an outgoing +friend+ relationship, returning "+ "only those followed users who have a +name+ property starting with +S+.");
    query="MATCH (user)-[:friend]->(follower) WHERE " + "user.name IN ['Joe', 'John', 'Sara', 'Maria', 'Steve'] AND follower.name =~ 'S.*' " + "RETURN user, follower.name ";
    fw.append("\n\n");
    fw.append(AsciiDocGenerator.dumpToSeparateFileWithType(new File(DOCS_TARGET),"intro.query",createCypherSnippet(query)));
    fw.append("\nResulting in:\n\n");
    fw.append(AsciiDocGenerator.dumpToSeparateFileWithType(new File(DOCS_TARGET),"intro.result",createQueryResultSnippet(engine.execute(query).dumpToString())));
    fw.close();
  }
 }
