{
  ClusterManager clusterManager=new ClusterManager(fromXml(getClass().getResource("/threeinstances.xml").toURI()),TargetDirectory.forTest(getClass()).directory("testCluster",true),MapUtil.stringMap(),MapUtil.<Integer,Map<String,String>>genericMap(2,MapUtil.stringMap(HaSettings.slave_only.name(),"true"),3,MapUtil.stringMap(HaSettings.slave_only.name(),"true")));
  try {
    clusterManager.start();
    final CountDownLatch failedLatch=new CountDownLatch(2);
    final CountDownLatch electedLatch=new CountDownLatch(2);
    HeartbeatListener masterDownListener=new HeartbeatListener(){
      @Override public void failed(      URI server){
        failedLatch.countDown();
      }
      @Override public void alive(      URI server){
      }
    }
;
    for (    HighlyAvailableGraphDatabase highlyAvailableGraphDatabase : clusterManager.getDefaultCluster().getAllMembers()) {
      if (!highlyAvailableGraphDatabase.isMaster()) {
        highlyAvailableGraphDatabase.getDependencyResolver().resolveDependency(ClusterClient.class).addHeartbeatListener(masterDownListener);
        highlyAvailableGraphDatabase.getDependencyResolver().resolveDependency(ClusterClient.class).addClusterListener(new ClusterListener.Adapter(){
          @Override public void elected(          String role,          URI electedMember){
            electedLatch.countDown();
          }
        }
);
      }
    }
    HighlyAvailableGraphDatabase master=clusterManager.getDefaultCluster().getMaster();
    ClusterManager.RepairKit repairKit=clusterManager.getDefaultCluster().fail(master);
    failedLatch.await();
    repairKit.repair();
    electedLatch.await();
    HighlyAvailableGraphDatabase slaveDatabase=clusterManager.getDefaultCluster().getAnySlave();
    Transaction tx=slaveDatabase.beginTx();
    Node node=slaveDatabase.createNode();
    node.setProperty("foo","bar");
    long nodeId=node.getId();
    tx.success();
    tx.finish();
    node=master.getNodeById(nodeId);
    Assert.assertThat(node.getProperty("foo").toString(),equalTo("bar"));
  }
  finally {
    clusterManager.stop();
  }
}
