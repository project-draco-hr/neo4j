{
  if (currentPathPredecessors.contains(currentNode)) {
    return;
  }
  LinkedList<Path> paths=pathsFromOneDirection.get(currentNode);
  if (paths != null) {
    for (    Path path : paths) {
      boolean simplePath=true;
      for (Path p=path; p != null; p=p.tail) {
        if (currentPathPredecessors.contains(p.head)) {
          simplePath=false;
          break;
        }
      }
      if (simplePath && currentDepth > 0 && path.tail != null) {
        break;
      }
      if (simplePath) {
        LinkedList<Object> newFoundPath=new LinkedList<Object>(currentPathPredecessors);
        for (Path p=path; p != null; p=p.tail) {
          newFoundPath.add(p.head);
          if (p.rel != null) {
            newFoundPath.add(p.rel);
          }
        }
        foundPaths.add(newFoundPath);
      }
    }
  }
  if (currentDepth > 0) {
    for (    RelationshipType relationshipType : relationshipTypes) {
      for (      Relationship relationship : currentNode.getRelationships(relationshipType,relationshipDirection)) {
        Node targetNode=relationship.getOtherNode(currentNode);
        LinkedList<Object> newPath=new LinkedList<Object>(currentPathPredecessors);
        newPath.add(currentNode);
        newPath.add(relationship);
        traverser2(targetNode,currentDepth - 1,newPath);
      }
    }
  }
}
