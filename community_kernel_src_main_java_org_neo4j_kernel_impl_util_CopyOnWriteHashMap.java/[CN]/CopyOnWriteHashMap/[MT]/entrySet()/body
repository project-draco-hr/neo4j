{
  return new AbstractSet<Entry<K,V>>(){
    @Override public boolean remove(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public Iterator<Entry<K,V>> iterator(){
      return new UnsupportedRemoveIterator<Entry<K,V>>(actual.entrySet().iterator()){
        @Override public Entry<K,V> next(){
          final Entry<K,V> actualNext=super.next();
          return new Entry<K,V>(){
            @Override public K getKey(){
              return actualNext.getKey();
            }
            @Override public V getValue(){
              return actualNext.getValue();
            }
            @Override public V setValue(            V value){
              throw new UnsupportedOperationException();
            }
            @Override public boolean equals(            Object obj){
              return actualNext.equals(obj);
            }
            @Override public int hashCode(){
              return actualNext.hashCode();
            }
          }
;
        }
      }
;
    }
    @Override public int size(){
      return actual.size();
    }
  }
;
}
