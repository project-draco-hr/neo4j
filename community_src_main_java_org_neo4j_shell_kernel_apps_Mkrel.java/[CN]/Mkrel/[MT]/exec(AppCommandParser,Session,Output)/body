{
  assertCurrentIsNode(session);
  boolean createNode=parser.options().containsKey("c");
  boolean suppliedNode=parser.options().containsKey("n");
  Node node=null;
  if (createNode) {
    node=getServer().getDb().createNode();
    session.set(KEY_LAST_CREATED_NODE,"" + node.getId());
  }
 else   if (suppliedNode) {
    node=getNodeById(Long.parseLong(parser.options().get("n")));
  }
 else {
    throw new ShellException("Must either create node (-c)" + " or supply node id (-n <id>)");
  }
  if (parser.options().get("t") == null) {
    throw new ShellException("Must supply relationship type " + "(-t <relationship-type-name>)");
  }
  RelationshipType type=this.getRelationshipType(parser.options().get("t"));
  Direction direction=this.getDirection(parser.options().get("d"));
  Node currentNode=getCurrent(session).asNode();
  Node startNode=direction == Direction.OUTGOING ? currentNode : node;
  Node endNode=direction == Direction.OUTGOING ? node : currentNode;
  Relationship relationship=startNode.createRelationshipTo(endNode,type);
  session.set(KEY_LAST_CREATED_RELATIONSHIP,relationship.getId());
  boolean verbose=parser.options().containsKey("v");
  if (createNode && verbose) {
    out.println("Node " + getDisplayName(getServer(),session,node,false) + " created");
  }
  if (verbose) {
    out.println("Relationship " + getDisplayName(getServer(),session,relationship,true,false) + " created");
  }
  return null;
}
