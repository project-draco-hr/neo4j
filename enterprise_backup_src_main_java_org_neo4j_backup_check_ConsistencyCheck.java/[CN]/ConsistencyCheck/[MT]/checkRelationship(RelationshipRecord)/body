{
  boolean fail=false;
  if (rel.getType() < 0)   fail|=inconsistent(rels,rel,"invalid type id");
 else {
    RelationshipTypeRecord type=relTypes.forceGetRecord(rel.getType());
    if (!type.inUse())     fail|=inconsistent(rels,rel,relTypes,type,"type not in use");
  }
  for (  RelationshipField field : relFields) {
    long otherId=field.relOf(rel);
    if (otherId == field.none) {
      Long nodeId=field.nodeOf(rel);
      if (nodeId != null) {
        NodeRecord node=nodes.forceGetRecord(nodeId);
        if (!node.inUse() || node.getNextRel() != rel.getId())         fail|=inconsistent(rels,rel,nodes,node,"invalid " + field.name() + " reference, node does not reference back");
      }
    }
 else {
      RelationshipRecord other=rels.forceGetRecord(otherId);
      if (!other.inUse())       fail|=inconsistent(rels,rel,other,field.name() + " reference to record not used");
 else       if (!field.invConsistent(rel,other))       fail|=inconsistent(rels,rel,other,"not part of the same chain, invalid " + field.name() + " reference");
    }
  }
  for (  NodeField field : nodeFields) {
    long nodeId=field.get(rel);
    if (nodeId < 0)     fail|=inconsistent(rels,rel,"invalid " + field.name() + " node reference");
 else {
      NodeRecord node=nodes.forceGetRecord(nodeId);
      if (!node.inUse())       fail|=inconsistent(rels,rel,nodes,node,"invalid " + field.name() + " node reference, not in use");
    }
  }
  if (props != null) {
    long propId=rel.getNextProp();
    if (!Record.NO_NEXT_PROPERTY.value(propId)) {
      PropertyRecord prop=props.forceGetRecord(propId);
      if (!prop.inUse())       fail|=inconsistent(rels,rel,props,prop,"reference to property not in use");
 else       if (prop.getNodeId() != -1 || (prop.getRelId() != -1 && prop.getRelId() != rel.getId()))       fail|=inconsistent(rels,rel,props,prop,"reference to property for other entity");
    }
  }
  return fail;
}
