{
  boolean fail=false;
  if (!rel.inUse()) {
    RelationshipRecord old=rels.forceGetRaw(rel.getId());
    if (old.inUse()) {
      for (      RelationshipField field : relFields) {
        long otherId=field.relOf(old);
        if (otherId == field.none) {
          Long nodeId=field.nodeOf(old);
          if (nodeId != null) {
            NodeRecord node=nodes.forceGetRecord(nodeId);
            if (node.inUse() && node.getNextRel() == old.getId())             fail|=inconsistent(rels,rel,nodes,node,REMOVED_RELATIONSHIP_STILL_REFERENCED);
          }
        }
 else {
          RelationshipRecord other=rels.forceGetRecord(otherId);
          if (other.inUse() && field.invConsistent(old,other))           fail|=inconsistent(rels,rel,other,REMOVED_RELATIONSHIP_STILL_REFERENCED);
        }
      }
      fail|=checkPropertyReference(rel,rels,new OwningRelationship(rel.getId()));
    }
    return fail;
  }
  if (rel.getType() < 0)   fail|=inconsistent(rels,rel,INVALID_TYPE_ID);
 else {
    RelationshipTypeRecord type=relTypes.forceGetRecord(rel.getType());
    if (!type.inUse())     fail|=inconsistent(rels,rel,relTypes,type,TYPE_NOT_IN_USE);
  }
  for (  RelationshipField field : relFields) {
    long otherId=field.relOf(rel);
    if (otherId == field.none) {
      Long nodeId=field.nodeOf(rel);
      if (nodeId != null) {
        NodeRecord node=nodes.forceGetRecord(nodeId);
        if (!node.inUse() || node.getNextRel() != rel.getId())         fail|=inconsistent(rels,rel,nodes,node,field.noBackReference);
      }
    }
 else {
      RelationshipRecord other=rels.forceGetRecord(otherId);
      if (!other.inUse())       fail|=inconsistent(rels,rel,other,field.notInUse);
 else       if (!field.invConsistent(rel,other))       fail|=inconsistent(rels,rel,other,field.differentChain);
    }
  }
  for (  NodeField field : nodeFields) {
    long nodeId=field.get(rel);
    if (nodeId < 0)     fail|=inconsistent(rels,rel,field.invalidReference);
 else {
      NodeRecord node=nodes.forceGetRecord(nodeId);
      if (!node.inUse())       fail|=inconsistent(rels,rel,nodes,node,field.notInUse);
    }
  }
  fail|=checkPropertyReference(rel,rels,new OwningRelationship(rel.getId()));
  return fail;
}
