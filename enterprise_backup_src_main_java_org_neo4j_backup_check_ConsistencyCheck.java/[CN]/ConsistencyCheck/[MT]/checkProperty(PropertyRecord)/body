{
  boolean fail=false;
  if (!property.inUse()) {
    PropertyRecord old=props.forceGetRaw(property.getId());
    if (old.inUse()) {
      if (!Record.NO_NEXT_PROPERTY.value(old.getNextProp())) {
        PropertyRecord next=props.forceGetRecord(old.getNextProp());
        if (next.inUse() && next.getPrevProp() == old.getId())         fail|=inconsistent(props,property,next,REMOVED_PROPERTY_STILL_REFERENCED);
      }
      if (!Record.NO_PREVIOUS_PROPERTY.value(old.getPrevProp())) {
        PropertyRecord prev=props.forceGetRecord(old.getPrevProp());
        if (prev.inUse() && prev.getNextProp() == old.getId())         fail|=inconsistent(props,property,prev,REMOVED_PROPERTY_STILL_REFERENCED);
      }
 else {
        if (property.getNodeId() != -1)         fail|=checkPropertyOwnerReference(property,property.getNodeId(),nodes);
 else         if (property.getRelId() != -1)         fail|=checkPropertyOwnerReference(property,property.getRelId(),rels);
 else         if (((DiffRecordStore<PropertyRecord>)props).isModified(property.getId()))         fail|=inconsistent(props,property,PROPERTY_CHANGED_WITHOUT_OWNER);
      }
      fail|=checkOwnerChain(property);
    }
    return fail;
  }
  long nextId=property.getNextProp();
  if (!Record.NO_NEXT_PROPERTY.value(nextId)) {
    PropertyRecord next=props.forceGetRecord(nextId);
    if (!next.inUse())     fail|=inconsistent(props,property,next,NEXT_PROPERTY_NOT_IN_USE);
    if (next.getPrevProp() != property.getId())     fail|=inconsistent(props,property,next,PROPERTY_NEXT_WRONG_BACKREFERENCE);
  }
  long prevId=property.getPrevProp();
  if (!Record.NO_PREVIOUS_PROPERTY.value(prevId)) {
    PropertyRecord prev=props.forceGetRecord(prevId);
    if (!prev.inUse())     fail|=inconsistent(props,property,prev,PREV_PROPERTY_NOT_IN_USE);
    if (prev.getNextProp() != property.getId())     fail|=inconsistent(props,property,prev,PROPERTY_PREV_WRONG_BACKREFERENCE);
  }
 else {
    if (property.getNodeId() != -1)     fail|=checkPropertyOwnerReference(property,property.getNodeId(),nodes);
 else     if (property.getRelId() != -1)     fail|=checkPropertyOwnerReference(property,property.getRelId(),rels);
 else     if (props instanceof DiffRecordStore<?> && ((DiffRecordStore<PropertyRecord>)props).isModified(property.getId()))     fail|=inconsistent(props,property,PROPERTY_CHANGED_WITHOUT_OWNER);
  }
  fail|=checkOwnerChain(property);
  for (  PropertyBlock block : property.getPropertyBlocks()) {
    if (block.getKeyIndexId() < 0)     fail|=inconsistent(props,property,INVALID_PROPERTY_KEY.forBlock(block));
 else {
      PropertyIndexRecord key=propIndexes.forceGetRecord(block.getKeyIndexId());
      if (!key.inUse())       fail|=inconsistent(props,property,propIndexes,key,UNUSED_PROPERTY_KEY.forBlock(block));
    }
    RecordStore<DynamicRecord> dynStore=null;
    PropertyType type=block.forceGetType();
    if (type == null) {
      fail|=inconsistent(props,property,ILLEGAL_PROPERTY_TYPE.forBlock(block));
    }
 else switch (block.getType()) {
case STRING:
      dynStore=strings;
    break;
case ARRAY:
  dynStore=arrays;
break;
}
if (dynStore != null) {
DynamicRecord dynrec=dynStore.forceGetRecord(block.getSingleValueLong());
if (!dynrec.inUse()) fail|=inconsistent(props,property,dynStore,dynrec,DYNAMIC_NOT_IN_USE.forBlock(block));
}
}
return fail;
}
