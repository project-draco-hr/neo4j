{
  final Id denseNodeId=id(), otherNodeId=id(), thirdNodeId=id();
  final Id firstRelationshipId=id(), otherRelationshipId=id();
  final Id groupAId=id();
  final Id typeA=id(), typeB=id();
  RecordAccessSet existingStore=existingStore(new ExistingContents(){
    @Override public void fill(    NeoStore neoStore,    TransactionDataBuilder transaction){
      transaction.create(group(groupAId.get(neoStore.getRelationshipGroupStore()),(int)typeA.get(neoStore.getRelationshipTypeStore())).asInUse().withFirstOut(firstRelationshipId.get(neoStore.getRelationshipStore())));
      transaction.create(node(denseNodeId.get(neoStore.getNodeStore())).asInUse().asDense().withNextRel(groupAId.get()));
      otherRelationshipId.get(neoStore.getRelationshipStore());
      typeB.get(neoStore.getRelationshipGroupStore());
      otherNodeId.get(neoStore.getNodeStore());
      thirdNodeId.get(neoStore.getNodeStore());
    }
  }
);
  List<LogEntry> translated=translate(existingStore,transaction(new TransactionContents(){
    @Override public void fill(    TransactionDataBuilder transaction){
      transaction.create(node(denseNodeId.get()).asInUse().withNextRel(otherRelationshipId.get()));
      transaction.create(relationship(otherRelationshipId.get(),thirdNodeId.get(),denseNodeId.get(),(int)typeB.get()).asInUse().withEndPointers(-1,firstRelationshipId.get()));
      transaction.create(relationship(firstRelationshipId.get(),denseNodeId.get(),otherNodeId.get(),(int)typeA.get()).asInUse().withStartPointers(otherRelationshipId.get(),-1));
    }
  }
));
  assertTranslatedTransaction(translated,new TransactionContents(){
    @Override public void fill(    TransactionDataBuilder transaction){
      transaction.create(node(denseNodeId.get()).asInUse().asDense().withNextRel(groupAId.get()));
      transaction.create(group(groupAId.get(),(int)typeA.get()).asInUse().withNextGroup(groupAId.get() + 1).withFirstOut(firstRelationshipId.get()));
      transaction.create(group(groupAId.get() + 1,(int)typeB.get()).asInUse().withFirstIn(otherRelationshipId.get()));
    }
  }
);
}
