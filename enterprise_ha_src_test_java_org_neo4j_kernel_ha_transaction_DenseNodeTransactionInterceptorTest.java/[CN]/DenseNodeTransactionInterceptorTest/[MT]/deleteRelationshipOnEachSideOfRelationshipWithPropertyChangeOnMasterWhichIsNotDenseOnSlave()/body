{
  final Id denseNodeId=id();
  final Id target1=id(), target2=id(), target3=id(), target4=id();
  final Id rel1Id=id(), rel2Id=id(), rel3Id=id(), rel4Id=id();
  final Id typeA=id(), typeB=id(), typeC=id();
  final Id propId=id();
  RecordAccessSet existingStore=existingStore(new ExistingContents(){
    @Override public void fill(    NeoStore neoStore,    TransactionDataBuilder transaction){
      typeA.get(neoStore.getRelationshipTypeStore());
      typeB.get(neoStore.getRelationshipTypeStore());
      typeC.get(neoStore.getRelationshipTypeStore());
      denseNodeId.get(neoStore.getNodeStore());
      target1.get(neoStore.getNodeStore());
      target2.get(neoStore.getNodeStore());
      target3.get(neoStore.getNodeStore());
      target4.get(neoStore.getNodeStore());
      rel1Id.get(neoStore.getRelationshipStore());
      rel2Id.get(neoStore.getRelationshipStore());
      rel3Id.get(neoStore.getRelationshipStore());
      rel4Id.get(neoStore.getRelationshipStore());
      propId.get(neoStore.getPropertyStore());
      transaction.create(node(denseNodeId.get()).asInUse().asDense().withNextRel(rel1Id.get()));
      transaction.create(node(target1.get()).asInUse().withNextRel(rel1Id.get()));
      transaction.create(node(target2.get()).asInUse().withNextRel(rel2Id.get()));
      transaction.create(node(target3.get()).asInUse().withNextRel(rel3Id.get()));
      transaction.create(node(target4.get()).asInUse().withNextRel(rel4Id.get()));
      transaction.create(relationship(rel1Id.get(),denseNodeId.get(),target1.get(),(int)typeA.get()).asInUse().withStartPointers(Record.NO_PREV_RELATIONSHIP.intValue(),rel2Id.get()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel2Id.get(),denseNodeId.get(),target2.get(),(int)typeA.get()).asInUse().withStartPointers(rel1Id.get(),rel3Id.get()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel3Id.get(),denseNodeId.get(),target3.get(),(int)typeB.get()).asInUse().withStartPointers(rel2Id.get(),rel4Id.get()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()).withNextProperty(propId.get()));
      transaction.create(relationship(rel4Id.get(),denseNodeId.get(),target4.get(),(int)typeC.get()).asInUse().withStartPointers(rel3Id.get(),Record.NO_NEXT_RELATIONSHIP.intValue()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(property(propId.get()).asInUse().withRelId(rel3Id.get()));
    }
  }
);
  List<LogEntry> translated=translate(existingStore,transaction(new TransactionContents(){
    @Override public void fill(    TransactionDataBuilder transaction){
      transaction.create(node(target2.get()).asInUse().withNextRel(Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(node(target4.get()).asInUse().withNextRel(Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel2Id.get(),denseNodeId.get(),target2.get(),(int)typeA.get()));
      transaction.create(relationship(rel4Id.get(),denseNodeId.get(),target4.get(),(int)typeC.get()));
      transaction.create(relationship(rel1Id.get(),denseNodeId.get(),target1.get(),(int)typeA.get()).asInUse().withStartPointers(Record.NO_PREV_RELATIONSHIP.intValue(),rel3Id.get()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel3Id.get(),denseNodeId.get(),target3.get(),(int)typeB.get()).asInUse().withStartPointers(rel1Id.get(),Record.NO_NEXT_RELATIONSHIP.intValue()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()).withNextProperty(Record.NO_NEXT_PROPERTY.intValue()));
    }
  }
));
  assertTranslatedTransaction(translated,new TransactionContents(){
    @Override public void fill(    TransactionDataBuilder transaction){
      transaction.create(node(target2.get()).asInUse().withNextRel(Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(node(target4.get()).asInUse().withNextRel(Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel2Id.get(),denseNodeId.get(),target2.get(),(int)typeA.get()));
      transaction.create(relationship(rel4Id.get(),denseNodeId.get(),target4.get(),(int)typeC.get()));
      transaction.create(relationship(rel1Id.get(),denseNodeId.get(),target1.get(),(int)typeA.get()).asInUse().withStartPointers(Record.NO_PREV_RELATIONSHIP.intValue(),rel3Id.get()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()));
      transaction.create(relationship(rel3Id.get(),denseNodeId.get(),target3.get(),(int)typeB.get()).asInUse().withStartPointers(rel1Id.get(),Record.NO_NEXT_RELATIONSHIP.intValue()).withEndPointers(Record.NO_PREV_RELATIONSHIP.intValue(),Record.NO_NEXT_RELATIONSHIP.intValue()).withNextProperty(Record.NO_NEXT_PROPERTY.intValue()));
    }
  }
);
}
