{
  File workingDirectory=new File("target/" + StoreUpgraderInterruptionTestIT.class.getSimpleName());
  MigrationTestUtils.prepareSampleLegacyDatabase(fileSystem,workingDirectory);
  DatabaseFiles failsOnBackup=new DatabaseFiles(fileSystem){
    @Override public void moveToBackupDirectory(    File workingDirectory,    File backupDirectory){
      fileSystem.mkdir(backupDirectory);
      throw new RuntimeException("Failing to backup working directory");
    }
  }
;
  assertTrue(allStoreFilesHaveVersion(fileSystem,workingDirectory,"v0.9.9"));
  try {
    newUpgrader(new StoreMigrator(new SilentMigrationProgressMonitor()),failsOnBackup).attemptUpgrade(new File(workingDirectory,NeoStore.DEFAULT_NAME));
    fail("Should throw exception");
  }
 catch (  RuntimeException e) {
    assertEquals("Failing to backup working directory",e.getMessage());
  }
  try {
    newUpgrader(new StoreMigrator(new SilentMigrationProgressMonitor()),new DatabaseFiles(fileSystem)).attemptUpgrade(new File(workingDirectory,NeoStore.DEFAULT_NAME));
    fail("Should throw exception");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().startsWith("Cannot proceed with upgrade because there is an existing upgrade backup in the way at "));
  }
}
