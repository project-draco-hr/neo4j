{
  final String path=getRoot() + "/" + FLUSH_REQUESTED_CHILD;
  byte[] data=new byte[4];
  ByteBuffer buffer=ByteBuffer.wrap(data);
  buffer.putInt(toWrite);
  boolean created=false;
  try {
    if (getZooKeeper(true).exists(path,false) == null) {
      try {
        getZooKeeper(true).create(path,data,ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
        created=true;
      }
 catch (      KeeperException inner) {
        if (inner.code() != KeeperException.Code.NODEEXISTS) {
          throw inner;
        }
      }
    }
    if (!created) {
      int current=ByteBuffer.wrap(getZooKeeper(true).getData(path,false,null)).getInt();
      if (current != STOP_FLUSHING && toWrite == STOP_FLUSHING && current != getMyMachineId().toIntegerIndex()) {
        msgLog.logMessage("Conflicted with " + current + " on getAllMachines() - will reset but waiting a bit");
        Thread.sleep(300);
      }
      if (current != toWrite) {
        msgLog.logMessage("Writing at " + FLUSH_REQUESTED_CHILD + ": "+ toWrite);
        getZooKeeper(true).setData(path,data,-1);
      }
    }
    getZooKeeper(true).getData(path,true,null);
  }
 catch (  KeeperException e) {
    throw new ZooKeeperException("Unable to write to " + FLUSH_REQUESTED_CHILD,e);
  }
catch (  InterruptedException e) {
    throw new ZooKeeperException("Interrupted while trying to write to " + FLUSH_REQUESTED_CHILD,e);
  }
}
