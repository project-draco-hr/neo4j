{
  Object o1=new Object();
  Object o1a=new Object();
  Object o2=new Object();
  Object o2a=new Object();
  Object o3=new Object();
  Object o3a=new Object();
  Supplier<Object> mockSupplier=mock(Supplier.class);
  when(mockSupplier.get()).thenReturn(o1,o1,o1,o2,o3,o3);
  Function<Object,Object> mockFunction=mock(Function.class);
  when(mockFunction.apply(o1)).thenReturn(o1a);
  when(mockFunction.apply(o2)).thenReturn(o2a);
  when(mockFunction.apply(o3)).thenReturn(o3a);
  Supplier<Object> supplier=Suppliers.adapted(mockSupplier,mockFunction);
  assertThat(supplier.get(),sameInstance(o1a));
  assertThat(supplier.get(),sameInstance(o1a));
  assertThat(supplier.get(),sameInstance(o1a));
  assertThat(supplier.get(),sameInstance(o2a));
  assertThat(supplier.get(),sameInstance(o3a));
  assertThat(supplier.get(),sameInstance(o3a));
  verify(mockFunction).apply(o1);
  verify(mockFunction).apply(o2);
  verify(mockFunction).apply(o3);
  verifyNoMoreInteractions(mockFunction);
}
