{
  return new TypeSafeMatcher<HTTP.Response>(){
    @Override protected boolean matchesSafely(    HTTP.Response response){
      try {
        Iterator<JsonNode> meta=getJsonNodeWithName(response,"meta").iterator();
        int nodeCounter=0;
        int relCounter=0;
        assertTrue("Expected to find a JSON node, but there was none",meta.hasNext());
        JsonNode node=meta.next();
        assertTrue("Expected the node to be a list (for a path)",node.isArray());
        for (        JsonNode inner : node) {
          String type=inner.get("type").getTextValue();
switch (type) {
case "node":
            if (inner.get("deleted").asBoolean()) {
              ++nodeCounter;
            }
          break;
case "relationship":
        if (inner.get("deleted").asBoolean()) {
          ++relCounter;
        }
      break;
default :
    fail("Unexpected type: " + type);
  break;
}
}
assertEquals(nodes,nodeCounter);
assertEquals(rels,relCounter);
return true;
}
 catch (JsonParseException e) {
return false;
}
}
@Override public void describeTo(Description description){
}
}
;
}
