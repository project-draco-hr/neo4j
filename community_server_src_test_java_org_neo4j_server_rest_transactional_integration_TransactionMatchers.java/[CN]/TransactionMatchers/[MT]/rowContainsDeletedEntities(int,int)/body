{
  return new TypeSafeMatcher<HTTP.Response>(){
    @Override protected boolean matchesSafely(    HTTP.Response response){
      try {
        Iterator<JsonNode> meta=getJsonNodeWithName(response,"meta").iterator();
        int nodeCounter=0;
        int relCounter=0;
        for (int i=0; i < nodes + rels; ++i) {
          assertTrue(meta.hasNext());
          JsonNode node=meta.next();
          assertThat(node.get("deleted").asBoolean(),equalTo(Boolean.TRUE));
          String type=node.get("type").getTextValue();
switch (type) {
case "node":
            ++nodeCounter;
          break;
case "relationship":
        ++relCounter;
      break;
default :
    fail("Unexpected type: " + type);
  break;
}
}
assertEquals(nodes,nodeCounter);
assertEquals(rels,relCounter);
while (meta.hasNext()) {
JsonNode node=meta.next();
assertThat(node.get("deleted").asBoolean(),equalTo(Boolean.FALSE));
}
return true;
}
 catch (JsonParseException e) {
return false;
}
}
@Override public void describeTo(Description description){
}
}
;
}
