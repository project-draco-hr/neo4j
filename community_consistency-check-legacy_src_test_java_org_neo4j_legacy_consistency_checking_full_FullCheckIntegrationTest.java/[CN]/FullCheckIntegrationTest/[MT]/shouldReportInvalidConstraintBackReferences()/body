{
  fixture.apply(new GraphStoreFixture.Transaction(){
    @Override protected void transactionData(    GraphStoreFixture.TransactionDataBuilder tx,    GraphStoreFixture.IdGenerator next){
      int ruleId1=(int)next.schema();
      int ruleId2=(int)next.schema();
      int labelId=next.label();
      int propertyKeyId=next.propertyKey();
      DynamicRecord record1=new DynamicRecord(ruleId1);
      DynamicRecord record2=new DynamicRecord(ruleId2);
      DynamicRecord record1Before=record1.clone();
      DynamicRecord record2Before=record2.clone();
      IndexRule rule1=IndexRule.constraintIndexRule(ruleId1,labelId,propertyKeyId,DESCRIPTOR,(long)ruleId2);
      UniquePropertyConstraintRule rule2=UniquePropertyConstraintRule.uniquenessConstraintRule(ruleId2,labelId,propertyKeyId,ruleId2);
      Collection<DynamicRecord> records1=serializeRule(rule1,record1);
      Collection<DynamicRecord> records2=serializeRule(rule2,record2);
      assertEquals(asList(record1),records1);
      assertEquals(asList(record2),records2);
      tx.nodeLabel(labelId,"label");
      tx.propertyKey(propertyKeyId,"property");
      tx.createSchema(asList(record1Before),records1,rule1);
      tx.createSchema(asList(record2Before),records2,rule2);
    }
  }
);
  ConsistencySummaryStatistics stats=check();
  on(stats).verify(RecordType.SCHEMA,2).andThatsAllFolks();
}
