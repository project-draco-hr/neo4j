{
  if (isReadOnly() && !isBackupSlave()) {
    throw new ReadOnlyDbException();
  }
  logger.fine("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  if (fileSystemAbstraction.fileExists(getStorageFileName() + ".id")) {
    boolean success=fileSystemAbstraction.deleteFile(getStorageFileName() + ".id");
    assert success;
  }
  createIdGenerator(getStorageFileName() + ".id");
  openIdGenerator(false);
  FileChannel fileChannel=getFileChannel();
  long highId=1;
  long defraggedCount=0;
  try {
    long fileSize=fileChannel.size();
    int recordSize=getRecordSize();
    boolean fullRebuild=true;
    if (conf.getBoolean(Configuration.rebuild_idgenerators_fast)) {
      fullRebuild=false;
      highId=findHighIdBackwards();
    }
    ByteBuffer byteBuffer=ByteBuffer.allocate(recordSize);
    LinkedList<Long> freeIdList=new LinkedList<Long>();
    if (fullRebuild) {
      for (long i=0; i * recordSize < fileSize && recordSize > 0; i++) {
        fileChannel.position(i * recordSize);
        byteBuffer.clear();
        fileChannel.read(byteBuffer);
        byteBuffer.flip();
        if (!isRecordInUse(byteBuffer)) {
          freeIdList.add(i);
        }
 else {
          highId=i;
          setHighId(highId + 1);
          while (!freeIdList.isEmpty()) {
            freeId(freeIdList.removeFirst());
            defraggedCount++;
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to rebuild id generator " + getStorageFileName(),e);
  }
  setHighId(highId + 1);
  stringLogger.logMessage(getStorageFileName() + " rebuild id generator, highId=" + getHighId()+ " defragged count="+ defraggedCount,true);
  logger.fine("[" + getStorageFileName() + "] high id="+ getHighId()+ " (defragged="+ defraggedCount+ ")");
  closeIdGenerator();
  openIdGenerator(false);
}
