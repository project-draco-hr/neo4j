{
  if (start.equals(end)) {
    return Arrays.asList(Path.singular(start));
  }
 else {
    Map<Node,List<Path.Builder>> startMap, endMap;
    startMap=pathBuilderMap(start);
    endMap=pathBuilderMap(end);
    Collection<Path> result=new LinkedList<Path>();
    for (int depth=0; depth < maxlength && result.isEmpty(); depth++) {
      Map<Node,List<Path.Builder>> source, target;
      boolean startMapIsSmallest=startMap.size() < endMap.size();
      source=startMapIsSmallest ? startMap : endMap;
      target=startMapIsSmallest ? endMap : startMap;
      Map<Node,List<Path.Builder>> resultMap=search(start,source,target,result);
      if (startMapIsSmallest) {
        startMap=resultMap;
      }
 else {
        endMap=resultMap;
      }
    }
    return Collections.unmodifiableCollection(result);
  }
}
