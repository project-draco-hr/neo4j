{
  int clockArm=ThreadLocalRandom.current().nextInt(pages.length);
  MuninnPage page;
  boolean evicted=false;
  do {
    assertHealthy();
    if (clockArm == pages.length) {
      clockArm=0;
    }
    page=pages[clockArm];
    if (page == null) {
      throw new IllegalStateException("The PageCache has been shut down");
    }
    if (page.isLoaded() && page.decrementUsage()) {
      long stamp=page.tryWriteLock();
      if (stamp != 0) {
        try (EvictionEvent evictionEvent=faultEvent.beginEviction()){
          evicted=page.isLoaded() && evictPage(page,evictionEvent);
        }
  finally {
          page.unlockWrite(stamp);
        }
      }
    }
    clockArm++;
  }
 while (!evicted);
  return page;
}
