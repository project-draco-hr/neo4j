{
  verifyHacks();
  verifyCachePageSizeIsPowerOfTwo(cachePageSize);
  verifyMinimumPageCount(maxPages,cachePageSize);
  this.pageCacheId=pageCacheIdCounter.incrementAndGet();
  this.swapperFactory=swapperFactory;
  this.cachePageSize=cachePageSize;
  this.keepFree=Math.min(pagesToKeepFree,maxPages / 2);
  this.tracer=tracer;
  this.pages=new MuninnPage[maxPages];
  this.backgroundFlushPauseRequests=new AtomicInteger();
  this.printExceptionsOnClose=true;
  long alignment=swapperFactory.getRequiredBufferAlignment();
  long expectedMaxMemory=((long)maxPages) * cachePageSize;
  MemoryManager memoryManager=new MemoryManager(expectedMaxMemory,alignment);
  Object pageList=null;
  int pageIndex=maxPages;
  while (pageIndex-- > 0) {
    MuninnPage page=new MuninnPage(cachePageSize,memoryManager);
    page.tryExclusiveLock();
    pages[pageIndex]=page;
    if (pageList == null) {
      FreePage freePage=new FreePage(page);
      freePage.setNext(null);
      pageList=freePage;
    }
 else     if (pageList instanceof FreePage && ((FreePage)pageList).count < keepFree) {
      FreePage freePage=new FreePage(page);
      freePage.setNext((FreePage)pageList);
      pageList=freePage;
    }
 else {
      page.nextFree=pageList;
      pageList=page;
    }
  }
  UnsafeUtil.putObjectVolatile(this,freelistOffset,pageList);
}
