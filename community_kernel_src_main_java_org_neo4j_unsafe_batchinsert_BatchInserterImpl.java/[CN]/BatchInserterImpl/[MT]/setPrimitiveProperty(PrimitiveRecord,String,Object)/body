{
  boolean result=false;
  long nextProp=primitive.getNextProp();
  int index=indexHolder.getKeyId(name);
  if (index == -1) {
    index=createNewPropertyIndex(name);
  }
  PropertyBlock block=new PropertyBlock();
  getPropertyStore().encodeValue(block,index,value);
  int size=block.getSize();
  PropertyRecord current=null, thatFits=null, thatHas=null;
  updatedPropertyRecords.clear();
  while (!(nextProp == Record.NO_NEXT_PROPERTY.intValue() || (thatHas != null && thatFits != null))) {
    current=getPropertyStore().getRecord(nextProp);
    if (thatHas == null && current.getPropertyBlock(index) != null) {
      thatHas=current;
      PropertyBlock removed=thatHas.removePropertyBlock(index);
      if (removed.isLight()) {
        getPropertyStore().makeHeavy(removed);
      }
      for (      DynamicRecord dynRec : removed.getValueRecords()) {
        dynRec.setInUse(false);
        thatHas.addDeletedRecord(dynRec);
      }
      updatedPropertyRecords.add(thatHas);
    }
    if (thatFits == null && (PropertyType.getPayloadSize() - current.size() >= size)) {
      thatFits=current;
    }
    nextProp=current.getNextProp();
  }
  if (thatFits == null) {
    thatFits=new PropertyRecord(getPropertyStore().nextId());
    thatFits.setInUse(true);
    result=true;
    if (primitive.getNextProp() != Record.NO_NEXT_PROPERTY.intValue()) {
      PropertyRecord first=getPropertyStore().getRecord(primitive.getNextProp());
      thatFits.setNextProp(first.getId());
      first.setPrevProp(thatFits.getId());
      updatedPropertyRecords.add(first);
    }
    primitive.setNextProp(thatFits.getId());
  }
  thatFits.addPropertyBlock(block);
  updatedPropertyRecords.add(thatFits);
  for (  PropertyRecord updatedRecord : updatedPropertyRecords) {
    getPropertyStore().updateRecord(updatedRecord);
  }
  return result;
}
