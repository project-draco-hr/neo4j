{
  if (!labelsTouched) {
    return;
  }
  final IndexRule[] rules=getIndexesNeedingPopulation();
  final IndexPopulator[] populators=new IndexPopulator[rules.length];
  LockService locks=new ReentrantLockService();
  IndexStoreView storeView=new NeoStoreIndexStoreView(locks,neoStores);
  final int[] labelIds=new int[rules.length];
  final int[] propertyKeyIds=new int[rules.length];
  for (int i=0; i < labelIds.length; i++) {
    IndexRule rule=rules[i];
    int labelId=rule.getLabel();
    int propertyKeyId=rule.getPropertyKey();
    labelIds[i]=labelId;
    propertyKeyIds[i]=propertyKeyId;
    IndexDescriptor descriptor=new IndexDescriptor(labelId,propertyKeyId);
    boolean isConstraint=rule.isConstraintIndex();
    populators[i]=schemaIndexProviders.apply(rule.getProviderDescriptor()).getPopulator(rule.getId(),descriptor,new IndexConfiguration(isConstraint),new IndexSamplingConfig(config));
    populators[i].create();
  }
  Visitor<NodePropertyUpdate,IOException> propertyUpdateVisitor=new Visitor<NodePropertyUpdate,IOException>(){
    @Override public boolean visit(    NodePropertyUpdate update) throws IOException {
      int propertyKeyInQuestion=update.getPropertyKeyId();
      for (int i=0; i < propertyKeyIds.length; i++) {
        if (propertyKeyIds[i] == propertyKeyInQuestion) {
          if (update.forLabel(labelIds[i])) {
            try {
              populators[i].add(update.getNodeId(),update.getValueAfter());
            }
 catch (            IndexEntryConflictException conflict) {
              throw conflict.notAllowed(rules[i].getLabel(),rules[i].getPropertyKey());
            }
          }
        }
      }
      return true;
    }
  }
;
  InitialNodeLabelCreationVisitor labelUpdateVisitor=new InitialNodeLabelCreationVisitor();
  StoreScan<IOException> storeScan=storeView.visitNodes(labelIds,propertyKeyIds,propertyUpdateVisitor,labelUpdateVisitor);
  storeScan.run();
  for (  IndexPopulator populator : populators) {
    populator.verifyDeferredConstraints(storeView);
    populator.close(true);
  }
  labelUpdateVisitor.close();
}
