{
  rejectAutoUpgrade(stringParams);
  Map<String,String> params=getDefaultParams();
  params.putAll(stringParams);
  this.config=new Config(params,GraphDatabaseSettings.class);
  life=new LifeSupport();
  this.storeDir=storeDir;
  ConfiguringPageCacheFactory pageCacheFactory=new ConfiguringPageCacheFactory(fileSystem,config,PageCacheTracer.NULL,NullLog.getInstance());
  PageCache pageCache=pageCacheFactory.getOrCreatePageCache();
  life.add(new PageCacheLifecycle(pageCache));
  StoreLogService logService=life.add(StoreLogService.inStoreDirectory(fileSystem,this.storeDir));
  msgLog=logService.getInternalLog(getClass());
  storeLocker=new StoreLocker(fileSystem);
  storeLocker.checkLock(this.storeDir);
  boolean dump=config.get(GraphDatabaseSettings.dump_configuration);
  this.idGeneratorFactory=new DefaultIdGeneratorFactory(fileSystem);
  StoreFactory sf=new StoreFactory(this.storeDir,config,idGeneratorFactory,pageCache,fileSystem,logService.getInternalLogProvider(),InternalRecordFormatSelector.select());
  if (dump) {
    dumpConfiguration(params,System.out);
  }
  msgLog.info(Thread.currentThread() + " Starting BatchInserter(" + this+ ")");
  life.start();
  neoStores=sf.openAllNeoStores(true);
  neoStores.verifyStoreOk();
  nodeStore=neoStores.getNodeStore();
  relationshipStore=neoStores.getRelationshipStore();
  relationshipTypeTokenStore=neoStores.getRelationshipTypeTokenStore();
  propertyKeyTokenStore=neoStores.getPropertyKeyTokenStore();
  propertyStore=neoStores.getPropertyStore();
  relationshipGroupStore=neoStores.getRelationshipGroupStore();
  schemaStore=neoStores.getSchemaStore();
  labelTokenStore=neoStores.getLabelTokenStore();
  List<Token> indexes=propertyKeyTokenStore.getTokens(10000);
  propertyKeyTokens=new BatchTokenHolder(indexes);
  labelTokens=new BatchTokenHolder(labelTokenStore.getTokens(Integer.MAX_VALUE));
  List<RelationshipTypeToken> types=relationshipTypeTokenStore.getTokens(Integer.MAX_VALUE);
  relationshipTypeTokens=new BatchTokenHolder(types);
  indexStore=life.add(new IndexConfigStore(this.storeDir,fileSystem));
  schemaCache=new SchemaCache(new StandardConstraintSemantics(),schemaStore);
  indexStoreView=new NeoStoreIndexStoreView(LockService.NO_LOCK_SERVICE,neoStores);
  Dependencies deps=new Dependencies();
  deps.satisfyDependencies(fileSystem,config,logService,indexStoreView);
  KernelExtensions extensions=life.add(new KernelExtensions(new SimpleKernelContext(fileSystem,storeDir,DatabaseInfo.UNKNOWN),kernelExtensions,deps,UnsatisfiedDependencyStrategies.ignore()));
  SchemaIndexProvider provider=extensions.resolveDependency(SchemaIndexProvider.class,HighestSelectionStrategy.getInstance());
  schemaIndexProviders=new DefaultSchemaIndexProviderMap(provider);
  labelScanStore=life.add(extensions.resolveDependency(LabelScanStoreProvider.class,HighestSelectionStrategy.getInstance()).getLabelScanStore());
  actions=new BatchSchemaActions();
  recordAccess=new DirectRecordAccessSet(neoStores);
  relationshipCreator=new RelationshipCreator(new RelationshipGroupGetter(relationshipGroupStore),relationshipGroupStore.getStoreHeaderInt());
  propertyTraverser=new PropertyTraverser();
  propertyCreator=new PropertyCreator(propertyStore,propertyTraverser);
  propertyDeletor=new PropertyDeleter(propertyTraverser);
  flushStrategy=new BatchedFlushStrategy(recordAccess,config.get(GraphDatabaseSettings.batch_inserter_batch_size));
}
