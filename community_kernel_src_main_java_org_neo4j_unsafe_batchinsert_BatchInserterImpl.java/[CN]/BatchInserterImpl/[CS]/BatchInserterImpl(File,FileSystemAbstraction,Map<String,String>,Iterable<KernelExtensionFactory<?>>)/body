{
  rejectAutoUpgrade(stringParams);
  Map<String,String> params=getDefaultParams();
  params.putAll(stringParams);
  this.config=new Config(params,GraphDatabaseSettings.class);
  life=new LifeSupport();
  this.fileSystem=fileSystem;
  this.storeDir=storeDir;
  ConfiguringPageCacheFactory pageCacheFactory=new ConfiguringPageCacheFactory(fileSystem,config,PageCacheTracer.NULL,NullLog.getInstance());
  PageCache pageCache=pageCacheFactory.getOrCreatePageCache();
  life.add(new PageCacheLifecycle(pageCache));
  logService=life.add(StoreLogService.inStoreDirectory(fileSystem,this.storeDir));
  msgLog=logService.getInternalLog(getClass());
  storeLocker=new StoreLocker(fileSystem);
  storeLocker.checkLock(this.storeDir);
  boolean dump=config.get(GraphDatabaseSettings.dump_configuration);
  this.idGeneratorFactory=new DefaultIdGeneratorFactory(fileSystem);
  StoreFactory sf=new StoreFactory(this.storeDir,config,idGeneratorFactory,pageCache,fileSystem,logService.getInternalLogProvider());
  if (dump) {
    dumpConfiguration(params,System.out);
  }
  msgLog.info(Thread.currentThread() + " Starting BatchInserter(" + this+ ")");
  life.start();
  neoStore=sf.newNeoStore(true);
  neoStore.verifyStoreOk();
  neoStore.makeStoreOk();
  List<Token> indexes=getPropertyKeyTokenStore().getTokens(10000);
  propertyKeyTokens=new BatchTokenHolder(indexes);
  labelTokens=new BatchTokenHolder(neoStore.getLabelTokenStore().getTokens(Integer.MAX_VALUE));
  List<RelationshipTypeToken> types=getRelationshipTypeStore().getTokens(Integer.MAX_VALUE);
  relationshipTypeTokens=new BatchTokenHolder(types);
  indexStore=life.add(new IndexConfigStore(this.storeDir,fileSystem));
  schemaCache=new SchemaCache(new StandardConstraintSemantics(),neoStore.getSchemaStore());
  Dependencies deps=new Dependencies();
  deps.satisfyDependencies(fileSystem,config,logService,new NeoStoreSupplier(){
    @Override public NeoStore get(){
      return neoStore;
    }
  }
);
  KernelContext kernelContext=new KernelContext(){
    @Override public FileSystemAbstraction fileSystem(){
      return fileSystem;
    }
    @Override public File storeDir(){
      return storeDir;
    }
  }
;
  KernelExtensions extensions=life.add(new KernelExtensions(kernelContext,kernelExtensions,deps,UnsatisfiedDependencyStrategies.ignore()));
  SchemaIndexProvider provider=extensions.resolveDependency(SchemaIndexProvider.class,SchemaIndexProvider.HIGHEST_PRIORITIZED_OR_NONE);
  schemaIndexProviders=new DefaultSchemaIndexProviderMap(provider);
  labelScanStore=life.add(extensions.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore());
  actions=new BatchSchemaActions();
  recordAccess=new DirectRecordAccessSet(neoStore);
  relationshipCreator=new RelationshipCreator(new NoOpClient(),new RelationshipGroupGetter(neoStore.getRelationshipGroupStore()),neoStore.getDenseNodeThreshold());
  propertyTraverser=new PropertyTraverser();
  propertyCreator=new PropertyCreator(getPropertyStore(),propertyTraverser);
  propertyDeletor=new PropertyDeleter(getPropertyStore(),propertyTraverser);
  flushStrategy=new BatchedFlushStrategy(recordAccess,config.get(GraphDatabaseSettings.batch_inserter_batch_size));
}
