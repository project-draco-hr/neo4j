{
  rejectAutoUpgrade(stringParams);
  Map<String,String> params=getDefaultParams();
  params.putAll(stringParams);
  this.config=new Config(params,GraphDatabaseSettings.class);
  Monitors monitors=new Monitors();
  life=new LifeSupport();
  this.fileSystem=fileSystem;
  this.storeDir=storeDir;
  ConfiguringPageCacheFactory pageCacheFactory=new ConfiguringPageCacheFactory(fileSystem,config,PageCacheTracer.NULL);
  PageCache pageCache=pageCacheFactory.getOrCreatePageCache();
  JobScheduler jobScheduler=life.add(new Neo4jJobScheduler());
  logService=life.add(new StoreLogService(NullLogProvider.getInstance(),fileSystem,this.storeDir,jobScheduler));
  msgLog=logService.getInternalLog(getClass());
  storeLocker=new StoreLocker(fileSystem);
  storeLocker.checkLock(this.storeDir);
  boolean dump=config.get(GraphDatabaseSettings.dump_configuration);
  this.idGeneratorFactory=new DefaultIdGeneratorFactory();
  StoreFactory sf=new StoreFactory(this.storeDir,config,idGeneratorFactory,pageCache,fileSystem,logService.getInternalLogProvider(),monitors);
  if (dump) {
    dumpConfiguration(params);
  }
  msgLog.info(Thread.currentThread() + " Starting BatchInserter(" + this+ ")");
  life.start();
  neoStore=sf.newNeoStore(true);
  neoStore.verifyStoreOk();
  neoStore.makeStoreOk();
  Token[] indexes=getPropertyKeyTokenStore().getTokens(10000);
  propertyKeyTokens=new BatchTokenHolder(indexes);
  labelTokens=new BatchTokenHolder(neoStore.getLabelTokenStore().getTokens(Integer.MAX_VALUE));
  Token[] types=getRelationshipTypeStore().getTokens(Integer.MAX_VALUE);
  relationshipTypeTokens=new BatchTokenHolder(types);
  indexStore=life.add(new IndexConfigStore(this.storeDir,fileSystem));
  schemaCache=new SchemaCache(neoStore.getSchemaStore());
  Dependencies deps=new Dependencies();
  deps.satisfyDependencies(fileSystem,config,logService,new NeoStoreSupplier(){
    @Override public NeoStore get(){
      return neoStore;
    }
  }
);
  KernelContext kernelContext=new KernelContext(){
    @Override public FileSystemAbstraction fileSystem(){
      return fileSystem;
    }
    @Override public File storeDir(){
      return storeDir;
    }
  }
;
  KernelExtensions extensions=life.add(new KernelExtensions(kernelContext,kernelExtensions,deps,UnsatisfiedDependencyStrategies.ignore()));
  SchemaIndexProvider provider=extensions.resolveDependency(SchemaIndexProvider.class,SchemaIndexProvider.HIGHEST_PRIORITIZED_OR_NONE);
  schemaIndexProviders=new DefaultSchemaIndexProviderMap(provider);
  labelScanStore=life.add(extensions.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore());
  actions=new BatchSchemaActions();
  recordAccess=new DirectRecordAccessSet(neoStore);
  relationshipCreator=new RelationshipCreator(RelationshipLocker.NO_LOCKING,new RelationshipGroupGetter(neoStore.getRelationshipGroupStore()),neoStore.getDenseNodeThreshold());
  propertyTraverser=new PropertyTraverser();
  propertyCreator=new PropertyCreator(getPropertyStore(),propertyTraverser);
  propertyDeletor=new PropertyDeleter(getPropertyStore(),propertyTraverser);
}
