{
  File dir=store.prepareDirectory(testDir.graphDbDir());
  GraphDatabaseFactory factory=new TestGraphDatabaseFactory();
  GraphDatabaseBuilder builder=factory.newEmbeddedDatabaseBuilder(dir);
  builder.setConfig(GraphDatabaseSettings.allow_store_upgrade,"true");
  builder.setConfig(GraphDatabaseSettings.pagecache_memory,"8m");
  builder.setConfig(GraphDatabaseFacadeFactory.Configuration.record_format,LowLimitV3_0.NAME);
  builder.setConfig(GraphDatabaseSettings.logs_directory,testDir.directory("logs").getAbsolutePath());
  GraphDatabaseService db=builder.newGraphDatabase();
  try {
    checkInstance(store,(GraphDatabaseAPI)db);
  }
  finally {
    db.shutdown();
  }
  assertConsistentStore(dir,getConfig());
  File haDir=new File(dir.getParentFile(),"ha-stuff");
  FileUtils.deleteRecursively(haDir);
  ClusterManager clusterManager=new ClusterManager.Builder(haDir).withSeedDir(dir).withCluster(clusterOfSize(2)).build();
  clusterManager.start();
  ClusterManager.ManagedCluster cluster=clusterManager.getCluster();
  HighlyAvailableGraphDatabase master, slave;
  try {
    cluster.await(allSeesAllAsAvailable());
    master=cluster.getMaster();
    checkInstance(store,master);
    slave=cluster.getAnySlave();
    checkInstance(store,slave);
  }
  finally {
    clusterManager.safeShutdown();
  }
  assertConsistentStore(new File(master.getStoreDir()),getConfig());
  assertConsistentStore(new File(slave.getStoreDir()),getConfig());
}
