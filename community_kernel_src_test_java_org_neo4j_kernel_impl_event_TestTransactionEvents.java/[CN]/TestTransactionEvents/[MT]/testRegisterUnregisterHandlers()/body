{
  Object value1=10;
  Object value2=3.5D;
  DummyTransactionEventHandler<Integer> handler1=new DummyTransactionEventHandler<>((Integer)value1);
  DummyTransactionEventHandler<Double> handler2=new DummyTransactionEventHandler<>((Double)value2);
  GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
  try {
    db.unregisterTransactionEventHandler(handler1);
    fail("Shouldn't be able to do unregister on a unregistered handler");
  }
 catch (  IllegalStateException e) {
  }
  assertTrue(handler1 == db.registerTransactionEventHandler(handler1));
  assertTrue(handler1 == db.registerTransactionEventHandler(handler1));
  assertTrue(handler1 == db.unregisterTransactionEventHandler(handler1));
  try {
    db.unregisterTransactionEventHandler(handler1);
    fail("Shouldn't be able to do unregister on a unregistered handler");
  }
 catch (  IllegalStateException e) {
  }
  assertTrue(handler1 == db.registerTransactionEventHandler(handler1));
  assertTrue(handler2 == db.registerTransactionEventHandler(handler2));
  assertTrue(handler1 == db.unregisterTransactionEventHandler(handler1));
  assertTrue(handler2 == db.unregisterTransactionEventHandler(handler2));
  db.registerTransactionEventHandler(handler1);
  try (Transaction tx=db.beginTx()){
    db.createNode().delete();
    tx.success();
  }
   assertNotNull(handler1.beforeCommit);
  assertNotNull(handler1.afterCommit);
  assertNull(handler1.afterRollback);
  assertEquals(value1,handler1.receivedState);
  assertNotNull(handler1.receivedTransactionData);
  db.unregisterTransactionEventHandler(handler1);
}
