{
  GraphDatabaseService db=dbRule.getGraphDatabaseService();
  final AtomicInteger accessCount=new AtomicInteger();
  TransactionEventHandler<Void> handler=new TransactionEventHandler.Adapter<Void>(){
    @Override public void afterCommit(    TransactionData data,    Void state){
      accessCount.set(0);
      for (      Relationship relationship : data.createdRelationships()) {
        accessData(relationship);
      }
      for (      PropertyEntry<Relationship> change : data.assignedRelationshipProperties()) {
        accessData(change.entity());
      }
      for (      PropertyEntry<Relationship> change : data.removedRelationshipProperties()) {
        accessData(change.entity());
      }
    }
    private void accessData(    Relationship relationship){
      accessCount.incrementAndGet();
      relationship.getStartNode();
      relationship.getEndNode();
      relationship.getType();
    }
  }
;
  db.registerTransactionEventHandler(handler);
  try {
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      relationship=db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST);
      tx.success();
    }
     assertEquals(1,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.setProperty("name","Smith");
      db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST);
      tx.success();
    }
     assertEquals(2,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.delete();
      tx.success();
    }
     assertEquals(1,accessCount.get());
  }
  finally {
    db.unregisterTransactionEventHandler(handler);
  }
}
