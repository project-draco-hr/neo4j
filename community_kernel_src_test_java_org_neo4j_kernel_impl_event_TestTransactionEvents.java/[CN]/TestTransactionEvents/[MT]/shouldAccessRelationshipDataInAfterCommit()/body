{
  final GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
  final AtomicInteger accessCount=new AtomicInteger();
  final Map<Long,RelationshipData> expectedRelationshipData=new HashMap<>();
  TransactionEventHandler<Void> handler=new TransactionEventHandler.Adapter<Void>(){
    @Override public void afterCommit(    TransactionData data,    Void state){
      accessCount.set(0);
      try (Transaction tx=db.beginTx()){
        for (        Relationship relationship : data.createdRelationships()) {
          accessData(relationship);
        }
        for (        PropertyEntry<Relationship> change : data.assignedRelationshipProperties()) {
          accessData(change.entity());
        }
        for (        PropertyEntry<Relationship> change : data.removedRelationshipProperties()) {
          accessData(change.entity());
        }
        tx.success();
      }
     }
    private void accessData(    Relationship relationship){
      accessCount.incrementAndGet();
      RelationshipData expectancy=expectedRelationshipData.get(relationship.getId());
      assertNotNull(expectancy);
      assertEquals(expectancy.startNode,relationship.getStartNode());
      assertEquals(expectancy.type,relationship.getType().name());
      assertEquals(expectancy.endNode,relationship.getEndNode());
    }
  }
;
  db.registerTransactionEventHandler(handler);
  try {
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      relationship=db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST);
      expectedRelationshipData.put(relationship.getId(),new RelationshipData(relationship));
      tx.success();
    }
     assertEquals(1,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.setProperty("name","Smith");
      Relationship otherRelationship=db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
      expectedRelationshipData.put(otherRelationship.getId(),new RelationshipData(otherRelationship));
      tx.success();
    }
     assertEquals(2,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.delete();
      tx.success();
    }
     assertEquals(1,accessCount.get());
  }
  finally {
    db.unregisterTransactionEventHandler(handler);
  }
}
