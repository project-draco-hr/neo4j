{
  GraphDatabaseService db=dbRule.getGraphDatabaseService();
  final AtomicInteger accessCount=new AtomicInteger();
  final Map<Long,Triplet<Node,String,Node>> expectedRelationshipData=new HashMap<>();
  TransactionEventHandler<Void> handler=new TransactionEventHandler.Adapter<Void>(){
    @Override public void afterCommit(    TransactionData data,    Void state){
      accessCount.set(0);
      for (      Relationship relationship : data.createdRelationships()) {
        accessData(relationship);
      }
      for (      PropertyEntry<Relationship> change : data.assignedRelationshipProperties()) {
        accessData(change.entity());
      }
      for (      PropertyEntry<Relationship> change : data.removedRelationshipProperties()) {
        accessData(change.entity());
      }
    }
    private void accessData(    Relationship relationship){
      accessCount.incrementAndGet();
      Triplet<Node,String,Node> expectancy=expectedRelationshipData.get(relationship.getId());
      assertNotNull(expectancy);
      assertEquals(expectancy.first(),relationship.getStartNode());
      assertEquals(expectancy.second(),relationship.getType().name());
      assertEquals(expectancy.third(),relationship.getEndNode());
    }
  }
;
  db.registerTransactionEventHandler(handler);
  try {
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      relationship=db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST);
      expectedRelationshipData.put(relationship.getId(),Triplet.of(relationship.getStartNode(),relationship.getType().name(),relationship.getEndNode()));
      tx.success();
    }
     assertEquals(1,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.setProperty("name","Smith");
      Relationship otherRelationship=db.createNode().createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
      expectedRelationshipData.put(otherRelationship.getId(),Triplet.of(otherRelationship.getStartNode(),otherRelationship.getType().name(),otherRelationship.getEndNode()));
      tx.success();
    }
     assertEquals(2,accessCount.get());
    try (Transaction tx=db.beginTx()){
      relationship.delete();
      tx.success();
    }
     assertEquals(1,accessCount.get());
  }
  finally {
    db.unregisterTransactionEventHandler(handler);
  }
}
