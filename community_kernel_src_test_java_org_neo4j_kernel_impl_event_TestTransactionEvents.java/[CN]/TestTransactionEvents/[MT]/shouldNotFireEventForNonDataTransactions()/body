{
  final AtomicInteger counter=new AtomicInteger();
  dbRule.getGraphDatabaseAPI().registerTransactionEventHandler(new TransactionEventHandler.Adapter<Void>(){
    @Override public Void beforeCommit(    TransactionData data) throws Exception {
      assertTrue("Expected only transactions that had nodes or relationships created",data.createdNodes().iterator().hasNext() || data.createdRelationships().iterator().hasNext());
      counter.incrementAndGet();
      return null;
    }
  }
);
  Label label=label("Label");
  String key="key";
  assertEquals(0,counter.get());
  try (Transaction tx=dbRule.beginTx()){
    dbRule.createNode(label);
    tx.success();
  }
   assertEquals(1,counter.get());
  try (Transaction tx=dbRule.beginTx()){
    dbRule.createNode().setProperty(key,"value");
    tx.success();
  }
   assertEquals(2,counter.get());
  try (Transaction tx=dbRule.beginTx()){
    dbRule.createNode().createRelationshipTo(dbRule.createNode(),withName("A_TYPE"));
    tx.success();
  }
   assertEquals(3,counter.get());
  try (Transaction tx=dbRule.beginTx()){
    dbRule.schema().indexFor(label).on(key).create();
    tx.success();
  }
   try (Transaction tx=dbRule.beginTx()){
    dbRule.schema().constraintFor(label).assertPropertyIsUnique("otherkey").create();
    tx.success();
  }
   try (Transaction tx=dbRule.beginTx()){
    dbRule.index().forNodes("some index",stringMap(PROVIDER,IDENTIFIER));
    tx.success();
  }
   assertEquals(3,counter.get());
}
