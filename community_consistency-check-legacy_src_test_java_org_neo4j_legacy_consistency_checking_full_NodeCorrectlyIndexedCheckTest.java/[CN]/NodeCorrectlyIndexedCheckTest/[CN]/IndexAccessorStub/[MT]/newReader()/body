{
  return new IndexReader(){
    @Override public PrimitiveLongIterator seek(    Object value){
      if (entries.containsKey(value)) {
        return PrimitiveLongCollections.iterator(entries.get(value));
      }
      return emptyIterator();
    }
    @Override public PrimitiveLongIterator rangeSeekByNumberInclusive(    Number lower,    Number upper){
      throw new UnsupportedOperationException();
    }
    @Override public PrimitiveLongIterator rangeSeekByString(    String lower,    boolean includeLower,    String upper,    boolean includeUpper){
      throw new UnsupportedOperationException();
    }
    @Override public PrimitiveLongIterator rangeSeekByPrefix(    String prefix){
      throw new UnsupportedOperationException();
    }
    @Override public PrimitiveLongIterator scan(){
      List<Long> ids=new ArrayList<>();
      for (      long[] longs : entries.values()) {
        for (        long id : longs) {
          ids.add(id);
        }
      }
      return PrimitiveLongCollections.toPrimitiveIterator(ids.iterator());
    }
    @Override public int countIndexedNodes(    long nodeId,    Object propertyValue){
      long[] candidates=entries.get(propertyValue);
      if (candidates == null) {
        return 0;
      }
      int count=0;
      for (int i=0; i < candidates.length; i++) {
        if (candidates[i] == nodeId) {
          count++;
        }
      }
      return count;
    }
    @Override public IndexSampler createSampler(){
      throw new UnsupportedOperationException();
    }
    @Override public void verifyDeferredConstraints(    Object accessor,    int propertyKeyId) throws Exception {
    }
    @Override public void verifyDeferredConstraints(    Object accessor,    int propertyKeyId,    List<Object> updatedPropertyValues) throws Exception {
    }
    @Override public void close(){
    }
  }
;
}
