{
  try {
    clear();
    int sizeIndex=buf.capacity() / SIZES[SIZES.length - 1];
    if (sizeIndex == 0)     for (; sizeIndex < SIZES.length; sizeIndex++) {
      if (buf.capacity() == SIZES[sizeIndex])       break;
    }
 else {
      sizeIndex+=SIZES.length - 1;
    }
    AtomicReferenceArray<Queue<Reference<ByteBuffer>>> pool=POOL;
    SoftReference<ByteBuffer> ref=new SoftReference<ByteBuffer>(buf);
    (sizeIndex < pool.length() ? pool.get(sizeIndex) : growPool(sizeIndex)).add(ref);
  }
  finally {
    buf=null;
  }
}
