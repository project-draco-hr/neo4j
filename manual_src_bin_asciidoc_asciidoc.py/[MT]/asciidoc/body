def asciidoc(backend, doctype, confiles, infile, outfile, options):
    'Convert AsciiDoc document to DocBook document of type doctype\n    The AsciiDoc document is read from file object src the translated\n    DocBook file written to file object dst.'

    def load_conffiles(include=[], exclude=[]):
        files = document.attributes.get('conf-files', '')
        files = [f.strip() for f in files.split('|') if f.strip()]
        files += confiles
        if files:
            for f in files:
                if os.path.isfile(f):
                    config.load_file(f, include=include, exclude=exclude)
                else:
                    raise EAsciiDoc, ('missing configuration file: %s' % f)
    try:
        for f in config.filters:
            if (not config.find_config_dir('filters', f)):
                raise EAsciiDoc, ('missing filter: %s' % f)
        if (doctype not in (None, 'article', 'manpage', 'book')):
            raise EAsciiDoc, 'illegal document type'
        for o in options:
            if (o == '-c'):
                config.dumping = True
            if (o == '-s'):
                config.header_footer = False
            if (o == '-v'):
                config.verbose = True
        document.update_attributes()
        if ('-e' not in options):
            if (not config.load_from_dirs('asciidoc.conf', include=['attributes'])):
                raise EAsciiDoc, 'configuration file asciidoc.conf missing'
            load_conffiles(include=['attributes'])
            config.load_from_dirs('asciidoc.conf')
            if (infile != '<stdin>'):
                indir = os.path.dirname(infile)
                config.load_file('asciidoc.conf', indir, include=['attributes', 'titles', 'specialchars'])
        else:
            load_conffiles(include=['attributes', 'titles', 'specialchars'])
        document.update_attributes()
        if (infile != '<stdin>'):
            if (not os.path.isfile(infile)):
                raise EAsciiDoc, ('input file %s missing' % infile)
        document.infile = infile
        AttributeList.initialize()
        reader.tabsize = config.tabsize
        reader.open(infile)
        has_header = document.parse_header(doctype, backend)
        document.attributes[('doctype-' + document.doctype)] = ''
        config.set_theme_attributes()
        if ('-e' not in options):
            f = (document.backend + '.conf')
            if (not config.load_backend()):
                raise EAsciiDoc, ('missing backend conf file: %s' % f)
        document.attributes[('backend-' + document.backend)] = ''
        document.attributes[((document.backend + '-') + document.doctype)] = ''
        doc_conffiles = []
        if ('-e' not in options):
            config.load_filters()
            document.load_lang()
            if (infile != '<stdin>'):
                config.load_file('asciidoc.conf', indir)
                config.load_backend([indir])
                config.load_filters([indir])
                f = os.path.splitext(infile)[0]
                doc_conffiles = [f for f in ((f + '.conf'), (((f + '-') + document.backend) + '.conf')) if os.path.isfile(f)]
                for f in doc_conffiles:
                    config.load_file(f)
        load_conffiles()
        args = ''
        for f in (doc_conffiles + confiles):
            args += (' --conf-file "%s"' % f)
        attrs = {}
        attrs.update(AttributeEntry.attributes)
        attrs.update(config.cmd_attrs)
        if ('title' in attrs):
            del attrs['title']
        for (k, v) in attrs.items():
            if v:
                args += (' --attribute "%s=%s"' % (k, v))
            else:
                args += (' --attribute "%s"' % k)
        document.attributes['asciidoc-args'] = args
        if (outfile is None):
            outfile = ((os.path.splitext(infile)[0] + '.') + document.backend)
            if config.outfilesuffix:
                outfile = (os.path.splitext(outfile)[0] + config.outfilesuffix)
        document.outfile = outfile
        document.attributes.update(AttributeEntry.attributes)
        document.update_attributes()
        config.expand_all_templates()
        config.validate()
        paragraphs.initialize()
        lists.initialize()
        if config.dumping:
            config.dump()
        else:
            writer.newline = config.newline
            try:
                writer.open(outfile, reader.bom)
                try:
                    document.translate(has_header)
                finally:
                    writer.close()
            finally:
                reader.closefile()
    except KeyboardInterrupt:
        raise
    except Exception as e:
        if (outfile and (outfile != '<stdout>') and os.path.isfile(outfile)):
            os.unlink(outfile)
        msg = 'FAILED: '
        if reader.cursor:
            msg = message.format('', msg)
        if isinstance(e, EAsciiDoc):
            message.stderr(('%s%s' % (msg, str(e))))
        elif (__name__ == '__main__'):
            message.stderr((msg + 'unexpected error:'))
            message.stderr(('-' * 60))
            traceback.print_exc(file=sys.stderr)
            message.stderr(('-' * 60))
        else:
            message.stderr(('%sunexpected error: %s' % (msg, str(e))))
        sys.exit(1)
