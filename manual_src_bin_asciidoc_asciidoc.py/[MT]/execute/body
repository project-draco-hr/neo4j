def execute(cmd, opts, args):
    "\n    Execute asciidoc with command-line options and arguments.\n    cmd is asciidoc command or asciidoc.py path.\n    opts and args conform to values returned by getopt.getopt().\n    Raises SystemExit if an error occurs.\n\n    Doctests:\n\n    1. Check execution:\n\n       >>> import StringIO\n       >>> infile = StringIO.StringIO('Hello *{author}*')\n       >>> outfile = StringIO.StringIO()\n       >>> opts = []\n       >>> opts.append(('--backend','html4'))\n       >>> opts.append(('--no-header-footer',None))\n       >>> opts.append(('--attribute','author=Joe Bloggs'))\n       >>> opts.append(('--out-file',outfile))\n       >>> execute(__file__, opts, [infile])\n       >>> print outfile.getvalue()\n       <p>Hello <strong>Joe Bloggs</strong></p>\n\n       >>>\n\n    "
    config.init(cmd)
    if (len(args) > 1):
        usage('Too many arguments')
        sys.exit(1)
    backend = None
    doctype = None
    confiles = []
    outfile = None
    options = []
    help_option = False
    for (o, v) in opts:
        if (o in ('--help', '-h')):
            help_option = True
        if (o == '--unsafe'):
            document.safe = False
        if (o == '--safe'):
            document.safe = True
        if (o == '--version'):
            print ('asciidoc %s' % VERSION)
            sys.exit(0)
        if (o in ('-b', '--backend')):
            backend = v
        if (o in ('-c', '--dump-conf')):
            options.append('-c')
        if (o in ('-d', '--doctype')):
            doctype = v
        if (o in ('-e', '--no-conf')):
            options.append('-e')
        if (o in ('-f', '--conf-file')):
            confiles.append(v)
        if (o == '--filter'):
            config.filters.append(v)
        if (o in ('-n', '--section-numbers')):
            o = '-a'
            v = 'numbered'
        if (o == '--theme'):
            o = '-a'
            v = ('theme=' + v)
        if (o in ('-a', '--attribute')):
            e = parse_entry(v, allow_name_only=True)
            if (not e):
                usage(('Illegal -a option: %s' % v))
                sys.exit(1)
            (k, v) = e
            if (v and (v[(-1)] == '@')):
                document.attributes[k] = v[:(-1)]
            else:
                config.cmd_attrs[k] = v
        if (o in ('-o', '--out-file')):
            outfile = v
        if (o in ('-s', '--no-header-footer')):
            options.append('-s')
        if (o in ('-v', '--verbose')):
            options.append('-v')
    if help_option:
        if (len(args) == 0):
            show_help('default')
        else:
            show_help(args[(-1)])
        sys.exit(0)
    if ((len(args) == 0) and (len(opts) == 0)):
        usage()
        sys.exit(0)
    if (len(args) == 0):
        usage('No source file specified')
        sys.exit(1)
    (stdin, stdout) = (sys.stdin, sys.stdout)
    try:
        infile = args[0]
        if (infile == '-'):
            infile = '<stdin>'
        elif isinstance(infile, str):
            infile = os.path.abspath(infile)
        else:
            sys.stdin = infile
            infile = '<stdin>'
        if (outfile == '-'):
            outfile = '<stdout>'
        elif isinstance(outfile, str):
            outfile = os.path.abspath(outfile)
        elif (outfile is None):
            if (infile == '<stdin>'):
                outfile = '<stdout>'
        else:
            sys.stdout = outfile
            outfile = '<stdout>'
        asciidoc(backend, doctype, confiles, infile, outfile, options)
        if document.has_errors:
            sys.exit(1)
    finally:
        (sys.stdin, sys.stdout) = (stdin, stdout)
