def parse_replacements(self, sect='replacements'):
    'Parse replacements section into self.replacements dictionary.'
    d = OrderedDict()
    parse_entries(self.sections.get(sect, ()), d, unquote=True)
    for (pat, rep) in d.items():
        if (not self.set_replacement(pat, rep, getattr(self, sect))):
            raise EAsciiDoc, ('[%s] entry in %s is not a valid regular expression: %s' % (sect, self.fname, pat))
