@staticmethod
def translate():
    assert (Lex.next() is Title)
    prev_sectname = Title.sectname
    Title.translate()
    if ((Title.level == 0) and (document.doctype != 'book')):
        message.error('only book doctypes can contain level 0 sections')
    if ((Title.level > document.level) and ('basebackend-docbook' in document.attributes) and (prev_sectname in ('colophon', 'abstract', 'dedication', 'glossary', 'bibliography'))):
        message.error(('%s section cannot contain sub-sections' % prev_sectname))
    if (Title.level > (document.level + 1)):
        if ((document.doctype == 'book') and (document.level == 0) and (Title.level == 2) and (prev_sectname in ('preface', 'appendix'))):
            pass
        else:
            message.warning(('section title out of sequence: expected level %d, got level %d' % ((document.level + 1), Title.level)))
    Section.set_id()
    Section.setlevel(Title.level)
    if ('numbered' in document.attributes):
        Title.attributes['sectnum'] = Title.getnumber(document.level)
    else:
        Title.attributes['sectnum'] = ''
    AttributeList.consume(Title.attributes)
    (stag, etag) = config.section2tags(Title.sectname, Title.attributes)
    Section.savetag(Title.level, etag)
    writer.write(stag, trace=('section open: level %d: %s' % (Title.level, Title.attributes['title'])))
    Section.translate_body()
