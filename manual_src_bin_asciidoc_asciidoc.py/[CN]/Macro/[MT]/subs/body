def subs(self, text):

    def subs_func(mo):
        'Function called to perform macro substitution.\n            Uses matched macro regular expression object and returns string\n            containing the substituted macro body.'
        if (mo.group()[0] == '\\'):
            return mo.group()[1:]
        d = mo.groupdict()
        for (k, v) in d.items():
            if (v is None):
                del d[k]
        if self.name:
            name = self.name
        else:
            if (not ('name' in d)):
                message.warning(('missing macro name group: %s' % mo.re.pattern))
                return ''
            name = d['name']
        section_name = self.section_name(name)
        if (not section_name):
            return ''
        if ((self.prefix == '#') and (self.name != 'comment')):
            AttributeList.consume(d)
            BlockTitle.consume(d)
        if ('attrlist' in d):
            if (d['attrlist'] in (None, '')):
                del d['attrlist']
            else:
                if (self.prefix == ''):
                    d['attrlist'] = d['attrlist'].replace('\\]', ']')
                parse_attributes(d['attrlist'], d)
                if ('options' in d):
                    options = parse_options(d['options'], (), ('%s: illegal option name' % name))
                    for option in options:
                        d[(option + '-option')] = ''
                if (self.prefix == '#'):
                    AttributeList.subs(d)
        if (name == 'callout'):
            listindex = int(d['index'])
            d['coid'] = calloutmap.add(listindex)
        if ((name == 'image') and ('1' in d)):
            d['alt'] = d['1']
        if ((document.backend == 'latex') and ('target' in d) and d['target']):
            if (not ('0' in d)):
                d['0'] = d['target']
            d['target'] = config.subs_specialchars_reverse(d['target'])
        a0 = d.get('0')
        if a0:
            d['0'] = chr(0)
        body = config.subs_section(section_name, d)
        if (len(body) == 0):
            result = ''
        elif (len(body) == 1):
            result = body[0]
        elif (self.prefix == '#'):
            result = writer.newline.join(body)
        else:
            result = '\n'.join(body)
        if a0:
            result = result.replace(chr(0), a0)
        return result
    return self.reo.sub(subs_func, text)
