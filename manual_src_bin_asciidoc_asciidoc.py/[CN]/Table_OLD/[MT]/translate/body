def translate(self):
    message.deprecated('old tables syntax')
    AbstractBlock.translate(self)
    self.underline = None
    self.columns = []
    attrs = {}
    BlockTitle.consume(attrs)
    attrs['pagewidth'] = str(config.pagewidth)
    attrs['pageunits'] = config.pageunits
    AttributeList.consume(attrs)
    for (k, v) in attrs.items():
        if (k == 'format'):
            if (v not in self.FORMATS):
                raise EAsciiDoc, ('illegal [%s] %s: %s' % (self.name, k, v))
            self.format = v
        elif (k == 'tablewidth'):
            try:
                self.tablewidth = float(attrs['tablewidth'])
            except Exception:
                raise EAsciiDoc, ('illegal [%s] %s: %s' % (self.name, k, v))
    self.merge_attributes(attrs)
    ruler = reader.read()
    assert re.match(self.delimiter, ruler)
    self.parse_ruler(ruler)
    table = []
    while True:
        line = reader.read_next()
        if ((len(table) > 0) and re.match(self.underline, table[(-1)])):
            if (line in ('', None)):
                break
        if (line is None):
            raise EAsciiDoc, ('closing [%s] underline expected' % self.name)
        table.append(reader.read())
    self.attributes['rows'] = str(len(table))
    if self.check_msg:
        message.warning(('skipping %s table: %s' % (self.name, self.check_msg)))
        return
    self.build_colspecs()
    headrows = footrows = []
    (bodyrows, table) = self.split_rows(table)
    if table:
        headrows = bodyrows
        (bodyrows, table) = self.split_rows(table)
        if table:
            (footrows, table) = self.split_rows(table)
    if headrows:
        headrows = self.parse_rows(headrows, self.headrow, self.headdata)
        headrows = writer.newline.join(headrows)
        self.attributes['headrows'] = '\x07headrows\x07'
    if footrows:
        footrows = self.parse_rows(footrows, self.footrow, self.footdata)
        footrows = writer.newline.join(footrows)
        self.attributes['footrows'] = '\x07footrows\x07'
    bodyrows = self.parse_rows(bodyrows, self.bodyrow, self.bodydata)
    bodyrows = writer.newline.join(bodyrows)
    self.attributes['bodyrows'] = '\x07bodyrows\x07'
    table = subs_attrs(config.sections[self.template], self.attributes)
    table = writer.newline.join(table)
    if headrows:
        table = table.replace('\x07headrows\x07', headrows, 1)
    if footrows:
        table = table.replace('\x07footrows\x07', footrows, 1)
    table = table.replace('\x07bodyrows\x07', bodyrows, 1)
    writer.write(table, trace='table')
