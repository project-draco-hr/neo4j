def read_until(self, terminators, same_file=False):
    'Like read() but reads lines up to (but not including) the first line\n        that matches the terminator regular expression, regular expression\n        object or list of regular expression objects. If same_file is True then\n        the terminating pattern must occur in the file the was being read when\n        the routine was called.'
    if same_file:
        fname = self.cursor[0]
    result = []
    if (not isinstance(terminators, list)):
        if isinstance(terminators, basestring):
            terminators = [re.compile(terminators)]
        else:
            terminators = [terminators]
    while (not self.eof()):
        save_cursor = self.cursor
        s = self.read()
        if ((not same_file) or (fname == self.cursor[0])):
            for reo in terminators:
                if reo.match(s):
                    self.unread(self.cursor)
                    self.cursor = save_cursor
                    return tuple(result)
        result.append(s)
    return tuple(result)
