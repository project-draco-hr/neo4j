{
  final int labelId=1, nodeCount=32 * 16 + 10;
  start();
  write(new PrefetchingIterator<NodeLabelUpdate>(){
    private int i=-1;
    @Override protected NodeLabelUpdate fetchNextOrNull(){
      return ++i < nodeCount ? labelChanges(i,NO_LABELS,new long[]{labelId}) : null;
    }
  }
);
  Set<Long> nodeSet=new TreeSet<>();
  LabelScanReader reader=store.newReader();
  PrimitiveLongIterator nodes=reader.nodesWithLabel(labelId);
  while (nodes.hasNext()) {
    nodeSet.add(nodes.next());
  }
  reader.close();
  assertEquals("Found gaps in node id range: " + gaps(nodeSet,nodeCount),nodeCount,nodeSet.size());
}
