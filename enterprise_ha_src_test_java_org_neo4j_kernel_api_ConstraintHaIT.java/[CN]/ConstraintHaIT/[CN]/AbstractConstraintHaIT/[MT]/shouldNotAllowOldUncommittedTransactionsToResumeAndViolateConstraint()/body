{
  ClusterManager.ManagedCluster cluster=clusterRule.withSharedSetting(HaSettings.read_timeout,"4000s").startCluster();
  HighlyAvailableGraphDatabase slave=cluster.getAnySlave();
  HighlyAvailableGraphDatabase master=cluster.getMaster();
  String type=type(3);
  String key=key(3);
  ThreadToStatementContextBridge txBridge=threadToStatementContextBridge(slave);
  createEntityInTx(master,type,key,"Foo");
  slave.beginTx();
  createConstraintViolation(slave,type,key,"Foo");
  KernelTransaction slaveTx=txBridge.getTopLevelTransactionBoundToThisThread(true);
  txBridge.unbindTransactionFromCurrentThread();
  try (Transaction tx=master.beginTx()){
    createConstraint(master,type,key);
    tx.success();
  }
   txBridge.bindTransactionToCurrentThread(slaveTx);
  try {
    slaveTx.success();
    slaveTx.close();
    fail("Expected this commit to fail :(");
  }
 catch (  org.neo4j.graphdb.TransactionFailureException|org.neo4j.graphdb.TransientTransactionFailureException e) {
    assertThat(e.getCause().getCause(),instanceOf(org.neo4j.kernel.api.exceptions.TransactionFailureException.class));
  }
  assertConstraintHolds(master,type,key,"Foo");
  cluster.sync();
  assertConstraintHolds(slave,type,key,"Foo");
  createEntityInTx(slave,type,key,"Bar");
  createEntityInTx(master,type,key,"Baz");
}
