{
  int numberOfCores=parseInt(fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_NUMBER_OF_CORES",DEFAULT_NUMBER_OF_CORES));
  int numberOfEdges=parseInt(fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_NUMBER_OF_EDGES",DEFAULT_NUMBER_OF_EDGES));
  long durationInMinutes=parseLong(fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_DURATION",DEFAULT_DURATION_IN_MINUTES));
  String workingDirectory=fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_WORKING_DIRECTORY",DEFAULT_WORKING_DIR);
  int baseCoreBackupPort=parseInt(fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_BASE_CORE_BACKUP_PORT",DEFAULT_BASE_CORE_BACKUP_PORT));
  int baseEdgeBackupPort=parseInt(fromEnv("BACKUP_STORE_COPY_INTERACTION_STRESS_BASE_EDGE_BACKUP_PORT",DEFAULT_BASE_EDGE_BACKUP_PORT));
  File clusterDirectory=ensureExistsAndEmpty(new File(workingDirectory,"cluster"));
  File backupDirectory=ensureExistsAndEmpty(new File(workingDirectory,"backups"));
  Map<String,String> params=Collections.emptyMap();
  Map<String,IntFunction<String>> paramsPerCoreInstance=configureBackup(baseCoreBackupPort,baseEdgeBackupPort,true);
  Map<String,IntFunction<String>> paramsPerEdgeInstance=configureBackup(baseCoreBackupPort,baseEdgeBackupPort,false);
  HazelcastDiscoveryServiceFactory discoveryServiceFactory=new HazelcastDiscoveryServiceFactory();
  Cluster cluster=new Cluster(clusterDirectory,numberOfCores,numberOfEdges,discoveryServiceFactory,params,paramsPerCoreInstance,params,paramsPerEdgeInstance,StandardV3_0.NAME);
  ExecutorService service=Executors.newFixedThreadPool(3);
  BooleanSupplier keepGoing=untilTimeExpired(durationInMinutes,TimeUnit.MINUTES);
  try {
    cluster.start();
    Future<?> workload=service.submit(workLoad(cluster,keepGoing));
    Future<?> startStopWorker=service.submit(startStopLoad(cluster,keepGoing));
    Future<?> backupWorker=service.submit(backupLoad(backupDirectory,baseCoreBackupPort,baseEdgeBackupPort,cluster,keepGoing));
    workload.get();
    startStopWorker.get();
    backupWorker.get();
  }
  finally {
    cluster.shutdown();
  }
  FileUtils.deleteRecursively(clusterDirectory);
  FileUtils.deleteRecursively(backupDirectory);
}
