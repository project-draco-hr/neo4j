{
  final AtomicReference<Throwable> ex=new AtomicReference<>();
  final AtomicBoolean stoppedCompleted=new AtomicBoolean();
  final DoubleLatch checkPointerLatch=new DoubleLatch(1);
  CheckPointer checkPointer=new CheckPointer(){
    @Override public long checkPointIfNeeded(    TriggerInfo triggerInfo) throws IOException {
      checkPointerLatch.startAndWaitForAllToStart();
      checkPointerLatch.waitForAllToFinish();
      return 42;
    }
    @Override public long tryCheckPoint(    TriggerInfo triggerInfo) throws IOException {
      throw new RuntimeException("this should have not been called");
    }
    @Override public long forceCheckPoint(    TriggerInfo triggerInfo) throws IOException {
      throw new RuntimeException("this should have not been called");
    }
  }
;
  final CheckPointScheduler scheduler=new CheckPointScheduler(checkPointer,jobScheduler,20L);
  scheduler.start();
  Thread runCheckPointer=new Thread(){
    @Override public void run(){
      jobScheduler.runJob();
    }
  }
;
  runCheckPointer.start();
  checkPointerLatch.waitForAllToStart();
  Thread stopper=new Thread(){
    @Override public void run(){
      try {
        scheduler.stop();
        stoppedCompleted.set(true);
      }
 catch (      Throwable throwable) {
        ex.set(throwable);
      }
    }
  }
;
  stopper.start();
  Thread.sleep(10);
  assertFalse(stoppedCompleted.get());
  checkPointerLatch.finish();
  runCheckPointer.join();
  Thread.sleep(150);
  assertTrue(stoppedCompleted.get());
  stopper.join();
  assertNull(ex.get());
}
