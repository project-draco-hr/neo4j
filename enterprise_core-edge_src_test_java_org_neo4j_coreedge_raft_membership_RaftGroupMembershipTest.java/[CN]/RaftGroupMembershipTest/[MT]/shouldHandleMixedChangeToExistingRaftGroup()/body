{
  DirectNetworking net=new DirectNetworking();
  final CoreMember leader=member(0);
  final CoreMember stable=member(1);
  final CoreMember toBeRemoved1=member(2);
  final CoreMember toBeRemoved2=member(3);
  final CoreMember toBeAdded1=member(4);
  final CoreMember toBeAdded2=member(5);
  final CoreMember[] everyone={leader,stable,toBeRemoved1,toBeRemoved2,toBeAdded1,toBeAdded2};
  final CoreMember[] initialMembers={leader,stable,toBeRemoved1,toBeRemoved2};
  final CoreMember[] finalMembers={leader,stable,toBeAdded1,toBeAdded2};
  RaftTestFixture fixture=new RaftTestFixture(net,3,everyone);
  fixture.members().withId(leader).raftInstance().bootstrapWithInitialMembers(new RaftTestGroup(initialMembers));
  fixture.members().withId(leader).timeoutService().invokeTimeout(ELECTION);
  net.processMessages();
  fixture.members().withId(leader).raftInstance().setTargetMembershipSet(new RaftTestGroup(finalMembers).getMembers());
  net.processMessages();
  fixture.members().withId(leader).timeoutService().invokeTimeout(HEARTBEAT);
  net.processMessages();
  fixture.members().withId(leader).timeoutService().invokeTimeout(HEARTBEAT);
  net.processMessages();
  fixture.members().withId(leader).timeoutService().invokeTimeout(HEARTBEAT);
  net.processMessages();
  assertThat(fixture.members().withIds(finalMembers),hasCurrentMembers(new RaftTestGroup(finalMembers)));
  assertEquals(1,fixture.members().withIds(finalMembers).withRole(LEADER).size());
  assertEquals(3,fixture.members().withIds(finalMembers).withRole(FOLLOWER).size());
}
