{
  if (config.get(MetricsSettings.jvmGcEnabled)) {
    for (    final GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans()) {
      registry.register(name(GC_TIME,prettifyName(gcBean.getName())),new Gauge<Long>(){
        @Override public Long getValue(){
          return gcBean.getCollectionTime();
        }
      }
);
      registry.register(name(GC_COUNT,prettifyName(gcBean.getName())),new Gauge<Long>(){
        @Override public Long getValue(){
          return gcBean.getCollectionCount();
        }
      }
);
    }
  }
  if (config.get(MetricsSettings.jvmMemoryEnabled)) {
    for (    final MemoryPoolMXBean memPool : ManagementFactory.getMemoryPoolMXBeans()) {
      registry.register(name(MEMORY_POOL,prettifyName(memPool.getName())),new Gauge<Long>(){
        @Override public Long getValue(){
          return memPool.getUsage().getUsed();
        }
      }
);
    }
  }
  if (config.get(MetricsSettings.jvmBuffersEnabled)) {
    for (    final BufferPoolMXBean pool : ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class)) {
      registry.register(name(MEMORY_BUFFER,prettifyName(pool.getName()),"count"),new Gauge<Long>(){
        @Override public Long getValue(){
          return pool.getCount();
        }
      }
);
      registry.register(name(MEMORY_BUFFER,prettifyName(pool.getName()),"used"),new Gauge<Long>(){
        @Override public Long getValue(){
          return pool.getMemoryUsed();
        }
      }
);
      registry.register(name(MEMORY_BUFFER,prettifyName(pool.getName()),"capacity"),new Gauge<Long>(){
        @Override public Long getValue(){
          return pool.getTotalCapacity();
        }
      }
);
    }
  }
  if (config.get(MetricsSettings.jvmThreadsEnabled)) {
    registry.register(name(THREAD,"count"),new Gauge<Integer>(){
      @Override public Integer getValue(){
        return Thread.activeCount();
      }
    }
);
  }
}
