{
  int key=command.getId();
  if (command instanceof MemCommand.NodeCreate) {
    createdNodesMap.put(key,command);
  }
 else   if (command instanceof MemCommand.NodeDelete) {
    deletedNodesMap.put(key,command);
  }
 else   if (command instanceof MemCommand.NodeAddProperty) {
    addedPropsMap.put(key,command);
  }
 else   if (command instanceof MemCommand.NodeChangeProperty) {
    if (addedPropsMap.containsKey(key)) {
      MemCommand.NodeAddProperty propCommand=(MemCommand.NodeAddProperty)addedPropsMap.get(key);
      propCommand.setNewValue(((MemCommand.NodeChangeProperty)command).getValue());
    }
 else     if (changedPropsMap.containsKey(key)) {
      MemCommand.NodeChangeProperty propCommand=(MemCommand.NodeChangeProperty)changedPropsMap.get(key);
      propCommand.setNewValue(((MemCommand.NodeChangeProperty)command).getValue());
    }
 else {
      changedPropsMap.put(key,command);
    }
  }
 else   if (command instanceof MemCommand.NodeRemoveProperty) {
    Integer nodeId=new Integer(((MemCommand.NodeRemoveProperty)command).getNodeId());
    if (addedPropsMap.containsKey(key) || changedPropsMap.containsKey(key)) {
      MemCommand cmd=addedPropsMap.remove(key);
      if (cmd != null) {
        getPropertyStore().freeId(cmd.getId());
      }
      cmd=changedPropsMap.remove(key);
    }
 else     if (!deletedNodesMap.containsKey(nodeId)) {
      removedPropsMap.put(key,command);
    }
 else {
      strayPropMap.put(key,command);
    }
  }
 else   if (command instanceof MemCommand.RelationshipCreate) {
    createdRelsMap.put(key,command);
  }
 else   if (command instanceof MemCommand.RelationshipDelete) {
    deletedRelsMap.put(key,command);
  }
 else   if (command instanceof MemCommand.RelationshipAddProperty) {
    addedPropsMap.put(key,command);
  }
 else   if (command instanceof MemCommand.RelationshipChangeProperty) {
    if (addedPropsMap.containsKey(key)) {
      MemCommand.RelationshipAddProperty propCommand=(MemCommand.RelationshipAddProperty)addedPropsMap.get(key);
      propCommand.setNewValue(((MemCommand.RelationshipChangeProperty)command).getValue());
    }
 else     if (changedPropsMap.containsKey(key)) {
      MemCommand.RelationshipChangeProperty propCommand=(MemCommand.RelationshipChangeProperty)changedPropsMap.get(key);
      propCommand.setNewValue(((MemCommand.RelationshipChangeProperty)command).getValue());
    }
 else {
      changedPropsMap.put(key,command);
    }
  }
 else   if (command instanceof MemCommand.RelationshipRemoveProperty) {
    Integer relId=new Integer(((MemCommand.RelationshipRemoveProperty)command).getRelId());
    if (addedPropsMap.containsKey(key) || changedPropsMap.containsKey(key)) {
      MemCommand cmd=addedPropsMap.remove(key);
      if (cmd != null) {
        getPropertyStore().freeId(cmd.getId());
      }
      cmd=changedPropsMap.remove(key);
    }
 else     if (!deletedRelsMap.containsKey(relId)) {
      removedPropsMap.put(key,command);
    }
 else {
      strayPropMap.put(key,command);
    }
  }
 else   if (command instanceof MemCommand.RelationshipTypeAdd) {
    createdRelTypesMap.put(key,command);
  }
 else {
    throw new RuntimeException("Unkown command " + command);
  }
}
