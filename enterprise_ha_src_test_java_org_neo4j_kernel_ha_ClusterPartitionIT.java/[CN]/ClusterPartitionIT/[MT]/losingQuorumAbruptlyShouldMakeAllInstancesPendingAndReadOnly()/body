{
  int clusterSize=5;
  ClusterManager manager=new ClusterManager.Builder().withRootDirectory(dir.cleanDirectory("testcluster")).withProvider(ClusterManager.clusterOfSize(clusterSize)).withSharedConfig(stringMap(ClusterSettings.heartbeat_interval.name(),"1",ClusterSettings.heartbeat_timeout.name(),"3",HaSettings.tx_push_factor.name(),"4")).build();
  try {
    manager.start();
    ClusterManager.ManagedCluster cluster=manager.getDefaultCluster();
    cluster.await(allSeesAllAsAvailable());
    cluster.await(masterAvailable());
    HighlyAvailableGraphDatabase master=cluster.getMaster();
    addSomeData(master);
    HighlyAvailableGraphDatabase failed1;
    ClusterManager.RepairKit rk1;
    HighlyAvailableGraphDatabase failed2;
    HighlyAvailableGraphDatabase failed3;
    HighlyAvailableGraphDatabase remainingSlave;
    failed1=cluster.getAnySlave();
    failed2=cluster.getAnySlave(failed1);
    failed3=cluster.getAnySlave(failed1,failed2);
    remainingSlave=cluster.getAnySlave(failed1,failed2,failed3);
    rk1=killAbruptly(cluster,failed1,failed2,failed3);
    cluster.await(memberSeesOtherMemberAsFailed(remainingSlave,failed1));
    cluster.await(memberSeesOtherMemberAsFailed(remainingSlave,failed2));
    cluster.await(memberSeesOtherMemberAsFailed(remainingSlave,failed3));
    cluster.await(memberSeesOtherMemberAsFailed(master,failed1));
    cluster.await(memberSeesOtherMemberAsFailed(master,failed2));
    cluster.await(memberSeesOtherMemberAsFailed(master,failed3));
    ensureInstanceIsReadOnlyInPendingState(master);
    ensureInstanceIsReadOnlyInPendingState(remainingSlave);
    rk1.repair();
    cluster.await(masterAvailable(failed2,failed3));
    cluster.await(masterSeesSlavesAsAvailable(2));
    ensureInstanceIsWritable(master);
    ensureInstanceIsWritable(remainingSlave);
    ensureInstanceIsWritable(failed1);
  }
  finally {
    manager.shutdown();
  }
}
