{
  Node nodeA=graph.makeNode("A");
  Node nodeB=graph.makeNode("B");
  Node nodeC=graph.makeNode("C");
  Node nodeD=graph.makeNode("D");
  Node nodeE=graph.makeNode("E");
  Node nodeF=graph.makeNode("F");
  graph.makeEdge("A","B","length",2d);
  graph.makeEdge("A","C","length",2.5f);
  graph.makeEdge("C","D","length",7.3d);
  graph.makeEdge("B","D","length",2.5f);
  graph.makeEdge("D","E","length",3L);
  graph.makeEdge("C","E","length",5);
  graph.makeEdge("E","F","length",(byte)5);
  graph.makeEdge("C","F","length",(short)12);
  graph.makeEdge("A","F","length",(long)25);
  PathFinder finder=factory.dijkstra(PathExpanders.allTypesAndDirections());
  for (  Node[] nodes : new Node[][]{{nodeA,nodeF},{nodeF,nodeA}}) {
    int found=0;
    Iterator<WeightedPath> paths=finder.findAllPaths(nodes[0],nodes[1]).iterator();
    for (int i=0; i < 2; i++) {
      assertTrue("expected more paths",paths.hasNext());
      Path path=paths.next();
      if (path.length() != found && path.length() == 3) {
        assertContains(path.nodes(),nodeA,nodeC,nodeE,nodeF);
      }
 else       if (path.length() != found && path.length() == 4) {
        assertContains(path.nodes(),nodeA,nodeB,nodeD,nodeE,nodeF);
      }
 else {
        fail("unexpected path length: " + path.length());
      }
      found=path.length();
    }
    assertFalse("expected at most two paths",paths.hasNext());
  }
}
