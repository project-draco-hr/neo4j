{
  if (type.equals(Map.class)) {
    return (T)getConfig().getParams();
  }
 else   if (type.equals(Config.class)) {
    return (T)getConfig();
  }
 else   if (GraphDatabaseService.class.isAssignableFrom(type)) {
    return (T)InternalAbstractGraphDatabase.this;
  }
 else   if (TransactionManager.class.isAssignableFrom(type)) {
    return (T)txManager;
  }
 else   if (LockManager.class.isAssignableFrom(type)) {
    return (T)lockManager;
  }
 else   if (StoreFactory.class.isAssignableFrom(type)) {
    return (T)storeFactory;
  }
 else   if (StringLogger.class.isAssignableFrom(type)) {
    return (T)msgLog;
  }
 else   if (Logging.class.isAssignableFrom(type)) {
    return (T)logging;
  }
 else   if (IndexStore.class.isAssignableFrom(type)) {
    return (T)indexStore;
  }
 else   if (XaFactory.class.isAssignableFrom(type)) {
    return (T)xaFactory;
  }
 else   if (XaDataSourceManager.class.isAssignableFrom(type)) {
    return (T)xaDataSourceManager;
  }
 else   if (FileSystemAbstraction.class.isAssignableFrom(type)) {
    return (T)fileSystem;
  }
 else   if (Guard.class.isAssignableFrom(type)) {
    return (T)guard;
  }
 else   if (IndexProviders.class.isAssignableFrom(type)) {
    return (T)indexManager;
  }
 else   if (KernelData.class.isAssignableFrom(type)) {
    return (T)extensions;
  }
 else   if (Logging.class.isAssignableFrom(type)) {
    return (T)logging;
  }
 else   if (TransactionInterceptorProviders.class.isAssignableFrom(type)) {
    return (T)transactionInterceptorProviders;
  }
 else   if (KernelExtensions.class.isAssignableFrom(type)) {
    return (T)kernelExtensions;
  }
 else   if (NodeManager.class.isAssignableFrom(type)) {
    return (T)nodeManager;
  }
 else   if (TransactionStateFactory.class.isAssignableFrom(type)) {
    return (T)stateFactory;
  }
 else   if (TxIdGenerator.class.isAssignableFrom(type)) {
    return (T)txIdGenerator;
  }
 else   if (DiagnosticsManager.class.isAssignableFrom(type)) {
    return (T)diagnosticsManager;
  }
 else   if (PropertyIndexManager.class.isAssignableFrom(type)) {
    return (T)propertyIndexManager;
  }
 else   if (PersistenceManager.class.isAssignableFrom(type)) {
    return (T)persistenceManager;
  }
 else   if (KernelAPI.class.equals(type)) {
    return (T)kernelAPI;
  }
 else   if (ThreadToStatementContextBridge.class.isAssignableFrom(type)) {
    return (T)statementContextProvider;
  }
 else   if (CacheAccessBackDoor.class.isAssignableFrom(type)) {
    return (T)cacheBridge;
  }
 else   if (StoreLockerLifecycleAdapter.class.isAssignableFrom(type)) {
    return (T)storeLocker;
  }
 else   if (IndexManager.class == type) {
    return type.cast(indexManager);
  }
 else   if (IndexingService.class.isAssignableFrom(type)) {
    return (T)neoDataSource.getIndexService();
  }
 else   if (JobScheduler.class.isAssignableFrom(type)) {
    return (T)jobScheduler;
  }
 else   if (DependencyResolver.class.isAssignableFrom(type)) {
    return (T)DependencyResolverImpl.this;
  }
  return null;
}
