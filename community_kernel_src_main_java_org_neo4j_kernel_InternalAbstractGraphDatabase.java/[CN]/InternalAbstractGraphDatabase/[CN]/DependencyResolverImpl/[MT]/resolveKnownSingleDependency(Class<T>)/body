{
  if (type.equals(Map.class)) {
    return type.cast(getConfig().getParams());
  }
 else   if (type.equals(Config.class)) {
    return type.cast(getConfig());
  }
 else   if (GraphDatabaseService.class.isAssignableFrom(type) && type.isInstance(InternalAbstractGraphDatabase.this)) {
    return type.cast(InternalAbstractGraphDatabase.this);
  }
 else   if (TransactionManager.class.isAssignableFrom(type) && type.isInstance(txManager)) {
    return type.cast(txManager);
  }
 else   if (LockManager.class.isAssignableFrom(type) && type.isInstance(lockManager)) {
    return type.cast(lockManager);
  }
 else   if (StoreFactory.class.isAssignableFrom(type) && type.isInstance(storeFactory)) {
    return type.cast(storeFactory);
  }
 else   if (StringLogger.class.isAssignableFrom(type) && type.isInstance(msgLog)) {
    return type.cast(msgLog);
  }
 else   if (Logging.class.isAssignableFrom(type) && type.isInstance(logging)) {
    return type.cast(logging);
  }
 else   if (IndexStore.class.isAssignableFrom(type) && type.isInstance(indexStore)) {
    return type.cast(indexStore);
  }
 else   if (XaFactory.class.isAssignableFrom(type) && type.isInstance(xaFactory)) {
    return type.cast(xaFactory);
  }
 else   if (XaDataSourceManager.class.isAssignableFrom(type) && type.isInstance(xaDataSourceManager)) {
    return type.cast(xaDataSourceManager);
  }
 else   if (FileSystemAbstraction.class.isAssignableFrom(type) && type.isInstance(fileSystem)) {
    return type.cast(fileSystem);
  }
 else   if (Guard.class.isAssignableFrom(type) && type.isInstance(guard)) {
    return type.cast(guard);
  }
 else   if (IndexProviders.class.isAssignableFrom(type) && type.isInstance(indexManager)) {
    return type.cast(indexManager);
  }
 else   if (KernelData.class.isAssignableFrom(type) && type.isInstance(extensions)) {
    return type.cast(extensions);
  }
 else   if (TransactionInterceptorProviders.class.isAssignableFrom(type) && type.isInstance(transactionInterceptorProviders)) {
    return type.cast(transactionInterceptorProviders);
  }
 else   if (KernelExtensions.class.isAssignableFrom(type) && type.isInstance(kernelExtensions)) {
    return type.cast(kernelExtensions);
  }
 else   if (NodeManager.class.isAssignableFrom(type) && type.isInstance(nodeManager)) {
    return type.cast(nodeManager);
  }
 else   if (TransactionStateFactory.class.isAssignableFrom(type) && type.isInstance(stateFactory)) {
    return type.cast(stateFactory);
  }
 else   if (TxIdGenerator.class.isAssignableFrom(type) && type.isInstance(txIdGenerator)) {
    return type.cast(txIdGenerator);
  }
 else   if (DiagnosticsManager.class.isAssignableFrom(type) && type.isInstance(diagnosticsManager)) {
    return type.cast(diagnosticsManager);
  }
 else   if (PropertyIndexManager.class.isAssignableFrom(type) && type.isInstance(propertyIndexManager)) {
    return type.cast(propertyIndexManager);
  }
 else   if (PersistenceManager.class.isAssignableFrom(type) && type.isInstance(persistenceManager)) {
    return type.cast(persistenceManager);
  }
 else   if (KernelAPI.class.equals(type)) {
    return type.cast(kernelAPI);
  }
 else   if (ThreadToStatementContextBridge.class.isAssignableFrom(type) && type.isInstance(statementContextProvider)) {
    return type.cast(statementContextProvider);
  }
 else   if (CacheAccessBackDoor.class.isAssignableFrom(type) && type.isInstance(cacheBridge)) {
    return type.cast(cacheBridge);
  }
 else   if (StoreLockerLifecycleAdapter.class.isAssignableFrom(type) && type.isInstance(storeLocker)) {
    return type.cast(storeLocker);
  }
 else   if (IndexManager.class.equals(type) && type.isInstance(indexManager)) {
    return type.cast(indexManager);
  }
 else   if (IndexingService.class.isAssignableFrom(type) && type.isInstance(neoDataSource.getIndexService())) {
    return type.cast(neoDataSource.getIndexService());
  }
 else   if (JobScheduler.class.isAssignableFrom(type) && type.isInstance(jobScheduler)) {
    return type.cast(jobScheduler);
  }
 else   if (CleanupService.class.equals(type)) {
    return type.cast(cleanupService);
  }
 else   if (DependencyResolver.class.equals(type)) {
    return type.cast(DependencyResolverImpl.this);
  }
  return null;
}
