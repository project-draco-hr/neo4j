{
  fileSystem=createFileSystemAbstraction();
  this.logging=createLogging();
  AutoConfigurator autoConfigurator=new AutoConfigurator(fileSystem,config.get(NeoStoreXaDataSource.Configuration.store_dir),GraphDatabaseSettings.UseMemoryMappedBuffers.shouldMemoryMap(config.get(Configuration.use_memory_mapped_buffers)),config.get(GraphDatabaseSettings.dump_configuration));
  Map<String,String> configParams=config.getParams();
  Map<String,String> autoConfiguration=autoConfigurator.configure();
  for (  Map.Entry<String,String> autoConfig : autoConfiguration.entrySet()) {
    String key=autoConfig.getKey();
    if (!params.containsKey(key)) {
      configParams.put(key,autoConfig.getValue());
    }
  }
  config.applyChanges(configParams);
  this.msgLog=logging.getLogger(getClass());
  config.setLogger(msgLog);
  this.storeLocker=life.add(new StoreLockerLifecycleAdapter(new StoreLocker(config,fileSystem,msgLog),storeDir));
  new JvmChecker(msgLog,new JvmMetadataRepository()).checkJvmCompatibilityAndIssueWarning();
  boolean readOnly=config.get(Configuration.read_only);
  String cacheTypeName=config.get(Configuration.cache_type);
  CacheProvider cacheProvider=cacheProviders.get(cacheTypeName);
  if (cacheProvider == null) {
    throw new IllegalArgumentException("No cache type '" + cacheTypeName + "'");
  }
  jobScheduler=life.add(new Neo4jJobScheduler());
  kernelEventHandlers=new KernelEventHandlers();
  caches=createCaches();
  diagnosticsManager=life.add(new DiagnosticsManager(logging.getLogger(DiagnosticsManager.class)));
  kernelPanicEventGenerator=new KernelPanicEventGenerator(kernelEventHandlers);
  xaDataSourceManager=life.add(createXaDataSourceManager());
  txHook=createTxHook();
  guard=config.get(Configuration.execution_guard_enabled) ? new Guard(msgLog) : null;
  stateFactory=createTransactionStateFactory();
  if (readOnly) {
    txManager=new ReadOnlyTxManager(xaDataSourceManager,logging.getLogger(ReadOnlyTxManager.class));
  }
 else {
    String serviceName=config.get(GraphDatabaseSettings.tx_manager_impl);
    if (GraphDatabaseSettings.tx_manager_impl.getDefaultValue().equals(serviceName)) {
      txManager=new TxManager(this.storeDir,xaDataSourceManager,kernelPanicEventGenerator,logging.getLogger(TxManager.class),fileSystem,stateFactory);
    }
 else {
      TransactionManagerProvider provider;
      provider=Service.load(TransactionManagerProvider.class,serviceName);
      if (provider == null) {
        throw new IllegalStateException("Unknown transaction manager implementation: " + serviceName);
      }
      txManager=provider.loadTransactionManager(this.storeDir.getPath(),xaDataSourceManager,kernelPanicEventGenerator,txHook,logging.getLogger(AbstractTransactionManager.class),fileSystem,stateFactory);
    }
  }
  life.add(txManager);
  transactionEventHandlers=new TransactionEventHandlers(txManager);
  txIdGenerator=life.add(createTxIdGenerator());
  lockManager=createLockManager();
  idGeneratorFactory=createIdGeneratorFactory();
  relationshipTypeCreator=createRelationshipTypeCreator();
  persistenceSource=life.add(new NioNeoDbPersistenceSource(xaDataSourceManager));
  syncHook=new DefaultTxEventSyncHookFactory();
  persistenceManager=new PersistenceManager(logging.getLogger(PersistenceManager.class),txManager,persistenceSource,syncHook);
  KeyCreator propertyIndexCreator=createPropertyKeyCreator();
  propertyIndexManager=life.add(new PropertyIndexManager(txManager,persistenceManager,persistenceSource,propertyIndexCreator));
  relationshipTypeHolder=new RelationshipTypeHolder(txManager,persistenceManager,persistenceSource,relationshipTypeCreator);
  caches.configure(cacheProvider,config);
  Cache<NodeImpl> nodeCache=diagnosticsManager.tryAppendProvider(caches.node());
  Cache<RelationshipImpl> relCache=diagnosticsManager.tryAppendProvider(caches.relationship());
  SchemaCache schemaCache=new SchemaCache(Collections.<SchemaRule>emptyList());
  kernelAPI=life.add(new Kernel(txManager,propertyIndexManager,persistenceManager,nodeManager,xaDataSourceManager,lockManager,schemaCache));
  txManager.setKernel(kernelAPI);
  statementContextProvider=life.add(new ThreadToStatementContextBridge(kernelAPI,txManager,xaDataSourceManager));
  nodeManager=guard != null ? createGuardedNodeManager(readOnly,cacheProvider,nodeCache,relCache) : createNodeManager(readOnly,cacheProvider,nodeCache,relCache);
  life.add(nodeManager);
  stateFactory.setDependencies(lockManager,nodeManager,txHook,txIdGenerator);
  indexStore=life.add(new IndexStore(this.storeDir,fileSystem));
  diagnosticsManager.prependProvider(config);
  params=config.getParams();
  logBufferFactory=new DefaultLogBufferFactory();
  extensions=life.add(createKernelData());
  if (config.get(Configuration.load_kernel_extensions)) {
    life.add(kernelExtensions);
  }
  schema=new SchemaImpl(statementContextProvider,propertyIndexManager);
  indexManager=new IndexManagerImpl(config,indexStore,xaDataSourceManager,txManager,this);
  nodeAutoIndexer=life.add(new NodeAutoIndexerImpl(config,indexManager,nodeManager));
  relAutoIndexer=life.add(new RelationshipAutoIndexerImpl(config,indexManager,nodeManager));
  indexManager.setNodeAutoIndexer(nodeAutoIndexer);
  indexManager.setRelAutoIndexer(relAutoIndexer);
  recoveryVerifier=createRecoveryVerifier();
  storeFactory=createStoreFactory();
  String keepLogicalLogsConfig=config.get(GraphDatabaseSettings.keep_logical_logs);
  xaFactory=new XaFactory(config,txIdGenerator,txManager,logBufferFactory,fileSystem,logging,recoveryVerifier,LogPruneStrategies.fromConfigValue(fileSystem,keepLogicalLogsConfig));
  cacheBridge=new BridgingCacheAccess(nodeManager,schemaCache);
  createNeoDataSource();
  life.add(new MonitorGc(config,msgLog));
  life.add(new DatabaseAvailability());
  life.add(kernelEventHandlers);
  life.add(new ConfigurationChangedRestarter());
}
