{
  this.kernelExtensions=new KernelExtensions(dependencies.kernelExtensions(),getDependencyResolver(),fail());
  availabilityGuard=new AvailabilityGuard(Clock.SYSTEM_CLOCK);
  fileSystem=createFileSystemAbstraction();
  if (this.logging == null) {
    this.logging=createLogging();
  }
  if (this.monitors == null) {
    this.monitors=createMonitors();
  }
  transactionMonitor=createTransactionCounters();
  storeMigrationProcess=new StoreUpgrader(createUpgradeConfiguration(),fileSystem,monitors.newMonitor(StoreUpgrader.Monitor.class),logging);
  this.msgLog=logging.getMessagesLog(getClass());
  config.setLogger(msgLog);
  tracers=createTracers(config,msgLog);
  this.storeLocker=life.add(new StoreLockerLifecycleAdapter(new StoreLocker(fileSystem),storeDir));
  new JvmChecker(msgLog,new JvmMetadataRepository()).checkJvmCompatibilityAndIssueWarning();
  String cacheTypeName=config.get(Configuration.cache_type);
  CacheProvider cacheProvider=cacheProviders.get(cacheTypeName);
  if (cacheProvider == null) {
    if (config.get(Configuration.cache_type).equals(CacheLayer.EXPERIMENTAL_OFF)) {
      cacheProvider=new NoCacheProvider();
    }
 else {
      throw new IllegalArgumentException("No provider for cache type '" + cacheTypeName + "'. "+ "Cache providers are loaded using java service loading where they"+ " "+ "register themselves in resource (plain-text) files found on the "+ "class path under "+ "META-INF/services/"+ CacheProvider.class.getName()+ ". This missing provider may have "+ "been caused by either such a missing registration, "+ "or by the lack of the provider class itself.");
    }
  }
  jobScheduler=life.add(createJobScheduler());
  pageCache=createPageCache();
  life.add(new PageCacheLifecycle(pageCache));
  kernelEventHandlers=new KernelEventHandlers(logging.getMessagesLog(KernelEventHandlers.class));
  caches=createCaches();
  diagnosticsManager=life.add(createDiagnosticsManager());
  monitors.addMonitorListener(new RollingLogMonitor(){
    @Override public void rolledOver(){
      diagnosticsManager.dumpAll();
    }
  }
);
  kernelPanicEventGenerator=new KernelPanicEventGenerator(kernelEventHandlers);
  kernelHealth=new KernelHealth(kernelPanicEventGenerator,logging);
  dataSourceManager=life.add(new DataSourceManager());
  createTxHook();
  guard=config.get(Configuration.execution_guard_enabled) ? new Guard(msgLog) : null;
  lockManager=createLockManager();
  idGeneratorFactory=createIdGeneratorFactory();
  StringLogger messagesLog=logging.getMessagesLog(StoreMigrator.class);
  VisibleMigrationProgressMonitor progressMonitor=new VisibleMigrationProgressMonitor(messagesLog,System.out);
  UpgradableDatabase upgradableDatabase=new UpgradableDatabase(new StoreVersionCheck(fileSystem));
  storeMigrationProcess.addParticipant(new StoreMigrator(progressMonitor,fileSystem,upgradableDatabase,config,logging));
  propertyKeyTokenHolder=life.add(new PropertyKeyTokenHolder(createPropertyKeyCreator()));
  labelTokenHolder=life.add(new LabelTokenHolder(createLabelIdCreator()));
  relationshipTypeTokenHolder=life.add(new RelationshipTypeTokenHolder(createRelationshipTypeCreator()));
  caches.configure(cacheProvider,config);
  diagnosticsManager.tryAppendProvider(caches.node());
  diagnosticsManager.tryAppendProvider(caches.relationship());
  threadToTransactionBridge=life.add(new ThreadToStatementContextBridge());
  nodeManager=createNodeManager();
  transactionEventHandlers=new TransactionEventHandlers(createNodeActions(),createRelationshipActions(),threadToTransactionBridge);
  indexStore=life.add(new IndexConfigStore(this.storeDir,fileSystem));
  diagnosticsManager.prependProvider(config);
  extensions=life.add(createKernelData());
  life.add(kernelExtensions);
  schema=new SchemaImpl(threadToTransactionBridge);
  final LegacyIndexProxy.Lookup indexLookup=createIndexLookup();
  final IndexProvider indexProvider=new IndexProviderImpl(indexLookup,threadToTransactionBridge);
  nodeAutoIndexer=life.add(new NodeAutoIndexerImpl(config,indexProvider,nodeManager));
  relAutoIndexer=life.add(new RelationshipAutoIndexerImpl(config,indexProvider,nodeManager));
  indexManager=new IndexManagerImpl(threadToTransactionBridge,indexProvider,nodeAutoIndexer,relAutoIndexer);
  recoveryVerifier=createRecoveryVerifier();
  storeFactory=createStoreFactory();
  startupStatistics=new StartupStatisticsProvider();
  createNeoDataSource();
  life.add(new MonitorGc(config,msgLog));
  life.add(nodeManager);
  createDatabaseAvailability();
  life.add(kernelEventHandlers);
  dataSourceManager.addListener(new DataSourceManager.Listener(){
    @Override public void registered(    NeoStoreDataSource dataSource){
      queryExecutor=QueryEngineProvider.initialize(InternalAbstractGraphDatabase.this,dependencies.executionEngines());
    }
    @Override public void unregistered(    NeoStoreDataSource dataSource){
      queryExecutor=QueryEngineProvider.noEngine();
    }
  }
);
}
