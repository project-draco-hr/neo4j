{
  jobScheduler=life.add(createJobScheduler());
  this.kernelExtensions=new KernelExtensions(dependencies.kernelExtensions(),getDependencyResolver(),fail());
  availabilityGuard=new AvailabilityGuard(Clock.SYSTEM_CLOCK);
  fileSystem=createFileSystemAbstraction();
  logService=createLogService();
  msgLog=logService.getInternalLog(getClass());
  if (this.monitors == null) {
    this.monitors=createMonitors();
  }
  transactionMonitor=createTransactionCounters();
  storeMigrationProcess=new StoreUpgrader(createUpgradeConfiguration(),fileSystem,monitors.newMonitor(StoreUpgrader.Monitor.class),logService.getInternalLogProvider());
  config.setLogger(msgLog);
  tracers=createTracers(config,msgLog);
  this.storeLocker=life.add(new StoreLockerLifecycleAdapter(new StoreLocker(fileSystem),storeDir));
  new JvmChecker(msgLog,new JvmMetadataRepository()).checkJvmCompatibilityAndIssueWarning();
  pageCache=createPageCache();
  life.add(new PageCacheLifecycle(pageCache));
  kernelEventHandlers=new KernelEventHandlers(logService.getInternalLogProvider());
  diagnosticsManager=life.add(createDiagnosticsManager());
  kernelPanicEventGenerator=new KernelPanicEventGenerator(kernelEventHandlers);
  kernelHealth=new KernelHealth(kernelPanicEventGenerator,logService.getInternalLogProvider());
  dataSourceManager=life.add(new DataSourceManager());
  createTxHook();
  guard=config.get(Configuration.execution_guard_enabled) ? new Guard(msgLog) : null;
  lockManager=createLockManager();
  idGeneratorFactory=createIdGeneratorFactory();
  VisibleMigrationProgressMonitor progressMonitor=new VisibleMigrationProgressMonitor(logService.getInternalLog(StoreMigrator.class));
  UpgradableDatabase upgradableDatabase=new UpgradableDatabase(new StoreVersionCheck(fileSystem));
  storeMigrationProcess.addParticipant(new StoreMigrator(progressMonitor,fileSystem,upgradableDatabase,config,logService));
  propertyKeyTokenHolder=life.add(new PropertyKeyTokenHolder(createPropertyKeyCreator()));
  labelTokenHolder=life.add(new LabelTokenHolder(createLabelIdCreator()));
  relationshipTypeTokenHolder=life.add(new RelationshipTypeTokenHolder(createRelationshipTypeCreator()));
  threadToTransactionBridge=life.add(new ThreadToStatementContextBridge());
  relationshipActions=createRelationshipActions();
  nodeManager=createNodeManager();
  transactionEventHandlers=new TransactionEventHandlers(createNodeActions(),relationshipActions,threadToTransactionBridge);
  indexStore=life.add(new IndexConfigStore(this.storeDir,fileSystem));
  diagnosticsManager.prependProvider(config);
  extensions=life.add(createKernelData());
  life.add(kernelExtensions);
  schema=new SchemaImpl(threadToTransactionBridge);
  final LegacyIndexProxy.Lookup indexLookup=createIndexLookup();
  final IndexProvider indexProvider=new IndexProviderImpl(indexLookup,threadToTransactionBridge);
  nodeAutoIndexer=life.add(new NodeAutoIndexerImpl(config,indexProvider,nodeManager));
  relAutoIndexer=life.add(new RelationshipAutoIndexerImpl(config,indexProvider,nodeManager));
  indexManager=new IndexManagerImpl(threadToTransactionBridge,indexProvider,nodeAutoIndexer,relAutoIndexer);
  recoveryVerifier=createRecoveryVerifier();
  storeFactory=createStoreFactory();
  startupStatistics=new StartupStatisticsProvider();
  createNeoDataSource();
  life.add(new MonitorGc(config,msgLog));
  life.add(nodeManager);
  createDatabaseAvailability();
  life.add(kernelEventHandlers);
  dataSourceManager.addListener(new DataSourceManager.Listener(){
    @Override public void registered(    NeoStoreDataSource dataSource){
      queryExecutor=QueryEngineProvider.initialize(InternalAbstractGraphDatabase.this,dependencies.executionEngines());
    }
    @Override public void unregistered(    NeoStoreDataSource dataSource){
      queryExecutor=QueryEngineProvider.noEngine();
    }
  }
);
}
