{
  PageCacheFactory factory=null;
  String preferredChoice=config.get(Configuration.page_cache);
  List<PageCacheFactory> candidates=Iterables.toList(Service.load(PageCacheFactory.class));
  Collections.sort(candidates,PageCacheFactory.orderByHighestPriorityFirst);
  for (  PageCacheFactory candidate : candidates) {
    if (candidate.matches(preferredChoice)) {
      factory=candidate;
      break;
    }
  }
  if (factory == null) {
    if (candidates.isEmpty()) {
      factory=new StandardPageCacheFactory();
    }
 else {
      factory=candidates.get(0);
    }
  }
  SingleFilePageSwapperFactory swapperFactory=new SingleFilePageSwapperFactory(fileSystem);
  LifecycledPageCache lifecycledPageCache=new LifecycledPageCache(factory,swapperFactory,jobScheduler,config,pageCacheMonitor);
  logging.getMessagesLog(InternalAbstractGraphDatabase.class).info("Using PageCache implementation " + factory.getImplementationName() + " based on configuration '"+ preferredChoice+ "'");
  if (config.get(GraphDatabaseSettings.dump_configuration)) {
    lifecycledPageCache.dumpConfiguration(logging.getMessagesLog(PageCache.class));
  }
  return lifecycledPageCache;
}
