{
  if (readOnly) {
    return new ReadOnlyNodeManager(logging.getMessagesLog(NodeManager.class),this,txManager,persistenceManager,persistenceSource,relationshipTypeTokenHolder,cacheType,propertyKeyTokenHolder,labelTokenHolder,createNodeLookup(),createRelationshipLookups(),nodeCache,relCache,xaDataSourceManager,statementContextProvider,cleanupService){
      @Override public Node getNodeByIdOrNull(      final long nodeId){
        guard.check();
        return super.getNodeByIdOrNull(nodeId);
      }
      @Override public NodeImpl getNodeForProxy(      final long nodeId,      final LockType lock){
        guard.check();
        return super.getNodeForProxy(nodeId,lock);
      }
      @Override public RelationshipImpl getRelationshipForProxy(      final long relId){
        guard.check();
        return super.getRelationshipForProxy(relId);
      }
      @Override protected Relationship getRelationshipByIdOrNull(      final long relId){
        guard.check();
        return super.getRelationshipByIdOrNull(relId);
      }
      @Override public Node createNode(){
        guard.check();
        return super.createNode();
      }
      @Override public Relationship createRelationship(      Node startNodeProxy,      NodeImpl startNode,      Node endNode,      long relationshipTypeId){
        guard.check();
        return super.createRelationship(startNodeProxy,startNode,endNode,relationshipTypeId);
      }
    }
;
  }
  return new NodeManager(logging.getMessagesLog(NodeManager.class),this,txManager,persistenceManager,persistenceSource,relationshipTypeTokenHolder,cacheType,propertyKeyTokenHolder,labelTokenHolder,createNodeLookup(),createRelationshipLookups(),nodeCache,relCache,xaDataSourceManager,statementContextProvider,cleanupService){
    @Override public Node getNodeByIdOrNull(    final long nodeId){
      guard.check();
      return super.getNodeByIdOrNull(nodeId);
    }
    @Override public NodeImpl getNodeForProxy(    final long nodeId,    final LockType lock){
      guard.check();
      return super.getNodeForProxy(nodeId,lock);
    }
    @Override public RelationshipImpl getRelationshipForProxy(    final long relId){
      guard.check();
      return super.getRelationshipForProxy(relId);
    }
    @Override protected Relationship getRelationshipByIdOrNull(    final long relId){
      guard.check();
      return super.getRelationshipByIdOrNull(relId);
    }
    @Override public Node createNode(){
      guard.check();
      return super.createNode();
    }
    @Override public Relationship createRelationship(    Node startNodeProxy,    NodeImpl startNode,    Node endNode,    long relationshipTypeId){
      guard.check();
      return super.createRelationship(startNodeProxy,startNode,endNode,relationshipTypeId);
    }
  }
;
}
