{
  final ByteBuffer buffer=ByteBuffer.allocateDirect(RECORD_LENGTH);
  return new Iterable<RelationshipRecord>(){
    @Override public Iterator<RelationshipRecord> iterator(){
      return new Iterator<RelationshipRecord>(){
        long id=0;
        @Override public boolean hasNext(){
          return id < maxId;
        }
        @Override public RelationshipRecord next(){
          RelationshipRecord record=null;
          do {
            buffer.position(0);
            try {
              fileChannel.read(buffer);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
            buffer.flip();
            long inUseByte=buffer.get();
            boolean inUse=(inUseByte & 0x1) == Record.IN_USE.intValue();
            if (inUse) {
              long firstNode=getUnsignedInt(buffer);
              long firstNodeMod=(inUseByte & 0xEL) << 31;
              long secondNode=getUnsignedInt(buffer);
              long typeInt=buffer.getInt();
              long secondNodeMod=(typeInt & 0x70000000L) << 4;
              int type=(int)(typeInt & 0xFFFF);
              record=new RelationshipRecord(id,longFromIntAndMod(firstNode,firstNodeMod),longFromIntAndMod(secondNode,secondNodeMod),type);
              record.setInUse(inUse);
              long firstPrevRel=getUnsignedInt(buffer);
              long firstPrevRelMod=(typeInt & 0xE000000L) << 7;
              record.setFirstPrevRel(longFromIntAndMod(firstPrevRel,firstPrevRelMod));
              long firstNextRel=getUnsignedInt(buffer);
              long firstNextRelMod=(typeInt & 0x1C00000L) << 10;
              record.setFirstNextRel(longFromIntAndMod(firstNextRel,firstNextRelMod));
              long secondPrevRel=getUnsignedInt(buffer);
              long secondPrevRelMod=(typeInt & 0x380000L) << 13;
              record.setSecondPrevRel(longFromIntAndMod(secondPrevRel,secondPrevRelMod));
              long secondNextRel=getUnsignedInt(buffer);
              long secondNextRelMod=(typeInt & 0x70000L) << 16;
              record.setSecondNextRel(longFromIntAndMod(secondNextRel,secondNextRelMod));
              long nextProp=getUnsignedInt(buffer);
              long nextPropMod=(inUseByte & 0xF0L) << 28;
              record.setNextProp(longFromIntAndMod(nextProp,nextPropMod));
            }
            id++;
          }
 while (record == null && id < maxId);
          return record;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
