{
  this.nodeManager=nodeManager;
  this.persistenceCache=persistenceCache;
  this.fs=fs;
  this.config=config;
  this.schemaState=schemaState;
  this.providerMap=providerMap;
  this.transactionMonitor=transactionMonitor;
  this.readOnly=readOnly;
  this.schemaWriteGuard=schemaWriteGuard;
  this.indexService=indexService;
  this.cacheAccess=cacheAccess;
  this.integrityValidator=integrityValidator;
  this.locks=locks;
  this.remoteTxHook=remoteTxHook;
  this.txIdGenerator=txIdGenerator;
  this.transactionHeaderInformation=transactionHeaderInformation;
  this.startupStatistics=startupStatistics;
  this.neoStore=neoStoreProvider.instance();
  this.schemaCache=schemaCache;
  this.labelScanStore=labelScanStore;
  this.scheduler=scheduler;
  this.legacyPropertyTrackers=new LegacyPropertyTrackers(propertyKeyTokenHolder,nodeManager.getNodePropertyTrackers(),nodeManager.getRelationshipPropertyTrackers(),nodeManager);
  this.storeLayer=storeLayer;
  this.statementOperations=buildStatementOperations();
  this.statisticsService=new StatisticsServiceRepository(fs,config,storeLayer,scheduler).loadStatistics();
  this.neoStoreTransactionContextSupplier=new NeoStoreTransactionContextSupplier(neoStore);
  this.transactionStore=createTransactionStore(logRotationControl,logging);
  this.commitProcess=new TransactionRepresentationCommitProcess(transactionStore,kernelHealth,indexService,labelScanStore,neoStore,cacheAccess,lockService,false);
}
