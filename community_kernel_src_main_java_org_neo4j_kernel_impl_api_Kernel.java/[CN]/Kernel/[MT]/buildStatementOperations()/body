{
  StoreStatementOperations context=new StoreStatementOperations(propertyKeyTokenHolder,labelTokenHolder,relationshipTypeTokenHolder,new SchemaStorage(neoStore.getSchemaStore()),neoStore,persistenceManager,indexService);
  StatementOperationParts parts=new StatementOperationParts(context,context,context,context,context,null,null).additionalPart(AuxiliaryStoreOperations.class,context);
  CachingStatementOperations cachingContext=new CachingStatementOperations(parts.entityReadOperations(),parts.schemaReadOperations(),persistenceCache,schemaCache);
  parts=parts.override(null,null,cachingContext,null,cachingContext,null,null);
  AuxiliaryStoreOperations auxStoreOperations=parts.resolve(AuxiliaryStoreOperations.class);
  auxStoreOperations=new LegacyAutoIndexAuxStoreOps(auxStoreOperations,propertyKeyTokenHolder,nodeManager.getNodePropertyTrackers(),nodeManager.getRelationshipPropertyTrackers(),nodeManager);
  StateHandlingStatementOperations stateHandlingContext=new StateHandlingStatementOperations(parts.entityReadOperations(),parts.schemaReadOperations(),auxStoreOperations,new ConstraintIndexCreator(new Transactor(transactionManager),indexService));
  parts=parts.override(null,null,stateHandlingContext,stateHandlingContext,stateHandlingContext,stateHandlingContext,new SchemaStateConcern(schemaState));
  ConstraintEnforcingEntityOperations constraintEnforcingEntityOperations=new ConstraintEnforcingEntityOperations(parts.entityWriteOperations(),parts.entityReadOperations(),parts.schemaReadOperations());
  DataIntegrityValidatingStatementOperations dataIntegrityContext=new DataIntegrityValidatingStatementOperations(parts.keyWriteOperations(),parts.schemaReadOperations(),parts.schemaWriteOperations());
  parts=parts.override(null,dataIntegrityContext,constraintEnforcingEntityOperations,constraintEnforcingEntityOperations,null,dataIntegrityContext,null);
  LockingStatementOperations lockingContext=new LockingStatementOperations(parts.entityWriteOperations(),parts.schemaReadOperations(),parts.schemaWriteOperations(),parts.schemaStateOperations());
  parts=parts.override(null,null,null,lockingContext,lockingContext,lockingContext,lockingContext);
  if (highlyAvailableInstance) {
    UniquenessConstraintStoppingStatementOperations stoppingContext=new UniquenessConstraintStoppingStatementOperations(parts.schemaWriteOperations());
    parts=parts.override(null,null,null,null,null,stoppingContext,null);
  }
  return parts;
}
