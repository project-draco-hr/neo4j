{
  int node1=101, node1Rel=1001;
  int node2=201, node2Rel=2001;
  int sharedRel=1000;
  int relType=0;
  RecordSet<RelationshipRecord> node1RelChain=RecordSet.asSet(new RelationshipRecord(node1Rel,node1,node1 - 1,relType),new RelationshipRecord(sharedRel,node1,node2,relType),new RelationshipRecord(node1Rel + 1,node1 + 1,node1,relType));
  RecordSet<RelationshipRecord> node2RelChain=RecordSet.asSet(new RelationshipRecord(node2Rel,node2 - 1,node2,relType),new RelationshipRecord(sharedRel,node1,node2,relType),new RelationshipRecord(node2Rel + 1,node2,node2 + 1,relType));
  @SuppressWarnings("unchecked") RecordStore<NodeRecord> recordStore=mock(RecordStore.class);
  when(recordStore.forceGetRecord(node1)).thenReturn(new NodeRecord(node1,node1Rel,NO_NEXT_PROPERTY.intValue()));
  when(recordStore.forceGetRecord(node2)).thenReturn(new NodeRecord(node2,node2Rel,NO_NEXT_PROPERTY.intValue()));
  RelationshipChainExplorer relationshipChainExplorer=mock(RelationshipChainExplorer.class);
  when(relationshipChainExplorer.followChainFromNode(node1,node1Rel)).thenReturn(node1RelChain);
  when(relationshipChainExplorer.followChainFromNode(node2,node2Rel)).thenReturn(node2RelChain);
  OwningNodeRelationshipChain owningChainFinder=new OwningNodeRelationshipChain(relationshipChainExplorer,recordStore);
  RecordSet<RelationshipRecord> recordsInChains=owningChainFinder.findRelationshipChainsThatThisRecordShouldBelongTo(new RelationshipRecord(sharedRel,node1,node2,relType));
  assertThat(recordsInChains,containsAllRecords(node1RelChain));
  assertThat(recordsInChains,containsAllRecords(node2RelChain));
}
