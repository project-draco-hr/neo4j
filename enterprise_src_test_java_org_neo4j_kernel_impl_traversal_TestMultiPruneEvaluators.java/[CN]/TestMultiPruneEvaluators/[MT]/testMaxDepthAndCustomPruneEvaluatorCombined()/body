{
  TraversalDescription description=Traversal.description().filter(Traversal.returnAll()).prune(Traversal.pruneAfterDepth(1)).prune(new PruneEvaluator(){
    public boolean pruneAfter(    Path position){
      return IteratorUtil.count(position.endNode().getRelationships(Direction.OUTGOING).iterator()) < 3;
    }
  }
);
  Set<String> expectedNodes=new HashSet<String>(Arrays.asList("a","b","c","d","e"));
  for (  Path position : description.traverse(referenceNode())) {
    String name=(String)position.endNode().getProperty("name");
    assertTrue(name + " shouldn't have been returned",expectedNodes.remove(name));
  }
  assertTrue(expectedNodes.isEmpty());
}
