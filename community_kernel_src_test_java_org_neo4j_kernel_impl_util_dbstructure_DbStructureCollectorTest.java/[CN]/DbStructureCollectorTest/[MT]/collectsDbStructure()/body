{
  DbStructureCollector collector=new DbStructureCollector();
  collector.visitLabel(1,"Person");
  collector.visitLabel(2,"City");
  collector.visitPropertyKey(1,"name");
  collector.visitPropertyKey(2,"income");
  collector.visitRelationshipType(1,"LIVES_IN");
  collector.visitRelationshipType(2,"FRIEND");
  collector.visitUniqueIndex(new IndexDescriptor(1,1),":Person(name)",1.0d,1l);
  collector.visitUniqueConstraint(new UniquenessConstraint(2,1),":Person(name)");
  collector.visitIndex(new IndexDescriptor(2,2),":City(income)",0.2d,1l);
  collector.visitAllNodesCount(50);
  collector.visitNodeCount(1,"Person",20);
  collector.visitNodeCount(2,"City",30);
  collector.visitRelCount(1,2,-1,"(:Person)-[:FRIEND]->()",500);
  DbStructureLookup lookup=collector.lookup();
  assertEquals(asList(of(1,"Person"),of(2,"City")),toList(lookup.labels()));
  assertEquals(asList(of(1,"name"),of(2,"income")),toList(lookup.properties()));
  assertEquals(asList(of(1,"LIVES_IN"),of(2,"FRIEND")),toList(lookup.relationshipTypes()));
  assertEquals(asList(of("City","name")),toList(lookup.knownUniqueConstraints()));
  assertEquals(asList(of("Person","name")),toList(lookup.knownUniqueIndices()));
  assertEquals(asList(of("City","income")),toList(lookup.knownIndices()));
  assertEquals(50,lookup.nodesWithLabelCardinality(-1));
  assertEquals(20,lookup.nodesWithLabelCardinality(1));
  assertEquals(30,lookup.nodesWithLabelCardinality(2));
  assertEquals(500,lookup.cardinalityByLabelsAndRelationshipType(1,2,-1));
  assertEquals(1.0d,lookup.indexSelectivity(1,1),0.01d);
  assertEquals(0.2d,lookup.indexSelectivity(2,2),0.01d);
}
