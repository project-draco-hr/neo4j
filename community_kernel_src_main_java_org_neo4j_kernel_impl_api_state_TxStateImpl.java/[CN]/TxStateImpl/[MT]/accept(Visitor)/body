{
  if (hasNodeStatesMap() && !nodeStatesMap().isEmpty()) {
    for (    NodeState node : modifiedNodes()) {
      node.accept(nodeVisitor(visitor));
    }
  }
  if (hasRelationshipsStatesMap() && !relationshipStatesMap().isEmpty()) {
    for (    RelationshipState rel : modifiedRelationships()) {
      rel.accept(relVisitor(visitor));
    }
  }
  if (graphState != null) {
    graphState.accept(graphPropertyVisitor(visitor));
  }
  if (hasIndexChangesDiffSets() && !indexChanges().isEmpty()) {
    indexChanges().accept(indexVisitor(visitor,false));
  }
  if (hasConstraintIndexChangesDiffSets() && !constraintIndexChanges().isEmpty()) {
    constraintIndexChanges().accept(indexVisitor(visitor,true));
  }
  if (hasConstraintsChangesDiffSets() && !constraintsChanges().isEmpty()) {
    constraintsChanges().accept(new DiffSets.Visitor<UniquenessConstraint>(){
      @Override public void visitAdded(      UniquenessConstraint element){
        visitor.visitAddedConstraint(element);
      }
      @Override public void visitRemoved(      UniquenessConstraint element){
        visitor.visitRemovedConstraint(element);
      }
    }
);
  }
}
