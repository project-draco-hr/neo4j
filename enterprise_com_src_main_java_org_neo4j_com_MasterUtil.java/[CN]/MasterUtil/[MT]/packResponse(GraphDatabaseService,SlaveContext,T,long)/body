{
  List<Triplet<XaDataSource,Long,Long>> streams=new ArrayList<Triplet<XaDataSource,Long,Long>>();
  Set<String> resourceNames=new HashSet<String>();
  XaDataSourceManager dsManager=((AbstractGraphDatabase)graphDb).getConfig().getTxModule().getXaDataSourceManager();
  for (  Pair<String,Long> txEntry : context.lastAppliedTransactions()) {
    String resourceName=txEntry.first();
    final XaDataSource dataSource=dsManager.getXaDataSource(resourceName);
    if (dataSource == null) {
      throw new RuntimeException("No data source '" + resourceName + "' found");
    }
    resourceNames.add(resourceName);
    long fromTxId=txEntry.other() + 1;
    long toTxId=Math.min(highestPossibleTxId,dataSource.getLastCommittedTxId());
    if (fromTxId <= toTxId) {
      streams.add(Triplet.of(dataSource,fromTxId,toTxId));
    }
  }
  StoreId storeId=((NeoStoreXaDataSource)dsManager.getXaDataSource(Config.DEFAULT_DATA_SOURCE_NAME)).getStoreId();
  Iterator<Triplet<String,Long,TxExtractor>> streamIterator=new NestingIterator<Triplet<String,Long,TxExtractor>,Triplet<XaDataSource,Long,Long>>(streams.iterator()){
    @Override protected Iterator<Triplet<String,Long,TxExtractor>> createNestedIterator(    final Triplet<XaDataSource,Long,Long> item){
      try {
        return new PrefetchingIterator<Triplet<String,Long,TxExtractor>>(){
          private long txId=item.second();
          private long endTxId=item.third();
          private LogExtractor logExtractor=item.first().getLogExtractor(txId,endTxId);
          @Override protected Triplet<String,Long,TxExtractor> fetchNextOrNull(){
            if (txId > endTxId) {
              logExtractor.close();
              return null;
            }
            TxExtractor txExtractor=new TxExtractor(){
              @Override public void extract(              LogBuffer buffer){
                try {
                  if (logExtractor.extractNext(buffer) == -1) {
                    throw new RuntimeException("All txs not found");
                  }
                  txId++;
                }
 catch (                IOException e) {
                  throw new RuntimeException(e);
                }
              }
            }
;
            return Triplet.of(item.first().getName(),txId,txExtractor);
          }
        }
;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  return new Response<T>(response,storeId,new TransactionStream(streamIterator,resourceNames.toArray(new String[streams.size()])));
}
