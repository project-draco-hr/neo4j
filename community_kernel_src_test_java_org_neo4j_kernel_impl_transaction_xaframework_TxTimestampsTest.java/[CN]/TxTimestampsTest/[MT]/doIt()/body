{
  long[] expectedStartTimestamps=new long[10];
  long[] expectedCommitTimestamps=new long[expectedStartTimestamps.length];
  for (int i=0; i < expectedStartTimestamps.length; i++) {
    Transaction tx=db.beginTx();
    expectedStartTimestamps[i]=System.currentTimeMillis();
    Node node=db.createNode();
    node.setProperty("name","Mattias " + i);
    tx.success();
    tx.finish();
    expectedCommitTimestamps[i]=System.currentTimeMillis();
  }
  try {
    LogFile logFile=db.getDependencyResolver().resolveDependency(NeoStoreXaDataSource.class).getDependencyResolver().resolveDependency(LogFile.class);
    final AConsumer consumer=new AConsumer(expectedCommitTimestamps,expectedStartTimestamps);
    logFile.accept(new LogFile.LogFileVisitor(){
      LogDeserializer deserializer=new LogDeserializer(CommandReaderFactory.DEFAULT);
      @Override public boolean visit(      LogPosition position,      ReadableLogChannel channel){
        try {
          try (Cursor<LogEntry,IOException> cursor=deserializer.cursor(channel)){
            while (cursor.next(consumer))             ;
          }
           return true;
        }
 catch (        IOException e) {
          return false;
        }
      }
    }
);
    assertEquals(expectedCommitTimestamps.length,consumer.getFoundTxCount());
  }
  finally {
    db.shutdown();
  }
}
