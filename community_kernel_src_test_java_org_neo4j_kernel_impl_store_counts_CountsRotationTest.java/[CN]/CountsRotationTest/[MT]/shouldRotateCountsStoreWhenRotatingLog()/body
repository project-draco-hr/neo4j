{
  GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
  try (Transaction tx=db.beginTx()){
    db.createNode(B);
    tx.success();
  }
   rotateLog(db);
  try (Transaction tx=db.beginTx()){
    db.createNode(C);
    tx.success();
  }
   assertTrue(fs.fileExists(alphaStoreFile()));
  assertTrue(fs.fileExists(betaStoreFile()));
  final PageCache pageCache=db.getDependencyResolver().resolveDependency(PageCache.class);
  try (Lifespan life=new Lifespan()){
    CountsTracker store=life.add(new CountsTracker(StringLogger.DEV_NULL,fs,pageCache,new File(dir.getPath(),COUNTS_STORE_BASE)));
    assertEquals(BASE_TX_ID + 1 + 1,store.txId());
    assertEquals(BASE_MINOR_VERSION,store.minorVersion());
    assertEquals(1 + 1,store.totalEntriesStored());
    assertEquals(1 + 1,allRecords(store).size());
  }
   final CountsTracker tracker=db.getDependencyResolver().resolveDependency(NeoStore.class).getCounts();
  assertEquals(1 + 1,tracker.nodeCount(-1,newDoubleLongRegister()).readSecond());
  final LabelTokenHolder holder=db.getDependencyResolver().resolveDependency(LabelTokenHolder.class);
  int labelId=holder.getIdByName(C.name());
  assertEquals(1,tracker.nodeCount(labelId,newDoubleLongRegister()).readSecond());
  db.shutdown();
}
