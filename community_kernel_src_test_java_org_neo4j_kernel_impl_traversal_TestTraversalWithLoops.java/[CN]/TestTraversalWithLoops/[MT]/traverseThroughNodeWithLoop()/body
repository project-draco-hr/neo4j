{
  createGraph("a TO b","b TO c","c TO c","c TO d","d TO d","d TO e");
  Node a=getNodeWithName("a");
  final Node e=getNodeWithName("e");
  Evaluator onlyEndNode=new Evaluator(){
    @Override public Evaluation evaluate(    Path path){
      return Evaluation.ofIncludes(path.endNode().equals(e));
    }
  }
;
  TraversalDescription basicTraverser=traversal().evaluator(onlyEndNode);
  expectPaths(basicTraverser.traverse(a),"a,b,c,d,e");
  expectPaths(basicTraverser.uniqueness(Uniqueness.RELATIONSHIP_PATH).traverse(a),"a,b,c,d,e","a,b,c,c,d,e","a,b,c,d,d,e","a,b,c,c,d,d,e");
}
