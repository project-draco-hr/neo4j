{
  gen.get().addTestSourceSnippets(this.getClass(),"get-admins","get-user-memberships","get-groups","get-members","read-traverser");
  System.out.println("All admins:");
  Node admins=getNodeByName("Admins");
  TraversalDescription traversal=db.traversalDescription().breadthFirst().evaluator(excludeStartPosition()).relationships(RoleRels.PART_OF,INCOMING).relationships(RoleRels.MEMBER_OF,INCOMING);
  gen.get().addSnippet("o-get-admins",createOutputSnippet(traverserToString(traversal.traverse(admins))));
  String query="start admins=node(" + admins.getId() + ") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name";
  gen.get().addSnippet("query-get-admins",createCypherSnippet(query));
  String result=engine.execute(query).dumpToString();
  assertTrue(result.contains("Engin"));
  gen.get().addSnippet("o-query-get-admins",createQueryResultSnippet(result));
  Node jale=getNodeByName("Jale");
  traversal=db.traversalDescription().depthFirst().evaluator(excludeStartPosition()).relationships(RoleRels.MEMBER_OF,OUTGOING).relationships(RoleRels.PART_OF,OUTGOING);
  gen.get().addSnippet("o-get-user-memberships",createOutputSnippet(traverserToString(traversal.traverse(jale))));
  query="start jale=node(" + jale.getId() + ") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name";
  gen.get().addSnippet("query-get-user-memberships",createCypherSnippet(query));
  result=engine.execute(query).dumpToString();
  assertTrue(result.contains("Users"));
  gen.get().addSnippet("o-query-get-user-memberships",createQueryResultSnippet(result));
  Node referenceNode=getNodeByName("Reference_Node");
  traversal=db.traversalDescription().breadthFirst().evaluator(excludeStartPosition()).relationships(RoleRels.ROOT,INCOMING).relationships(RoleRels.PART_OF,INCOMING);
  gen.get().addSnippet("o-get-groups",createOutputSnippet(traverserToString(traversal.traverse(referenceNode))));
  query="start refNode=node(" + referenceNode.getId() + ") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name";
  gen.get().addSnippet("query-get-groups",createCypherSnippet(query));
  result=engine.execute(query).dumpToString();
  assertTrue(result.contains("Users"));
  gen.get().addSnippet("o-query-get-groups",createQueryResultSnippet(result));
  traversal=db.traversalDescription().breadthFirst().evaluator(Evaluators.includeWhereLastRelationshipTypeIs(RoleRels.MEMBER_OF)).relationships(RoleRels.ROOT,INCOMING).relationships(RoleRels.PART_OF,INCOMING).relationships(RoleRels.MEMBER_OF,INCOMING);
  gen.get().addSnippet("o-get-members",createOutputSnippet(traverserToString(traversal.traverse(referenceNode))));
  query="start refNode=node(" + referenceNode.getId() + ") "+ "match refNode<-[:ROOT]->root, p=root<-[PART_OF*0..]-()<-[:MEMBER_OF]-user "+ "return user.name, min(length(p)) "+ "order by min(length(p)), user.name";
  gen.get().addSnippet("query-get-members",createCypherSnippet(query));
  result=engine.execute(query).dumpToString();
  assertTrue(result.contains("Engin"));
  gen.get().addSnippet("o-query-get-members",createQueryResultSnippet(result));
}
