{
  ConsistencyCheck consistency=diffs.applyToAll(new ConsistencyCheck(diffs){
    @Override protected <R extends AbstractBaseRecord>void report(    RecordStore<R> recordStore,    R record,    InconsistencyType inconsistency){
      StringBuilder log=messageHeader("Inconsistencies");
      logRecord(log,recordStore,record);
      log.append(inconsistency.message());
      msgLog.logMessage(log.toString());
    }
    @Override protected <R1 extends AbstractBaseRecord,R2 extends AbstractBaseRecord>void report(    RecordStore<R1> recordStore,    R1 record,    RecordStore<? extends R2> referredStore,    R2 referred,    InconsistencyType inconsistency){
      if (recordStore == referredStore && record.getLongId() == referred.getLongId()) {
        report(recordStore,record,inconsistency);
        return;
      }
      StringBuilder log=messageHeader("Inconsistencies");
      logRecord(log,recordStore,record);
      logRecord(log,referredStore,referred);
      log.append(inconsistency.message());
      msgLog.logMessage(log.toString());
    }
  }
);
  try {
    consistency.checkResult();
  }
 catch (  AssertionError e) {
    DataInconsistencyError error=new DataInconsistencyError("Cannot apply transaction\n\t" + startEntry + "\n\t"+ commitEntry+ "\n\t"+ e.getMessage());
    msgLog.logMessage(error.getMessage());
    if (rejectInconsistentTransactions) {
      startEntry=null;
      commitEntry=null;
      throw error;
    }
 else {
      final StringBuilder changes=messageHeader("Changes");
      diffs.applyToAll(new RecordStore.Processor(){
        @Override protected <R extends AbstractBaseRecord>void processRecord(        Class<R> type,        RecordStore<R> store,        R record){
          DiffRecordStore<R> diff=(DiffRecordStore<R>)store;
          if (diff.isModified(record.getLongId())) {
            logRecord(changes,store,record);
          }
        }
      }
);
      for (      RecordStore<?> store : diffs.allStores()) {
        changes.append(store).append(": highId(before) = ");
        changes.append(((DiffRecordStore<?>)store).getRawHighId());
        changes.append(", highId(after) = ").append(store.getHighId()).append("\n\t");
      }
      msgLog.logMessage(changes.toString());
    }
  }
  if (next != null) {
    next.complete();
  }
}
