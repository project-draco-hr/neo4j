{
  super.collectInitializationErrors(errors);
  TestClass testclass=this.getTestClass();
  Object target=null;
  try {
    target=testclass.getOnlyConstructor().newInstance();
  }
 catch (  InvocationTargetException e) {
    errors.add(e.getTargetException());
  }
catch (  Throwable e) {
    errors.add(e);
  }
  List<FrameworkMethod> methods=testclass.getAnnotatedMethods(Phase.class);
  Collections.sort(methods,PHASE_COMPARATOR);
  runners=new LinkedList<Runner>();
  for (  FrameworkMethod method : methods) {
    validatePublicObjectNoArg(method.getMethod(),errors);
    if (target != null) {
      Object instance;
      try {
        instance=method.invokeExplosively(target);
      }
 catch (      Throwable e) {
        errors.add(e);
        continue;
      }
      try {
        runners.add(new InstanceRunner(instance,testclass.getJavaClass().getSimpleName() + "/" + method.getName()));
      }
 catch (      InitializationError e) {
        for (        Throwable t : e.getCauses()) {
          t.printStackTrace();
        }
        errors.addAll(e.getCauses());
      }
    }
  }
}
