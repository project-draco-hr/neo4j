{
  final CoreTopologyService topologyService=mock(CoreTopologyService.class);
  Map<MemberId,CoreAddresses> coreMembers=new HashMap<>();
  MemberId theLeader=new MemberId(UUID.randomUUID());
  MemberId follower1=new MemberId(UUID.randomUUID());
  MemberId follower2=new MemberId(UUID.randomUUID());
  coreMembers.put(theLeader,DiscoverEndpointAcquisitionServersProcedureTest.coreAddresses(0));
  coreMembers.put(follower1,DiscoverEndpointAcquisitionServersProcedureTest.coreAddresses(1));
  coreMembers.put(follower2,DiscoverEndpointAcquisitionServersProcedureTest.coreAddresses(2));
  Set<EdgeAddresses> edges=DiscoverEndpointAcquisitionServersProcedureTest.addresses(4,5);
  final ClusterTopology clusterTopology=new ClusterTopology(null,false,coreMembers,edges);
  when(topologyService.currentTopology()).thenReturn(clusterTopology);
  LeaderLocator leaderLocator=mock(LeaderLocator.class);
  when(leaderLocator.getLeader()).thenReturn(theLeader);
  ClusterOverviewProcedure procedure=new ClusterOverviewProcedure(topologyService,leaderLocator,NullLogProvider.getInstance());
  final List<Object[]> members=asList(procedure.apply(null,new Object[0]));
  assertThat(members,IsIterableContainingInOrder.contains(new Object[]{theLeader.getUuid().toString(),"localhost:3000","LEADER"},new Object[]{follower1.getUuid().toString(),"localhost:3001","FOLLOWER"},new Object[]{follower2.getUuid().toString(),"localhost:3002","FOLLOWER"},new Object[]{"00000000-0000-0000-0000-000000000000","localhost:3004","READ_REPLICA"},new Object[]{"00000000-0000-0000-0000-000000000000","localhost:3005","READ_REPLICA"}));
}
