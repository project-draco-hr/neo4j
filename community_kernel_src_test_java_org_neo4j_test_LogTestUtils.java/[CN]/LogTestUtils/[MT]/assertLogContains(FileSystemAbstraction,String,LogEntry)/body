{
  ByteBuffer buffer=ByteBuffer.allocateDirect(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10);
  try (StoreChannel fileChannel=fileSystem.open(new File(logPath),"r")){
    VersionAwareLogEntryReader.readLogHeader(buffer,fileChannel,true);
    final List<LogEntry> entries=new ArrayList<>();
    LogDeserializer deserializer=new LogDeserializer(CommandReaderFactory.DEFAULT);
    Visitor<LogEntry,IOException> visitor=new Visitor<LogEntry,IOException>(){
      @Override public boolean visit(      LogEntry entry) throws IOException {
        entries.add(entry);
        return true;
      }
    }
;
    ReadableLogChannel logChannel=new ReadAheadLogChannel(new PhysicalLogVersionedStoreChannel(fileChannel),LogVersionBridge.NO_MORE_CHANNELS,4096);
    try (Cursor<LogEntry,IOException> cursor=deserializer.cursor(logChannel)){
      cursor.next(visitor);
    }
     for (int entryNo=0; entryNo < expectedEntries.length; entryNo++) {
      LogEntry expectedEntry=expectedEntries[entryNo];
      if (entries.size() <= entryNo) {
        fail("Log ended prematurely. Expected to find '" + expectedEntry.toString() + "' as log entry number "+ entryNo+ ", instead there were no more log entries.");
      }
      LogEntry actualEntry=entries.get(entryNo);
      assertThat("Unexpected entry at entry number " + entryNo,actualEntry,is(expectedEntry));
    }
    assertThat("The log contained more entries than we expected!",entries.size(),is(expectedEntries.length));
  }
 }
