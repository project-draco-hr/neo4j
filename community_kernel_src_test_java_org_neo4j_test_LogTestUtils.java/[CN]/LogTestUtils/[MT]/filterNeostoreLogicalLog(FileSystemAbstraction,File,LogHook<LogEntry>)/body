{
  filter.file(file);
  File tempFile=new File(file.getAbsolutePath() + ".tmp");
  fileSystem.deleteFile(tempFile);
  StoreChannel in=fileSystem.open(file,"r");
  StoreChannel out=fileSystem.open(tempFile,"rw");
  final LogBuffer outBuffer=new DirectMappedLogBuffer(out,new Monitors().newMonitor(ByteCounterMonitor.class));
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 1024);
  transferLogicalLogHeader(in,outBuffer,buffer);
  final LogEntryWriterv1 writer=new LogEntryWriterv1();
  writer.setCommandWriter(new PhysicalLogNeoXaCommandWriter());
  LogDeserializer deserializer=new LogDeserializer(buffer,XaCommandReaderFactory.DEFAULT);
  Consumer<LogEntry,IOException> consumer=new Consumer<LogEntry,IOException>(){
    @Override public boolean accept(    LogEntry entry) throws IOException {
      boolean accepted=filter.accept(entry);
      if (accepted) {
        writer.writeLogEntry(entry,outBuffer);
      }
      return true;
    }
  }
;
  try (Cursor<LogEntry,IOException> cursor=deserializer.cursor(in)){
    while (cursor.next(consumer)) {
      ;
    }
  }
  finally {
    safeClose(in);
    outBuffer.force();
    safeClose(out);
    filter.done(file);
  }
  return tempFile;
}
