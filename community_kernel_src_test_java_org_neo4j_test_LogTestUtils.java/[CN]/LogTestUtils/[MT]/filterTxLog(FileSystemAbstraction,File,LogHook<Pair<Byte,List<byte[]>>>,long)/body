{
  File tempFile=new File(file.getPath() + ".tmp");
  fileSystem.deleteFile(tempFile);
  FileChannel in=fileSystem.open(file,"r");
  in.position(startPosition);
  FileChannel out=fileSystem.open(tempFile,"rw");
  LogBuffer outBuffer=new DirectMappedLogBuffer(out,new Monitors().newMonitor(ByteCounterMonitor.class));
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 1024);
  boolean changed=false;
  try {
    filter.file(file);
    in.read(buffer);
    buffer.flip();
    while (buffer.hasRemaining()) {
      byte type=buffer.get();
      List<byte[]> xids=null;
      if (type == TxLog.TX_START) {
        xids=readXids(buffer,1);
      }
 else       if (type == TxLog.BRANCH_ADD) {
        xids=readXids(buffer,2);
      }
 else       if (type == TxLog.MARK_COMMIT) {
        xids=readXids(buffer,1);
      }
 else       if (type == TxLog.TX_DONE) {
        xids=readXids(buffer,1);
      }
 else {
        throw new IllegalArgumentException("Unknown type:" + type + ", position:"+ (in.position() - buffer.remaining()));
      }
      if (filter.accept(Pair.of(type,xids))) {
        outBuffer.put(type);
        writeXids(xids,outBuffer);
      }
 else {
        changed=true;
      }
    }
  }
  finally {
    safeClose(in);
    outBuffer.force();
    safeClose(out);
    filter.done(file);
  }
  if (changed) {
    replace(tempFile,file);
  }
 else {
    tempFile.delete();
  }
}
