{
  StringLogger logger;
  try {
    logger=logging.getMessagesLog(getClass().getClassLoader().loadClass(name));
  }
 catch (  ClassNotFoundException e) {
    logger=logging.getMessagesLog(getClass());
  }
  final StringLogger finalLogger=logger;
  return new AbstractInternalLogger(){
    @Override public boolean isDebugEnabled(){
      return false;
    }
    @Override public boolean isInfoEnabled(){
      return true;
    }
    @Override public boolean isWarnEnabled(){
      return true;
    }
    @Override public boolean isErrorEnabled(){
      return true;
    }
    @Override public boolean isEnabled(    InternalLogLevel level){
      return true;
    }
    @Override public void debug(    String msg){
      finalLogger.debug(msg);
    }
    @Override public void debug(    String msg,    Throwable cause){
      finalLogger.debug(msg,cause);
    }
    @Override public void info(    String msg){
      finalLogger.info(msg);
    }
    @Override public void info(    String msg,    Throwable cause){
      finalLogger.info(msg,cause);
    }
    @Override public void warn(    String msg){
      finalLogger.warn(msg);
    }
    @Override public void warn(    String msg,    Throwable cause){
      finalLogger.warn(msg,cause);
    }
    @Override public void error(    String msg){
      finalLogger.error(msg);
    }
    @Override public void error(    String msg,    Throwable cause){
      finalLogger.error(msg,cause);
    }
  }
;
}
