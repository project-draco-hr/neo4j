{
  check(newRecord,engine,records);
  if (oldRecord.inUse()) {
    for (    PropertyField field : PropertyField.values()) {
      field.checkChange(oldRecord,newRecord,engine,records);
    }
  }
  if (oldRecord.inUse()) {
    OwnerChain.OLD.check(newRecord,engine,records);
  }
  if (newRecord.inUse()) {
    OwnerChain.NEW.check(newRecord,engine,records);
  }
  Map<Long,PropertyBlock> prevStrings=new HashMap<>();
  Map<Long,PropertyBlock> prevArrays=new HashMap<>();
  for (  PropertyBlock block : oldRecord) {
    PropertyType type=block.getType();
    if (type != null) {
switch (type) {
case STRING:
        prevStrings.put(block.getSingleValueLong(),block);
      break;
case ARRAY:
    prevArrays.put(block.getSingleValueLong(),block);
  break;
}
}
}
for (PropertyBlock block : newRecord) {
PropertyType type=block.getType();
if (type != null) {
switch (type) {
case STRING:
prevStrings.remove(block.getSingleValueLong());
break;
case ARRAY:
prevArrays.remove(block.getSingleValueLong());
break;
}
}
}
for (PropertyBlock block : prevStrings.values()) {
if (records.changedString(block.getSingleValueLong()) == null) {
engine.report().stringUnreferencedButNotDeleted(block);
}
}
for (PropertyBlock block : prevArrays.values()) {
if (records.changedArray(block.getSingleValueLong()) == null) {
engine.report().arrayUnreferencedButNotDeleted(block);
}
}
}
