{
  graph.makeEdgeChain("a,b,c,d");
  graph.makeEdgeChain("a,g,h,d");
  final Node a=graph.getNode("a");
  final Node d=graph.getNode("d");
  final Node b=graph.getNode("b");
  b.setProperty("skip",true);
  Predicate<Node> filter=new Predicate<Node>(){
    @Override public boolean accept(    Node item){
      boolean skip=(Boolean)item.getProperty("skip",false);
      return !skip;
    }
  }
;
  testShortestPathFinder(new PathFinderTester(){
    @Override public void test(    PathFinder<Path> finder){
      assertPaths(finder.findAllPaths(a,d),"a,g,h,d");
    }
  }
,Traversal.expanderForAllTypes().addNodeFilter(filter),10);
}
