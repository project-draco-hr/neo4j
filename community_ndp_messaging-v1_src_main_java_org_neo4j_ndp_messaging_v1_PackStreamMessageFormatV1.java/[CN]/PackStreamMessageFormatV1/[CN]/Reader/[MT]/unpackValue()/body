{
  PackType valType=unpacker.peekNextType();
switch (valType) {
case TEXT:
    return unpacker.unpackString();
case INTEGER:
  return unpacker.unpackLong();
case FLOAT:
return unpacker.unpackDouble();
case BOOLEAN:
return unpacker.unpackBoolean();
case NULL:
unpacker.unpackNull();
return null;
case LIST:
{
int size=(int)unpacker.unpackListHeader();
if (size == 0) {
return Collections.EMPTY_LIST;
}
ArrayList<Object> vals=new ArrayList<>(size);
for (int j=0; j < size; j++) {
vals.add(unpackValue());
}
return vals;
}
case MAP:
{
int size=(int)unpacker.unpackMapHeader();
if (size == 0) {
return Collections.EMPTY_MAP;
}
Map<String,Object> map=new HashMap<>(size,1);
for (int j=0; j < size; j++) {
String key=unpacker.unpackString();
Object val=unpackValue();
map.put(key,val);
}
return map;
}
case STRUCT:
{
unpacker.unpackStructHeader();
char signature=unpacker.unpackStructSignature();
switch (signature) {
case NODE:
{
String urn=unpacker.unpackString();
int numLabels=(int)unpacker.unpackListHeader();
List<Label> labels;
if (numLabels > 0) {
labels=new ArrayList<>(numLabels);
for (int i=0; i < numLabels; i++) {
labels.add(DynamicLabel.label(unpacker.unpackString()));
}
}
 else {
labels=Collections.EMPTY_LIST;
}
Map<String,Object> props=unpackProperties();
return new ValueNode(urn,labels,props);
}
case RELATIONSHIP:
{
String urn=unpacker.unpackString();
String startUrn=unpacker.unpackString();
String endUrn=unpacker.unpackString();
String relType=unpacker.unpackString();
Map<String,Object> props=unpackProperties();
return new ValueRelationship(urn,startUrn,endUrn,relType,props);
}
case PATH:
{
int length=(int)unpacker.unpackListHeader();
PropertyContainer[] entities=new PropertyContainer[length];
for (int i=0; i < length; i++) {
entities[i]=(PropertyContainer)unpackValue();
}
return new ValuePath(entities);
}
default :
throw new IOException("Unknown struct type: " + signature);
}
}
default :
throw new IOException("Unknown value type: " + valType);
}
}
