{
  CommonContextState commonStateSnapshot=commonState.snapshot(logService.getInternalLog(ClusterConfiguration.class));
  PaxosInstanceStore paxosInstancesSnapshot=paxosInstances.snapshot();
  HeartbeatContextImpl snapshotHeartbeatContext=heartbeatContext.snapshot(commonStateSnapshot,logService,timeouts,executor);
  LearnerContextImpl snapshotLearnerContext=learnerContext.snapshot(commonStateSnapshot,logService,timeouts,paxosInstancesSnapshot,instanceStore,objectInputStreamFactory,objectOutputStreamFactory,snapshotHeartbeatContext);
  ClusterContextImpl snapshotClusterContext=clusterContext.snapshot(commonStateSnapshot,logService,timeouts,executor,objectOutputStreamFactory,objectInputStreamFactory,snapshotLearnerContext,snapshotHeartbeatContext);
  ElectionContextImpl snapshotElectionContext=electionContext.snapshot(commonStateSnapshot,logService,timeouts,snapshotClusterContext,snapshotHeartbeatContext,electionCredentialsProvider);
  ProposerContextImpl snapshotProposerContext=proposerContext.snapshot(commonStateSnapshot,logService,timeouts,paxosInstancesSnapshot);
  AcceptorContextImpl snapshotAcceptorContext=acceptorContext.snapshot(commonStateSnapshot,logService,timeouts,instanceStore);
  AtomicBroadcastContextImpl snapshotAtomicBroadcastContext=atomicBroadcastContext.snapshot(commonStateSnapshot,logService,timeouts,executor,snapshotHeartbeatContext);
  snapshotHeartbeatContext.setCircularDependencies(snapshotClusterContext,snapshotLearnerContext);
  return new MultiPaxosContext(snapshotProposerContext,snapshotAcceptorContext,snapshotLearnerContext,snapshotHeartbeatContext,snapshotElectionContext,snapshotAtomicBroadcastContext,commonStateSnapshot,paxosInstancesSnapshot,snapshotClusterContext);
}
