{
  HighlyAvailableGraphDatabase master=cluster.getMaster();
  final HighlyAvailableGraphDatabase slave1=cluster.getAnySlave();
  final HighlyAvailableGraphDatabase slave2=cluster.getAnySlave(slave1);
  final CountDownLatch slave1Left=new CountDownLatch(1);
  final CountDownLatch slave2Left=new CountDownLatch(1);
  clusterClientOf(master).addHeartbeatListener(new HeartbeatListener.Adapter(){
    @Override public void failed(    InstanceId server){
      if (instanceIdOf(slave1).equals(server)) {
        slave1Left.countDown();
      }
 else       if (instanceIdOf(slave2).equals(server)) {
        slave2Left.countDown();
      }
    }
  }
);
  RepairKit slave1RepairKit=cluster.fail(slave1);
  assertTrue(slave1Left.await(60,SECONDS));
  RepairKit slave2RepairKit=cluster.fail(slave2);
  assertTrue(slave2Left.await(60,SECONDS));
  cluster.await(not(masterAvailable()));
  assertEquals(HighAvailabilityMemberState.PENDING,master.getInstanceState());
  slave1RepairKit.repair();
  slave2RepairKit.repair();
  cluster.await(masterAvailable());
  cluster.await(masterSeesSlavesAsAvailable(2));
  HighlyAvailableGraphDatabase newMaster=cluster.getMaster();
  final HighlyAvailableGraphDatabase newSlave1=cluster.getAnySlave();
  final HighlyAvailableGraphDatabase newSlave2=cluster.getAnySlave(newSlave1);
  final CountDownLatch slave1Unavailable=new CountDownLatch(1);
  final CountDownLatch slave2Unavailable=new CountDownLatch(1);
  ClusterMemberEvents clusterEvents=newMaster.getDependencyResolver().resolveDependency(ClusterMemberEvents.class);
  clusterEvents.addClusterMemberListener(new ClusterMemberListener.Adapter(){
    @Override public void memberIsUnavailable(    String role,    InstanceId unavailableId){
      if (instanceIdOf(newSlave1).equals(unavailableId)) {
        slave1Unavailable.countDown();
      }
 else       if (instanceIdOf(newSlave2).equals(unavailableId)) {
        slave2Unavailable.countDown();
      }
    }
  }
);
  attemptTransactions(newSlave1,newSlave2);
  assertTrue(slave1Unavailable.await(60,TimeUnit.SECONDS));
  assertTrue(slave2Unavailable.await(60,TimeUnit.SECONDS));
  cluster.info("Waiting for cluster to stabilize");
  cluster.await(allSeesAllAsAvailable());
  cluster.info("Assert ok");
  assertNotNull(createNodeOn(newMaster));
  assertNotNull(createNodeOn(newSlave1));
  assertNotNull(createNodeOn(newSlave2));
}
