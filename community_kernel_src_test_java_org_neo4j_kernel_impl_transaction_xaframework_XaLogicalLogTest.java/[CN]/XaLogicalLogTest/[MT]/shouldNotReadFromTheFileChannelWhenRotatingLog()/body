{
  FileSystemAbstraction fs=spy(ephemeralFs.get());
  File dir=TargetDirectory.forTest(fs,XaLogicalLogTest.class).cleanDirectory("log");
  when(fs.open(new File(dir,"logical.log.1"),"rw")).thenAnswer(new Answer<StoreChannel>(){
    @Override public StoreChannel answer(    InvocationOnMock invocation) throws Throwable {
      StoreFileChannel channel=(StoreFileChannel)invocation.callRealMethod();
      return mock(channel.getClass(),withSettings().spiedInstance(channel).name("channel").defaultAnswer(CALLS_REAL_METHODS).invocationListeners(new InvocationListener(){
        @Override public void reportInvocation(        MethodInvocationReport methodInvocationReport){
          if (methodInvocationReport.getInvocation().toString().startsWith("channel.read(")) {
            reads++;
          }
        }
      }
));
    }
  }
);
  PhysicalLogFile log=new PhysicalLogFile(fs,dir,"logical.log",14,NO_PRUNING,mock(TransactionIdStore.class),mock(LoggingMonitor.class),mock(LogRotationControl.class),mock(LogPositionCache.class));
  log.open(mock(Visitor.class));
  WritableLogChannel writer=log.getWriter();
  for (int txId=1; txId <= 10; txId++) {
    writer.putLong(100l);
  }
  assertThat("should not read from the logical log file channel",reads,lessThan(1));
}
