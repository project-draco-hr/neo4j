{
  EphemeralFileSystemAbstraction fs=ephemeralFs.get();
  XaTransactionFactory xaTf=mock(XaTransactionFactory.class);
  when(xaTf.getAndSetNewVersion()).thenAnswer(new TxVersion(TxVersion.UPDATE_AND_GET));
  when(xaTf.getCurrentVersion()).thenAnswer(new TxVersion(TxVersion.GET));
  File dir=TargetDirectory.forTest(fs,XaLogicalLogTest.class).cleanDirectory("log");
  XaLogicalLog xaLogicalLog=new XaLogicalLog(new File(dir,"logical.log"),mock(XaResourceManager.class),mock(XaCommandReaderFactory.class),mock(XaCommandWriterFactory.class),xaTf,fs,new Monitors(),new SingleLoggingService(StringLogger.wrap(output.writer())),LogPruneStrategies.NO_PRUNING,mock(TransactionStateFactory.class),mock(KernelHealth.class),25 * 1024 * 1024,ALLOW_ALL,Functions.<List<LogEntry>>identity(),Functions.<List<LogEntry>>identity());
  xaLogicalLog.open();
  int tx0=xaLogicalLog.start(new XidImpl(getNewGlobalId(DEFAULT_SEED,0),RESOURCE_ID),-1,0,0);
  xaLogicalLog.writeStartEntry(tx0);
  xaLogicalLog.commitOnePhase(tx0,1,ForceMode.forced);
  xaLogicalLog.done(tx0);
  int tx1=xaLogicalLog.start(new XidImpl(getNewGlobalId(DEFAULT_SEED,0),RESOURCE_ID),-1,0,0);
  int tx2=xaLogicalLog.start(new XidImpl(getNewGlobalId(DEFAULT_SEED,0),RESOURCE_ID),-1,0,0);
  int tx3=xaLogicalLog.start(new XidImpl(getNewGlobalId(DEFAULT_SEED,0),RESOURCE_ID),-1,0,0);
  xaLogicalLog.writeStartEntry(tx1);
  xaLogicalLog.prepare(tx1);
  xaLogicalLog.writeStartEntry(tx2);
  xaLogicalLog.prepare(tx2);
  xaLogicalLog.commitTwoPhase(tx1,2,ForceMode.forced);
  xaLogicalLog.done(tx1);
  xaLogicalLog.writeStartEntry(tx3);
  xaLogicalLog.rotate();
  xaLogicalLog.close();
  StoreChannel log=fs.open(new File(dir,"logical.log.2"),"r");
  ByteBuffer buffer=ByteBuffer.allocateDirect(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10);
  VersionAwareLogEntryReader.readLogHeader(buffer,log,false);
  LogDeserializer deserializer=new LogDeserializer(buffer,null);
  Cursor<LogEntry,IOException> cursor=deserializer.cursor(log);
  @SuppressWarnings("unchecked") Consumer<LogEntry,IOException> consumer=mock(Consumer.class);
  when(consumer.accept(any(LogEntry.class))).thenReturn(true);
  while (cursor.next(consumer))   ;
  ArgumentCaptor<LogEntry> entryCaptor=ArgumentCaptor.forClass(LogEntry.class);
  verify(consumer,times(7)).accept(entryCaptor.capture());
  List<LogEntry> entries=entryCaptor.getAllValues();
  assertThat(entries.get(0),isEntry(LogEntry.Start.class,tx2));
  assertThat(entries.get(1),isEntry(LogEntry.Prepare.class,tx2));
  assertThat(entries.get(2),isEntry(LogEntry.Start.class,tx1));
  assertThat(entries.get(3),isEntry(LogEntry.Prepare.class,tx1));
  assertThat(entries.get(4),isEntry(LogEntry.TwoPhaseCommit.class,tx1));
  assertThat(entries.get(5),isEntry(LogEntry.Done.class,tx1));
  assertThat(entries.get(6),isEntry(LogEntry.Start.class,tx3));
}
