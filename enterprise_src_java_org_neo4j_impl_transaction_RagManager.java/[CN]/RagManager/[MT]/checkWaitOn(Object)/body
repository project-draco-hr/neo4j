{
  List<Thread> lockingThreadList=resourceMap.get(resource);
  if (lockingThreadList == null) {
    throw new RuntimeException("Illegal resource, not found in map");
  }
  Thread waitingThread=Thread.currentThread();
  if (waitingThreadMap.get(waitingThread) != null) {
    throw new RuntimeException("Thread already waiting for resource");
  }
  Iterator<Thread> itr=lockingThreadList.iterator();
  List<Thread> checkedThreads=new LinkedList<Thread>();
  Stack<Object> graphStack=new Stack<Object>();
  graphStack.push(resource);
  while (itr.hasNext()) {
    Thread lockingThread=itr.next();
    if (lockingThread != waitingThread) {
      graphStack.push(lockingThread);
      checkWaitOnRecursive(lockingThread,waitingThread,checkedThreads,graphStack);
      graphStack.pop();
    }
  }
  waitingThreadMap.put(Thread.currentThread(),resource);
}
