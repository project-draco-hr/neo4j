{
  updateAndCommit(asList(add(1,"A"),add(2,"B"),add(3,"C"),add(4,"")));
  IndexReader reader=accessor.newReader();
  PrimitiveLongIterator rangeFromBInclusive=reader.rangeSeekByString("B",true,null,false);
  assertThat(PrimitiveLongCollections.asArray(rangeFromBInclusive),LongArrayMatcher.of(2,3));
  PrimitiveLongIterator rangeFromANonInclusive=reader.rangeSeekByString("A",false,null,false);
  assertThat(PrimitiveLongCollections.asArray(rangeFromANonInclusive),LongArrayMatcher.of(2,3));
  PrimitiveLongIterator emptyLowInclusive=reader.rangeSeekByString("",true,null,false);
  assertThat(PrimitiveLongCollections.asArray(emptyLowInclusive),LongArrayMatcher.of(1,2,3,4));
  PrimitiveLongIterator emptyUpperNonInclusive=reader.rangeSeekByString("B",true,"",false);
  assertThat(PrimitiveLongCollections.asArray(emptyUpperNonInclusive),LongArrayMatcher.emptyArrayMatcher());
  PrimitiveLongIterator emptyInterval=reader.rangeSeekByString("",true,"",true);
  assertThat(PrimitiveLongCollections.asArray(emptyInterval),LongArrayMatcher.of(4));
  PrimitiveLongIterator emptyAllNonInclusive=reader.rangeSeekByString("",false,null,false);
  assertThat(PrimitiveLongCollections.asArray(emptyAllNonInclusive),LongArrayMatcher.of(1,2,3));
  PrimitiveLongIterator nullNonInclusive=reader.rangeSeekByString(null,false,null,false);
  assertThat(PrimitiveLongCollections.asArray(nullNonInclusive),LongArrayMatcher.of(1,2,3,4));
  PrimitiveLongIterator nullInclusive=reader.rangeSeekByString(null,false,null,false);
  assertThat(PrimitiveLongCollections.asArray(nullInclusive),LongArrayMatcher.of(1,2,3,4));
}
