{
  boolean doCd=parser.options().containsKey("cd");
  boolean doLs=parser.options().containsKey("ls");
  boolean query=parser.options().containsKey("q");
  boolean get=parser.options().containsKey("g") || query || doCd|| doLs;
  boolean index=parser.options().containsKey("i");
  boolean remove=parser.options().containsKey("r");
  boolean getConfig=parser.options().containsKey("get-config");
  boolean create=parser.options().containsKey("create");
  boolean setConfig=parser.options().containsKey("set-config");
  boolean delete=parser.options().containsKey("delete");
  boolean indexes=parser.options().containsKey("indexes");
  int count=boolCount(get,index,remove,getConfig,create,setConfig,delete,indexes);
  if (count != 1) {
    throw new ShellException("Supply one of: -g, -i, -r, --get-config, --set-config, --create, --delete, --indexes");
  }
  if (get) {
    String commandToRun=parser.options().get("c");
    Collection<String> commandsToRun=new ArrayList<String>();
    boolean specialCommand=false;
    if (doCd || doLs) {
      specialCommand=true;
      if (doCd) {
        commandsToRun.add("cd -a $i");
      }
 else       if (doLs) {
        commandsToRun.add("ls $i");
      }
    }
 else     if (commandToRun != null) {
      commandsToRun.addAll(Arrays.asList(commandToRun.split(Pattern.quote("&&"))));
    }
    if (getIndex(getIndexName(parser),getEntityType(parser),out) == null) {
      return Continuation.INPUT_COMPLETE;
    }
    IndexHits<PropertyContainer> result=query ? query(parser,out) : get(parser,out);
    try {
      for (      PropertyContainer hit : result) {
        printAndInterpretTemplateLines(commandsToRun,false,!specialCommand,NodeOrRelationship.wrap(hit),getServer(),session,out);
      }
    }
  finally {
      result.close();
    }
  }
 else   if (index) {
    index(parser,session,out);
  }
 else   if (remove) {
    if (getIndex(getIndexName(parser),Node.class,out) == null) {
      return null;
    }
    remove(parser,session,out);
  }
 else   if (getConfig) {
    displayConfig(parser,out);
  }
 else   if (create) {
    createIndex(parser,out);
  }
 else   if (setConfig) {
    setConfig(parser,out);
  }
 else   if (delete) {
    deleteIndex(parser,out);
  }
  if (indexes) {
    listIndexes(out);
  }
  return Continuation.INPUT_COMPLETE;
}
