{
  StandaloneDatabase standalone=new StandaloneDatabase(testMethodName,new Bootstrap(path,machineId,extraArgs){
    @Override HighlyAvailableGraphDatabase start(    String storeDir,    final Map<String,String> config){
      HighlyAvailableGraphDatabase haGraphDb=new HighlyAvailableGraphDatabase(storeDir,config){
        @Override protected Broker createBroker(){
          if (getMachineId() == masterId) {
            Config configuration=new Config(StringLogger.DEV_NULL,new DefaultFileSystemAbstraction(),removeDashes(config),Iterables.toList(Iterables.iterable(GraphDatabaseSettings.class,HaSettings.class)));
            return new FakeMasterBroker(configuration);
          }
 else {
            config.put(HaSettings.server_id.name(),Integer.toString(getMachineId()));
            Config configuration=new Config(StringLogger.DEV_NULL,new DefaultFileSystemAbstraction(),removeDashes(config),Iterables.toList(Iterables.iterable(GraphDatabaseSettings.class,HaSettings.class)));
            return new FakeSlaveBroker(new MasterClient("localhost",Protocol.PORT,getMessageLog(),storeIdGetter,Client.ConnectionLostHandler.NO_ACTION,Client.DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS,Client.DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS,Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT),masterId,configuration);
          }
        }
      }
;
      System.out.println("Started HA db (w/o zoo keeper)");
      return haGraphDb;
    }
  }
);
  return standalone;
}
