{
  StandaloneDatabase standalone=new StandaloneDatabase(testMethodName,new Bootstrap(path,machineId,extraArgs){
    @Override HighlyAvailableGraphDatabase start(    String storeDir,    Map<String,String> config){
      final PlaceHolderGraphDatabaseService placeHolderGraphDb=new PlaceHolderGraphDatabaseService(path.getAbsolutePath());
      final Broker broker;
      if (machineId == masterId) {
        broker=new FakeMasterBroker(machineId,placeHolderGraphDb,config);
      }
 else {
        broker=new FakeSlaveBroker(new MasterClient("localhost",Protocol.PORT,placeHolderGraphDb,null,Client.DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS,Client.DEFAULT_READ_RESPONSE_TIMEOUT_SECONDS,Client.DEFAULT_MAX_NUMBER_OF_CONCURRENT_CHANNELS_PER_CLIENT),masterId,machineId,placeHolderGraphDb);
      }
      config=removeDashes(config);
      HighlyAvailableGraphDatabase db=new HighlyAvailableGraphDatabase(new HAGraphDb(storeDir,config,AbstractHaTest.wrapBrokerAndSetPlaceHolderDb(placeHolderGraphDb,broker)));
      placeHolderGraphDb.setDb(db);
      System.out.println("Started HA db (w/o zoo keeper)");
      return db;
    }
  }
);
  return standalone;
}
