{
  (this.logger=logger).addRotationListener(new Runnable(){
    @Override public void run(){
      dumpAll(DiagnosticsPhase.LOG_ROTATION);
    }
  }
);
  providers.add(new DiagnosticsProvider(){
    @Override public String getDiagnosticsIdentifier(){
      return DiagnosticsManager.this.getClass().getName();
    }
    @Override public void dump(    DiagnosticsPhase phase,    final StringLogger log){
      if (phase.isInitialization() || phase.isExplicitlyRequested()) {
        log.logLongMessage("Diagnostics providers:",new IterableWrapper<String,DiagnosticsProvider>(providers){
          @Override protected String underlyingObjectToObject(          DiagnosticsProvider provider){
            return provider.getDiagnosticsIdentifier();
          }
        }
,true);
      }
    }
    @Override public void acceptDiagnosticsVisitor(    Object visitor){
      Visitor<? super DiagnosticsProvider,RuntimeException> target=castToGenericVisitor(DiagnosticsProvider.class,visitor);
      if (target != null)       for (      DiagnosticsProvider provider : providers) {
        target.visit(provider);
      }
    }
  }
);
  SystemDiagnostics.registerWith(this);
}
