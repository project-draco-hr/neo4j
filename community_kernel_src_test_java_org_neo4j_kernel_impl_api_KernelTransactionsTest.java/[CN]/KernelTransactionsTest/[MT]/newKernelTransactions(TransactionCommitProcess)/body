{
  LifeSupport life=new LifeSupport();
  life.start();
  Locks locks=mock(Locks.class);
  when(locks.newClient()).thenReturn(mock(Locks.Client.class));
  MetaDataStore metaDataStore=mock(MetaDataStore.class);
  NeoStores neoStores=mock(NeoStores.class);
  StoreReadLayer readLayer=mock(StoreReadLayer.class);
  when(readLayer.acquireStatement()).thenAnswer(new Answer<StorageStatement>(){
    @Override public StorageStatement answer(    InvocationOnMock invocation) throws Throwable {
      return new StoreStatement(neoStores,new ReentrantLockService(),mock(Supplier.class),null);
    }
  }
);
  StorageEngine storageEngine=mock(StorageEngine.class);
  when(storageEngine.storeReadLayer()).thenReturn(readLayer);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      invocation.getArgumentAt(0,Collection.class).add(mock(StorageCommand.class));
      return null;
    }
  }
).when(storageEngine).createCommands(anyCollection(),any(ReadableTransactionState.class),any(ResourceLocker.class),anyLong());
  Tracers tracers=new Tracers("null",NullLog.getInstance(),mock(Monitors.class),mock(JobScheduler.class));
  return new KernelTransactions(locks,null,null,null,TransactionHeaderInformationFactory.DEFAULT,commitProcess,null,null,new TransactionHooks(),mock(TransactionMonitor.class),life,tracers,storageEngine,new Procedures(),metaDataStore);
}
