{
  dependencyResolver=new DependencyResolverImpl();
  fileSystem=life.add(createFileSystemAbstraction());
  this.logging=createStringLogger();
  AutoConfigurator autoConfigurator=new AutoConfigurator(fileSystem,config.get(NeoStoreXaDataSource.Configuration.store_dir),config.get(GraphDatabaseSettings.use_memory_mapped_buffers),config.get(GraphDatabaseSettings.dump_configuration));
  Map<String,String> configParams=config.getParams();
  Map<String,String> autoConfiguration=autoConfigurator.configure();
  for (  Map.Entry<String,String> autoConfig : autoConfiguration.entrySet()) {
    if (!params.containsKey(autoConfig.getKey())) {
      String key=autoConfig.getKey();
      configParams.put(autoConfig.getKey(),autoConfig.getValue());
    }
  }
  config.applyChanges(configParams);
  this.msgLog=logging.getLogger(Loggers.NEO4J);
  config.setLogger(msgLog);
  boolean readOnly=config.get(Configuration.read_only);
  String cacheTypeName=config.get(Configuration.cache_type);
  CacheProvider cacheProvider=cacheProviders.get(cacheTypeName);
  if (cacheProvider == null)   throw new IllegalArgumentException("No cache type '" + cacheTypeName + "'");
  kernelEventHandlers=new KernelEventHandlers();
  caches=createCaches();
  diagnosticsManager=life.add(new DiagnosticsManager(logging.getLogger(Loggers.DIAGNOSTICS)));
  kernelPanicEventGenerator=new KernelPanicEventGenerator(kernelEventHandlers);
  txHook=createTxHook();
  xaDataSourceManager=life.add(new XaDataSourceManager(logging.getLogger(Loggers.DATASOURCE)));
  guard=config.get(Configuration.execution_guard_enabled) ? new Guard(msgLog) : null;
  xaDataSourceManager=life.add(new XaDataSourceManager(msgLog));
  if (readOnly) {
    txManager=new ReadOnlyTxManager(xaDataSourceManager);
  }
 else {
    String serviceName=config.get(GraphDatabaseSettings.tx_manager_impl);
    if (serviceName == null) {
      txManager=new TxManager(this.storeDir,xaDataSourceManager,kernelPanicEventGenerator,txHook,logging.getLogger(Loggers.TXMANAGER),fileSystem);
    }
 else {
      TransactionManagerProvider provider;
      provider=Service.load(TransactionManagerProvider.class,serviceName);
      if (provider == null) {
        throw new IllegalStateException("Unknown transaction manager implementation: " + serviceName);
      }
      txManager=provider.loadTransactionManager(this.storeDir,kernelPanicEventGenerator,txHook,logging.getLogger(Loggers.TXMANAGER),fileSystem);
    }
  }
  life.add(txManager);
  transactionEventHandlers=new TransactionEventHandlers(txManager);
  txIdGenerator=createTxIdGenerator();
  ragManager=new RagManager(txManager);
  lockManager=createLockManager();
  idGeneratorFactory=createIdGeneratorFactory();
  relationshipTypeCreator=createRelationshipTypeCreator();
  lastCommittedTxIdSetter=createLastCommittedTxIdSetter();
  persistenceSource=life.add(new NioNeoDbPersistenceSource(xaDataSourceManager));
  syncHook=new DefaultTxEventSyncHookFactory();
  persistenceManager=new PersistenceManager(txManager,persistenceSource,syncHook,lockReleaser);
  propertyIndexManager=life.add(new PropertyIndexManager(txManager,persistenceManager,persistenceSource));
  lockReleaser=new LockReleaser(lockManager,txManager,nodeManager,propertyIndexManager);
  persistenceManager.setLockReleaser(lockReleaser);
  relationshipTypeHolder=new RelationshipTypeHolder(txManager,persistenceManager,persistenceSource,relationshipTypeCreator);
  caches.configure(cacheProvider,config);
  Cache<NodeImpl> nodeCache=diagnosticsManager.tryAppendProvider(caches.node());
  Cache<RelationshipImpl> relCache=diagnosticsManager.tryAppendProvider(caches.relationship());
  nodeManager=guard != null ? createGuardedNodeManager(readOnly,cacheProvider,nodeCache,relCache) : createNodeManager(readOnly,cacheProvider,nodeCache,relCache);
  life.add(nodeManager);
  lockReleaser.setNodeManager(nodeManager);
  indexStore=new IndexStore(this.storeDir,fileSystem);
  diagnosticsManager.prependProvider(config);
  params=config.getParams();
  logBufferFactory=new DefaultLogBufferFactory();
  extensions=life.add(createKernelData());
  if (config.get(Configuration.load_kernel_extensions)) {
    life.add(new DefaultKernelExtensionLoader(extensions));
  }
  if (indexProviders == null) {
    indexProviders=new LegacyIndexIterable();
  }
  indexManager=new IndexManagerImpl(config,indexStore,xaDataSourceManager,txManager,this);
  nodeAutoIndexer=life.add(new NodeAutoIndexerImpl(config,indexManager,nodeManager));
  relAutoIndexer=life.add(new RelationshipAutoIndexerImpl(config,indexManager,nodeManager));
  indexManager.setNodeAutoIndexer(nodeAutoIndexer);
  indexManager.setRelAutoIndexer(relAutoIndexer);
  recoveryVerifier=createRecoveryVerifier();
  storeFactory=createStoreFactory();
  String keepLogicalLogsConfig=config.get(GraphDatabaseSettings.keep_logical_logs);
  xaFactory=new XaFactory(config,txIdGenerator,txManager,logBufferFactory,fileSystem,logging.getLogger(Loggers.XAFACTORY),recoveryVerifier,LogPruneStrategies.fromConfigValue(fileSystem,keepLogicalLogsConfig));
  List<Pair<TransactionInterceptorProvider,Object>> providers=new ArrayList<Pair<TransactionInterceptorProvider,Object>>(2);
  for (  TransactionInterceptorProvider provider : Service.load(TransactionInterceptorProvider.class)) {
    Object prov=params.get(TransactionInterceptorProvider.class.getSimpleName() + "." + provider.name());
    if (prov != null) {
      providers.add(Pair.of(provider,prov));
    }
  }
  try {
    neoDataSource=new NeoStoreXaDataSource(config,storeFactory,fileSystem,lockManager,lockReleaser,logging.getLogger(Loggers.DATASOURCE),xaFactory,providers,dependencyResolver);
    xaDataSourceManager.registerDataSource(neoDataSource);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Could not create Neo XA datasource",e);
  }
  life.add(new StuffToDoAfterRecovery());
  life.add(new MonitorGc(config,msgLog));
  life.add(new DatabaseAvailability());
  life.add(kernelEventHandlers);
  life.add(new ConfigurationChangedRestarter());
}
