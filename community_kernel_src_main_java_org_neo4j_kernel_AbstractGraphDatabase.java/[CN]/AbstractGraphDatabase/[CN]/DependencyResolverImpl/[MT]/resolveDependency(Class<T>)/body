{
  if (type.equals(Map.class)) {
    return (T)getConfig().getParams();
  }
 else   if (type.equals(Config.class)) {
    return (T)getConfig();
  }
 else   if (GraphDatabaseService.class.isAssignableFrom(type)) {
    return (T)AbstractGraphDatabase.this;
  }
 else   if (TransactionManager.class.isAssignableFrom(type)) {
    return (T)txManager;
  }
 else   if (LockManager.class.isAssignableFrom(type)) {
    return (T)lockManager;
  }
 else   if (LockReleaser.class.isAssignableFrom(type)) {
    return (T)lockReleaser;
  }
 else   if (StoreFactory.class.isAssignableFrom(type)) {
    return (T)storeFactory;
  }
 else   if (StringLogger.class.isAssignableFrom(type)) {
    return (T)msgLog;
  }
 else   if (IndexStore.class.isAssignableFrom(type)) {
    return (T)indexStore;
  }
 else   if (XaFactory.class.isAssignableFrom(type)) {
    return (T)xaFactory;
  }
 else   if (XaDataSourceManager.class.isAssignableFrom(type)) {
    return (T)xaDataSourceManager;
  }
 else   if (FileSystemAbstraction.class.isAssignableFrom(type)) {
    return (T)fileSystem;
  }
 else   if (Guard.class.isAssignableFrom(type)) {
    return (T)guard;
  }
 else {
    throw new IllegalArgumentException("Could not resolve dependency of type:" + type.getName());
  }
}
