{
  this.requestContextFactory=requestContextFactory;
  this.master=master;
  this.lastUpdateTime=lastUpdateTime;
  this.instanceId=instanceId;
  this.availabilityGuard=availabilityGuard;
  this.invalidEpochHandler=invalidEpochHandler;
  this.monitor=monitor;
  this.logger=logging.getLog(getClass());
  this.cappedLogger=new CappedOperation<Pair<String,? extends Exception>>(CappedOperation.count(10)){
    @Override protected void triggered(    Pair<String,? extends Exception> event){
      logger.warn(event.first(),event.other());
    }
  }
;
}
