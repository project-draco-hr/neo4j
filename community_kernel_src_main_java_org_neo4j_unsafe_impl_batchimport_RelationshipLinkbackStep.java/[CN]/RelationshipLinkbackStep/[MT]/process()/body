{
  long highId=relStore.getHighestPossibleIdInUse();
  RelationshipRecord heavilyReusedRecord=new RelationshipRecord(-1);
  for (long i=highId; i >= 0; i--) {
    RelationshipRecord record=relStore.getRecord(i,heavilyReusedRecord,RecordLoad.CHECK);
    if (record == null) {
      continue;
    }
    boolean isLoop=record.getFirstNode() == record.getSecondNode();
    if (isLoop) {
      long prevRel=nodeRelationshipLink.getAndPutRelationship(record.getFirstNode(),record.getType(),Direction.BOTH,record.getId(),false);
      if (prevRel == -1) {
        record.setFirstInFirstChain(true);
        record.setFirstInSecondChain(true);
        prevRel=nodeRelationshipLink.getCount(record.getFirstNode(),record.getType(),Direction.BOTH);
      }
      record.setFirstPrevRel(prevRel);
      record.setSecondPrevRel(prevRel);
    }
 else {
      long firstPrevRel=nodeRelationshipLink.getAndPutRelationship(record.getFirstNode(),record.getType(),Direction.OUTGOING,record.getId(),false);
      if (firstPrevRel == -1) {
        record.setFirstInFirstChain(true);
        firstPrevRel=nodeRelationshipLink.getCount(record.getFirstNode(),record.getType(),Direction.OUTGOING);
      }
      record.setFirstPrevRel(firstPrevRel);
      long secondPrevRel=nodeRelationshipLink.getAndPutRelationship(record.getSecondNode(),record.getType(),Direction.INCOMING,record.getId(),false);
      if (secondPrevRel == -1) {
        record.setFirstInSecondChain(true);
        secondPrevRel=nodeRelationshipLink.getCount(record.getSecondNode(),record.getType(),Direction.INCOMING);
      }
      record.setSecondPrevRel(secondPrevRel);
    }
    itemProcessed();
    relStore.updateRecord(record);
  }
  relStore.flushAll();
}
