{
  graph.makeEdge("start","a","cost",(double)1);
  graph.makeEdge("a","x","cost",(double)9);
  graph.makeEdge("a","b","cost",(float)1);
  graph.makeEdge("b","x","cost",(double)7);
  graph.makeEdge("b","c","cost",(long)1);
  graph.makeEdge("c","x","cost",(int)5);
  graph.makeEdge("c","d","cost",(byte)1);
  graph.makeEdge("d","x","cost",(short)3);
  graph.makeEdge("d","e","cost",(double)1);
  graph.makeEdge("e","x","cost",(double)1);
  HashMap<Node,Double> seen1, seen2, dists1, dists2;
  seen1=new HashMap<Node,Double>();
  seen2=new HashMap<Node,Double>();
  dists1=new HashMap<Node,Double>();
  dists2=new HashMap<Node,Double>();
  DijstraIterator iter1=new TestIterator(graph.getNode("start"),predecessors1,seen1,seen2,dists1,dists2,false);
  assertTrue(iter1.next().equals(graph.getNode("start")));
  assertTrue(iter1.next().equals(graph.getNode("a")));
  assertTrue(seen1.get(graph.getNode("x")) == 10.0);
  assertTrue(iter1.next().equals(graph.getNode("b")));
  assertTrue(seen1.get(graph.getNode("x")) == 9.0);
  assertTrue(iter1.next().equals(graph.getNode("c")));
  assertTrue(seen1.get(graph.getNode("x")) == 8.0);
  assertTrue(iter1.next().equals(graph.getNode("d")));
  assertTrue(seen1.get(graph.getNode("x")) == 7.0);
  assertTrue(iter1.next().equals(graph.getNode("e")));
  assertTrue(seen1.get(graph.getNode("x")) == 6.0);
  assertTrue(iter1.next().equals(graph.getNode("x")));
  assertTrue(seen1.get(graph.getNode("x")) == 6.0);
  assertFalse(iter1.hasNext());
  int count=0;
  seen1=new HashMap<Node,Double>();
  seen2=new HashMap<Node,Double>();
  dists1=new HashMap<Node,Double>();
  dists2=new HashMap<Node,Double>();
  iter1=new TestIterator(graph.getNode("start"),predecessors1,seen1,seen2,dists1,dists2,false);
  this.numberOfNodesTraversed=0;
  this.limitMaxNodesToTraverse(3);
  count=0;
  while (iter1.hasNext()) {
    iter1.next();
    ++count;
  }
  assertTrue(count == 3);
}
