{
  Map<Object,DiffSets<Long>> referenceCount=new HashMap<Object,DiffSets<Long>>();
  for (  NodePropertyUpdate update : updates) {
switch (update.getUpdateMode()) {
case ADDED:
      propertyValueDiffSet(referenceCount,update.getValueAfter()).add(update.getNodeId());
    break;
case CHANGED:
  propertyValueDiffSet(referenceCount,update.getValueBefore()).remove(update.getNodeId());
propertyValueDiffSet(referenceCount,update.getValueAfter()).add(update.getNodeId());
break;
case REMOVED:
propertyValueDiffSet(referenceCount,update.getValueBefore()).remove(update.getNodeId());
break;
default :
throw new UnsupportedOperationException();
}
}
for (Map.Entry<Object,DiffSets<Long>> entry : referenceCount.entrySet()) {
Object value=entry.getKey();
int delta=entry.getValue().delta();
if (delta > 1) {
throw new DuplicateIndexEntryConflictException(value,asSet(entry.getValue().getAdded()));
}
if (delta == 1) {
Long addedNode=single(entry.getValue().getAdded());
Long existingNode=lookup.currentlyIndexedNode(value);
if (existingNode != null && !addedNode.equals(existingNode)) {
throw new PreexistingIndexEntryConflictException(value,existingNode,addedNode);
}
}
}
}
