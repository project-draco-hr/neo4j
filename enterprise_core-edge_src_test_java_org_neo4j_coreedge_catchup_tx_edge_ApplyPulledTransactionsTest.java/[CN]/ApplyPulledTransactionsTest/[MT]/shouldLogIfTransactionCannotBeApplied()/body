{
  StoreId storeId=new StoreId(1,1,1,1);
  TransactionApplier transactionApplier=mock(TransactionApplier.class);
  TransactionIdStore transactionIdStore=mock(TransactionIdStore.class);
  doThrow(TransactionFailureException.class).when(transactionApplier).appendToLogAndApplyToStore(any(CommittedTransactionRepresentation.class));
  LogProvider logProvider=mock(LogProvider.class);
  Log log=mock(Log.class);
  when(logProvider.getLog(ApplyPulledTransactions.class)).thenReturn(log);
  CommittedTransactionRepresentation tx=mock(CommittedTransactionRepresentation.class);
  LogEntryCommit commitEntry=mock(LogEntryCommit.class);
  when(commitEntry.getTxId()).thenReturn(3L);
  when(tx.getCommitEntry()).thenReturn(commitEntry);
  when(transactionIdStore.getLastCommittedTransactionId()).thenReturn(2L);
  ApplyPulledTransactions handler=new ApplyPulledTransactions(logProvider,singleton(transactionApplier),singleton(transactionIdStore),new Monitors());
  handler.onTxReceived(new TxPullResponse(storeId,tx));
  verify(log).error(anyString(),any(Throwable.class));
}
