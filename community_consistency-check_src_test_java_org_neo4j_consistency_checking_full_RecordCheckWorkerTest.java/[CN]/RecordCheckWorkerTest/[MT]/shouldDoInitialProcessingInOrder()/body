{
  final Race race=new Race();
  final AtomicInteger coordination=new AtomicInteger(-1);
  final AtomicInteger expected=new AtomicInteger();
  final int threads=30;
  final RecordCheckWorker<Integer>[] workers=new RecordCheckWorker[threads];
  for (int i=0; i < threads; i++) {
    final int id=i;
    ArrayBlockingQueue<Integer> queue=new ArrayBlockingQueue<>(10);
    queue.offer(i);
    race.addContestant(workers[i]=new RecordCheckWorker<Integer>(i,coordination,queue){
      private boolean initialized;
      @Override protected void process(      Integer record){
        if (!initialized) {
          assertEquals(id,expected.getAndAdd(1));
          initialized=true;
        }
      }
    }
);
  }
  race.addContestant(new Runnable(){
    @Override public void run(){
      long end=currentTimeMillis() + SECONDS.toMillis(10);
      while (currentTimeMillis() < end && expected.get() < threads)       ;
      assertEquals(threads,expected.get());
      for (      RecordCheckWorker<Integer> worker : workers) {
        worker.done();
      }
    }
  }
);
  race.go();
}
