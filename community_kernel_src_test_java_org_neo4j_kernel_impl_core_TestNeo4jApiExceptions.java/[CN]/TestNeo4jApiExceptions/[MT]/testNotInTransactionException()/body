{
  Node node1=graph.createNode();
  node1.setProperty("test",1);
  Node node2=graph.createNode();
  Node node3=graph.createNode();
  Relationship rel=node1.createRelationshipTo(node2,MyRelTypes.TEST);
  rel.setProperty("test",11);
  commit();
  try {
    graph.createNode();
    fail("Create node with no transaction should throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  try {
    node1.createRelationshipTo(node2,MyRelTypes.TEST);
    fail("Create relationship with no transaction should " + "throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  try {
    node1.setProperty("test",2);
    fail("Set property with no transaction should throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  try {
    rel.setProperty("test",22);
    fail("Set property with no transaction should throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  try {
    node3.delete();
    fail("Delete node with no transaction should " + "throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  try {
    rel.delete();
    fail("Delete relationship with no transaction should " + "throw exception");
  }
 catch (  NotInTransactionException e) {
  }
  newTransaction();
  assertEquals(node1.getProperty("test"),1);
  assertEquals(rel.getProperty("test"),11);
  assertEquals(rel,node1.getSingleRelationship(MyRelTypes.TEST,Direction.OUTGOING));
  node1.delete();
  node2.delete();
  rel.delete();
  node3.delete();
  rollback();
}
