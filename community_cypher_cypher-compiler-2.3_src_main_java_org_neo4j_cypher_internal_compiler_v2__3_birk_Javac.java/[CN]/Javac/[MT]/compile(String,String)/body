{
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  if (compiler == null) {
    throw new CantCompileQueryException("No compiler provided by the platform");
  }
  JavaFileManager manager=new InMemFileManager();
  DiagnosticCollector<JavaFileObject> diagnosticsCollector=new DiagnosticCollector<>();
  Iterable<? extends JavaFileObject> sources=Collections.singletonList(new InMemSource(className,classBody));
  CompilationTask task=compiler.getTask(null,manager,diagnosticsCollector,null,null,sources);
  if (!task.call()) {
    StringBuilder sb=new StringBuilder();
    int number=1;
    for (    Diagnostic<?> diagnostic : diagnosticsCollector.getDiagnostics()) {
      String diagnosticMessage=diagnostic.getMessage(Locale.getDefault());
      sb.append(format("%s  : %d Type : %s",diagnostic.getKind(),number,diagnosticMessage));
      sb.append(format(" at column : %d",diagnostic.getColumnNumber()));
      sb.append(format(" Line number : %d%s",diagnostic.getLineNumber(),System.lineSeparator()));
      number++;
    }
    throw new CompilerError(sb.toString());
  }
  Class<InternalExecutionResult> clazz=(Class<InternalExecutionResult>)manager.getClassLoader(null).loadClass(className);
  return clazz;
}
