{
  TransitionalPeriodTransactionMessContainer kernel=mockKernel();
  TransitionalTxManagementKernelTransaction transactionContext=kernel.newTransaction(explicit,FULL,-1);
  doThrow(new NullPointerException()).when(transactionContext).commit();
  LogProvider logProvider=mock(LogProvider.class);
  Log log=mock(Log.class);
  when(logProvider.getLog(TransactionHandle.class)).thenReturn(log);
  TransactionRegistry registry=mock(TransactionRegistry.class);
  QueryExecutionEngine engine=mock(QueryExecutionEngine.class);
  Result executionResult=mock(Result.class);
  QuerySession querySession=mock(QuerySession.class);
  when(kernel.create(any(GraphDatabaseQueryService.class),any(Type.class),any(AccessMode.class),anyLong(),any(HttpServletRequest.class))).thenReturn(querySession);
  when(engine.executeQuery("query",map(),querySession)).thenReturn(executionResult);
  when(registry.begin(any(TransactionHandle.class))).thenReturn(1337l);
  TransactionHandle handle=new TransactionHandle(kernel,engine,registry,uriScheme,false,FULL,-1,logProvider);
  ExecutionResultSerializer output=mock(ExecutionResultSerializer.class);
  Statement statement=new Statement("query",map(),false,(ResultDataContent[])null);
  handle.commit(statements(statement),output,mock(HttpServletRequest.class));
  verify(log).error(eq("Failed to commit transaction."),any(NullPointerException.class));
  verify(registry).forget(1337l);
  InOrder outputOrder=inOrder(output);
  outputOrder.verify(output).statementResult(executionResult,false,(ResultDataContent[])null);
  outputOrder.verify(output).notifications(anyCollectionOf(Notification.class));
  outputOrder.verify(output).errors(argThat(hasErrors(Status.Transaction.TransactionCommitFailed)));
  outputOrder.verify(output).finish();
  verifyNoMoreInteractions(output);
}
