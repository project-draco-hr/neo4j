{
  TransitionalPeriodTransactionMessContainer kernel=mockKernel();
  ExecutionResultSerializer output=mock(ExecutionResultSerializer.class);
  TransactionRegistry registry=mock(TransactionRegistry.class);
  QueryExecutionEngine engine=mock(QueryExecutionEngine.class);
  Result executionResult=mock(Result.class);
  QuerySession querySession=mock(QuerySession.class);
  when(kernel.create(any(GraphDatabaseQueryService.class),any(Type.class),any(AccessMode.class),any(HttpServletRequest.class))).thenReturn(querySession);
  when(engine.executeQuery("query",map(),querySession)).thenReturn(executionResult);
  when(registry.begin(any(TransactionHandle.class))).thenReturn(1337L);
  GraphDatabaseQueryService queryService=mock(GraphDatabaseQueryService.class);
  TransactionHandle handle=new TransactionHandle(kernel,engine,queryService,registry,uriScheme,true,FULL,NullLogProvider.getInstance());
  verifyZeroInteractions(kernel);
  handle.execute(statements(new Statement("query",map(),false,(ResultDataContent[])null)),output,mock(HttpServletRequest.class));
  verify(kernel).newTransaction(any(Type.class),any(AccessMode.class));
  InOrder outputOrder=inOrder(output);
  outputOrder.verify(output).transactionCommitUri(uriScheme.txCommitUri(1337));
  outputOrder.verify(output).statementResult(executionResult,false,(ResultDataContent[])null);
  outputOrder.verify(output).notifications(anyCollectionOf(Notification.class));
  outputOrder.verify(output).transactionStatus(anyLong());
  outputOrder.verify(output).errors(argThat(hasNoErrors()));
  outputOrder.verify(output).finish();
  verifyNoMoreInteractions(output);
}
