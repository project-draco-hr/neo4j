{
  String queryText="USING PERIODIC COMMIT CREATE()";
  TransitionalPeriodTransactionMessContainer kernel=mockKernel();
  QueryExecutionEngine executionEngine=mock(QueryExecutionEngine.class);
  Result executionResult=mock(Result.class);
  QuerySession querySession=mock(QuerySession.class);
  when(kernel.create(any(GraphDatabaseQueryService.class),any(Type.class),any(AccessMode.class),anyLong(),any(HttpServletRequest.class))).thenReturn(querySession);
  when(executionEngine.isPeriodicCommit(queryText)).thenReturn(true);
  when(executionEngine.executeQuery(eq(queryText),eq(map()),eq(querySession))).thenReturn(executionResult);
  TransactionRegistry registry=mock(TransactionRegistry.class);
  when(registry.begin(any(TransactionHandle.class))).thenReturn(1337l);
  TransactionHandle handle=getTransactionHandle(kernel,executionEngine,registry);
  ExecutionResultSerializer output=mock(ExecutionResultSerializer.class);
  Statement statement=new Statement(queryText,map(),false,(ResultDataContent[])null);
  handle.commit(statements(statement),output,mock(HttpServletRequest.class));
  verify(executionEngine).executeQuery(queryText,map(),querySession);
  InOrder outputOrder=inOrder(output);
  outputOrder.verify(output).statementResult(executionResult,false,(ResultDataContent[])null);
  outputOrder.verify(output).notifications(anyCollectionOf(Notification.class));
  outputOrder.verify(output).errors(argThat(hasNoErrors()));
  outputOrder.verify(output).finish();
  verifyNoMoreInteractions(output);
}
