{
  TransitionalPeriodTransactionMessContainer kernel=mockKernel();
  TransitionalTxManagementKernelTransaction transactionContext=kernel.newTransaction();
  TransactionRegistry registry=mock(TransactionRegistry.class);
  when(registry.begin()).thenReturn(1337l);
  ServerExecutionEngine executionEngine=mock(ServerExecutionEngine.class);
  TransactionHandle handle=new TransactionHandle(kernel,executionEngine,registry,uriScheme,StringLogger.DEV_NULL);
  ExecutionResultSerializer output=mock(ExecutionResultSerializer.class);
  handle.execute(statements(new Statement("query",map(),false,(ResultDataContent[])null)),output);
  reset(transactionContext,registry,executionEngine,output);
  ExecutionResult executionResult=mock(ExecutionResult.class);
  when(executionEngine.execute("query",map())).thenReturn(executionResult);
  handle.execute(statements(new Statement("query",map(),false,(ResultDataContent[])null)),output);
  InOrder order=inOrder(transactionContext,registry,executionEngine);
  order.verify(transactionContext).resumeSinceTransactionsAreStillThreadBound();
  order.verify(executionEngine).execute("query",map());
  order.verify(transactionContext).suspendSinceTransactionsAreStillThreadBound();
  order.verify(registry).release(1337l,handle);
  InOrder outputOrder=inOrder(output);
  outputOrder.verify(output).transactionCommitUri(uriScheme.txCommitUri(1337));
  outputOrder.verify(output).statementResult(executionResult,false,(ResultDataContent[])null);
  outputOrder.verify(output).transactionStatus(anyLong());
  outputOrder.verify(output).errors(argThat(hasNoErrors()));
  outputOrder.verify(output).finish();
  verifyNoMoreInteractions(output);
}
