{
  TransitionalPeriodTransactionMessContainer kernel=mockKernel();
  TransitionalTxManagementKernelTransaction transactionContext=kernel.newTransaction(explicit,FULL,-1);
  TransactionRegistry registry=mock(TransactionRegistry.class);
  QueryExecutionEngine engine=mock(QueryExecutionEngine.class);
  QuerySession querySession=prepareKernelWithQuerySession(kernel);
  Result result=mock(Result.class);
  when(engine.executeQuery("query",map(),querySession)).thenReturn(result);
  when(registry.begin(any(TransactionHandle.class))).thenReturn(1337L);
  GraphDatabaseQueryService queryService=mock(GraphDatabaseQueryService.class);
  TransactionHandle handle=new TransactionHandle(kernel,engine,queryService,registry,uriScheme,false,FULL,anyLong(),NullLogProvider.getInstance());
  ExecutionResultSerializer output=mock(ExecutionResultSerializer.class);
  Statement statement=new Statement("query",map(),false,(ResultDataContent[])null);
  handle.commit(statements(statement),output,mock(HttpServletRequest.class));
  InOrder transactionOrder=inOrder(transactionContext,registry);
  transactionOrder.verify(transactionContext).commit();
  transactionOrder.verify(registry).forget(1337L);
  InOrder outputOrder=inOrder(output);
  outputOrder.verify(output).statementResult(result,false,(ResultDataContent[])null);
  outputOrder.verify(output).notifications(anyCollectionOf(Notification.class));
  outputOrder.verify(output).errors(argThat(hasNoErrors()));
  outputOrder.verify(output).finish();
  verifyNoMoreInteractions(output);
}
