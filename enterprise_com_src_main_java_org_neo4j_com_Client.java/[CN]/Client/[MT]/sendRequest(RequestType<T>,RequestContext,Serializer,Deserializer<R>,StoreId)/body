{
  boolean success=true;
  Triplet<Channel,ChannelBuffer,ByteBuffer> channelContext=null;
  try {
    channelContext=getChannel(type);
    Channel channel=channelContext.first();
    ChannelBuffer output=channelContext.second();
    ByteBuffer input=channelContext.third();
    protocol.serializeRequest(channel,output,type,context,serializer);
    @SuppressWarnings("unchecked") Response<R> response=protocol.deserializeResponse((BlockingReadHandler<ChannelBuffer>)channel.getPipeline().get("blockingHandler"),input,getReadTimeout(type,readTimeout),deserializer,resourcePoolReleaser);
    if (shouldCheckStoreId(type)) {
      if (specificStoreId != null) {
        assertCorrectStoreId(response.getStoreId(),specificStoreId);
      }
 else {
        assertCorrectStoreId(response.getStoreId(),storeId);
      }
    }
    return response;
  }
 catch (  IllegalProtocolVersionException e) {
    success=false;
    for (    MismatchingVersionHandler handler : mismatchingVersionHandlers) {
      handler.versionMismatched(e.getExpected(),e.getReceived());
    }
    throw e;
  }
catch (  Throwable e) {
    success=false;
    if (channelContext != null) {
      closeChannel(channelContext);
    }
    throw Exceptions.launderedException(ComException.class,e);
  }
 finally {
    if (!success) {
      releaseChannel();
    }
  }
}
