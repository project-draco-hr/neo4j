{
  bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(newCachedThreadPool(daemon(getClass().getSimpleName() + "-boss@" + address)),newCachedThreadPool(daemon(getClass().getSimpleName() + "-worker@" + address))));
  bootstrap.setPipelineFactory(this);
  channelPool=new ResourcePool<ChannelContext>(maxUnusedChannels,new ResourcePool.CheckStrategy.TimeoutCheckStrategy(DEFAULT_CHECK_INTERVAL,SYSTEM_CLOCK),new LoggingResourcePoolMonitor(msgLog)){
    @Override protected ChannelContext create(){
      ChannelFuture channelFuture=bootstrap.connect(address);
      channelFuture.awaitUninterruptibly(5,TimeUnit.SECONDS);
      if (channelFuture.isSuccess()) {
        msgLog.info(threadInfo() + "Opened a new channel to " + address,true);
        return new ChannelContext(channelFuture.getChannel(),ChannelBuffers.dynamicBuffer(),ByteBuffer.allocate(1024 * 1024));
      }
      String msg=Client.this.getClass().getSimpleName() + " could not connect to " + address;
      msgLog.info(msg,true);
      throw traceComException(new ComException(msg,channelFuture.getCause()),"Client.start");
    }
    @Override protected boolean isAlive(    ChannelContext context){
      return context.channel().isConnected();
    }
    @Override protected void dispose(    ChannelContext context){
      Channel channel=context.channel();
      if (channel.isConnected()) {
        msgLog.info(threadInfo() + "Closing: " + context+ ". "+ "Channel pool size is now "+ currentSize(),true);
        channel.close();
      }
    }
    private String threadInfo(){
      return "Thread[" + Thread.currentThread().getId() + ", "+ Thread.currentThread().getName()+ "] ";
    }
  }
;
  resourcePoolReleaser=new ResourceReleaser(){
    @Override public void release(){
      channelPool.release();
    }
  }
;
}
