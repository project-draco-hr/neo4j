{
  Triplet<Channel,ChannelBuffer,ByteBuffer> channelContext=null;
  try {
    channelContext=getChannel();
    Channel channel=channelContext.first();
    channelContext.second().clear();
    ChunkingChannelBuffer chunkingBuffer=new ChunkingChannelBuffer(channelContext.second(),channel,frameLength);
    chunkingBuffer.writeByte(type.id());
    writeContext(type,context,chunkingBuffer);
    serializer.write(chunkingBuffer,channelContext.third());
    chunkingBuffer.done();
    @SuppressWarnings("unchecked") BlockingReadHandler<ChannelBuffer> reader=(BlockingReadHandler<ChannelBuffer>)channel.getPipeline().get("blockingHandler");
    final Triplet<Channel,ChannelBuffer,ByteBuffer> finalChannelContext=channelContext;
    DechunkingChannelBuffer dechunkingBuffer=new DechunkingChannelBuffer(reader,readTimeout){
      @Override protected ChannelBuffer readNext(){
        ChannelBuffer result=null;
        try {
          result=super.readNext();
        }
 catch (        ComException e) {
          disposeChannel(finalChannelContext);
          throw e;
        }
        if (result == null) {
          disposeChannel(finalChannelContext);
          throw new ComException("Channel has been closed");
        }
        return result;
      }
    }
;
    R response=deserializer.read(dechunkingBuffer,channelContext.third());
    StoreId storeId=readStoreId(dechunkingBuffer,channelContext.third());
    if (shouldCheckStoreId(type)) {
      assertCorrectStoreId(storeId);
    }
    TransactionStream txStreams=readTransactionStreams(dechunkingBuffer);
    return new Response<R>(response,storeId,txStreams);
  }
 catch (  Exception e) {
    if (channelContext != null) {
      disposeChannel(channelContext);
    }
    throw new ComException(e);
  }
 finally {
    releaseChannel(type,channelContext);
  }
}
