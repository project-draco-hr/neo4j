{
  try (LockGroup lockGroup=new LockGroup()){
    committed=true;
    CommandSorter sorter=new CommandSorter();
    if (relationshipTypeTokenCommands != null) {
      java.util.Collections.sort(relationshipTypeTokenCommands,sorter);
      for (      Command.RelationshipTypeTokenCommand command : relationshipTypeTokenCommands) {
        command.execute();
        if (isRecovered) {
          addRelationshipType((int)command.getKey());
        }
      }
    }
    if (labelTokenCommands != null) {
      java.util.Collections.sort(labelTokenCommands,sorter);
      for (      Command.LabelTokenCommand command : labelTokenCommands) {
        command.execute();
        if (isRecovered) {
          addLabel((int)command.getKey());
        }
      }
    }
    if (propertyKeyTokenCommands != null) {
      java.util.Collections.sort(propertyKeyTokenCommands,sorter);
      for (      Command.PropertyKeyTokenCommand command : propertyKeyTokenCommands) {
        command.execute();
        if (isRecovered) {
          addPropertyKey((int)command.getKey());
        }
      }
    }
    java.util.Collections.sort(relCommands,sorter);
    java.util.Collections.sort(propCommands,sorter);
    executeCreated(lockGroup,isRecovered,propCommands,relCommands,nodeCommands.values());
    executeModified(lockGroup,isRecovered,propCommands,relCommands,nodeCommands.values());
    executeDeleted(lockGroup,propCommands,relCommands,nodeCommands.values());
    Collection<NodeLabelUpdate> labelUpdates=gatherLabelUpdates();
    if (!labelUpdates.isEmpty()) {
      updateLabelScanStore(labelUpdates);
      cacheAccess.applyLabelUpdates(labelUpdates);
    }
    if (!nodeCommands.isEmpty() || !propCommands.isEmpty()) {
      indexes.updateIndexes(new LazyIndexUpdates(getNodeStore(),getPropertyStore(),new ArrayList<>(propCommands),new HashMap<>(nodeCommands)));
    }
    for (    SchemaRuleCommand command : schemaRuleCommands) {
      command.setTxId(getCommitTxId());
      command.execute();
switch (command.getMode()) {
case DELETE:
        cacheAccess.removeSchemaRuleFromCache(command.getKey());
      break;
default :
    cacheAccess.addSchemaRule(command.getSchemaRule());
}
}
if (neoStoreCommand != null) {
neoStoreCommand.execute();
if (isRecovered) {
  removeGraphPropertiesFromCache();
}
}
if (!isRecovered) {
updateFirstRelationships();
state.commitCows();
}
neoStore.setLastCommittedTx(getCommitTxId());
if (isRecovered) {
neoStore.updateIdGenerators();
}
}
  finally {
clear();
}
}
