{
  try {
    committed=true;
    CommandSorter sorter=new CommandSorter();
    if (relTypeCommands != null) {
      java.util.Collections.sort(relTypeCommands,sorter);
      for (      Command.RelationshipTypeCommand command : relTypeCommands) {
        command.execute();
        if (isRecovered) {
          addRelationshipType((int)command.getKey());
        }
      }
    }
    if (propIndexCommands != null) {
      java.util.Collections.sort(propIndexCommands,sorter);
      for (      Command.PropertyIndexCommand command : propIndexCommands) {
        command.execute();
        if (isRecovered) {
          addPropertyIndexCommand((int)command.getKey());
        }
      }
    }
    for (    SchemaRuleCommand command : schemaRuleCommands) {
      command.execute();
switch (command.getMode()) {
case DELETE:
        cacheAccess.removeSchemaRuleFromCache(command.getKey());
      break;
default :
    cacheAccess.addSchemaRule(command.getSchemaRule());
}
}
java.util.Collections.sort(relCommands,sorter);
java.util.Collections.sort(propCommands,sorter);
executeCreated(isRecovered,propCommands,relCommands,nodeCommands.values());
executeModified(isRecovered,propCommands,relCommands,nodeCommands.values());
executeDeleted(propCommands,relCommands,nodeCommands.values());
Iterable<NodePropertyUpdate> updates=convertIntoLogicalPropertyUpdates();
indexes.update(updates);
if (neoStoreCommand != null) {
neoStoreCommand.execute();
if (isRecovered) removeGraphPropertiesFromCache();
}
if (!isRecovered) {
updateFirstRelationships();
state.commitCows();
}
neoStore.setLastCommittedTx(getCommitTxId());
if (isRecovered) neoStore.updateIdGenerators();
}
  finally {
clear();
}
}
