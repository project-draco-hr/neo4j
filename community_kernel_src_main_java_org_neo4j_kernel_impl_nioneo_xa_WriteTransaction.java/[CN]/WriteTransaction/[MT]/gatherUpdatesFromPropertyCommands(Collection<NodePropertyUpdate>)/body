{
  final PropertyStore propertyStore=getPropertyStore();
  final NodeStore nodeStore=getNodeStore();
  for (  PropertyCommand propertyCommand : propCommands) {
    PropertyRecord after=propertyCommand.getAfter();
    if (!after.isNodeSet()) {
      continue;
    }
    long[] nodeLabelsBefore, nodeLabelsAfter;
    NodeCommand nodeChanges=nodeCommands.get(after.getNodeId());
    if (nodeChanges != null) {
      nodeLabelsBefore=parseLabelsField(nodeChanges.getBefore()).get(nodeStore);
      nodeLabelsAfter=parseLabelsField(nodeChanges.getAfter()).get(nodeStore);
    }
 else {
      NodeRecord nodeRecord=nodeStore.forceGetRecord(after.getNodeId());
      if (!nodeRecord.inUse() && isRecovered()) {
        continue;
      }
      nodeLabelsBefore=nodeLabelsAfter=parseLabelsField(nodeRecord).get(nodeStore);
    }
    for (    NodePropertyUpdate update : propertyStore.toLogicalUpdates(propertyCommand.getBefore(),nodeLabelsBefore,after,nodeLabelsAfter)) {
      updates.add(update);
    }
  }
}
