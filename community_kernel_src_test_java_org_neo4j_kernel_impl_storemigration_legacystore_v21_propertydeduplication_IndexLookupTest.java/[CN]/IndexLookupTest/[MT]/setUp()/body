{
  api=dbRule.getGraphDatabaseAPI();
  String notUsedIndexPropKey="notUsed";
  String usedIndexPropKey="used";
  Label usedLabel=DynamicLabel.label("UsedLabel");
  Label notUsedLabel=DynamicLabel.label("NotUsedLabel");
  try (Transaction transaction=api.beginTx()){
    api.schema().indexFor(usedLabel).on(usedIndexPropKey).create();
    transaction.success();
  }
   try (Transaction transaction=api.beginTx()){
    api.schema().awaitIndexesOnline(10,TimeUnit.SECONDS);
    indexedNodePropertyValue="value1";
    notIndexedNodePropertyValue="value2";
    Node nodeA=api.createNode(usedLabel);
    nodeA.setProperty(usedIndexPropKey,indexedNodePropertyValue);
    nodeA.setProperty(notUsedIndexPropKey,notIndexedNodePropertyValue);
    indexedNode=nodeA.getId();
    Node nodeB=api.createNode(notUsedLabel);
    nodeB.setProperty(usedIndexPropKey,notIndexedNodePropertyValue);
    nodeB.setProperty(notUsedIndexPropKey,indexedNodePropertyValue);
    notIndexedNode=nodeB.getId();
    transaction.success();
  }
   DependencyResolver resolver=api.getDependencyResolver();
  NeoStoresSupplier neoStoresSupplier=resolver.resolveDependency(NeoStoresSupplier.class);
  NeoStores neoStores=neoStoresSupplier.get();
  SchemaStore schemaStore=neoStores.getSchemaStore();
  SchemaIndexProvider schemaIndexProvider=resolver.resolveDependency(SchemaIndexProvider.class);
  indexLookup=new IndexLookup(schemaStore,schemaIndexProvider);
  LabelTokenStore labelTokenStore=neoStores.getLabelTokenStore();
  notUsedLabelId=findTokenFor(labelTokenStore,notUsedLabel.name()).id();
  usedLabelId=findTokenFor(labelTokenStore,usedLabel.name()).id();
  PropertyKeyTokenStore propertyKeyTokenStore=neoStores.getPropertyKeyTokenStore();
  notUsedPropertyId=findTokenFor(propertyKeyTokenStore,notUsedIndexPropKey).id();
  usedPropertyId=findTokenFor(propertyKeyTokenStore,usedIndexPropKey).id();
}
