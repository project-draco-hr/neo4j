{
  Args parsedArgs=Args.parse(args);
  if (parsedArgs.orphans().size() < 1) {
    throw new IncorrectUsage("Missing arguments: expected at least one sub-command as argument: list, create, delete or " + "set-password");
  }
  String command=parsedArgs.orphans().size() > 0 ? parsedArgs.orphans().get(0) : null;
  String username=parsedArgs.orphans().size() > 1 ? parsedArgs.orphans().get(1) : null;
  String password=parsedArgs.orphans().size() > 2 ? parsedArgs.orphans().get(2) : null;
  try {
switch (command.trim().toLowerCase()) {
case "list":
      listUsers(username);
    break;
case "set-password":
  if (username == null || password == null) {
    throw new IncorrectUsage("Missing arguments: 'users set-password' expects username and password arguments");
  }
setPassword(username,password);
break;
case "create":
if (username == null || password == null) {
throw new IncorrectUsage("Missing arguments: 'users create' expects username and password arguments");
}
boolean requiresPasswordChange=parsedArgs.asMap().containsKey("requires-password-change") && (parsedArgs.asMap().get("requires-password-change").toLowerCase().equals("true"));
createUser(username,password,requiresPasswordChange);
break;
case "delete":
if (username == null) {
throw new IncorrectUsage("Missing arguments: 'users delete' expects username argument");
}
deleteUser(username);
break;
default :
throw new IncorrectUsage("Unknown users command: " + command);
}
}
 catch (IncorrectUsage e) {
throw e;
}
catch (Exception e) {
throw new CommandFailed("Failed run 'users " + command + "' on '"+ username+ "': "+ e.getMessage(),e);
}
catch (Throwable t) {
throw new CommandFailed("Failed run 'users " + command + "' on '"+ username+ "': "+ t.getMessage(),new RuntimeException(t.getMessage()));
}
}
