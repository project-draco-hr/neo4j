{
  System.out.println("Usage:");
  printArgumentUsage("--into <store-dir>","database directory to import into. " + "Must not contain existing database.");
  printArgumentUsage("--nodes <file1>" + pathSeparator + "<file2>"+ pathSeparator+ "...","Node CSV header and data. Multiple files will be logically seen as one big file " + "from the perspective of the importer. First line must contain the header. " + "Multiple input groups like these can be specified in one import, where each group has its own header.");
  printArgumentUsage("--relationships <file1>" + pathSeparator + "<file2>"+ pathSeparator+ "...","Relationship CSV header and data. Multiple files will be logically seen as one big file " + "from the perspective of the importer. First line must contain the header. " + "Multiple input groups like these can be specified in one import, where each group has its own header.");
  printArgumentUsage("--delimiter <delimiter-character>","Delimiter character between values in CSV data.");
  printArgumentUsage("--array-delimiter <array-delimiter-character>","Delimiter character between array elements within a value in CSV data.");
  printArgumentUsage("--quote <quotation-character>","Character to treat as quotation character in values in CSV data. " + "Quotes inside quotes like '\"\"' and '\\\"' are supported.");
  printArgumentUsage("--id-type <id-type>","One out of " + Arrays.toString(IdType.values()) + " and specifies how ids in node/relationship "+ "input files are treated.\n"+ IdType.STRING+ ": arbitrary strings for identifying nodes.\n"+ IdType.ACTUAL+ ": (advanced) actual node ids, starting from 0.");
}
