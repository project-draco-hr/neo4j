{
  Iterator<RECORD> iterator=records.iterator();
  if (!iterator.hasNext()) {
    return;
  }
  @SuppressWarnings("unchecked") final ArrayBlockingQueue<RECORD>[] recordQ=new ArrayBlockingQueue[numberOfThreads];
  final Workers<RecordCheckWorker<RECORD>> workers=new Workers<>(workerNames);
  final AtomicInteger idGroup=new AtomicInteger(-1);
  for (int threadId=0; threadId < numberOfThreads; threadId++) {
    recordQ[threadId]=new ArrayBlockingQueue<>(queueSize);
    workers.start(new RecordCheckWorker<>(threadId,idGroup,recordQ[threadId],processor));
  }
  final int[] recsProcessed=new int[numberOfThreads];
  RecordConsumer<RECORD> recordConsumer=new RecordConsumer<RECORD>(){
    @Override public void accept(    RECORD record,    int qIndex) throws InterruptedException {
      recordQ[qIndex].put(record);
      recsProcessed[qIndex]++;
    }
  }
;
  try {
    while (iterator.hasNext()) {
      try {
        RECORD record=iterator.next();
        idDistributor.distribute(record,recordConsumer);
        progress.add(1);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
    }
    for (    RecordCheckWorker<RECORD> worker : workers) {
      worker.done();
    }
    workers.awaitAndThrowOnError(RuntimeException.class);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new RuntimeException("Was interrupted while awaiting completion");
  }
}
