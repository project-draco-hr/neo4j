{
  try {
    json=dodgeStartingUnicodeMarker(json);
    Collection<Object> newProperties=(Collection<Object>)JsonHelper.jsonToSingleValue(json);
    Map<String,Object> currentPropMap;
    ServerPropertyRepresentation currentPropObj;
    boolean hasJvmChanges=false;
    boolean hasCreationChanges=false;
    boolean hasDbConfigChanges=false;
    for (    Object property : newProperties) {
      if (!(property instanceof Map<?,?>)) {
        throw new IllegalArgumentException("'" + property + "' is not a valid configuration directive.");
      }
      currentPropMap=(Map<String,Object>)property;
      currentPropObj=properties.get((String)currentPropMap.get("key"));
      if (!currentPropObj.isValidValue((String)currentPropMap.get("value"))) {
        throw new IllegalArgumentException("'" + (String)currentPropMap.get("value") + "' is not a valid value for property '"+ (String)currentPropMap.get("key")+ "'.");
      }
switch (currentPropObj.getType()) {
case APP_ARGUMENT:
case JVM_ARGUMENT:
        hasJvmChanges=true;
      break;
case DB_CREATION_PROPERTY:
    hasCreationChanges=true;
  break;
case CONFIG_PROPERTY:
hasDbConfigChanges=true;
break;
}
}
if (hasCreationChanges) {
throw new OperationNotSupportedException();
}
 else if (hasJvmChanges) {
DeferredTask.defer(new JvmRestartTask(),10);
}
 else if (hasDbConfigChanges) {
if (LifecycleService.serverStatus == LifecycleRepresentation.Status.RUNNING) {
NeoServer.server().reboot();
ConsoleSessions.destroyAllSessions();
}
}
return addHeaders(Response.ok()).build();
}
 catch (PropertyValueException e) {
return buildBadJsonExceptionResponse(json,e,JsonRenderers.DEFAULT);
}
catch (OperationNotSupportedException e) {
return buildExceptionResponse(Status.FORBIDDEN,"Changing settings that required database re-creation is currently not supported.",e,JsonRenderers.DEFAULT);
}
catch (IllegalArgumentException e) {
return buildExceptionResponse(Status.BAD_REQUEST,"You attempted to set an illegal value.",e,JsonRenderers.DEFAULT);
}
catch (NoSuchPropertyException e) {
return buildExceptionResponse(Status.BAD_REQUEST,"You attempted to modify a property that does not exist.",e,JsonRenderers.DEFAULT);
}
catch (Exception e) {
return buildExceptionResponse(Status.INTERNAL_SERVER_ERROR,"Unable to save changes to disk, does daemon user have write permissions?",e,JsonRenderers.DEFAULT);
}
}
