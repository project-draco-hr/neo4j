{
  int inRelCount=randomRelCount();
  int outRelCount=randomRelCount();
  int loopRelCount=randomRelCount();
  long nodeId=createNode(inRelCount,outRelCount,loopRelCount);
  StoreSingleNodeCursor cursor=newCursor(nodeId);
  if (modifyInChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.IN);
  }
  if (modifyOutChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.OUT);
  }
  if (modifyLoopChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.LOOP);
  }
  Set<TestDegreeItem> expectedDegrees=new HashSet<>(asList(new TestDegreeItem(relTypeId(TestRelType.OUT),outRelCount,0),new TestDegreeItem(relTypeId(TestRelType.IN),0,inRelCount),new TestDegreeItem(relTypeId(TestRelType.LOOP),loopRelCount,loopRelCount)));
  Set<TestDegreeItem> actualDegrees=degrees(cursor);
  assertEquals(expectedDegrees,actualDegrees);
}
