{
  int inRelCount=randomRelCount();
  int outRelCount=randomRelCount();
  int loopRelCount=randomRelCount();
  long nodeId=createNode(inRelCount,outRelCount,loopRelCount);
  StoreSingleNodeCursor cursor=newCursor(nodeId);
  if (modifyInChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.IN);
  }
  if (modifyOutChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.OUT);
  }
  if (modifyLoopChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.LOOP);
  }
  assertEquals(0,cursor.degree(OUTGOING,relTypeId(TestRelType.IN)));
  assertEquals(outRelCount,cursor.degree(OUTGOING,relTypeId(TestRelType.OUT)));
  assertEquals(loopRelCount,cursor.degree(OUTGOING,relTypeId(TestRelType.LOOP)));
  assertEquals(0,cursor.degree(INCOMING,relTypeId(TestRelType.OUT)));
  assertEquals(inRelCount,cursor.degree(INCOMING,relTypeId(TestRelType.IN)));
  assertEquals(loopRelCount,cursor.degree(INCOMING,relTypeId(TestRelType.LOOP)));
  assertEquals(inRelCount,cursor.degree(BOTH,relTypeId(TestRelType.IN)));
  assertEquals(outRelCount,cursor.degree(BOTH,relTypeId(TestRelType.OUT)));
  assertEquals(loopRelCount,cursor.degree(BOTH,relTypeId(TestRelType.LOOP)));
}
