{
  int inRelCount=randomRelCount();
  int outRelCount=randomRelCount();
  int loopRelCount=randomRelCount();
  long nodeId=createNode(inRelCount,outRelCount,loopRelCount);
  StoreSingleNodeCursor cursor=newCursor(nodeId);
  if (modifyInChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.IN);
  }
  if (modifyOutChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.OUT);
  }
  if (modifyLoopChain) {
    markRandomRelsInGroupNotInUse(nodeId,TestRelType.LOOP);
  }
  assertEquals(outRelCount + loopRelCount,cursor.degree(OUTGOING));
  assertEquals(inRelCount + loopRelCount,cursor.degree(INCOMING));
  assertEquals(inRelCount + outRelCount + loopRelCount,cursor.degree(BOTH));
}
