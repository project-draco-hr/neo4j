{
  try (InputCache cache=new InputCache(fileSystemRule.get(),dir.directory(),StandardV3_0.RECORD_FORMATS,withMaxProcessors(50),(int)ByteUnit.kibiBytes(8),BATCH_SIZE)){
    List<InputRelationship> relationships=new ArrayList<>();
    Randoms random=getRandoms();
    try (Receiver<InputRelationship[],IOException> cacher=cache.cacheRelationships(MAIN)){
      InputRelationship[] batch=new InputRelationship[BATCH_SIZE];
      for (int b=0; b < BATCHES; b++) {
        for (int i=0; i < BATCH_SIZE; i++) {
          InputRelationship relationship=randomRelationship(random);
          batch[i]=relationship;
          relationships.add(relationship);
        }
        cacher.receive(batch);
      }
    }
     try (InputIterator<InputRelationship> reader=cache.relationships(MAIN,true).iterator()){
      reader.setNumberOfProcessors(50);
      Iterator<InputRelationship> expected=relationships.iterator();
      while (expected.hasNext()) {
        assertTrue(reader.hasNext());
        InputRelationship expectedRelationship=expected.next();
        InputRelationship relationship=reader.next();
        assertRelationshipsEquals(expectedRelationship,relationship);
      }
      assertFalse(reader.hasNext());
    }
   }
   assertNoFilesLeftBehind();
}
