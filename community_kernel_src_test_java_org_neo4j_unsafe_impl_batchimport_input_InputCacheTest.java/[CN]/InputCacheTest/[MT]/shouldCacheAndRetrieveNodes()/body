{
  try (InputCache cache=new InputCache(fs,dir.directory(),8 * KB)){
    List<InputNode> nodes=new ArrayList<>();
    Randoms random=new Randoms(randomRule.random(),Randoms.DEFAULT);
    try (Receiver<InputNode[],IOException> cacher=cache.cacheNodes()){
      InputNode[] batch=new InputNode[BATCH_SIZE];
      for (int b=0; b < BATCHES; b++) {
        for (int i=0; i < BATCH_SIZE; i++) {
          InputNode node=randomNode(random);
          batch[i]=node;
          nodes.add(node);
        }
        cacher.receive(batch);
      }
    }
     try (InputIterator<InputNode> reader=cache.nodes().iterator()){
      Iterator<InputNode> expected=nodes.iterator();
      while (expected.hasNext()) {
        assertTrue(reader.hasNext());
        InputNode expectedNode=expected.next();
        InputNode node=reader.next();
        assertNodesEquals(expectedNode,node);
      }
      assertFalse(reader.hasNext());
    }
   }
   assertNoFilesLeftBehind();
}
