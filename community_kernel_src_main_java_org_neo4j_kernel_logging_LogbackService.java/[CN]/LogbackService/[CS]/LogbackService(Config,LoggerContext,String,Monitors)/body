{
  this.config=config;
  this.loggerContext=loggerContext;
  MonitoredRollingPolicy.setMonitorsInstance(monitors);
  final File storeDir=config.get(GraphDatabaseSettings.store_dir);
  if (storeDir != null) {
    File file=storeDir.getAbsoluteFile();
    if (!file.exists()) {
      file.mkdirs();
    }
    File configuredInternalLog=config.get(GraphDatabaseSettings.internal_log_location);
    final File internalLog;
    if (configuredInternalLog != null) {
      internalLog=configuredInternalLog;
      if (!internalLog.getParentFile().exists()) {
        internalLog.getParentFile().mkdirs();
      }
    }
 else {
      internalLog=new File(storeDir,StringLogger.DEFAULT_NAME);
    }
    loggingLife.add(new LifecycleAdapter(){
      @Override public void start() throws Throwable {
        JoranConfigurator configurator=new JoranConfigurator();
        configurator.setContext(loggerContext);
        if (config.getParams().containsKey("ha.server_id")) {
          loggerContext.putProperty("host",config.getParams().get("ha.server_id"));
        }
        loggerContext.putProperty("neo_store",storeDir.getPath());
        loggerContext.putProperty("internal_log",internalLog.getPath());
        loggerContext.putProperty("remote_logging_enabled",config.get(GraphDatabaseSettings.remote_logging_enabled).toString());
        loggerContext.putProperty("remote_logging_host",config.get(GraphDatabaseSettings.remote_logging_host));
        loggerContext.putProperty("remote_logging_port",config.get(GraphDatabaseSettings.remote_logging_port).toString());
        try {
          URL resource=getClass().getClassLoader().getResource(logbackConfigurationFilename);
          if (resource == null) {
            throw new IllegalStateException(String.format("Could not find %s configuration",logbackConfigurationFilename));
          }
          configurator.doConfigure(resource);
        }
 catch (        JoranException e) {
          throw new IllegalStateException("Failed to configure logging",e);
        }
      }
      @Override public void stop() throws Throwable {
        loggerContext.getLogger("org.neo4j").detachAndStopAllAppenders();
      }
    }
);
    loggingLife.start();
    MonitoredRollingPolicy.setMonitorsInstance(null);
    restartOnChange=new RestartOnChange("remote_logging_",loggingLife);
    config.addConfigurationChangeListener(restartOnChange);
  }
}
