{
  final FileChannel fileChannel=new RandomAccessFile(fileName,"r").getChannel();
  int recordLength=9;
  int endHeaderSize=UTF8.encode(FROM_VERSION).length;
  final long maxId=(fileChannel.size() - endHeaderSize) / recordLength;
  final ByteBuffer buffer=ByteBuffer.allocateDirect(recordLength);
  return new Iterable<NodeRecord>(){
    @Override public Iterator<NodeRecord> iterator(){
      return new Iterator<NodeRecord>(){
        long id=0;
        @Override public boolean hasNext(){
          return id < maxId;
        }
        @Override public NodeRecord next(){
          NodeRecord nodeRecord=null;
          do {
            buffer.position(0);
            try {
              fileChannel.read(buffer);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
            buffer.flip();
            long inUseByte=buffer.get();
            boolean inUse=(inUseByte & 0x1) == Record.IN_USE.intValue();
            if (inUse) {
              long nextRel=getUnsignedInt(buffer);
              long nextProp=getUnsignedInt(buffer);
              long relModifier=(inUseByte & 0xEL) << 31;
              long propModifier=(inUseByte & 0xF0L) << 28;
              nodeRecord=new NodeRecord(id);
              nodeRecord.setInUse(inUse);
              nodeRecord.setNextRel(longFromIntAndMod(nextRel,relModifier));
              nodeRecord.setNextProp(longFromIntAndMod(nextProp,propModifier));
            }
            id++;
          }
 while (nodeRecord == null && id < maxId);
          return nodeRecord;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
