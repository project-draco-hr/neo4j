{
  super();
  this.addValueType("o",new OptionContext(OptionValueType.MUST,"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]"));
  this.addValueType("r",new OptionContext(OptionValueType.MUST,"The relationship type(s) w/ optional direction\n" + "(also supports regex matching of relationship types),\n" + "f.ex. MY_REL_TYPE:OUTGOING,.*_HAS_.*'"));
  this.addValueType("f",new OptionContext(OptionValueType.MUST,"Filters node property keys (regex string)"));
  this.addValueType("g",new OptionContext(OptionValueType.MUST,"Filters node property values (regex string)"));
  this.addValueType("s",new OptionContext(OptionValueType.NONE,"Case sensitive filters"));
  this.addValueType("x",new OptionContext(OptionValueType.NONE,"Filters will only match if the entire value matches " + "(exact match)"));
  this.addValueType("c",new OptionContext(OptionValueType.MUST,"Command to run for each returned node. Use $n as a node-id " + "replacement.\n" + "Example: -c \"ls -f name $n\". Multiple commands "+ "can be supplied with\n"+ "&& in between"));
}
