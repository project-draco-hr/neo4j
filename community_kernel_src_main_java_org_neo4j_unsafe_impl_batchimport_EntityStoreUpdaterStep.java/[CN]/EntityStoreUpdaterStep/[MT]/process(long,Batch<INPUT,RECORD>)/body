{
  propertyRecords.close();
  long highestId=0;
  RECORD[] records=batch.records;
  int propertyBlockCursor=0;
  for (int i=0; i < records.length; i++) {
    RECORD record=records[i];
    if (record == null) {
      continue;
    }
    INPUT input=batch.input[i];
    if (input.hasFirstPropertyId()) {
      record.setNextProp(input.firstPropertyId());
    }
 else {
      int propertyBlockCount=batch.propertyBlocksLengths[i];
      if (propertyBlockCount > 0) {
        reassignDynamicRecordIds(batch.propertyBlocks,propertyBlockCursor,propertyBlockCount);
        long firstProp=propertyCreator.createPropertyChain(record,blockIterator.dressArray(batch.propertyBlocks,propertyBlockCursor,propertyBlockCount),propertyRecords);
        record.setNextProp(firstProp);
        propertyBlockCursor+=propertyBlockCount;
      }
    }
    highestId=max(highestId,record.getId());
    entityStore.updateRecord(record);
  }
  entityStore.setHighestPossibleIdInUse(highestId);
  for (  PropertyRecord propertyRecord : propertyRecords.records()) {
    propertyStore.updateRecord(propertyRecord);
  }
  return null;
}
