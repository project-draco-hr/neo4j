{
  InstanceId myId=new InstanceId(1);
  InstanceId foreignId=new InstanceId(3);
  HeartbeatState heartbeat=HeartbeatState.heartbeat;
  ClusterConfiguration configuration=new ClusterConfiguration("whatever",StringLogger.DEV_NULL,"cluster://1","cluster://2");
  configuration.joined(myId,URI.create("cluster://1"));
  configuration.joined(new InstanceId(2),URI.create("cluster://2"));
  Logging logging=mock(Logging.class);
  when(logging.getMessagesLog(Matchers.<Class>any())).thenReturn(mock(StringLogger.class));
  MultiPaxosContext context=new MultiPaxosContext(myId,Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole("coordinator")),configuration,Mockito.mock(Executor.class),logging,Mockito.mock(ObjectInputStreamFactory.class),Mockito.mock(ObjectOutputStreamFactory.class),Mockito.mock(AcceptorInstanceStore.class),Mockito.mock(Timeouts.class),mock(ElectionCredentialsProvider.class));
  HeartbeatContext heartbeatContext=context.getHeartbeatContext();
  Message received=Message.internal(HeartbeatMessage.suspicions,new HeartbeatMessage.SuspicionsState(Iterables.toSet(Iterables.<InstanceId,InstanceId>iterable(myId,foreignId))));
  received.setHeader(Message.FROM,"cluster://2");
  heartbeat.handle(heartbeatContext,received,mock(MessageHolder.class));
  assertThat(heartbeatContext.getSuspicionsOf(myId).size(),equalTo(0));
  assertThat(heartbeatContext.getSuspicionsOf(foreignId).size(),equalTo(1));
}
