{
  Monitors monitors=new Monitors();
  ByteCounterMonitor monitor=monitors.newMonitor(ByteCounterMonitor.class);
  DirectMappedLogBuffer buffer=new DirectMappedLogBuffer(new FileChannelWithChoppyDisk(100),monitor);
  final AtomicLong bytesWritten=new AtomicLong();
  monitors.addMonitorListener(new ByteCounterMonitor(){
    @Override public void bytesWritten(    long numberOfBytes){
      bytesWritten.addAndGet(numberOfBytes);
    }
    @Override public void bytesRead(    long numberOfBytes){
    }
  }
);
  buffer.put((byte)1);
  assertEquals(0,bytesWritten.get());
  buffer.force();
  assertEquals(1,bytesWritten.get());
  buffer.putShort((short)1);
  assertEquals(1,bytesWritten.get());
  buffer.force();
  assertEquals(3,bytesWritten.get());
  buffer.putInt(1);
  assertEquals(3,bytesWritten.get());
  buffer.force();
  assertEquals(7,bytesWritten.get());
  buffer.putLong(1);
  assertEquals(7,bytesWritten.get());
  buffer.force();
  assertEquals(15,bytesWritten.get());
  buffer.putFloat(1);
  assertEquals(15,bytesWritten.get());
  buffer.force();
  assertEquals(19,bytesWritten.get());
  buffer.putDouble(1);
  assertEquals(19,bytesWritten.get());
  buffer.force();
  assertEquals(27,bytesWritten.get());
  buffer.put(new byte[]{1,2,3});
  assertEquals(27,bytesWritten.get());
  buffer.force();
  assertEquals(30,bytesWritten.get());
  buffer.put(new char[]{'1','2','3'});
  assertEquals(30,bytesWritten.get());
  buffer.force();
  assertEquals(36,bytesWritten.get());
  buffer.force();
  assertEquals(36,bytesWritten.get());
}
