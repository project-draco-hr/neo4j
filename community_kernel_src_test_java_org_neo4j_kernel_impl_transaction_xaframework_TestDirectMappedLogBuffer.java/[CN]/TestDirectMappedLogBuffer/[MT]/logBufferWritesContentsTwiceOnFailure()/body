{
  final AtomicBoolean broken=new AtomicBoolean(false);
  FileSystemGuard guard=new FileSystemGuard(){
    @Override public void checkOperation(    OperationType operationType,    File onFile,    int bytesWrittenTotal,    int bytesWrittenThisCall,    long channelPosition) throws IOException {
      if (!broken.get() && bytesWrittenTotal == 4) {
        broken.set(true);
        throw new IOException("IOException after which this buffer should not be used");
      }
      if (broken.get() && channelPosition == 0) {
        throw new IOException("This exception should never happen");
      }
    }
  }
;
  BreakableFileSystemAbstraction fs=new BreakableFileSystemAbstraction(new EphemeralFileSystemAbstraction(),guard);
  DirectMappedLogBuffer buffer=new DirectMappedLogBuffer(fs.create(new File("log")),new Monitors().newMonitor(ByteCounterMonitor.class));
  buffer.putInt(1).putInt(2).putInt(3);
  try {
    buffer.writeOut();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  buffer.writeOut();
}
