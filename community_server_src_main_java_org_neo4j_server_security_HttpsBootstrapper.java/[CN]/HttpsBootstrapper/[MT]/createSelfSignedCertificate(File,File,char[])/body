{
  FileOutputStream fos=null;
  try {
    KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(KEY_ENCRYPTION);
    keyPairGenerator.initialize(1024);
    KeyPair keyPair=keyPairGenerator.generateKeyPair();
    X509V3CertificateGenerator certGenertor=new X509V3CertificateGenerator();
    certGenertor.setSerialNumber(BigInteger.valueOf(new SecureRandom().nextInt()).abs());
    certGenertor.setIssuerDN(new X509Principal("CN=" + hostName + ", OU=None, O=None L=None, C=None"));
    certGenertor.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60* 24* 30));
    certGenertor.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60* 24* 365* 10)));
    certGenertor.setSubjectDN(new X509Principal("CN=" + hostName + ", OU=None, O=None L=None, C=None"));
    certGenertor.setPublicKey(keyPair.getPublic());
    certGenertor.setSignatureAlgorithm("MD5WithRSAEncryption");
    Certificate certificate=certGenertor.generate(keyPair.getPrivate(),"BC");
    ensureFolderExists(certPath.getParentFile());
    ensureFolderExists(privateKeyPath.getParentFile());
    fos=new FileOutputStream(certPath);
    fos.write(certificate.getEncoded());
    fos.close();
    fos=new FileOutputStream(privateKeyPath);
    fos.write(keyPair.getPrivate().getEncoded());
    fos.close();
  }
  finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
}
