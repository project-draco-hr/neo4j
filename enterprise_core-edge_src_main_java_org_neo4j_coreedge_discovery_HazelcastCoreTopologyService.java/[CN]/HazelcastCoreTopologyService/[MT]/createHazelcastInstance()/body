{
  System.setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"1");
  JoinConfig joinConfig=new JoinConfig();
  joinConfig.getMulticastConfig().setEnabled(false);
  TcpIpConfig tcpIpConfig=joinConfig.getTcpIpConfig();
  tcpIpConfig.setEnabled(true);
  List<AdvertisedSocketAddress> initialMembers=config.get(CoreEdgeClusterSettings.initial_discovery_members);
  for (  AdvertisedSocketAddress address : initialMembers) {
    tcpIpConfig.addMember(address.toString());
  }
  Set<AdvertisedSocketAddress> previouslySeenMembers=discoveredMemberRepository.previouslyDiscoveredMembers();
  for (  AdvertisedSocketAddress seenAddress : previouslySeenMembers) {
    tcpIpConfig.addMember(seenAddress.toString());
  }
  log.info(String.format("Discovering cluster with initial members: %s and previously seen members: %s",initialMembers,previouslySeenMembers));
  NetworkConfig networkConfig=new NetworkConfig();
  ListenSocketAddress hazelcastAddress=config.get(CoreEdgeClusterSettings.discovery_listen_address);
  networkConfig.setPort(hazelcastAddress.socketAddress().getPort());
  networkConfig.setJoin(joinConfig);
  com.hazelcast.config.Config c=new com.hazelcast.config.Config();
  c.setProperty(GroupProperties.PROP_INITIAL_MIN_CLUSTER_SIZE,String.valueOf(minimumClusterSizeThatCanTolerateOneFaultForExpectedClusterSize()));
  c.setProperty(GroupProperties.PROP_LOGGING_TYPE,"none");
  c.setNetworkConfig(networkConfig);
  MemberAttributeConfig memberAttributeConfig=HazelcastClusterTopology.buildMemberAttributes(myself,config);
  c.setMemberAttributeConfig(memberAttributeConfig);
  return Hazelcast.newHazelcastInstance(c);
}
