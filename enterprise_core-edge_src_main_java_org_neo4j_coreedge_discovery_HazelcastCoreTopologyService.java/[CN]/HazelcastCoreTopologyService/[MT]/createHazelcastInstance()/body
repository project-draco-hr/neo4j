{
  System.setProperty(GroupProperties.PROP_WAIT_SECONDS_BEFORE_JOIN,"1");
  JoinConfig joinConfig=new JoinConfig();
  joinConfig.getMulticastConfig().setEnabled(false);
  TcpIpConfig tcpIpConfig=joinConfig.getTcpIpConfig();
  tcpIpConfig.setEnabled(true);
  List<AdvertisedSocketAddress> initialMembers=config.get(CoreEdgeClusterSettings.initial_discovery_members);
  for (  AdvertisedSocketAddress address : initialMembers) {
    tcpIpConfig.addMember(address.toString());
  }
  log.info("Discovering cluster with initial members: " + initialMembers);
  NetworkConfig networkConfig=new NetworkConfig();
  Setting<ListenSocketAddress> discovery_listen_address=CoreEdgeClusterSettings.discovery_listen_address;
  ListenSocketAddress hazelcastAddress=config.get(discovery_listen_address);
  InterfacesConfig interfaces=new InterfacesConfig();
  interfaces.addInterface(hazelcastAddress.getHostname());
  networkConfig.setInterfaces(interfaces);
  networkConfig.setPort(hazelcastAddress.getPort());
  networkConfig.setJoin(joinConfig);
  networkConfig.setPortAutoIncrement(false);
  com.hazelcast.config.Config c=new com.hazelcast.config.Config();
  c.setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS,"10000");
  c.setProperty(GroupProperties.PROP_INITIAL_MIN_CLUSTER_SIZE,String.valueOf(minimumClusterSizeThatCanTolerateOneFaultForExpectedClusterSize()));
  c.setProperty(GroupProperties.PROP_LOGGING_TYPE,"none");
  c.setNetworkConfig(networkConfig);
  MemberAttributeConfig memberAttributeConfig=HazelcastClusterTopology.buildMemberAttributes(myself,config);
  c.setMemberAttributeConfig(memberAttributeConfig);
  userLog.info("Waiting for other members to join cluster before continuing...");
  try {
    hazelcastInstance=Hazelcast.newHazelcastInstance(c);
  }
 catch (  HazelcastException e) {
    String errorMessage=String.format("Hazelcast was unable to start with setting: %s = %s",discovery_listen_address.name(),config.get(discovery_listen_address));
    userLog.error(errorMessage);
    log.error(errorMessage,e);
    throw new RuntimeException(e);
  }
  return hazelcastInstance;
}
