{
  return new Iterable<Node>(){
    public Iterator<Node> iterator(){
      return new Iterator<Node>(){
        Node current=start;
        int index=0;
        Iterator<Relationship> relationshipIterator=relationships.iterator();
        public boolean hasNext(){
          return index <= path.length;
        }
        public Node next(){
          if (current == null) {
            throw new NoSuchElementException();
          }
          Node next=null;
          if (index < path.length) {
            if (!relationshipIterator.hasNext()) {
              throw new IllegalStateException(String.format("Number of relationships: %d does not" + " match with path length: %d.",index,path.length));
            }
            next=relationshipIterator.next().getOtherNode(current);
          }
          index+=1;
          try {
            return current;
          }
  finally {
            current=next;
          }
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
