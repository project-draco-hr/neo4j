{
  MuninnPage[] pages=new MuninnPage[translationTableChunkSize];
  long filePageId=-1;
  long limiterStamp=IOLimiter.INITIAL_STAMP;
  Object[][] tt=this.translationTable;
  for (  Object[] chunk : tt) {
    int pagesGrabbed=0;
    chunkLoop:     for (int i=0; i < chunk.length; i++) {
      filePageId++;
      long offset=computeChunkOffset(filePageId);
      for (; ; ) {
        Object element=UnsafeUtil.getObjectVolatile(chunk,offset);
        if (element instanceof MuninnPage) {
          MuninnPage page=(MuninnPage)element;
          long stamp=page.tryOptimisticReadLock();
          if ((!page.isDirty()) && page.validateReadLock(stamp)) {
            break;
          }
          if (!(forClosing ? page.tryExclusiveLock() : page.tryFlushLock())) {
            continue;
          }
          if (page.isBoundTo(swapper,filePageId) && page.isDirty()) {
            pages[pagesGrabbed]=page;
            pagesGrabbed++;
            continue chunkLoop;
          }
 else           if (forClosing) {
            page.unlockExclusive();
          }
 else {
            page.unlockFlush();
          }
        }
        break;
      }
      if (pagesGrabbed > 0) {
        vectoredFlush(pages,pagesGrabbed,flushOpportunity,forClosing);
        limiterStamp=limiter.maybeLimitIO(limiterStamp,pagesGrabbed,this);
        pagesGrabbed=0;
      }
    }
    if (pagesGrabbed > 0) {
      vectoredFlush(pages,pagesGrabbed,flushOpportunity,forClosing);
      limiterStamp=limiter.maybeLimitIO(limiterStamp,pagesGrabbed,this);
    }
  }
  swapper.force();
}
