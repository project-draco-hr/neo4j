{
  Map<Object,MutableLong> mergedTypes=new HashMap<>();
  for (  Map<Object,MutableLong> localTypes : typeCheckers.values()) {
    for (    Map.Entry<Object,MutableLong> localType : localTypes.entrySet()) {
      MutableLong count=mergedTypes.get(localType.getKey());
      if (count == null) {
        mergedTypes.put(localType.getKey(),count=new MutableLong());
      }
      count.add(localType.getValue().longValue());
    }
  }
  sortedTypes=mergedTypes.entrySet().toArray(new Map.Entry[mergedTypes.size()]);
  if (sortedTypes.length > 0) {
    Comparator<Map.Entry<Object,MutableLong>> comparator=sortedTypes[0].getKey() instanceof Integer ? SORT_BY_ID_DESC : SORT_BY_COUNT_DESC;
    Arrays.sort(sortedTypes,comparator);
  }
  for (int i=sortedTypes.length - 1; i >= 0; i--) {
    typeTokenRepository.getOrCreateId(sortedTypes[i].getKey());
  }
  super.done();
}
