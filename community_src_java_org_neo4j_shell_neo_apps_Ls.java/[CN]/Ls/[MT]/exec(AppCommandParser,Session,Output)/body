{
  boolean verbose=parser.options().containsKey("v");
  boolean displayValues=verbose || !parser.options().containsKey("q");
  boolean displayProperties=parser.options().containsKey("p");
  boolean displayRelationships=parser.options().containsKey("r");
  boolean caseInsensitiveFilters=parser.options().containsKey("i");
  boolean looseFilters=parser.options().containsKey("l");
  String filterString=parser.options().get("f");
  Map<String,Object> filterMap=parseFilter(filterString,out);
  if (!displayProperties && !displayRelationships) {
    displayProperties=true;
    displayRelationships=true;
  }
  NodeOrRelationship thing=null;
  if (parser.arguments().isEmpty()) {
    thing=this.getCurrent(session);
  }
 else {
    thing=NodeOrRelationship.wrap(this.getNodeById(Long.parseLong(parser.arguments().get(0))));
  }
  if (displayProperties) {
    this.displayProperties(thing,out,displayValues,verbose,filterMap,caseInsensitiveFilters,looseFilters);
  }
  if (displayRelationships) {
    this.displayRelationships(parser,thing,session,out,verbose,filterMap,caseInsensitiveFilters,looseFilters);
  }
  return null;
}
