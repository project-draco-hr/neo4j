{
  LoggingInbound loggingRaftInbound=new LoggingInbound(raftServer,messageLogger,myself.getRaftAddress());
  long electionTimeout=config.get(CoreEdgeClusterSettings.leader_election_timeout);
  long heartbeatInterval=electionTimeout / 3;
  long leaderWaitTimeout=config.get(CoreEdgeClusterSettings.leader_wait_timeout);
  Integer expectedClusterSize=config.get(CoreEdgeClusterSettings.expected_core_cluster_size);
  CoreMemberSetBuilder memberSetBuilder=new CoreMemberSetBuilder();
  Replicator localReplicator=new LocalReplicator<>(myself,myself.getRaftAddress(),outbound);
  RaftMembershipManager<CoreMember> raftMembershipManager=new RaftMembershipManager<>(localReplicator,memberSetBuilder,raftLog,logProvider,expectedClusterSize,electionTimeout,SYSTEM_CLOCK,config.get(CoreEdgeClusterSettings.join_catch_up_timeout));
  RaftLogShippingManager<CoreMember> logShipping=new RaftLogShippingManager<>(new RaftOutbound(outbound),logProvider,raftLog,SYSTEM_CLOCK,myself,raftMembershipManager,electionTimeout,config.get(CoreEdgeClusterSettings.catchup_batch_size),config.get(CoreEdgeClusterSettings.log_shipping_max_lag));
  RaftInstance<CoreMember> raftInstance=new RaftInstance<>(myself,termStore,voteStore,raftLog,electionTimeout,heartbeatInterval,raftTimeoutService,loggingRaftInbound,new RaftOutbound(outbound),leaderWaitTimeout,logProvider,raftMembershipManager,logShipping,raftStorageExceptionHandler);
  life.add(new RaftDiscoveryServiceConnector(discoveryService,raftInstance));
  return raftInstance;
}
