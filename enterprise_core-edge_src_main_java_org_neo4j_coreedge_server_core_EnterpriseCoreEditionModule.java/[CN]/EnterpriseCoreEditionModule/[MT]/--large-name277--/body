{
  StateStorage<TermState> termState;
  try {
    StateStorage<TermState> durableTermState=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"term-state"),"term-state",new TermState.Marshal(),config.get(CoreEdgeClusterSettings.term_state_size),databaseHealthSupplier,logProvider));
    termState=new MonitoredTermStateStorage(durableTermState,monitors);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  StateStorage<VoteState<CoreMember>> voteState;
  try {
    voteState=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"vote-state"),"vote-state",new VoteState.Marshal<>(new CoreMemberMarshal()),config.get(CoreEdgeClusterSettings.vote_state_size),databaseHealthSupplier,logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  StateStorage<RaftMembershipState<CoreMember>> raftMembershipState;
  try {
    raftMembershipState=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"membership-state"),"membership-state",new RaftMembershipState.Marshal<>(new CoreMemberMarshal()),config.get(CoreEdgeClusterSettings.raft_membership_state_size),databaseHealthSupplier,logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  LoggingInbound loggingRaftInbound=new LoggingInbound(raftServer,messageLogger,myself.getRaftAddress());
  long electionTimeout=config.get(CoreEdgeClusterSettings.leader_election_timeout);
  long heartbeatInterval=electionTimeout / 3;
  long leaderWaitTimeout=config.get(CoreEdgeClusterSettings.leader_wait_timeout);
  Integer expectedClusterSize=config.get(CoreEdgeClusterSettings.expected_core_cluster_size);
  CoreMemberSetBuilder memberSetBuilder=new CoreMemberSetBuilder();
  Replicator localReplicator=new LeaderOnlyReplicator<>(myself,myself.getRaftAddress(),outbound);
  RaftMembershipManager<CoreMember> raftMembershipManager=new RaftMembershipManager<>(localReplicator,memberSetBuilder,raftLog,logProvider,expectedClusterSize,electionTimeout,SYSTEM_CLOCK,config.get(CoreEdgeClusterSettings.join_catch_up_timeout),raftMembershipState);
  RaftLogShippingManager<CoreMember> logShipping=new RaftLogShippingManager<>(new RaftOutbound(outbound),logProvider,raftLog,SYSTEM_CLOCK,myself,raftMembershipManager,electionTimeout,config.get(CoreEdgeClusterSettings.catchup_batch_size),config.get(CoreEdgeClusterSettings.log_shipping_max_lag));
  RaftInstance<CoreMember> raftInstance=new RaftInstance<>(myself,termState,voteState,raftLog,raftStateMachine,electionTimeout,heartbeatInterval,raftTimeoutService,loggingRaftInbound,new RaftOutbound(outbound),leaderWaitTimeout,logProvider,raftMembershipManager,logShipping,databaseHealthSupplier,monitors);
  life.add(new RaftDiscoveryServiceConnector(discoveryService,raftInstance));
  life.add(new LifecycleAdapter(){
    @Override public void shutdown() throws Throwable {
      logShipping.destroy();
    }
  }
);
  return raftInstance;
}
