{
  StateStorage<TermState> termState;
  try {
    StateStorage<TermState> durableTermState=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"term-state"),"term-state",new TermState.Marshal(),config.get(CoreEdgeClusterSettings.term_state_size),databaseHealthSupplier,logProvider));
    termState=new MonitoredTermStateStorage(durableTermState,monitors);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  StateStorage<VoteState> voteState;
  try {
    voteState=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"vote-state"),"vote-state",new VoteState.Marshal(new CoreMemberMarshal()),config.get(CoreEdgeClusterSettings.vote_state_size),databaseHealthSupplier,logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  StateStorage<RaftMembershipState> raftMembershipStorage;
  try {
    raftMembershipStorage=life.add(new DurableStateStorage<>(fileSystem,new File(clusterStateDirectory,"membership-state"),"membership-state",new RaftMembershipState.Marshal(new CoreMemberMarshal()),config.get(CoreEdgeClusterSettings.raft_membership_state_size),databaseHealthSupplier,logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  LoggingInbound<RaftMessages.RaftMessage> loggingRaftInbound=new LoggingInbound<>(raftServer,messageLogger,myself);
  long electionTimeout=config.get(CoreEdgeClusterSettings.leader_election_timeout);
  long heartbeatInterval=electionTimeout / 3;
  Integer expectedClusterSize=config.get(CoreEdgeClusterSettings.expected_core_cluster_size);
  CoreMemberSetBuilder memberSetBuilder=new CoreMemberSetBuilder();
  SendToMyself leaderOnlyReplicator=new SendToMyself(myself,raftOutbound);
  RaftMembershipManager raftMembershipManager=new RaftMembershipManager(leaderOnlyReplicator,memberSetBuilder,raftLog,logProvider,expectedClusterSize,electionTimeout,systemUTC(),config.get(CoreEdgeClusterSettings.join_catch_up_timeout),raftMembershipStorage);
  RaftLogShippingManager logShipping=new RaftLogShippingManager(raftOutbound,logProvider,raftLog,systemUTC(),myself,raftMembershipManager,electionTimeout,config.get(CoreEdgeClusterSettings.catchup_batch_size),config.get(CoreEdgeClusterSettings.log_shipping_max_lag),inFlightMap);
  RaftInstance raftInstance=new RaftInstance(myself,termState,voteState,raftLog,raftStateMachine,electionTimeout,heartbeatInterval,raftTimeoutService,raftOutbound,logProvider,raftMembershipManager,logShipping,databaseHealthSupplier,inFlightMap,monitors);
  int queueSize=config.get(CoreEdgeClusterSettings.raft_in_queue_size);
  int maxBatch=config.get(CoreEdgeClusterSettings.raft_in_queue_max_batch);
  BatchingMessageHandler batchingMessageHandler=new BatchingMessageHandler(raftInstance,logProvider,queueSize,maxBatch);
  life.add(new ContinuousJob(jobScheduler,new JobScheduler.Group("raft-batch-handler",NEW_THREAD),batchingMessageHandler));
  loggingRaftInbound.registerHandler(batchingMessageHandler);
  life.add(new RaftDiscoveryServiceConnector(discoveryService,raftInstance));
  life.add(new LifecycleAdapter(){
    @Override public void shutdown() throws Throwable {
      logShipping.destroy();
    }
  }
);
  return raftInstance;
}
