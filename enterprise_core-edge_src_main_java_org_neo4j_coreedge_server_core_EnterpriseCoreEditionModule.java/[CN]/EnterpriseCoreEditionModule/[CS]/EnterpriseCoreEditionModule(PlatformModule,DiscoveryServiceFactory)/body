{
  final Dependencies dependencies=platformModule.dependencies;
  final Config config=platformModule.config;
  final LogService logging=platformModule.logging;
  final FileSystemAbstraction fileSystem=platformModule.fileSystem;
  final File storeDir=platformModule.storeDir;
  final File clusterStateDirectory=createClusterStateDirectory(storeDir,fileSystem);
  final LifeSupport life=platformModule.life;
  logProvider=logging.getInternalLogProvider();
  final Supplier<DatabaseHealth> databaseHealthSupplier=dependencies.provideDependency(DatabaseHealth.class);
  MemberId myself;
  try {
    StateStorage<MemberId> idStorage=life.add(new DurableStateStorage<>(fileSystem,clusterStateDirectory,CORE_MEMBER_ID_NAME,new MemberIdMarshal(),1,databaseHealthSupplier,logProvider));
    MemberId member=idStorage.getInitialState();
    if (member == null) {
      member=new MemberId(UUID.randomUUID());
      idStorage.persistStoreData(member);
    }
    myself=member;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  discoveryService=discoveryServiceFactory.coreDiscoveryService(config,myself,logProvider);
  life.add(dependencies.satisfyDependency(discoveryService));
  long logThresholdMillis=config.get(CoreEdgeClusterSettings.unknown_address_logging_throttle);
  int maxQueueSize=config.get(CoreEdgeClusterSettings.outgoing_queue_size);
  final SenderService senderService=new SenderService(new RaftChannelInitializer(new CoreReplicatedContentMarshal(),logProvider),logProvider,platformModule.monitors,maxQueueSize,new NonBlockingChannels());
  life.add(senderService);
  final MessageLogger<MemberId> messageLogger;
  if (config.get(CoreEdgeClusterSettings.raft_messages_log_enable)) {
    File logsDir=config.get(GraphDatabaseSettings.logs_directory);
    messageLogger=life.add(new BetterMessageLogger<>(myself,raftMessagesLog(logsDir)));
  }
 else {
    messageLogger=new NullMessageLogger<>();
  }
  CopiedStoreRecovery copiedStoreRecovery=new CopiedStoreRecovery(config,platformModule.kernelExtensions.listFactories(),platformModule.pageCache);
  LocalDatabase localDatabase=new LocalDatabase(platformModule.storeDir,copiedStoreRecovery,new StoreFiles(new DefaultFileSystemAbstraction()),platformModule.dataSourceManager,platformModule.dependencies.provideDependency(TransactionIdStore.class),databaseHealthSupplier,logProvider);
  RaftOutbound raftOutbound=new RaftOutbound(discoveryService,senderService,localDatabase,logProvider,logThresholdMillis);
  Outbound<MemberId,RaftMessages.RaftMessage> loggingOutbound=new LoggingOutbound<>(raftOutbound,myself,messageLogger);
  consensusModule=new ConsensusModule(myself,platformModule,raftOutbound,clusterStateDirectory,discoveryService);
  dependencies.satisfyDependency(consensusModule.raftInstance());
  ReplicationModule replicationModule=new ReplicationModule(myself,platformModule,config,consensusModule,loggingOutbound,clusterStateDirectory,fileSystem,databaseHealthSupplier,logProvider);
  coreStateMachinesModule=new CoreStateMachinesModule(myself,platformModule,clusterStateDirectory,databaseHealthSupplier,config,replicationModule.getReplicator(),consensusModule.raftInstance(),dependencies,localDatabase);
  this.idGeneratorFactory=coreStateMachinesModule.idGeneratorFactory;
  this.idTypeConfigurationProvider=coreStateMachinesModule.idTypeConfigurationProvider;
  this.labelTokenHolder=coreStateMachinesModule.labelTokenHolder;
  this.propertyKeyTokenHolder=coreStateMachinesModule.propertyKeyTokenHolder;
  this.relationshipTypeTokenHolder=coreStateMachinesModule.relationshipTypeTokenHolder;
  this.lockManager=coreStateMachinesModule.lockManager;
  this.commitProcessFactory=coreStateMachinesModule.commitProcessFactory;
  CoreServerModule coreServerModule=new CoreServerModule(myself,platformModule,consensusModule,coreStateMachinesModule,replicationModule,clusterStateDirectory,discoveryService,localDatabase,messageLogger);
  editionInvariants(platformModule,dependencies,config,logging,life);
  this.lockManager=dependencies.satisfyDependency(lockManager);
  life.add(CoreStartupProcess.createLifeSupport(platformModule.dataSourceManager,coreStateMachinesModule.replicatedIdGeneratorFactory,coreServerModule.startupLifecycle,consensusModule.raftTimeoutService(),coreServerModule.membershipWaiterLifecycle));
}
