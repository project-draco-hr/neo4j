{
  File dataFile=TargetDirectory.forTest(getClass()).file("dataFile");
  FileChannel dataFileChannel=new RandomAccessFile(dataFile,"rw").getChannel();
  final PersistenceWindowPool pool=new PersistenceWindowPool(dataFile,4,dataFileChannel,50000,true,false,StringLogger.DEV_NULL);
  Thread theTriggeringOne=new Thread(new Runnable(){
    @Override public void run(){
      pool.release(pool.acquire(13,OperationType.READ));
      for (int i=0; i < PersistenceWindowPool.REFRESH_BRICK_COUNT - 3; i++) {
        pool.release(pool.acquire(1,OperationType.READ));
      }
      PersistenceRow row=(PersistenceRow)pool.acquire(1,OperationType.WRITE);
      row.getOffsettedBuffer(1).put(new byte[]{1,2,3,4});
      waitForBreakingToAcquire();
      pool.release(row);
    }
  }
);
  final CountDownLatch theOverwrittenOneHasWrittenItsChanges=new CountDownLatch(1);
  final CountDownLatch theBreakingOneHasLockedTheRow=new CountDownLatch(1);
  Thread theEvilOne=new Thread(new Runnable(){
    @Override public void run(){
      try {
        waitForFirstWriterToWrite();
        PersistenceRow row=(PersistenceRow)pool.acquire(1,OperationType.READ);
        theBreakingOneHasLockedTheRow.countDown();
        theOverwrittenOneHasWrittenItsChanges.await();
        pool.release(row);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  Thread theOverwrittenOne=new Thread(new Runnable(){
    @Override public void run(){
      try {
        theBreakingOneHasLockedTheRow.await();
        LockableWindow window=(LockableWindow)pool.acquire(1,OperationType.WRITE);
        window.getOffsettedBuffer(1).put(new byte[]{5,6,7,8});
        pool.release(window);
        theOverwrittenOneHasWrittenItsChanges.countDown();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  theEvilOne.start();
  theOverwrittenOne.start();
  theTriggeringOne.start();
  theEvilOne.join();
  theTriggeringOne.join();
  theOverwrittenOne.join();
  byte[] finalResult=new byte[4];
  pool.acquire(1,OperationType.READ).getOffsettedBuffer(1).get(finalResult);
  assertTrue(Arrays.toString(finalResult),Arrays.equals(new byte[]{5,6,7,8},finalResult));
  pool.close();
}
