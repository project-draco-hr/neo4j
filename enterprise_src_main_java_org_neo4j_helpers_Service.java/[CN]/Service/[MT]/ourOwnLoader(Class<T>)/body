{
  List<URL> urls=new LinkedList<URL>();
  try {
    Enumeration<URL> resources=Thread.currentThread().getContextClassLoader().getResources("META-INF/services/" + type.getName());
    while (resources.hasMoreElements()) {
      urls.add(resources.nextElement());
    }
  }
 catch (  IOException e) {
    return null;
  }
  return new NestingIterable<T,BufferedReader>(FilteringIterable.notNull(new IterableWrapper<BufferedReader,URL>(urls){
    @Override protected BufferedReader underlyingObjectToObject(    URL url){
      try {
        return new BufferedReader(new InputStreamReader(url.openStream()));
      }
 catch (      IOException e) {
        return null;
      }
    }
  }
)){
    @Override protected Iterator<T> createNestedIterator(    final BufferedReader input){
      return new PrefetchingIterator<T>(){
        @Override protected T fetchNextOrNull(){
          try {
            String line;
            while (null != (line=input.readLine())) {
              try {
                return type.cast(Class.forName(line).newInstance());
              }
 catch (              Exception e) {
              }
catch (              LinkageError e) {
              }
            }
            return null;
          }
 catch (          IOException e) {
            return null;
          }
        }
      }
;
    }
  }
;
}
