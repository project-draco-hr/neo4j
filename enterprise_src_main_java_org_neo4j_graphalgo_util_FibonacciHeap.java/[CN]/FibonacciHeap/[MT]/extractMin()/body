{
  if (minimum == null) {
    return null;
  }
  FibonacciHeapNode minNode=minimum;
  if (minNode.child != null) {
    FibonacciHeapNode child=minNode.child;
    while (minNode.equals(child.parent)) {
      FibonacciHeapNode nextChild=child.right;
      insertInRootList(child);
      child=nextChild;
    }
  }
  minNode.left.right=minNode.right;
  minNode.right.left=minNode.left;
  if (minNode.right.equals(minNode)) {
    minimum=null;
  }
 else {
    minimum=minimum.right;
    consolidate();
  }
  --nrNodes;
  return minNode.key;
}
