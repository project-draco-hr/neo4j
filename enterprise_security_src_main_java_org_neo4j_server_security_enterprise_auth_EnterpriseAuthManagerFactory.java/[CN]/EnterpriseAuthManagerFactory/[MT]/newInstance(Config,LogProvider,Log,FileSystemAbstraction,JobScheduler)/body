{
  List<Realm> realms=new ArrayList<>(2);
  SecurityLog securityLog=getSecurityLog(allegedSecurityLog);
  InternalFlatFileRealm internalRealm=createInternalRealm(config,logProvider,fileSystem,jobScheduler);
  if (config.get(SecuritySettings.internal_authentication_enabled) || config.get(SecuritySettings.internal_authorization_enabled)) {
    realms.add(internalRealm);
  }
  if (config.get(SecuritySettings.ldap_authentication_enabled) || config.get(SecuritySettings.ldap_authorization_enabled)) {
    realms.add(new LdapRealm(config,securityLog));
  }
  Boolean pluginAuthenticationEnabled=config.get(SecuritySettings.plugin_authentication_enabled);
  Boolean pluginAuthorizationEnabled=config.get(SecuritySettings.plugin_authorization_enabled);
  if (pluginAuthenticationEnabled && pluginAuthorizationEnabled) {
    Iterable<AuthPlugin> authPlugins=Service.load(AuthPlugin.class);
    for (    AuthPlugin plugin : authPlugins) {
      PluginRealm pluginRealm=new PluginRealm(plugin);
      realms.add(pluginRealm);
    }
  }
  if (pluginAuthenticationEnabled) {
    Iterable<AuthenticationPlugin> authenticationPlugins=Service.load(AuthenticationPlugin.class);
    for (    AuthenticationPlugin plugin : authenticationPlugins) {
      PluginRealm pluginRealm=new PluginRealm(plugin,null);
      realms.add(pluginRealm);
    }
  }
  if (pluginAuthorizationEnabled) {
    Iterable<AuthorizationPlugin> authorizationPlugins=Service.load(AuthorizationPlugin.class);
    for (    AuthorizationPlugin plugin : authorizationPlugins) {
      PluginRealm pluginRealm=new PluginRealm(null,plugin);
      realms.add(pluginRealm);
    }
  }
  long ttl=config.get(SecuritySettings.auth_cache_ttl);
  int maxCapacity=config.get(SecuritySettings.auth_cache_max_capacity);
  return new MultiRealmAuthManager(internalRealm,realms,new ShiroCaffeineCache.Manager(Ticker.systemTicker(),ttl,maxCapacity),securityLog,config.get(EnterpriseEditionSettings.security_log_successful_authentication));
}
