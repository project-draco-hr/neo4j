{
  Outcome<MEMBER> outcome=new Outcome<>(CANDIDATE,ctx);
switch (message.type()) {
case HEARTBEAT:
{
      RaftMessages.Heartbeat<MEMBER> req=(RaftMessages.Heartbeat<MEMBER>)message;
      if (req.leaderTerm() < ctx.term()) {
        break;
      }
      outcome.setNextRole(FOLLOWER);
      Heart.beat(ctx,outcome,(RaftMessages.Heartbeat<MEMBER>)message);
      break;
    }
case APPEND_ENTRIES_REQUEST:
{
    RaftMessages.AppendEntries.Request<MEMBER> req=(RaftMessages.AppendEntries.Request<MEMBER>)message;
    if (req.leaderTerm() < ctx.term()) {
      RaftMessages.AppendEntries.Response<MEMBER> appendResponse=new RaftMessages.AppendEntries.Response<>(ctx.myself(),ctx.term(),false,req.prevLogIndex(),ctx.entryLog().appendIndex());
      outcome.addOutgoingMessage(new RaftMessages.Directed<>(req.from(),appendResponse));
      break;
    }
    outcome.setNextRole(FOLLOWER);
    Appending.handleAppendEntriesRequest(ctx,outcome,req);
    break;
  }
case VOTE_RESPONSE:
{
  RaftMessages.Vote.Response<MEMBER> res=(RaftMessages.Vote.Response<MEMBER>)message;
  if (res.term() > ctx.term()) {
    outcome.setNextTerm(res.term());
    outcome.setNextRole(FOLLOWER);
    break;
  }
 else   if (res.term() < ctx.term() || !res.voteGranted()) {
    break;
  }
  if (!res.from().equals(ctx.myself())) {
    outcome.addVoteForMe(res.from());
  }
  if (isQuorum(ctx.votingMembers().size(),outcome.getVotesForMe().size())) {
    log.info("In term %d %s ELECTED AS LEADER voted for by %s%n",ctx.term(),ctx.myself(),outcome.getVotesForMe());
    outcome.setLeader(ctx.myself());
    Appending.appendNewEntry(ctx,outcome,new NewLeaderBarrier());
    outcome.setLastLogIndexBeforeWeBecameLeader(ctx.entryLog().appendIndex());
    outcome.setNextRole(LEADER);
  }
  break;
}
case VOTE_REQUEST:
{
RaftMessages.Vote.Request<MEMBER> req=(RaftMessages.Vote.Request<MEMBER>)message;
if (req.term() > ctx.term()) {
  outcome.getVotesForMe().clear();
  outcome.setNextRole(FOLLOWER);
  Voting.handleVoteRequest(ctx,outcome,req);
  break;
}
outcome.addOutgoingMessage(new RaftMessages.Directed<>(req.from(),new RaftMessages.Vote.Response<>(ctx.myself(),outcome.getTerm(),false)));
break;
}
case ELECTION_TIMEOUT:
{
outcome.setNextRole(FOLLOWER);
break;
}
}
return outcome;
}
