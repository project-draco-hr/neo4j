{
  byte[] encodedExpectedVersion=UTF8.encode(expectedVersion);
  int maximumNumberOfPagesVersionSpans=encodedExpectedVersion.length / pagedFile.pageSize() + 2;
  String version=null;
  try (PageCursor pageCursor=pagedFile.io(Math.max(pagedFile.getLastPageId() + 1 - maximumNumberOfPagesVersionSpans,0),PagedFile.PF_SHARED_LOCK)){
    int currentPage=0;
    byte[] allData=new byte[pagedFile.pageSize() * maximumNumberOfPagesVersionSpans];
    while (pageCursor.next()) {
      byte[] data=new byte[pagedFile.pageSize()];
      do {
        pageCursor.getBytes(data);
      }
 while (pageCursor.shouldRetry());
      System.arraycopy(data,0,allData,currentPage * data.length,data.length);
      currentPage++;
    }
    int offset=findPattern(allData,UTF8.encode(expectedVersion.split(" ")[0]));
    if (offset != -1) {
      version=new String(allData,offset,encodedExpectedVersion.length,Charsets.UTF_8);
    }
  }
   return version;
}
