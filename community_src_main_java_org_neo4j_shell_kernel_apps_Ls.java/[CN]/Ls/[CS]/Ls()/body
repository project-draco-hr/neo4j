{
  super();
  this.addOptionDefinition("b",new OptionDefinition(OptionValueType.NONE,"Brief summary instead of full content"));
  this.addOptionDefinition("d",new OptionDefinition(OptionValueType.MUST,"Direction filter for relationships: " + this.directionAlternatives()));
  this.addOptionDefinition("v",new OptionDefinition(OptionValueType.NONE,"Verbose mode"));
  this.addOptionDefinition("p",new OptionDefinition(OptionValueType.NONE,"Lists properties"));
  this.addOptionDefinition("r",new OptionDefinition(OptionValueType.NONE,"Lists relationships"));
  this.addOptionDefinition("f",new OptionDefinition(OptionValueType.MUST,"Filters property keys/values. Supplied either as a single value " + "or as a JSON string where both keys and values can contain regex. " + "Starting/ending {} brackets are optional. Examples:\n"+ "\"username\"\n"+ "   property/relationship 'username' gets listed\n"+ "\".*name: ma.*, age: ''\"\n"+ "   properties with keys matching '.*name' and values matching ma.*'\n"+ "   gets listed, as well as the 'age' property. Also "+ "relationships\n"+ "  matching"+ "  '.*name' or 'age' gets listed"));
  this.addOptionDefinition("i",new OptionDefinition(OptionValueType.NONE,"Filters are case-insensitive (case-sensitive by default)"));
  this.addOptionDefinition("l",new OptionDefinition(OptionValueType.NONE,"Filters matches more loosely, i.e. it's considered a match if just " + "a part of a value matches the pattern, not necessarily the whole value"));
}
