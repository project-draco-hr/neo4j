{
  life.add(new BranchedDataMigrator(storeDir));
  masterDelegateInvocationHandler=new DelegateInvocationHandler<>(Master.class);
  master=(Master)Proxy.newProxyInstance(Master.class.getClassLoader(),new Class[]{Master.class},masterDelegateInvocationHandler);
  InstanceId serverId=config.get(ClusterSettings.server_id);
  requestContextFactory=dependencies.satisfyDependency(new RequestContextFactory(serverId.toIntegerIndex(),getDependencyResolver()));
  this.responseUnpacker=dependencies.satisfyDependency(new TransactionCommittingResponseUnpacker(getDependencyResolver()));
  kernelProvider=new Provider<KernelAPI>(){
    @Override public KernelAPI instance(){
      return neoDataSource.getKernel();
    }
  }
;
  super.create();
  life.add(requestContextFactory);
  life.add(responseUnpacker);
  UpdatePuller updatePuller=dependencies.satisfyDependency(life.add(new UpdatePuller(memberStateMachine,requestContextFactory,master,lastUpdateTime,logging)));
  dependencies.satisfyDependency(life.add(new UpdatePullerClient(config.get(HaSettings.pull_interval),jobScheduler,logging,updatePuller,availabilityGuard)));
  dependencies.satisfyDependency(life.add(new UpdatePullingTransactionObligationFulfiller(updatePuller,memberStateMachine,serverId,dependencies)));
  stateSwitchTimeoutMillis=config.get(HaSettings.state_switch_timeout);
  life.add(paxosLife);
  life.add(new DatabaseAvailability(availabilityGuard,transactionMonitor));
  life.add(new StartupWaiter());
  diagnosticsManager.appendProvider(new HighAvailabilityDiagnostics(memberStateMachine,clusterClient));
}
