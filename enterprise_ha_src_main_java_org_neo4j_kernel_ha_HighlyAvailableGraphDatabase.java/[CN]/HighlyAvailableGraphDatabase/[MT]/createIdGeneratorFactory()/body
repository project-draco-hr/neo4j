{
  idGeneratorFactory=new HaIdGeneratorFactory(masterDelegateInvocationHandler,logService.getInternalLogProvider(),requestContextFactory);
  Log userLog=logService.getUserLog(HighAvailabilityModeSwitcher.class);
  invalidEpochHandler=new InvalidEpochExceptionHandler(){
    @Override public void handle(){
      highAvailabilityModeSwitcher.forceElections();
    }
  }
;
  MasterClientResolver masterClientResolver=new MasterClientResolver(logService.getInternalLogProvider(),responseUnpacker,invalidEpochHandler,config.get(HaSettings.read_timeout).intValue(),config.get(HaSettings.lock_read_timeout).intValue(),config.get(HaSettings.max_concurrent_channels_per_slave),config.get(HaSettings.com_chunk_size).intValue());
  SwitchToSlave switchToSlaveInstance=new SwitchToSlave(logService,config,getDependencyResolver(),(HaIdGeneratorFactory)idGeneratorFactory,masterDelegateInvocationHandler,clusterMemberAvailability,requestContextFactory,kernelExtensions.listFactories(),masterClientResolver,monitors.newMonitor(ByteCounterMonitor.class,SlaveServer.class),monitors.newMonitor(RequestMonitor.class,SlaveServer.class),monitors.newMonitor(SwitchToSlave.Monitor.class),monitors.newMonitor(StoreCopyClient.Monitor.class));
  SwitchToMaster switchToMasterInstance=new SwitchToMaster(logService,this,(HaIdGeneratorFactory)idGeneratorFactory,config,dependencies.provideDependency(SlaveFactory.class),masterDelegateInvocationHandler,clusterMemberAvailability,dataSourceManager,monitors.newMonitor(ByteCounterMonitor.class,MasterServer.class),monitors.newMonitor(RequestMonitor.class,MasterServer.class),monitors.newMonitor(MasterImpl.Monitor.class,MasterImpl.class));
  highAvailabilityModeSwitcher=new HighAvailabilityModeSwitcher(switchToSlaveInstance,switchToMasterInstance,clusterClient,clusterMemberAvailability,getDependencyResolver(),config.get(ClusterSettings.server_id),logService);
  clusterClient.addBindingListener(highAvailabilityModeSwitcher);
  memberStateMachine.addHighAvailabilityMemberListener(highAvailabilityModeSwitcher);
  paxosLife.add(highAvailabilityModeSwitcher);
  ((HaIdGeneratorFactory)idGeneratorFactory).switchToMaster();
  return idGeneratorFactory;
}
