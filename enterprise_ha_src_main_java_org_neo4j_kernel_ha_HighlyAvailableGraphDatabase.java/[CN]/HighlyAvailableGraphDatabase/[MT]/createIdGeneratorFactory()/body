{
  idGeneratorFactory=new HaIdGeneratorFactory(masterDelegateInvocationHandler,logging,requestContextFactory);
  InvalidEpochExceptionHandler invalidEpochHandler=new InvalidEpochExceptionHandler(){
    @Override public void handle(){
      highAvailabilityModeSwitcher.forceElections();
    }
  }
;
  MasterClientResolver masterClientResolver=new MasterClientResolver(logging,invalidEpochHandler,config.get(HaSettings.read_timeout).intValue(),config.get(HaSettings.lock_read_timeout).intValue(),config.get(HaSettings.max_concurrent_channels_per_slave),config.get(HaSettings.com_chunk_size).intValue());
  SwitchToSlave switchToSlave=new SwitchToSlave(logging.getConsoleLog(HighAvailabilityModeSwitcher.class),config,getDependencyResolver(),(HaIdGeneratorFactory)idGeneratorFactory,logging,masterDelegateInvocationHandler,clusterMemberAvailability,requestContextFactory,masterClientResolver);
  SwitchToMaster switchToMaster=new SwitchToMaster(logging,msgLog,this,(HaIdGeneratorFactory)idGeneratorFactory,config,getDependencyResolver(),masterDelegateInvocationHandler,clusterMemberAvailability);
  highAvailabilityModeSwitcher=new HighAvailabilityModeSwitcher(switchToSlave,switchToMaster,clusterClient,clusterMemberAvailability,logging.getMessagesLog(HighAvailabilityModeSwitcher.class));
  clusterClient.addBindingListener(highAvailabilityModeSwitcher);
  memberStateMachine.addHighAvailabilityMemberListener(highAvailabilityModeSwitcher);
  paxosLife.add(highAvailabilityModeSwitcher);
  if (compatibilityMode) {
    compatibilityLifecycle.add(1,highAvailabilityModeSwitcher);
    life.add(highAvailabilityModeSwitcher);
  }
  ((HaIdGeneratorFactory)idGeneratorFactory).switchToMaster();
  return idGeneratorFactory;
}
