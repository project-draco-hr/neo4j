{
  memberStateMachine.addHighAvailabilityMemberListener(new HighAvailabilityMemberListener(){
    @Override public void masterIsElected(    HighAvailabilityMemberChangeEvent event){
    }
    @Override public void masterIsAvailable(    HighAvailabilityMemberChangeEvent event){
      if (event.getOldState().equals(HighAvailabilityMemberState.TO_MASTER) && event.getNewState().equals(HighAvailabilityMemberState.MASTER)) {
        doRecovery();
      }
    }
    @Override public void slaveIsAvailable(    HighAvailabilityMemberChangeEvent event){
      if (event.getOldState().equals(HighAvailabilityMemberState.TO_SLAVE) && event.getNewState().equals(HighAvailabilityMemberState.SLAVE)) {
        doRecovery();
      }
    }
    @Override public void instanceStops(    HighAvailabilityMemberChangeEvent event){
    }
    private void doRecovery(){
      try {
synchronized (xaDataSourceManager) {
          HighlyAvailableGraphDatabase.this.doAfterRecoveryAndStartup();
        }
      }
 catch (      Throwable throwable) {
        msgLog.error("Error while trying to do recovery",throwable);
        try {
          memberStateMachine.stop();
        }
 catch (        Throwable throwable1) {
          msgLog.warn("Could not stop",throwable1);
        }
        try {
          memberStateMachine.start();
        }
 catch (        Throwable throwable1) {
          msgLog.warn("Could not start",throwable1);
        }
      }
    }
  }
);
}
