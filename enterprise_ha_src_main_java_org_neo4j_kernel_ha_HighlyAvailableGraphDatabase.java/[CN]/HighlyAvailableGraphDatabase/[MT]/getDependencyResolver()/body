{
  return new DependencyResolver(){
    @Override public <T>T resolveDependency(    Class<T> type) throws IllegalArgumentException {
      T result;
      try {
        result=dependencyResolver.resolveDependency(type);
      }
 catch (      IllegalArgumentException e) {
        if (HighAvailabilityEvents.class.isAssignableFrom(type)) {
          result=(T)clusterEvents;
        }
 else         if (UpdatePuller.class.isAssignableFrom(type)) {
          result=(T)updatePuller;
        }
 else         if (Slaves.class.isAssignableFrom(type)) {
          result=(T)slaves;
        }
 else         if (ClusterClient.class.isAssignableFrom(type)) {
          result=(T)clusterClient;
        }
 else {
          throw e;
        }
      }
      return result;
    }
  }
;
}
