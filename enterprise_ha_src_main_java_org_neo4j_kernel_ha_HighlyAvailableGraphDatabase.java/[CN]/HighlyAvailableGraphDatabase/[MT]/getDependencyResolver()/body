{
  return new DependencyResolver.Adapter(){
    @Override public <T>T resolveDependency(    Class<T> type,    SelectionStrategy<T> selector){
      T result;
      try {
        result=dependencyResolver.resolveDependency(type);
      }
 catch (      IllegalArgumentException e) {
        if (ClusterMemberEvents.class.isAssignableFrom(type)) {
          result=type.cast(clusterEvents);
        }
 else         if (ClusterMemberAvailability.class.isAssignableFrom(type)) {
          result=type.cast(clusterMemberAvailability);
        }
 else         if (UpdatePuller.class.isAssignableFrom(type)) {
          result=type.cast(updatePuller);
        }
 else         if (Slaves.class.isAssignableFrom(type)) {
          result=type.cast(slaves);
        }
 else         if (ClusterClient.class.isAssignableFrom(type)) {
          result=type.cast(clusterClient);
        }
 else         if (ClusterMembers.class.isAssignableFrom(type)) {
          result=type.cast(members);
        }
 else {
          throw e;
        }
      }
      return selector.select(type,option(result));
    }
  }
;
}
