{
  final DelegateInvocationHandler<TransactionCommitProcess> txCommitProcessDelegate=new DelegateInvocationHandler<>(TransactionCommitProcess.class);
  final TransactionCommitProcess txCommitProcess=(TransactionCommitProcess)Proxy.newProxyInstance(TransactionCommitProcess.class.getClassLoader(),new Class[]{TransactionCommitProcess.class},txCommitProcessDelegate);
  return new CommitProcessFactory(){
    @Override public TransactionCommitProcess create(    LogicalTransactionStore logicalTransactionStore,    KernelHealth kernelHealth,    NeoStore neoStore,    TransactionRepresentationStoreApplier storeApplier,    boolean recovery){
      new CommitProcessSwitcher(logicalTransactionStore,kernelHealth,neoStore,storeApplier,masterDelegateInvocationHandler,txCommitProcessDelegate,requestContextFactory,memberStateMachine,availabilityGuard);
      return txCommitProcess;
    }
  }
;
}
