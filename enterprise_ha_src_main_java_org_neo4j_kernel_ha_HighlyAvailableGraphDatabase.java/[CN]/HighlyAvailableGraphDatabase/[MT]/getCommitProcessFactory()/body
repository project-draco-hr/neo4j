{
  final DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate=new DelegateInvocationHandler<>(TransactionCommitProcess.class);
  DefaultSlaveFactory slaveFactory=dependencies.satisfyDependency(new DefaultSlaveFactory(logging,monitors,config.get(HaSettings.com_chunk_size).intValue()));
  Slaves slaves=dependencies.satisfyDependency(life.add(new HighAvailabilitySlaves(members,clusterClient,slaveFactory)));
  final TransactionPropagator pusher=life.add(new TransactionPropagator(TransactionPropagator.from(config),msgLog,slaves,new CommitPusher(jobScheduler)));
  return new CommitProcessFactory(){
    @Override public TransactionCommitProcess create(    LogicalTransactionStore logicalTransactionStore,    KernelHealth kernelHealth,    NeoStore neoStore,    TransactionRepresentationStoreApplier storeApplier,    NeoStoreInjectedTransactionValidator txValidator,    IndexUpdatesValidator indexUpdatesValidator,    Config config){
      if (config.get(GraphDatabaseSettings.read_only)) {
        return defaultCommitProcessFactory.create(logicalTransactionStore,kernelHealth,neoStore,storeApplier,txValidator,indexUpdatesValidator,config);
      }
 else {
        TransactionCommitProcess inner=defaultCommitProcessFactory.create(logicalTransactionStore,kernelHealth,neoStore,storeApplier,txValidator,indexUpdatesValidator,config);
        paxosLife.add(new CommitProcessSwitcher(pusher,master,commitProcessDelegate,requestContextFactory,highAvailabilityModeSwitcher,txValidator,inner));
        return (TransactionCommitProcess)Proxy.newProxyInstance(TransactionCommitProcess.class.getClassLoader(),new Class[]{TransactionCommitProcess.class},commitProcessDelegate);
      }
    }
  }
;
}
