{
  boolean success=false;
  try (CommitEvent commitEvent=transactionEvent.beginCommitEvent()){
    if (hasDataChanges()) {
      try {
        hooksState=hooks.beforeCommit(txState,this,storageEngine.storeReadLayer());
        if (hooksState != null && hooksState.failed()) {
          TransactionHookException cause=hooksState.failure();
          throw new TransactionFailureException(Status.Transaction.HookFailed,cause,"");
        }
      }
  finally {
        beforeHookInvoked=true;
      }
    }
    if (hasChanges()) {
      Collection<StorageCommand> extractedCommands=new ArrayList<>();
      storageEngine.createCommands(extractedCommands,txState,locks,lastTransactionIdWhenStarted);
      if (legacyIndexTransactionState.hasChanges()) {
        legacyIndexTransactionState.extractCommands(extractedCommands);
      }
      if (!extractedCommands.isEmpty()) {
        PhysicalTransactionRepresentation transactionRepresentation=new PhysicalTransactionRepresentation(extractedCommands);
        TransactionHeaderInformation headerInformation=headerInformationFactory.create();
        transactionRepresentation.setHeader(headerInformation.getAdditionalHeader(),headerInformation.getMasterId(),headerInformation.getAuthorId(),startTimeMillis,lastTransactionIdWhenStarted,clock.currentTimeMillis(),locks.getLockSessionId());
        commitProcess.commit(new TransactionToApply(transactionRepresentation),commitEvent,INTERNAL);
      }
    }
    success=true;
  }
 catch (  ConstraintValidationKernelException|CreateConstraintFailureException e) {
    throw new ConstraintViolationTransactionFailureException(e.getUserMessage(new KeyReadTokenNameLookup(operations.keyReadOperations())),e);
  }
 finally {
    if (!success) {
      rollback();
    }
 else {
      afterCommit();
    }
  }
}
