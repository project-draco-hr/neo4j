{
  boolean success=false;
  try (CommitEvent commitEvent=transactionEvent.beginCommitEvent()){
    if (hasTxStateWithChanges()) {
      if (txState.hasDataChanges()) {
        try {
          if ((hooksState=hooks.beforeCommit(txState,this,storeLayer)) != null && hooksState.failed()) {
            throw new TransactionFailureException(Status.Transaction.HookFailed,hooksState.failure(),"");
          }
        }
  finally {
          beforeHookInvoked=true;
        }
      }
      locks.prepare();
      context.init(locks.delegate());
      prepareRecordChangesFromTransactionState();
    }
    if (hasChanges()) {
      try (LockGroup lockGroup=new LockGroup()){
        extractedCommands.clear();
        recordState.extractCommands(extractedCommands);
        legacyIndexTransactionState.extractCommands(extractedCommands);
        counts.extractCommands(extractedCommands);
        if (!extractedCommands.isEmpty()) {
          PhysicalTransactionRepresentation transactionRepresentation=new PhysicalTransactionRepresentation(extractedCommands);
          TransactionHeaderInformation headerInformation=headerInformationFactory.create();
          transactionRepresentation.setHeader(headerInformation.getAdditionalHeader(),headerInformation.getMasterId(),headerInformation.getAuthorId(),startTimeMillis,lastTransactionIdWhenStarted,clock.currentTimeMillis(),locks.getLockSessionId());
          commitProcess.commit(transactionRepresentation,lockGroup,commitEvent,INTERNAL);
        }
      }
     }
    success=true;
  }
 catch (  ConstraintValidationKernelException|CreateConstraintFailureException e) {
    throw new ConstraintViolationTransactionFailureException(e.getUserMessage(new KeyReadTokenNameLookup(operations.keyReadOperations())),e);
  }
 finally {
    if (!success) {
      rollback();
    }
 else {
      afterCommit();
    }
  }
}
