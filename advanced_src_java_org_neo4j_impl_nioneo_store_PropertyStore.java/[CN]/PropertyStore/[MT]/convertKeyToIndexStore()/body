{
  if (!this.getStoreOk()) {
    super.makeStoreOk();
  }
  if (!stringPropertyStore.getStoreOk()) {
    stringPropertyStore.makeStoreOk();
  }
  DynamicStringStore oldKeyStore=new DynamicStringStore(getStorageFileName() + ".keys");
  if (!oldKeyStore.getStoreOk()) {
    oldKeyStore.makeStoreOk();
  }
  System.out.println("Converting property keys to property indexes...");
  PropertyIndexStore.createStore(getStorageFileName() + ".index");
  propertyIndexStore=new PropertyIndexStore(getStorageFileName() + ".index",getConfig());
  DynamicStringStore.createStore("new_string_store",STRING_STORE_BLOCK_SIZE);
  DynamicStringStore newStringStore=new DynamicStringStore("new_string_store",getConfig());
  int maxId=getHighestPossibleIdInUse();
  System.out.println("Highest property id: " + maxId);
  Map<String,Integer> keyToIndex=new HashMap<String,Integer>();
  ByteBuffer buf=ByteBuffer.allocate(17);
  for (long i=0; i <= maxId; i++) {
    long position=i * RECORD_SIZE;
    getFileChannel().position(position);
    buf.clear();
    if (getFileChannel().read(buf) != 17) {
      break;
    }
    buf.flip();
    if (buf.get() == Record.IN_USE.byteValue()) {
      int type=buf.getInt();
      int oldKeyId=buf.getInt();
      int newStringBlockId=-1;
      if (type == 2) {
        int oldStartId=(int)buf.getLong();
        String oldString=getOldStringFromStore(oldStartId,stringPropertyStore);
        newStringBlockId=newStringStore.nextId();
        int length=oldString.length();
        char[] chars=new char[length];
        oldString.getChars(0,length,chars,0);
        Collection<DynamicRecord> allRecords=newStringStore.allocateRecords(newStringBlockId,chars);
        for (        DynamicRecord record : allRecords) {
          newStringStore.updateRecord(record);
        }
      }
 else       if (type == 0) {
        buf.clear();
        buf.putInt(PropertyType.BYTE.intValue());
        buf.flip();
        getFileChannel().position(position + 1);
        if (getFileChannel().write(buf) != 4) {
          throw new IOException("did not write 4 bytes...");
        }
      }
      String oldKey=getOldStringFromStore(oldKeyId,oldKeyStore);
      int newIndexKeyId=-1;
      if (!keyToIndex.containsKey(oldKey)) {
        System.out.println("Found: " + oldKey);
        newIndexKeyId=createNewPropertyIndex(oldKey);
        keyToIndex.put(oldKey,newIndexKeyId);
      }
 else {
        newIndexKeyId=keyToIndex.get(oldKey);
      }
      buf.clear();
      buf.putInt(newIndexKeyId);
      int bytesToWrite=4;
      if (newStringBlockId != -1) {
        bytesToWrite+=8;
        buf.putLong(newStringBlockId);
      }
      buf.flip();
      getFileChannel().position(position + 5);
      if (getFileChannel().write(buf) != bytesToWrite) {
        throw new IOException("did not write " + bytesToWrite + " bytes...");
      }
    }
  }
  propertyIndexStore.close();
  newStringStore.close();
  stringPropertyStore.close();
  File oldStringStore=new File(getStorageFileName() + ".strings");
  oldStringStore.delete();
  oldStringStore=new File(getStorageFileName() + ".strings.blockid");
  if (oldStringStore.exists()) {
    if (!oldStringStore.delete()) {
      System.out.println("Unable to delete old string store: " + oldStringStore.getName());
    }
  }
  oldStringStore=new File(getStorageFileName() + ".strings.id");
  if (oldStringStore.exists()) {
    if (!oldStringStore.delete()) {
      System.out.println("Unable to delete old string store: " + oldStringStore.getName());
    }
  }
  File newStringStoreFile=new File(newStringStore.getStorageFileName());
  if (!newStringStoreFile.renameTo(new File(stringPropertyStore.getStorageFileName()))) {
    throw new RuntimeException("Unable to move new string store");
  }
  new File("new_string_store.id").delete();
  stringPropertyStore=new DynamicStringStore(getStorageFileName() + ".strings");
  stringPropertyStore.makeStoreOk();
}
