{
  int relationTypes=2;
  int labels=3;
  NodeLabelsCache.Client client=mock(NodeLabelsCache.Client.class);
  when(nodeLabelCache.newClient()).thenReturn(client);
  when(nodeLabelCache.get(eq(client),eq(1L),any(int[].class))).thenReturn(new int[]{0,2});
  when(nodeLabelCache.get(eq(client),eq(2L),any(int[].class))).thenReturn(new int[]{1});
  when(nodeLabelCache.get(eq(client),eq(3L),any(int[].class))).thenReturn(new int[]{1,2});
  when(nodeLabelCache.get(eq(client),eq(4L),any(int[].class))).thenReturn(new int[]{});
  RelationshipCountsProcessor countsProcessor=new RelationshipCountsProcessor(nodeLabelCache,labels,relationTypes,countsUpdater,NumberArrayFactory.AUTO);
  countsProcessor.process(1,0,3);
  countsProcessor.process(2,1,4);
  countsProcessor.done();
  verify(countsUpdater).incrementRelationshipCount(ANY,ANY,ANY,2L);
  verify(countsUpdater).incrementRelationshipCount(ANY,0,ANY,1L);
  verify(countsUpdater).incrementRelationshipCount(ANY,1,ANY,1L);
  verify(countsUpdater).incrementRelationshipCount(0,0,ANY,1L);
  verify(countsUpdater).incrementRelationshipCount(2,0,ANY,1L);
  verify(countsUpdater).incrementRelationshipCount(ANY,0,1,1L);
  verify(countsUpdater).incrementRelationshipCount(ANY,0,2,1L);
}
