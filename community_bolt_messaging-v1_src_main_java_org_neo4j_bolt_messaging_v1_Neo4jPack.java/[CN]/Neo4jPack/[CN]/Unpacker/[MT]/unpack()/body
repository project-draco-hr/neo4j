{
  PackType valType=peekNextType();
switch (valType) {
case TEXT:
    return unpackText();
case INTEGER:
  return unpackLong();
case FLOAT:
return unpackDouble();
case BOOLEAN:
return unpackBoolean();
case NULL:
unpackNull();
return null;
case LIST:
{
int size=(int)unpackListHeader();
if (size == 0) {
return Collections.EMPTY_LIST;
}
ArrayList<Object> vals=new ArrayList<>(size);
for (int j=0; j < size; j++) {
vals.add(unpack());
}
return vals;
}
case MAP:
return unpackMap();
case STRUCT:
{
unpackStructHeader();
char signature=unpackStructSignature();
switch (signature) {
case NODE:
{
return ValueNode.unpackFields(this);
}
case RELATIONSHIP:
{
return ValueRelationship.unpackFields(this);
}
case UNBOUND_RELATIONSHIP:
{
return ValueUnboundRelationship.unpackFields(this);
}
case PATH:
{
return pathUnpacker.unpackFields(this);
}
default :
throw new BoltIOException(Status.Request.InvalidFormat,"Unknown struct type: " + signature);
}
}
default :
throw new BoltIOException(Status.Request.InvalidFormat,"Unknown value type: " + valType);
}
}
