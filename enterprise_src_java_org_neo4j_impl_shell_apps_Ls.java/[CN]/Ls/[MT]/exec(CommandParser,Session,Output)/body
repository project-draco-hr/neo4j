{
  boolean verbose=parser.options().containsKey("v");
  boolean displayValues=verbose || !parser.options().containsKey("q");
  boolean displayProperties=verbose || parser.options().containsKey("p");
  boolean displayRelationships=verbose || parser.options().containsKey("r");
  if (!displayProperties && !displayRelationships) {
    displayProperties=true;
    displayRelationships=true;
  }
  Node node=null;
  if (parser.arguments().isEmpty()) {
    node=this.getCurrentNode(session);
  }
 else {
    node=this.getNodeById(Long.parseLong(parser.arguments().get(0)));
  }
  this.displayProperties(node,out,displayProperties,displayValues,verbose);
  this.displayRelationships(parser,node,out,displayRelationships);
  return null;
}
