{
  return argThat(new TypeSafeMatcher<Document>(){
    @Override protected boolean matchesSafely(    Document item){
      return equal(fields(document),fields(item));
    }
    @Override public void describeTo(    Description description){
      description.appendValue(document);
    }
    private Map<String,IndexableField> fields(    Document doc){
      Map<String,IndexableField> these=new HashMap<>();
      for (      IndexableField field : doc.getFields()) {
        these.put(field.name(),field);
      }
      return these;
    }
    boolean equal(    Map<String,IndexableField> these,    Map<String,IndexableField> those){
      if (!these.keySet().equals(those.keySet())) {
        return false;
      }
      for (      Map.Entry<String,IndexableField> entry : these.entrySet()) {
        if (!equal(entry.getValue(),those.get(entry.getKey()))) {
          return false;
        }
      }
      return true;
    }
    boolean equal(    IndexableField lhs,    IndexableField rhs){
      if (lhs.binaryValue() != null && rhs.binaryValue() != null) {
        return Arrays.equals(lhs.binaryValue().bytes,rhs.binaryValue().bytes);
      }
      return lhs.stringValue().equals(rhs.stringValue());
    }
  }
);
}
