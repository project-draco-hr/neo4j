{
  if (start.equals(end)) {
    return Arrays.asList(Path.singular(start));
  }
  Map<Integer,List<Path>> hits=new HashMap<Integer,List<Path>>();
  Collection<Long> sharedVisitedRels=new HashSet<Long>();
  FrozenDepth sharedFrozenDepth=new FrozenDepth();
  MutableBoolean sharedStop=new MutableBoolean();
  MutableInteger sharedCurrentDepth=new MutableInteger();
  final DirectionData startData=new DirectionData("start",start,sharedVisitedRels,sharedFrozenDepth,sharedStop,sharedCurrentDepth);
  final DirectionData endData=new DirectionData("end",end,sharedVisitedRels,sharedFrozenDepth,sharedStop,sharedCurrentDepth);
  while (startData.hasNext() || endData.hasNext()) {
    goOneStep(startData,endData,hits,stopAsap,startData);
    goOneStep(endData,startData,hits,stopAsap,startData);
  }
  return least(hits);
}
