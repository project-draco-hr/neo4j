{
  if (key == null) {
    throw new IllegalArgumentException("Null parameter.");
  }
  acquireLock(this,LockType.WRITE);
  NodeCommands nodeCommand=null;
  try {
    PropertyIndex index=null;
    for (    PropertyIndex cachedIndex : PropertyIndex.index(key)) {
      Property property=propertyMap.get(cachedIndex.getKeyId());
      if (property == null) {
        if (ensureFullProperties()) {
          property=propertyMap.get(cachedIndex.getKeyId());
          if (property != null) {
            index=cachedIndex;
            break;
          }
        }
      }
    }
    if (index == null) {
      ensureFullProperties();
      Property property=null;
      for (      int keyId : propertyMap.keySet()) {
        PropertyIndex indexToCheck=PropertyIndex.getIndexFor(keyId);
        if (indexToCheck.getKey().equals(key)) {
          property=propertyMap.get(indexToCheck.getKeyId());
          index=indexToCheck;
          break;
        }
      }
      if (property == null) {
        return null;
      }
    }
    nodeCommand=new NodeCommands();
    nodeCommand.setNode(this);
    nodeCommand.initRemoveProperty(doGetProperty(index).getId(),index);
    nodeCommand.execute();
    EventManager em=EventManager.getManager();
    EventData eventData=new EventData(nodeCommand);
    if (!em.generateProActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData)) {
      setRollbackOnly();
      nodeCommand.undo();
      throw new NotFoundException("Generate pro-active event failed, " + "unable to remove property[" + key + "] from "+ this);
    }
    em.generateReActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData);
    return nodeCommand.getOldProperty();
  }
 catch (  ExecuteFailedException e) {
    if (nodeCommand != null) {
      nodeCommand.undo();
    }
    throw new NotFoundException("Failed executing command " + "while removing property[" + key + "] on "+ this,e);
  }
 finally {
    releaseLock(this,LockType.WRITE);
  }
}
