{
  this.channel=channel;
  byte commandType=0;
  while (commandType == 0) {
    commandType=channel.get();
  }
  Command command;
switch (commandType) {
case NeoCommandType.NODE_COMMAND:
{
      command=new Command.NodeCommand();
      break;
    }
case NeoCommandType.PROP_COMMAND:
{
    command=new Command.PropertyCommand();
    break;
  }
case NeoCommandType.PROP_INDEX_COMMAND:
{
  command=new Command.PropertyKeyTokenCommand();
  break;
}
case NeoCommandType.REL_COMMAND:
{
command=new Command.RelationshipCommand();
break;
}
case NeoCommandType.REL_TYPE_COMMAND:
{
command=new Command.RelationshipTypeTokenCommand();
break;
}
case NeoCommandType.LABEL_KEY_COMMAND:
{
command=new Command.LabelTokenCommand();
break;
}
case NeoCommandType.NEOSTORE_COMMAND:
{
command=new Command.NeoStoreCommand();
break;
}
case NeoCommandType.SCHEMA_RULE_COMMAND:
{
command=new Command.SchemaRuleCommand();
break;
}
case NeoCommandType.NONE:
{
command=null;
break;
}
default :
{
throw new IOException("Unknown command type[" + commandType + "]");
}
}
if (command != null && !command.handle(reader)) {
return null;
}
return command;
}
