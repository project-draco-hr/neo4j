{
  DirectNetworking network=new DirectNetworking();
  final MemberId newMember=member(99);
  DirectNetworking.Inbound newMemberInbound=network.new Inbound(newMember);
  final OutboundMessageCollector messages=new OutboundMessageCollector();
  newMemberInbound.registerHandler(new Inbound.MessageHandler<RaftMessages.RaftMessage>(){
    @Override public void handle(    RaftMessages.RaftMessage message){
      messages.send(newMember,message);
    }
  }
);
  ControlledRenewableTimeoutService timeouts=new ControlledRenewableTimeoutService();
  RaftMachine raft=new RaftInstanceBuilder(myself,3,RaftTestMemberSetBuilder.INSTANCE).timeoutService(timeouts).outbound(messages).build();
  raft.bootstrapWithInitialMembers(new RaftTestGroup(asSet(myself,member1,member2)));
  timeouts.invokeTimeout(ELECTION);
  raft.handle(voteResponse().from(member1).term(1).grant().build());
  raft.setTargetMembershipSet(asSet(myself,member1,member2,newMember));
  network.processMessages();
  timeouts.invokeTimeout(RaftMachine.Timeouts.HEARTBEAT);
  network.processMessages();
  assertEquals(RaftMessages.AppendEntries.Request.class,messages.sentTo(newMember).get(0).getClass());
}
