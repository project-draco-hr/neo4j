{
  TestLogger logger=new TestLogger();
  try {
    logger.debug("Debug");
    logger.assertNoErrors();
    logger.assertNoWarnings();
    logger.assertNoInfos();
    logger.assertNoDebugs();
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no messages with level DEBUG. But found: \n" + "LogCall{level=DEBUG, message='Debug', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"));
  }
  try {
    logger.info("Info");
    logger.assertNoErrors();
    logger.assertNoWarnings();
    logger.assertNoInfos();
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no messages with level INFO. But found: \n" + "LogCall{level=INFO, message='Info', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"));
  }
  try {
    logger.warn("Warn");
    logger.assertNoErrors();
    logger.assertNoWarnings();
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no messages with level WARN. But found: \n" + "LogCall{level=WARN, message='Warn', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"));
  }
  try {
    logger.error("Error");
    logger.assertNoErrors();
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no messages with level ERROR. But found: \n" + "LogCall{level=ERROR, message='Error', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"));
  }
  try {
    logger.assertNoLoggingOccurred();
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no log messages at all, but got:\n" + "LogCall{level=DEBUG, message='Debug', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n" + "LogCall{level=INFO, message='Info', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"+ "LogCall{level=WARN, message='Warn', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"+ "LogCall{level=ERROR, message='Error', cause=null, flush=false, marker=LogMarker{name='no_mark'}}\n"));
  }
  try {
    logger.debug("This is a message.");
    logger.debug("This is a message.");
    logger.assertNo(debug("This is a message."));
    fail("Should have failed");
  }
 catch (  AssertionError e) {
    assertThat(e.getMessage(),equalTo("Expected no occurrence of " + "LogCall{level=DEBUG, message='This is a message.', cause=null, flush=false, marker=LogMarker{name='no_mark'}}, " + "but it was in fact logged 2 times."));
  }
}
