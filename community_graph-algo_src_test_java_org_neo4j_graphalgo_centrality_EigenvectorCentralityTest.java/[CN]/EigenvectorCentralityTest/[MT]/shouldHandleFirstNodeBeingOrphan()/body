{
  Node orphan=graph.makeNode("o");
  Node a=graph.makeNode("a");
  Node b=graph.makeNode("b");
  Node c=graph.makeNode("c");
  Node d=graph.makeNode("d");
  Set<Node> nodeSet=new HashSet<>();
  nodeSet.add(orphan);
  nodeSet.add(a);
  nodeSet.add(b);
  nodeSet.add(c);
  nodeSet.add(d);
  Set<Relationship> relSet=new HashSet<>();
  relSet.add(graph.makeEdge("a","b"));
  relSet.add(graph.makeEdge("b","c"));
  relSet.add(graph.makeEdge("c","d"));
  relSet.add(graph.makeEdge("d","c"));
  relSet.add(graph.makeEdge("c","a"));
  EigenvectorCentrality eigenvectorCentrality=getEigenvectorCentrality(Direction.OUTGOING,new CostEvaluator<Double>(){
    @Override public Double getCost(    Relationship relationship,    Direction direction){
      return 1d;
    }
  }
,nodeSet,relSet,0.01);
  assertApproximateCentrality(eigenvectorCentrality,"o",0d,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"a",0.481,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"b",0.363,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"c",0.637,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"d",0.481,0.02);
}
