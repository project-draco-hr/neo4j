{
  Set<Node> nodeSet=new HashSet<>();
  nodeSet.add(graph.makeNode("a"));
  nodeSet.add(graph.makeNode("b"));
  nodeSet.add(graph.makeNode("c"));
  nodeSet.add(graph.makeNode("d"));
  nodeSet.add(graph.makeNode("e"));
  nodeSet.add(graph.makeNode("f"));
  Set<Relationship> relSet=new HashSet<>();
  relSet.add(graph.makeEdge("a","b"));
  relSet.add(graph.makeEdge("c","d"));
  relSet.add(graph.makeEdge("d","e"));
  relSet.add(graph.makeEdge("e","f"));
  relSet.add(graph.makeEdge("e","c"));
  relSet.add(graph.makeEdge("f","e"));
  EigenvectorCentrality eigenvectorCentrality=getEigenvectorCentrality(Direction.OUTGOING,new CostEvaluator<Double>(){
    @Override public Double getCost(    Relationship relationship,    Direction direction){
      return 1d;
    }
  }
,nodeSet,relSet,0.001);
  assertApproximateCentrality(eigenvectorCentrality,"a",0d,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"b",0d,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"c",0.48,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"d",0.36,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"e",0.64,0.02);
  assertApproximateCentrality(eigenvectorCentrality,"f",0.48,0.02);
}
