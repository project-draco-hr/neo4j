{
  graph.makeEdgeChain("a,b");
  graph.makeEdgeChain("b,c");
  graph.makeEdgeChain("c,d");
  graph.makeEdgeChain("c,a");
  final Map<String,Double> costs=new HashMap<String,Double>();
  costs.put("a,b",1.0);
  costs.put("b,c",1.0);
  costs.put("c,d",1.0);
  costs.put("c,b",0.1);
  costs.put("c,a",0.1);
  EigenvectorCentrality eigenvectorCentrality=getEigenvectorCentrality(Direction.BOTH,new CostEvaluator<Double>(){
    public Double getCost(    Relationship relationship,    Direction direction){
      String start=graph.getNodeId(relationship.getStartNode());
      String end=graph.getNodeId(relationship.getEndNode());
      if (direction == Direction.INCOMING) {
        String tmp=end;
        end=start;
        start=tmp;
      }
      Double value=costs.get(start + "," + end);
      if (value == null) {
        return 0.0;
      }
      return value;
    }
  }
,graph.getAllNodes(),graph.getAllEdges(),0.01);
  assertApproximateCentrality(eigenvectorCentrality,"a",0.0851,0.01);
  assertApproximateCentrality(eigenvectorCentrality,"b",0.244,0.01);
  assertApproximateCentrality(eigenvectorCentrality,"c",0.456,0.01);
  assertApproximateCentrality(eigenvectorCentrality,"d",0.852,0.01);
}
