{
  boolean fail=false;
  if (props != null) {
    R old=store.forceGetRaw(primitive);
    if (primitive.inUse()) {
      if (!Record.NO_NEXT_PROPERTY.is(primitive.getNextProp())) {
        PropertyRecord prop=props.forceGetRecord(primitive.getNextProp());
        fail|=checkPropertyOwner(prop,owner);
        if (!prop.inUse())         fail|=report.inconsistent(store,primitive,props,prop,PROPERTY_NOT_IN_USE);
 else         if (owner.otherOwnerOf(prop) != -1 || (owner.ownerOf(prop) != -1 && owner.ownerOf(prop) != primitive.getId()))         fail|=report.inconsistent(store,primitive,props,prop,PROPERTY_FOR_OTHER);
      }
      if (old.inUse() && old.getNextProp() != primitive.getNextProp()) {
        if (!Record.NO_NEXT_PROPERTY.is(old.getNextProp())) {
          PropertyRecord oldProp=props.forceGetRecord(old.getNextProp());
          if (owner.ownerOf(oldProp) != primitive.getId())           fail|=report.inconsistent(props,oldProp,store,primitive,ORPHANED_PROPERTY);
        }
      }
    }
 else {
      if (!Record.NO_NEXT_PROPERTY.is(old.getNextProp())) {
        PropertyRecord prop=props.forceGetRecord(old.getNextProp());
        if (prop.inUse())         fail|=report.inconsistent(store,primitive,props,prop,owner.propertyNotRemoved());
      }
    }
  }
  return fail;
}
