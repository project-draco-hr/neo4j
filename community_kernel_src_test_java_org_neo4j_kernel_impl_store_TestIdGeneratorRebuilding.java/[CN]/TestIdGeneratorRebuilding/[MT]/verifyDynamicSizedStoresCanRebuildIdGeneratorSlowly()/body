{
  Config config=new Config(MapUtil.stringMap(GraphDatabaseSettings.rebuild_idgenerators_fast.name(),"false"));
  StoreFactory storeFactory=new StoreFactory(storeDir,config,new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),fs,NullLogProvider.getInstance());
  NeoStores neoStores=storeFactory.openAllNeoStores(true);
  DynamicStringStore store=neoStores.getPropertyStore().getStringStore();
  DynamicRecord record=new DynamicRecord(1);
  record.setInUse(true,PropertyType.STRING.intValue());
  int highestId=50;
  for (int i=1; i <= highestId; i++) {
    assertThat(store.nextId(),is((long)i));
    record.setId(i);
    StringBuilder sb=new StringBuilder(i);
    for (int j=0; j < i; j++) {
      sb.append('a');
    }
    record.setData(sb.toString().getBytes("UTF-16"));
    store.updateRecord(record);
  }
  store.setHighestPossibleIdInUse(highestId);
  Long[] idsToFree={2L,3L,5L,7L};
  record.setInUse(false);
  for (  long toDelete : idsToFree) {
    record.setId(toDelete);
    store.updateRecord(record);
  }
  store.rebuildIdGenerator();
  List<Long> nextIds=new ArrayList<>();
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  assertThat(nextIds,contains(2L,3L,5L,7L,51L));
  neoStores.close();
}
