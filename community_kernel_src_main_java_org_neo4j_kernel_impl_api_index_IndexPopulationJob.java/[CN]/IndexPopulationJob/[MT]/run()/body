{
  boolean success=false;
  try {
    log.info(format("Index population started for label id %d on property id %d",descriptor.getLabelId(),descriptor.getPropertyKeyId()));
    log.flush();
    populator.create();
    indexAllNodes();
    if (cancelled)     return;
    Callable<Void> duringFlip=new Callable<Void>(){
      @Override public Void call() throws Exception {
        populateFromQueueIfAvailable(Long.MAX_VALUE);
        populator.close(true);
        updateableSchemaState.clear();
        return null;
      }
    }
;
    FailedIndexProxy failureTarget=new FailedIndexProxy(descriptor,providerDescriptor,populator);
    flipper.flip(duringFlip,failureTarget);
    success=true;
    log.info(format("Index population completed for label id %d on property id %d, index is now online.",descriptor.getLabelId(),descriptor.getPropertyKeyId()));
    log.flush();
  }
 catch (  Throwable t) {
    if (t instanceof IndexEntryConflictException.Runtime) {
      t=((IndexEntryConflictException.Runtime)t).getCause();
    }
    if (!(t instanceof IndexEntryConflictException)) {
      log.error("Failed to populate index.",t);
      log.flush();
    }
    flipper.flipTo(new FailedIndexProxy(descriptor,providerDescriptor,populator,t));
  }
 finally {
    try {
      if (!success) {
        populator.close(false);
      }
    }
 catch (    Throwable e) {
      log.warn("Unable to close failed populator",e);
      log.flush();
    }
 finally {
      doneSignal.countDown();
    }
  }
}
