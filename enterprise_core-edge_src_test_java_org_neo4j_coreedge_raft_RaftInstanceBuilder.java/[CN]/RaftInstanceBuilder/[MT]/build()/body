{
  LeaderOnlyReplicator<MEMBER> leaderOnlyReplicator=new LeaderOnlyReplicator<>(member,outbound);
  RaftMembershipManager<MEMBER> membershipManager=new RaftMembershipManager<>(leaderOnlyReplicator,memberSetBuilder,raftLog,logProvider,expectedClusterSize,electionTimeout,clock,catchupTimeout,raftMembership,localDatabase);
  RaftLogShippingManager<MEMBER> logShipping=new RaftLogShippingManager<>(outbound,logProvider,raftLog,clock,member,membershipManager,retryTimeMillis,catchupBatchSize,maxAllowedShippingLag,inFlightMap);
  RaftInstance<MEMBER> raft=new RaftInstance<>(member,termState,voteState,raftLog,raftStateMachine,electionTimeout,heartbeatInterval,renewableTimeoutService,mock(CoreServerSelectionStrategy.class),outbound,logProvider,membershipManager,logShipping,databaseHealthSupplier,inFlightMap,monitors,localDatabase);
  inbound.registerHandler(raft);
  return raft;
}
