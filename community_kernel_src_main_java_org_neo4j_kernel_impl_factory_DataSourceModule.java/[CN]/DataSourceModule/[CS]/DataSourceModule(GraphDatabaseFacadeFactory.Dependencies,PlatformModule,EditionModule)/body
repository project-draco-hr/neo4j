{
  final org.neo4j.kernel.impl.util.Dependencies deps=platformModule.dependencies;
  Config config=platformModule.config;
  LogService logging=platformModule.logging;
  FileSystemAbstraction fileSystem=platformModule.fileSystem;
  DataSourceManager dataSourceManager=platformModule.dataSourceManager;
  LifeSupport life=platformModule.life;
  final GraphDatabaseFacade graphDatabaseFacade=platformModule.graphDatabaseFacade;
  RelationshipTypeTokenHolder relationshipTypeTokenHolder=editionModule.relationshipTypeTokenHolder;
  File storeDir=platformModule.storeDir;
  DiagnosticsManager diagnosticsManager=platformModule.diagnosticsManager;
  threadToTransactionBridge=deps.satisfyDependency(life.add(new ThreadToStatementContextBridge()));
  nodeManager=deps.satisfyDependency(new NodeManager(graphDatabaseFacade,threadToTransactionBridge,relationshipTypeTokenHolder));
  NodeProxy.NodeActions nodeActions=deps.satisfyDependency(createNodeActions(graphDatabaseFacade,threadToTransactionBridge,nodeManager));
  RelationshipProxy.RelationshipActions relationshipActions=deps.satisfyDependency(createRelationshipActions(graphDatabaseFacade,threadToTransactionBridge,nodeManager,relationshipTypeTokenHolder));
  transactionEventHandlers=new TransactionEventHandlers(nodeActions,relationshipActions,threadToTransactionBridge);
  IndexConfigStore indexStore=life.add(deps.satisfyDependency(new IndexConfigStore(storeDir,fileSystem)));
  diagnosticsManager.prependProvider(config);
  life.add(platformModule.kernelExtensions);
  schema=new SchemaImpl(threadToTransactionBridge);
  final LegacyIndexProxy.Lookup indexLookup=new LegacyIndexProxy.Lookup(){
    @Override public GraphDatabaseService getGraphDatabaseService(){
      return graphDatabaseFacade;
    }
  }
;
  final IndexProvider indexProvider=new IndexProviderImpl(indexLookup,threadToTransactionBridge);
  NodeAutoIndexerImpl nodeAutoIndexer=life.add(new NodeAutoIndexerImpl(config,indexProvider,nodeManager));
  RelationshipAutoIndexer relAutoIndexer=life.add(new RelationshipAutoIndexerImpl(config,indexProvider,nodeManager));
  indexManager=new IndexManagerImpl(threadToTransactionBridge,indexProvider,nodeAutoIndexer,relAutoIndexer);
  PageCache pageCache=platformModule.pageCache;
  StartupStatisticsProvider startupStatistics=deps.satisfyDependency(new StartupStatisticsProvider());
  SchemaWriteGuard schemaWriteGuard=deps.satisfyDependency(editionModule.schemaWriteGuard);
  StoreUpgrader storeMigrationProcess=new StoreUpgrader(editionModule.upgradeConfiguration,fileSystem,platformModule.monitors.newMonitor(StoreUpgrader.Monitor.class),logging.getInternalLogProvider());
  VisibleMigrationProgressMonitor progressMonitor=new VisibleMigrationProgressMonitor(logging.getInternalLog(StoreMigrator.class));
  storeMigrationProcess.addParticipant(new StoreMigrator(progressMonitor,fileSystem,pageCache,config,logging));
  Guard guard=config.get(execution_guard_enabled) ? deps.satisfyDependency(new Guard(logging.getInternalLog(Guard.class))) : null;
  kernelEventHandlers=new KernelEventHandlers(logging.getInternalLog(KernelEventHandlers.class));
  KernelPanicEventGenerator kernelPanicEventGenerator=deps.satisfyDependency(new KernelPanicEventGenerator(kernelEventHandlers));
  KernelHealth kernelHealth=deps.satisfyDependency(new KernelHealth(kernelPanicEventGenerator,logging.getInternalLog(KernelHealth.class)));
  neoStoreDataSource=deps.satisfyDependency(new NeoStoreDataSource(storeDir,config,editionModule.idGeneratorFactory,logging.getInternalLogProvider(),platformModule.jobScheduler,new NonTransactionalTokenNameLookup(editionModule.labelTokenHolder,editionModule.relationshipTypeTokenHolder,editionModule.propertyKeyTokenHolder),deps,editionModule.propertyKeyTokenHolder,editionModule.labelTokenHolder,relationshipTypeTokenHolder,editionModule.lockManager,schemaWriteGuard,transactionEventHandlers,platformModule.monitors.newMonitor(IndexingService.Monitor.class),fileSystem,storeMigrationProcess,platformModule.transactionMonitor,kernelHealth,platformModule.monitors.newMonitor(PhysicalLogFile.Monitor.class),editionModule.headerInformationFactory,startupStatistics,nodeManager,guard,indexStore,editionModule.commitProcessFactory,pageCache,editionModule.constraintSemantics,platformModule.monitors,platformModule.tracers));
  dataSourceManager.register(neoStoreDataSource);
  life.add(new MonitorGc(config,logging.getInternalLog(MonitorGc.class)));
  life.add(nodeManager);
  life.add(new DatabaseAvailability(platformModule.availabilityGuard,platformModule.transactionMonitor));
  life.add(new StartupWaiter(platformModule.availabilityGuard,editionModule.transactionStartTimeout));
  life.add(kernelEventHandlers);
  final AtomicReference<QueryExecutionEngine> queryExecutor=new AtomicReference<>(QueryEngineProvider.noEngine());
  dataSourceManager.addListener(new DataSourceManager.Listener(){
    private QueryExecutionEngine engine;
    @Override public void registered(    NeoStoreDataSource dataSource){
      if (engine == null) {
        engine=QueryEngineProvider.initialize(platformModule.graphDatabaseFacade,dependencies.executionEngines());
        deps.satisfyDependency(engine);
      }
      queryExecutor.set(engine);
    }
    @Override public void unregistered(    NeoStoreDataSource dataSource){
      queryExecutor.set(QueryEngineProvider.noEngine());
    }
  }
);
  storeId=new Supplier<StoreId>(){
    @Override public StoreId get(){
      return neoStoreDataSource.getStoreId();
    }
  }
;
  kernelAPI=new Supplier<KernelAPI>(){
    @Override public KernelAPI get(){
      return neoStoreDataSource.getKernel();
    }
  }
;
  this.queryExecutor=new Supplier<QueryExecutionEngine>(){
    @Override public QueryExecutionEngine get(){
      return queryExecutor.get();
    }
  }
;
}
