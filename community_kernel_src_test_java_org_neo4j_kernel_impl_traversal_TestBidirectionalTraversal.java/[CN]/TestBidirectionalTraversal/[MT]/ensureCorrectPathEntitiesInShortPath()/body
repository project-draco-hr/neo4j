{
  createGraph("a TO b");
  Node a=getNodeWithName("a");
  Node b=getNodeWithName("b");
  Relationship r=a.getSingleRelationship(to,OUTGOING);
  Path path=single(bidirectionalTraversal().mirroredSides(traversal().relationships(to,OUTGOING).uniqueness(NODE_PATH)).collisionEvaluator(Evaluators.atDepth(1)).sideSelector(SideSelectorPolicies.LEVEL,1).traverse(a,b));
  assertContainsInOrder(path.nodes(),a,b);
  assertContainsInOrder(path.reverseNodes(),b,a);
  assertContainsInOrder(path.relationships(),r);
  assertContainsInOrder(path.reverseRelationships(),r);
  assertContainsInOrder(path,a,r,b);
  assertEquals(a,path.startNode());
  assertEquals(b,path.endNode());
  assertEquals(r,path.lastRelationship());
}
