{
  createGraph("a TO b","a TO c","c TO b","a TO d","d TO e","e TO b","e TO f","f TO b");
  PathExpander<Void> expander=PathExpanders.forTypeAndDirection(to,OUTGOING);
  BidirectionalTraversalDescription traversal=bidirectionalTraversal().mirroredSides(getGraphDb().traversalDescription().uniqueness(NODE_PATH).expand(expander));
  expectPaths(traversal.collisionEvaluator(includeIfContainsAll(getNodeWithName("e"))).traverse(getNodeWithName("a"),getNodeWithName("b")),"a,d,e,b","a,d,e,f,b");
  expectPaths(traversal.collisionEvaluator(includeIfContainsAll(getNodeWithName("e"),getNodeWithName("f"))).traverse(getNodeWithName("a"),getNodeWithName("b")),"a,d,e,f,b");
}
