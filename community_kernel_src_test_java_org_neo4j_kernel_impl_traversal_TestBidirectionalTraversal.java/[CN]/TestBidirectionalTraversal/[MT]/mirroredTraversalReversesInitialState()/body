{
  createGraph("a TO b","b TO c","c TO d");
  BranchCollisionPolicy collisionPolicy=new BranchCollisionPolicy(){
    @Override public BranchCollisionDetector create(    Evaluator evaluator){
      return new StandardBranchCollisionDetector(null){
        @Override protected boolean includePath(        Path path,        TraversalBranch startPath,        TraversalBranch endPath){
          assertEquals(0,startPath.state());
          assertEquals(10,endPath.state());
          return true;
        }
      }
;
    }
  }
;
  count(bidirectionalTraversal().mirroredSides(traversal(NODE_PATH).expand(PathExpanders.<Integer>forType(to),new InitialBranchState.State<Integer>(0,10))).collisionPolicy(collisionPolicy).traverse(getNodeWithName("a"),getNodeWithName("d")));
}
