{
  File relTypeStore=new File(storeName);
  if (!relTypeStore.exists()) {
    throw new IOException("Couldn't find property store " + storeName);
  }
  File idGenerator=new File(storeName + ".id");
  if (idGenerator.exists()) {
    idGenerator.delete();
  }
  Set stringStartBlocks=checkDynamicStore(storeName + ".strings");
  Set keyStartBlocks=checkDynamicStore(storeName + ".keys");
  int recordSize=25;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,"rw").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position(i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      int type=buffer.getInt();
      int key=buffer.getInt();
      long prop=buffer.getLong();
      int previous=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK) {
        if ((next + 1) * recordSize > fileSize || next < 0) {
          throw new IOException("Bad next record[" + next + "] at record "+ i);
        }
        buffer.clear();
        fileChannel.position(next * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException("Bad next record[" + next + ",(not in use)] at record "+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException("Bad next record[" + next + ",(previous don't match)] at record "+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(new Integer(i));
      }
 else {
        if ((previous + 1) * recordSize > fileSize || previous < 0) {
          throw new IOException("Bad previous record[" + previous + "] at record "+ i);
        }
        buffer.clear();
        fileChannel.position(previous * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException("Bad previous record[" + previous + ",(not in use)] at record "+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException("Bad previous record[" + previous + ",(next don't match)] at record "+ i);
        }
      }
      if (type < 1 || type > 6) {
        throw new IOException("Bad property type[" + type + "] at record "+ i);
      }
      if (!keyStartBlocks.remove(new Integer(key))) {
        throw new IOException("key start block[" + key + "] not found for record "+ i);
      }
      if (type == 2 && !stringStartBlocks.remove(new Integer((int)prop))) {
        throw new IOException("string start block[" + prop + "] not found for record "+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      throw new IOException("Bad record at " + i);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(".");
    }
  }
  if (!stringStartBlocks.isEmpty()) {
    System.out.println("Stray string blocks found " + stringStartBlocks.size());
  }
  if (!keyStartBlocks.isEmpty()) {
    System.out.println("Stray key blocks found " + keyStartBlocks.size());
  }
  fileChannel.truncate(i * recordSize);
  fileChannel.close();
  System.out.println(".ok");
  return startBlocks;
}
