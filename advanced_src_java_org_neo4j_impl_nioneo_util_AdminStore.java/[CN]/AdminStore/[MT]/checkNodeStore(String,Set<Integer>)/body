{
  File nodeStore=new File(storeName);
  if (!nodeStore.exists()) {
    throw new IOException("Couldn't find node store " + storeName);
  }
  File idGenerator=new File(storeName + ".id");
  if (idGenerator.exists()) {
    idGenerator.delete();
  }
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,"r").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> nodeSet=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position(i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int nextRel=buffer.getInt();
      int nextProp=buffer.getInt();
      if (nextRel != NO_NEXT_RELATIONSHIP) {
        nodeSet.add(i);
      }
      if (nextProp != NO_NEXT_PROPERTY && !propertySet.remove(nextProp)) {
        throw new IOException("Bad property start block[" + nextProp + "] on record "+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println("Unkown record at: " + i);
      System.out.println("In use flag was: " + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(".");
    }
  }
  System.out.print(" high id:" + i + " count:"+ inUseCount);
  fileChannel.close();
  System.out.println(".ok");
  return nodeSet;
}
