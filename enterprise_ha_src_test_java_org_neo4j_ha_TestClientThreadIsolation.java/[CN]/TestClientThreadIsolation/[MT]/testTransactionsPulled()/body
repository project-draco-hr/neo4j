{
  final HighlyAvailableGraphDatabase master=new HighlyAvailableGraphDatabase(TargetDirectory.forTest(TestClientThreadIsolation.class).directory("master",true).getAbsolutePath(),MapUtil.stringMap(HaConfig.CONFIG_KEY_COORDINATORS,zoo.getConnectionString(),HaConfig.CONFIG_KEY_SERVER_ID,"1"));
  final HighlyAvailableGraphDatabase slave1=new HighlyAvailableGraphDatabase(TargetDirectory.forTest(TestClientThreadIsolation.class).directory("slave1",true).getAbsolutePath(),MapUtil.stringMap(HaConfig.CONFIG_KEY_COORDINATORS,zoo.getConnectionString(),HaConfig.CONFIG_KEY_SERVER_ID,"2",HaConfig.CONFIG_KEY_MAX_CONCURRENT_CHANNELS_PER_SLAVE,"2"));
  Transaction masterTx=master.beginTx();
  master.createNode().createRelationshipTo(master.createNode(),DynamicRelationshipType.withName("master")).setProperty("largeArray",new int[20000]);
  masterTx.success();
  masterTx.finish();
  assertEquals(1,master.getBroker().getMaster().other().getMachineId());
  assertEquals(1,slave1.getBroker().getMaster().other().getMachineId());
  Thread thread1=new Thread(new Runnable(){
    public void run(){
    }
  }
,"thread 1");
  Thread thread2=new Thread(new Runnable(){
    public void run(){
    }
  }
,"thread 2");
  thread1.start();
  thread2.start();
  thread1.join();
  thread2.join();
  assertTrue(master.getReferenceNode().getRelationships(DynamicRelationshipType.withName("test")).iterator().hasNext());
}
