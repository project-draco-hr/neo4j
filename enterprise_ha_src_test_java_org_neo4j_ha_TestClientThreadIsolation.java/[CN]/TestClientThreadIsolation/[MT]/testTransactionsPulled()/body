{
  final HighlyAvailableGraphDatabase master=(HighlyAvailableGraphDatabase)new EnterpriseGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(TargetDirectory.forTest(TestClientThreadIsolation.class).directory("master",true).getAbsolutePath()).setConfig(HaSettings.coordinators,zoo.getConnectionString()).setConfig(HaSettings.server_id,"1").newGraphDatabase();
  final HighlyAvailableGraphDatabase slave1=(HighlyAvailableGraphDatabase)new EnterpriseGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(TargetDirectory.forTest(TestClientThreadIsolation.class).directory("slave1",true).getAbsolutePath()).setConfig(HaSettings.coordinators,zoo.getConnectionString()).setConfig(HaSettings.server_id,"2").setConfig(HaSettings.max_concurrent_channels_per_slave,"2").newGraphDatabase();
  Transaction masterTx=master.beginTx();
  master.createNode().createRelationshipTo(master.createNode(),DynamicRelationshipType.withName("master")).setProperty("largeArray",new int[20000]);
  masterTx.success();
  masterTx.finish();
  assertEquals(1,master.getBroker().getMaster().other().getMachineId());
  assertEquals(1,slave1.getBroker().getMaster().other().getMachineId());
  Thread thread1=new Thread(new Runnable(){
    public void run(){
    }
  }
,"thread 1");
  Thread thread2=new Thread(new Runnable(){
    public void run(){
    }
  }
,"thread 2");
  thread1.start();
  thread2.start();
  thread1.join();
  thread2.join();
  assertTrue(master.getReferenceNode().getRelationships(DynamicRelationshipType.withName("test")).iterator().hasNext());
}
