{
  if (cache != null) {
    return cache.iterator();
  }
  final Iterator<T> source=iterable.iterator();
  return new Iterator<T>(){
    List<T> iteratorCache=new ArrayList<>();
    @Override public boolean hasNext(){
      boolean hasNext=source.hasNext();
      if (!hasNext) {
        cache=iteratorCache;
      }
      return hasNext;
    }
    @Override public T next(){
      T next=source.next();
      iteratorCache.add(next);
      return next;
    }
    @Override public void remove(){
    }
  }
;
}
