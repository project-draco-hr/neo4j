{
  for (  DynamicRecord record : command.getRecordsAfter()) {
    store.getSchemaStore().updateRecord(record);
  }
  if (command.getSchemaRule() instanceof IndexRule) {
switch (command.getMode()) {
case UPDATE:
      if (((IndexRule)command.getSchemaRule()).isConstraintIndex()) {
        try {
          indexes.activateIndex(command.getSchemaRule().getId());
        }
 catch (        IndexNotFoundKernelException|IndexActivationFailedKernelException|IndexPopulationFailedKernelException e) {
          throw new IllegalStateException("Unable to enable constraint, backing index is not online.",e);
        }
      }
    break;
case CREATE:
  indexes.createIndex((IndexRule)command.getSchemaRule());
break;
case DELETE:
indexes.dropIndex((IndexRule)command.getSchemaRule());
break;
default :
throw new IllegalStateException(command.getMode().name());
}
}
if (command.getSchemaRule() instanceof UniquenessConstraintRule) {
switch (command.getMode()) {
case UPDATE:
case CREATE:
store.setLatestConstraintIntroducingTx(command.getTxId());
break;
case DELETE:
break;
default :
throw new IllegalStateException(command.getMode().name());
}
}
return true;
}
