{
  File workingDirectory=new File("target/" + StoreUpgraderInterruptionTest.class.getSimpleName());
  MigrationTestUtils.prepareSampleLegacyDatabase(workingDirectory);
  DatabaseFiles failsOnBackup=new DatabaseFiles(){
    public void moveToBackupDirectory(    File workingDirectory,    File backupDirectory){
      backupDirectory.mkdir();
      throw new RuntimeException("Failing to backup working directory");
    }
  }
;
  assertTrue(allStoreFilesHaveVersion(workingDirectory,"v0.9.9"));
  try {
    newUpgrader(new StoreMigrator(new SilentMigrationProgressMonitor()),failsOnBackup).attemptUpgrade(new File(workingDirectory,NeoStore.DEFAULT_NAME).getPath());
    fail("Should throw exception");
  }
 catch (  RuntimeException e) {
    assertEquals("Failing to backup working directory",e.getMessage());
  }
  try {
    newUpgrader(new StoreMigrator(new SilentMigrationProgressMonitor()),new DatabaseFiles()).attemptUpgrade(new File(workingDirectory,NeoStore.DEFAULT_NAME).getPath());
    fail("Should throw exception");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().startsWith("Cannot proceed with upgrade because there is an existing upgrade backup in the way at "));
  }
}
