{
  PhysicalLogVersionedStoreChannel channel=null;
switch (logFiles.determineState()) {
case NO_ACTIVE_FILE:
    channel=open(logFiles.getLog1FileName(),recoveredDataVisitor);
  setActiveLog(LOG1);
break;
case CLEAN:
File newLog=logFiles.getLog1FileName();
renameIfExists(newLog);
renameIfExists(logFiles.getLog2FileName());
channel=open(newLog,recoveredDataVisitor);
setActiveLog(LOG1);
break;
case DUAL_LOGS_LOG_1_ACTIVE:
fixDualLogFiles(logFiles.getLog1FileName(),logFiles.getLog2FileName());
case LOG_1_ACTIVE:
currentLog=LOG1;
channel=open(logFiles.getLog1FileName(),recoveredDataVisitor);
break;
case DUAL_LOGS_LOG_2_ACTIVE:
fixDualLogFiles(logFiles.getLog2FileName(),logFiles.getLog1FileName());
case LOG_2_ACTIVE:
currentLog=LOG2;
channel=open(logFiles.getLog2FileName(),recoveredDataVisitor);
break;
default :
throw new IllegalStateException("FATAL: Unrecognized logical log state.");
}
writer=new PhysicalWritableLogChannel(channel,new LogVersionBridge(){
@Override public VersionedStoreChannel next(VersionedStoreChannel channel) throws IOException {
if (channel.position() >= rotateAtSize) {
return rotate(channel);
}
return channel;
}
}
);
}
