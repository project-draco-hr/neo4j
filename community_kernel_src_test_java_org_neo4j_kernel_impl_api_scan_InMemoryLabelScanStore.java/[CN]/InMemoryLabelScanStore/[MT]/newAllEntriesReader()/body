{
  final Map<Long,Set<Long>> nodesToLabels=new HashMap<>();
  for (  Map.Entry<Long,Set<Long>> labelToNodes : data.entrySet()) {
    for (    Long nodeId : labelToNodes.getValue()) {
      if (!nodesToLabels.containsKey(nodeId)) {
        nodesToLabels.put(nodeId,new HashSet<Long>());
      }
      nodesToLabels.get(nodeId).add(labelToNodes.getKey());
    }
  }
  return new AllEntriesLabelScanReader(){
    @Override public long getHighRangeId() throws IOException {
      return 0;
    }
    @Override public void close() throws IOException {
    }
    @Override public Iterator<NodeLabelRange> iterator(){
      NodeLabelRange range=new NodeLabelRange(){
        @Override public int id(){
          return 0;
        }
        @Override public long[] nodes(){
          return toLongArray(nodesToLabels.keySet());
        }
        @Override public long[] labels(        long nodeId){
          return toLongArray(nodesToLabels.get(nodeId));
        }
      }
;
      return singletonList(range).iterator();
    }
    private long[] toLongArray(    Set<Long> longs){
      long[] array=new long[longs.size()];
      int position=0;
      for (      Long entry : longs) {
        array[position++]=entry;
      }
      return array;
    }
  }
;
}
