{
  return new LabelScanReader(){
    @Override public PrimitiveLongIterator nodesWithLabel(    int labelId){
      Set<Long> nodes=data.get((long)labelId);
      if (null == nodes) {
        return PrimitiveLongCollections.emptyIterator();
      }
      final Iterator<Long> nodesIterator=nodes.iterator();
      return new PrimitiveLongIterator(){
        @Override public long next(){
          return nodesIterator.next();
        }
        @Override public boolean hasNext(){
          return nodesIterator.hasNext();
        }
      }
;
    }
    @Override public void close(){
    }
    @Override public long getMaxDoc(){
      return 0;
    }
    @Override public Iterator<Long> labelsForNode(    long nodeId){
      List<Long> nodes=new ArrayList<>();
      for (      Map.Entry<Long,Set<Long>> entry : data.entrySet()) {
        if (entry.getValue().contains(nodeId)) {
          nodes.add(entry.getKey());
        }
      }
      return nodes.iterator();
    }
    @Override public AllEntriesLabelScanReader allNodeLabelRanges(){
      return newAllEntriesReader();
    }
    @Override public Iterator<Document> getAllDocsIterator(){
      return null;
    }
  }
;
}
