{
  String name=getExtractedTxFileName(txId);
  File txFile=new File(name);
  List<LogEntry> logEntryList=null;
  if (txFile.exists()) {
    FileChannel channel=new RandomAccessFile(name,"r").getChannel();
    logEntryList=extractTransactionFromLog(txId,-1,channel);
    channel.close();
    return logEntryList;
  }
  Pair<Long,Long> cachedInfo=this.txStartPositionCache.get(txId);
  if (cachedInfo != null) {
    long version=cachedInfo.first();
    ReadableByteChannel log=getLogicalLogOrMyself(version,cachedInfo.other());
    logEntryList=extractTransactionFromLog(txId,version,log);
    log.close();
  }
 else {
    long version=findLogContainingTxId(txId)[0];
    if (version == -1) {
      throw new RuntimeException("txId:" + txId + " not found in any logical log "+ "(starting at "+ logVersion+ " and searching backwards");
    }
    ReadableByteChannel log=getLogicalLogOrMyself(version,0);
    long[] header=readAndAssertLogHeader(buffer,log,version);
    long prevTxId=header[1];
    assertLogCanContainTx(txId,prevTxId);
    logEntryList=extractTransactionFromLog(txId,version,log);
    log.close();
  }
  return logEntryList;
}
