{
  FileSystemAbstraction scramblingFs=new DefaultFileSystemAbstraction(){
    @Override public File[] listFiles(    File directory){
      List<File> files=asList(super.listFiles(directory));
      Collections.shuffle(files);
      return files.toArray(new File[files.size()]);
    }
  }
;
  PartitionedIndexStorage myStorage=new PartitionedIndexStorage(getOrCreateDirFactory(scramblingFs),scramblingFs,testDir.graphDbDir(),INDEX_ID,false);
  File parent=myStorage.getIndexFolder();
  int directoryCount=10;
  for (int i=0; i < directoryCount; i++) {
    scramblingFs.mkdirs(new File(parent,String.valueOf(i + 1)));
  }
  Map<File,Directory> directories=myStorage.openIndexDirectories();
  assertEquals(directoryCount,directories.size());
  int previous=0;
  for (  Map.Entry<File,Directory> directory : directories.entrySet()) {
    int current=parseInt(directory.getKey().getName());
    assertTrue("Wanted directory " + current + " to have higher id than previous "+ previous,current > previous);
    previous=current;
  }
}
