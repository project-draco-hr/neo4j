{
  Map<String,String> config=new HashMap<String,String>();
  config.put("store_dir","target/var");
  FileSystemAbstraction fileSystem=new DefaultFileSystemAbstraction();
  KernelHealth kernelHealth=mock(KernelHealth.class);
  xaDsMgr.registerDataSource(new DummyXaDataSource(UTF8.encode("DDDDDD"),"dummy_datasource",new XaFactory(new Config(config,GraphDatabaseSettings.class),TxIdGenerator.DEFAULT,new PlaceboTm(null,getGraphDbAPI().getDependencyResolver().resolveDependency(TxIdGenerator.class)),fileSystem,new Monitors(),new DevNullLoggingService(),RecoveryVerifier.ALWAYS_VALID,LogPruneStrategies.NO_PRUNING,kernelHealth),stateFactory,resourceFile()));
  XaDataSource xaDs=xaDsMgr.getXaDataSource("dummy_datasource");
  DummyXaConnection xaC=null;
  try {
    xaC=(DummyXaConnection)xaDs.getXaConnection();
    try {
      xaC.doStuff1();
      fail("Non enlisted resource should throw exception");
    }
 catch (    XAException e) {
    }
    Xid xid=new XidImpl(new byte[0],new byte[0]);
    xaC.getXaResource().start(xid,XAResource.TMNOFLAGS);
    try {
      xaC.doStuff1();
      xaC.doStuff2();
    }
 catch (    XAException e) {
      fail("Enlisted resource should not throw exception");
    }
    xaC.getXaResource().end(xid,XAResource.TMSUCCESS);
    xaC.getXaResource().prepare(xid);
    xaC.getXaResource().commit(xid,false);
  }
  finally {
    xaDsMgr.unregisterDataSource("dummy_datasource");
    if (xaC != null) {
      xaC.destroy();
    }
  }
  deleteAllResourceFiles();
}
