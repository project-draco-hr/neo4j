{
  this.storeDir=storeDir;
  TxModule txModule=newTxModule(inputParams,finishHook);
  LockManager lockManager=lockManagerFactory.create(txModule);
  LockReleaser lockReleaser=new LockReleaser(lockManager,txModule.getTxManager());
  final Config config=new Config(graphDbService,storeDir,inputParams,kernelPanicEventGenerator,txModule,lockManager,lockReleaser,idGeneratorFactory,new SyncHookFactory(),relTypeCreator,txIdFactory.create(txModule.getTxManager()),lastCommittedTxIdSetter);
  graphDbInstance=new GraphDbInstance(storeDir,true,config);
  this.msgLog=StringLogger.getLogger(storeDir + "/messages.log");
  this.graphDbService=graphDbService;
  IndexStore indexStore=graphDbInstance.getConfig().getIndexStore();
  this.indexManager=new IndexManagerImpl(this,indexStore);
  extensions=new KernelExtension.KernelData(){
    @Override public String version(){
      return KERNEL_VERSION;
    }
    @Override public Config getConfig(){
      return config;
    }
    @Override public Map<Object,Object> getConfigParams(){
      return config.getParams();
    }
    @Override public GraphDatabaseService graphDatabase(){
      return EmbeddedGraphDbImpl.this.graphDbService;
    }
    protected void initialized(    KernelExtension extension){
      if (extension instanceof IndexProvider) {
        indexManager.addProvider(extension.getKey(),(IndexProvider)extension);
      }
    }
  }
;
  KernelExtensionLoader extensionLoader=new KernelExtensionLoader(){
    public void init(){
      extensions.initAll(msgLog);
    }
    public void load(){
      extensions.loadAll(msgLog);
    }
  }
;
  graphDbInstance.start(graphDbService,extensionLoader);
  nodeManager=config.getGraphDbModule().getNodeManager();
  extensionLoader.load();
}
