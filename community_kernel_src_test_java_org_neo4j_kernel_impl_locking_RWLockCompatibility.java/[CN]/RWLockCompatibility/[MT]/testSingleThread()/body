{
  try {
    clientA.releaseExclusive(NODE,1L);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  try {
    clientA.releaseShared(NODE,1L);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  clientA.acquireShared(NODE,1L);
  try {
    clientA.releaseExclusive(NODE,1L);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  clientA.releaseShared(NODE,1L);
  clientA.acquireExclusive(NODE,1L);
  try {
    clientA.releaseShared(NODE,1L);
    fail("Invalid release should throw exception");
  }
 catch (  Exception e) {
  }
  clientA.releaseExclusive(NODE,1L);
  clientA.acquireShared(NODE,1L);
  clientA.acquireExclusive(NODE,1L);
  clientA.releaseExclusive(NODE,1L);
  clientA.releaseShared(NODE,1L);
  clientA.acquireExclusive(NODE,1L);
  clientA.acquireShared(NODE,1L);
  clientA.releaseShared(NODE,1L);
  clientA.releaseExclusive(NODE,1L);
  for (int i=0; i < 10; i++) {
    if ((i % 2) == 0) {
      clientA.acquireExclusive(NODE,1L);
    }
 else {
      clientA.acquireShared(NODE,1L);
    }
  }
  for (int i=9; i >= 0; i--) {
    if ((i % 2) == 0) {
      clientA.releaseExclusive(NODE,1L);
    }
 else {
      clientA.releaseShared(NODE,1L);
    }
  }
}
