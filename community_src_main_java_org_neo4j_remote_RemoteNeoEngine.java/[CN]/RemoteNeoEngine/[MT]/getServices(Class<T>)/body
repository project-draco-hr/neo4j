{
  if (!iface.isInterface()) {
    throw new IllegalArgumentException(iface + " is not an interface.");
  }
  if (iface == TransactionManager.class) {
    return new Iterable<ServiceDescriptor<T>>(){
      public Iterator<ServiceDescriptor<T>> iterator(){
        return new Iterator<ServiceDescriptor<T>>(){
          boolean hasNext=true;
          public boolean hasNext(){
            return hasNext;
          }
          public ServiceDescriptor<T> next(){
            if (!hasNext) {
              throw new NoSuchElementException();
            }
            hasNext=false;
            return txDescriptor();
          }
          public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
    }
;
  }
  return new Iterable<ServiceDescriptor<T>>(){
    final Iterable<ServiceSpecification> services;
{
      services=receive(connection.getServices(iface.getName()));
    }
    public Iterator<ServiceDescriptor<T>> iterator(){
      return new Iterator<ServiceDescriptor<T>>(){
        Iterator<ServiceSpecification> iter=services.iterator();
        public boolean hasNext(){
          return iter.hasNext();
        }
        public ServiceDescriptor<T> next(){
          return iter.next().descriptor(iface,RemoteNeoEngine.this);
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
