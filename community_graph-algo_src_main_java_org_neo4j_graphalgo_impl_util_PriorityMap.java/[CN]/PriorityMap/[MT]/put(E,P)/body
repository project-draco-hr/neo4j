{
  K key=keyFunction.convert(entity);
  Node<E,P> node=map.get(key);
  boolean result=false;
  if (node != null) {
    if (onlyKeepBestPriorities) {
      if (priority.equals(node.head.priority)) {
        node.head=new Link<E,P>(entity,priority,node.head);
        result=true;
      }
 else       if (order.compare(priority,node.head.priority) < 0) {
        queue.remove(node);
        putNew(entity,priority,key);
        result=true;
      }
    }
 else {
      if (order.compare(priority,node.head.priority) < 0) {
        node.head=new Link<E,P>(entity,priority,node.head);
        reinsert(node);
        result=true;
      }
 else {
        Link<E,P> link=node.head, prev=link;
        link=link.next;
        while (link != null) {
          if (order.compare(priority,link.priority) <= 0) {
            prev.next=new Link<E,P>(entity,priority,link);
            result=true;
            break;
          }
          prev=link;
          link=link.next;
        }
        if (!result) {
          prev.next=new Link<E,P>(entity,priority,null);
          result=true;
        }
      }
    }
  }
 else {
    putNew(entity,priority,key);
    result=true;
  }
  return result;
}
