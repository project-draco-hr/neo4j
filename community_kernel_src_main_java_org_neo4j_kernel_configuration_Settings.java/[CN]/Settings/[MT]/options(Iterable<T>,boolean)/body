{
  return new Function<String,T>(){
    @Override public T apply(    String value){
      for (      T optionValue : optionValues) {
        String allowedValue=optionValue.toString();
        if (allowedValue.equals(value) || (ignoreCase && allowedValue.equalsIgnoreCase(value))) {
          return optionValue;
        }
      }
      String possibleValues=Iterables.toList(optionValues).toString();
      throw new IllegalArgumentException("must be one of " + possibleValues + " case "+ (ignoreCase ? "insensitive" : "sensitive"));
    }
    @Override public String toString(){
      StringBuilder builder=new StringBuilder();
      builder.append("one of `");
      String comma="";
      for (      T optionValue : optionValues) {
        builder.append(comma).append(optionValue.toString());
        comma="`, `";
      }
      builder.append("`");
      return builder.toString();
    }
  }
;
}
