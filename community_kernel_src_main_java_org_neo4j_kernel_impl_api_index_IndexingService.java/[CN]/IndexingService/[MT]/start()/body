{
  Set<IndexProxy> rebuildingIndexes=new HashSet<>();
  Map<Long,Pair<IndexDescriptor,SchemaIndexProvider.Descriptor>> rebuildingIndexDescriptors=new HashMap<>();
  for (  Map.Entry<Long,IndexProxy> entry : indexes.entrySet()) {
    long ruleId=entry.getKey();
    IndexProxy indexProxy=entry.getValue();
    InternalIndexState state=indexProxy.getState();
    logger.info(String.format("IndexingService.start: index on %s is %s",indexProxy.getDescriptor().userDescription(tokenNameLookup),state.name()));
switch (state) {
case ONLINE:
      break;
case POPULATING:
    rebuildingIndexes.add(indexProxy);
  Pair<IndexDescriptor,SchemaIndexProvider.Descriptor> descriptors=Pair.of(indexProxy.getDescriptor(),indexProxy.getProviderDescriptor());
rebuildingIndexDescriptors.put(ruleId,descriptors);
break;
case FAILED:
break;
}
}
dropIndexes(rebuildingIndexes);
for (Map.Entry<Long,Pair<IndexDescriptor,SchemaIndexProvider.Descriptor>> entry : rebuildingIndexDescriptors.entrySet()) {
long ruleId=entry.getKey();
Pair<IndexDescriptor,SchemaIndexProvider.Descriptor> descriptors=entry.getValue();
IndexDescriptor indexDescriptor=descriptors.first();
SchemaIndexProvider.Descriptor providerDescriptor=descriptors.other();
IndexProxy indexProxy=createAndStartPopulatingIndexProxy(ruleId,indexDescriptor,providerDescriptor,serviceRunning);
indexes.put(ruleId,indexProxy);
}
serviceRunning=true;
}
