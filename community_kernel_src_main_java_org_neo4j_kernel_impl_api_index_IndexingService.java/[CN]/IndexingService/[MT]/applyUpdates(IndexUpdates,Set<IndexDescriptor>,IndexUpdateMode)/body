{
  if (state == State.NOT_STARTED) {
    updates.collectUpdatedNodeIds(recoveredNodeIds);
  }
 else   if (state == State.RUNNING || state == State.STARTING) {
    try (IndexUpdaterMap updaterMap=indexMapRef.createIndexUpdaterMap(updateMode)){
      for (      NodePropertyUpdate update : updates) {
        int propertyKeyId=update.getPropertyKeyId();
switch (update.getUpdateMode()) {
case ADDED:
          for (int len=update.getNumberOfLabelsAfter(), i=0; i < len; i++) {
            processUpdate(update,updaterMap,update.getLabelAfter(i),propertyKeyId);
          }
        break;
case REMOVED:
      for (int len=update.getNumberOfLabelsBefore(), i=0; i < len; i++) {
        processUpdate(update,updaterMap,update.getLabelBefore(i),propertyKeyId);
      }
    break;
case CHANGED:
  int lenBefore=update.getNumberOfLabelsBefore();
int lenAfter=update.getNumberOfLabelsAfter();
for (int i=0, j=0; i < lenBefore && j < lenAfter; ) {
int labelBefore=update.getLabelBefore(i);
int labelAfter=update.getLabelAfter(j);
if (labelBefore == labelAfter) {
  processUpdate(update,updaterMap,labelAfter,propertyKeyId);
  i++;
  j++;
}
 else {
  if (labelBefore < labelAfter) {
    i++;
  }
 else {
    j++;
  }
}
}
break;
}
}
updaterMap.noteAffectedIndexes(affectedIndexes);
}
 }
 else {
throw new IllegalStateException("Can't apply index updates " + toList(updates) + " while indexing service is "+ state);
}
}
