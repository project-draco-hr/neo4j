{
  File dynamicStore=new File(storeName);
  if (!dynamicStore.exists()) {
    throw new IOException("Couldn't find dynamic store " + storeName);
  }
  File idGenerator=new File(storeName + ".blockid");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  System.out.print(storeName);
  FileChannel fileChannel=new RandomAccessFile(storeName,"r").getChannel();
  ByteBuffer buffer=ByteBuffer.allocate(4);
  fileChannel.position(0);
  if (fileChannel.read(buffer) != 4) {
    throw new IOException("Unable to read blocksize");
  }
  buffer.flip();
  int blockSize=buffer.getInt();
  int dataSize=blockSize - BLOCK_HEADER_SIZE;
  long fileSize=fileChannel.size();
  buffer=ByteBuffer.allocate(BLOCK_HEADER_SIZE);
  ByteBuffer inUseBuffer=ByteBuffer.allocate(1);
  long dot=fileSize / blockSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=1; (long)(i + 1) * blockSize <= fileSize; i++) {
    inUseBuffer.clear();
    fileChannel.position((long)i * blockSize);
    if (fileChannel.read(inUseBuffer) == 0) {
      break;
    }
    inUseBuffer.flip();
    byte inUse=inUseBuffer.get();
    if (inUse == BLOCK_IN_USE) {
      inUseCount++;
      buffer.clear();
      fileChannel.read(buffer);
      buffer.flip();
      int previous=buffer.getInt();
      int bytes=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK && bytes != dataSize || bytes > dataSize || bytes < 0) {
        throw new IOException("Bad data size[" + bytes + "] at block "+ i+ " in "+ storeName);
      }
 else       if (next != NO_NEXT_BLOCK) {
        if ((long)(next + 1) * blockSize > fileSize || next < 0) {
          throw new IOException("Bad next block[" + next + "] at block "+ i);
        }
        buffer.clear();
        fileChannel.position((long)next * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException("Bad next block[" + next + ",(not in use)] at block "+ i);
        }
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException("Bad next block[" + next + ",(previous don't match)] at block "+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(i);
      }
 else {
        if ((long)(previous + 1) * blockSize > fileSize || previous < 0) {
          throw new IOException("Bad previous block[" + previous + "] at block "+ i);
        }
        buffer.clear();
        fileChannel.position((long)previous * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException("Bad previous block[" + previous + ",(not in use)] at block "+ i);
        }
        buffer.getInt();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException("Bad previous block[" + previous + ",(next don't match)] at block "+ i);
        }
      }
    }
 else     if (inUse != BLOCK_NOT_IN_USE) {
      System.out.println("Unknown record at: " + i);
      System.out.println("In use flag was: " + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(".");
    }
  }
  System.out.print(" high id:" + i + " count:"+ inUseCount);
  fileChannel.close();
  System.out.println(".ok");
  return startBlocks;
}
