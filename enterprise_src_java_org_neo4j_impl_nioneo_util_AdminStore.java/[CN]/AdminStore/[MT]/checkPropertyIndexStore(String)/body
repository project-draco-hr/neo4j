{
  File indexStore=new File(storeName);
  if (!indexStore.exists()) {
    throw new IOException("Couldn't find property store " + storeName);
  }
  File idGenerator=new File(storeName + ".id");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> keyStartBlocks=checkDynamicStore(storeName + ".keys");
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,"r").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (long)(i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    if (fileChannel.read(buffer) == 0) {
      break;
    }
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      buffer.getInt();
      int key=buffer.getInt();
      if (!keyStartBlocks.remove(key)) {
        throw new IOException("key start block[" + key + "] not found for record "+ i);
      }
      startBlocks.add(i);
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println("Unkown record at: " + i);
      System.out.println("In use flag was: " + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(".");
    }
  }
  System.out.print(" high id:" + i + " count:"+ inUseCount);
  if (!keyStartBlocks.isEmpty()) {
    System.out.println("Stray key blocks found " + keyStartBlocks.size());
  }
  fileChannel.close();
  System.out.println(".ok");
  return startBlocks;
}
