{
  final CyclicBarrier barrier=new CyclicBarrier(3);
  final List<Thread> daThreads=new ArrayList<Thread>(3);
  final HighlyAvailableGraphDatabase[] dbs=new HighlyAvailableGraphDatabase[3];
  for (int i=1; i <= 3; i++) {
    final int finalI=i;
    Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          dbs[finalI - 1]=startDbAtBase(finalI);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
catch (        BrokenBarrierException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    daThreads.add(t);
    t.start();
  }
  for (  Thread daThread : daThreads) {
    daThread.join();
  }
  for (  HighlyAvailableGraphDatabase db : dbs) {
    Transaction tx=db.beginTx();
    db.createNode();
    tx.success();
    tx.finish();
  }
  for (  HighlyAvailableGraphDatabase db : dbs) {
    db.shutdown();
  }
}
