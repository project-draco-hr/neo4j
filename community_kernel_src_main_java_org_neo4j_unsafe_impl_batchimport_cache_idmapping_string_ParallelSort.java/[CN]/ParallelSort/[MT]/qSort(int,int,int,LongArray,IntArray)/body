{
  PrimitiveIntStack stack=new PrimitiveIntStack(100);
  int pivotIndex=start;
  int leftIndex=pivotIndex + 1;
  int rightIndex=start + size - 1;
  stack.push(pivotIndex);
  stack.push(rightIndex);
  int leftIndexOfSubSet, rightIndexOfSubset;
  long iteration=0, swaps=0, compares=0;
  int[] vals=new int[size];
  for (int i=0; i < size; i++) {
    int index=tracker.get(start + i);
    if (index != -1) {
      vals[i]=radixOf(dataCache.get(index));
    }
 else {
      vals[i]=-1;
    }
  }
  while (!stack.isEmpty()) {
    rightIndexOfSubset=stack.poll();
    leftIndexOfSubSet=stack.poll();
    leftIndex=leftIndexOfSubSet + 1;
    pivotIndex=leftIndexOfSubSet;
    rightIndex=rightIndexOfSubset;
    if (leftIndex > rightIndex) {
      continue;
    }
    while (leftIndex < rightIndex) {
      compares++;
      while ((leftIndex <= rightIndex) && StringIdMapper.compareDataCache(dataCache,tracker,leftIndex,pivotIndex,CompareType.LE)) {
        compares++;
        leftIndex++;
      }
      compares++;
      while ((leftIndex <= rightIndex) && StringIdMapper.compareDataCache(dataCache,tracker,rightIndex,pivotIndex,CompareType.GE)) {
        compares++;
        rightIndex--;
      }
      if (rightIndex >= leftIndex) {
        swaps++;
        swapElement(tracker,leftIndex,rightIndex);
      }
    }
    if (pivotIndex <= rightIndex) {
      compares++;
      if (pivotIndex != rightIndex && StringIdMapper.compareDataCache(dataCache,tracker,pivotIndex,rightIndex,CompareType.GT)) {
        swaps++;
        swapElement(tracker,pivotIndex,rightIndex);
      }
    }
    if (leftIndexOfSubSet < rightIndex) {
      stack.push(leftIndexOfSubSet);
      stack.push(rightIndex - 1);
    }
    if (rightIndexOfSubset > rightIndex) {
      stack.push(rightIndex + 1);
      stack.push(rightIndexOfSubset);
    }
    if (iteration++ % PROGRESS_INTERVAL == 0) {
      addIterations(PROGRESS_INTERVAL);
    }
  }
}
