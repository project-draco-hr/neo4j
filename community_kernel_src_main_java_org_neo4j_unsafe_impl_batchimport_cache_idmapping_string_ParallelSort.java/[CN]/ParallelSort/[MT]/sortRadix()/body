{
  int[][] rangeParams=new int[threads][2];
  int[] bucketRange=new int[threads];
  Workers<TrackerInitializer> initializers=new Workers<>("TrackerInitializer");
  sortBuckets=new long[threads][2];
  long dataSize=highestSetIndex + 1;
  int bucketSize=safeCastLongToInt(dataSize / threads);
  int count=0, fullCount=0;
  progress.started("SPLIT");
  for (int i=0, threadIndex=0; i < radixIndexCount.length && threadIndex < threads; i++) {
    if ((count + radixIndexCount[i]) > bucketSize) {
      bucketRange[threadIndex]=count == 0 ? i : i - 1;
      rangeParams[threadIndex][0]=fullCount;
      if (count != 0) {
        rangeParams[threadIndex][1]=count;
        fullCount+=count;
        progress.add(count);
        count=radixIndexCount[i];
      }
 else {
        rangeParams[threadIndex][1]=radixIndexCount[i];
        fullCount+=radixIndexCount[i];
        progress.add(radixIndexCount[i]);
      }
      initializers.start(new TrackerInitializer(threadIndex,rangeParams[threadIndex],threadIndex > 0 ? bucketRange[threadIndex - 1] : -1,bucketRange[threadIndex],sortBuckets[threadIndex]));
      threadIndex++;
    }
 else {
      count+=radixIndexCount[i];
    }
    if (threadIndex == threads - 1 || i == radixIndexCount.length - 1) {
      bucketRange[threadIndex]=radixIndexCount.length;
      rangeParams[threadIndex][0]=fullCount;
      rangeParams[threadIndex][1]=safeCastLongToInt(dataSize - fullCount);
      initializers.start(new TrackerInitializer(threadIndex,rangeParams[threadIndex],threadIndex > 0 ? bucketRange[threadIndex - 1] : -1,bucketRange[threadIndex],sortBuckets[threadIndex]));
      break;
    }
  }
  progress.done();
  Throwable error=initializers.await();
  int[] bucketIndex=new int[threads];
  int i=0;
  for (  TrackerInitializer initializer : initializers) {
    bucketIndex[i++]=initializer.bucketIndex;
  }
  if (error != null) {
    throw new AssertionError(error.getMessage() + "\n" + dumpBuckets(rangeParams,bucketRange,bucketIndex),error);
  }
  return rangeParams;
}
