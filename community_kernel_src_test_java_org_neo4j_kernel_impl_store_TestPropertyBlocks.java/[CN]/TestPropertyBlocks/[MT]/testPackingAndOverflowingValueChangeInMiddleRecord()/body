{
  Node node=getGraphDb().createNode();
  long recordsInUseAtStart=propertyRecordsInUse();
  long valueRecordsInUseAtStart=dynamicArrayRecordsInUse();
  int shortArrays=0;
  for (; shortArrays < PropertyType.getPayloadSizeLongs() - 1; shortArrays++) {
    node.setProperty("shortArray" + shortArrays,new long[]{1,2,3,4});
  }
  newTransaction();
  assertEquals(recordsInUseAtStart + 1,propertyRecordsInUse());
  node.setProperty("theDoubleThatBecomesAnArray",1.0);
  newTransaction();
  assertEquals(recordsInUseAtStart + 2,propertyRecordsInUse());
  node.setProperty("theLargeArray",new long[]{1 << 63,1 << 63});
  newTransaction();
  assertTrue(Arrays.equals(new long[]{1 << 63,1 << 63},(long[])node.getProperty("theLargeArray")));
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  node.setProperty("fillerByte1",(byte)3);
  newTransaction();
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  node.setProperty("fillerByte2",(byte)-4);
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  node.setProperty("theDoubleThatBecomesAnArray",new long[]{1 << 63,1 << 63,1 << 63});
  assertEquals(valueRecordsInUseAtStart,dynamicArrayRecordsInUse());
  assertEquals(recordsInUseAtStart + 4,propertyRecordsInUse());
  newTransaction();
  assertEquals(recordsInUseAtStart + 4,propertyRecordsInUse());
  while (shortArrays-- > 0) {
    assertTrue(Arrays.equals(new long[]{1,2,3,4},(long[])node.getProperty("shortArray" + shortArrays)));
  }
  assertEquals((byte)3,node.getProperty("fillerByte1"));
  assertEquals((byte)-4,node.getProperty("fillerByte2"));
  assertTrue(Arrays.equals(new long[]{1 << 63,1 << 63},(long[])node.getProperty("theLargeArray")));
  assertTrue(Arrays.equals(new long[]{1 << 63,1 << 63,1 << 63},(long[])node.getProperty("theDoubleThatBecomesAnArray")));
}
