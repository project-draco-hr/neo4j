{
  Relationship rel=getGraphDb().createNode().createRelationshipTo(getGraphDb().createNode(),DynamicRelationshipType.withName("LOCKS"));
  long recordsInUseAtStart=propertyRecordsInUse();
  int propRecCount=1;
  for (; propRecCount <= 3; propRecCount++) {
    for (int i=1; i <= PropertyType.getPayloadSizeLongs(); i++) {
      rel.setProperty("int" + (propRecCount * 10 + i),(propRecCount * 10 + i));
    }
  }
  newTransaction();
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  for (int i=1; i <= PropertyType.getPayloadSizeLongs(); i++) {
    for (int j=1; j < propRecCount; j++) {
      assertEquals(j * 10 + i,rel.removeProperty("int" + (j * 10 + i)));
      if (i == PropertyType.getPayloadSize() - 1 && j != propRecCount - 1) {
        assertEquals(recordsInUseAtStart + (propRecCount - j),propertyRecordsInUse());
      }
 else       if (i == PropertyType.getPayloadSize() - 1 && j == propRecCount - 1) {
        assertEquals(recordsInUseAtStart,propertyRecordsInUse());
      }
 else {
        assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
      }
    }
  }
  for (int i=1; i <= PropertyType.getPayloadSizeLongs(); i++) {
    for (int j=1; j < propRecCount; j++) {
      assertFalse(rel.hasProperty("int" + (j * 10 + i)));
    }
  }
  newTransaction();
  for (int i=1; i <= PropertyType.getPayloadSizeLongs(); i++) {
    for (int j=1; j < propRecCount; j++) {
      assertFalse(rel.hasProperty("int" + (j * 10 + i)));
    }
  }
  assertEquals(recordsInUseAtStart,propertyRecordsInUse());
}
