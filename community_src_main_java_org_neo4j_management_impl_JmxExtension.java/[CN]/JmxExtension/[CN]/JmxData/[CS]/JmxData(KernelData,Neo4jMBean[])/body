{
  this.beans=beans;
  @SuppressWarnings("hiding") JMXServiceURL url=null;
  try {
    Class<?> cal=Class.forName("sun.management.ConnectorAddressLink");
    try {
      Method importRemoteFrom=cal.getMethod("importRemoteFrom",int.class);
      @SuppressWarnings("unchecked") Map<String,String> remote=(Map<String,String>)importRemoteFrom.invoke(null,Integer.valueOf(0));
      url=getUrlFrom(remote);
    }
 catch (    NoSuchMethodException ex) {
    }
    if (url == null) {
      Method importFrom=cal.getMethod("importFrom",int.class);
      url=getUrlFrom((String)importFrom.invoke(null,Integer.valueOf(0)));
    }
  }
 catch (  LinkageError e) {
    log.log(Level.INFO,"Failed to load local JMX configuration.",e);
  }
catch (  Exception e) {
    log.log(Level.INFO,"Failed to load local JMX configuration.",e);
  }
  if (url == null) {
    Object portObj=kernel.getParam("jmx.port");
    int port=0;
    if (portObj instanceof Integer) {
      port=((Integer)portObj).intValue();
    }
 else     if (portObj instanceof String) {
      try {
        port=Integer.parseInt((String)portObj);
      }
 catch (      NumberFormatException ok) {
      }
    }
    if (port > 0) {
      Object useSslObj=kernel.getParam("jmx.use_ssl");
      boolean useSSL=false;
      if (useSslObj instanceof Boolean) {
        useSSL=((Boolean)useSslObj).booleanValue();
      }
 else       if (useSslObj instanceof String) {
        useSSL=Boolean.parseBoolean((String)useSslObj);
      }
      JMXConnectorServer server=createServer(port,useSSL);
      if (server != null) {
        try {
          server.getMBeanServer().registerMBean(server,getObjectName(kernel,null,"JMX Server"));
        }
 catch (        Exception e) {
          log.log(Level.INFO,"Failed to register MBean server as JMX bean",e);
        }
        url=server.getAddress();
      }
    }
  }
  this.url=url;
}
