{
  this.suiteClass=suiteClass;
  boolean ok=false;
  for (  Constructor<?> suiteConstructor : suiteClass.getConstructors()) {
    if (suiteConstructor.getParameterTypes().length == 0) {
      if (Modifier.isPublic(suiteConstructor.getModifiers())) {
        ok=true;
      }
      break;
    }
  }
  List<Throwable> errors=new ArrayList<Throwable>();
  if (!ok) {
    errors.add(new IllegalArgumentException("Suite class (" + suiteClass.getName() + ") does not have a public zero-arg constructor."));
  }
  if (Modifier.isAbstract(suiteClass.getModifiers())) {
    errors.add(new IllegalArgumentException("Suite class (" + suiteClass.getName() + ") is abstract."));
  }
  buildParameterizations(parameterizations,suiteClass,errors);
  if (!errors.isEmpty()) {
    throw new InitializationError(errors);
  }
}
