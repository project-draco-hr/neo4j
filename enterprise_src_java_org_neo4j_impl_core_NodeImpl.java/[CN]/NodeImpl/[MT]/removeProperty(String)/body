{
  if (key == null) {
    throw new IllegalArgumentException("Null parameter.");
  }
  acquireLock(this,LockType.WRITE);
  NodeCommands nodeCommand=null;
  try {
    ensureFullProperties();
    if (!propertyMap.containsKey(key)) {
      return null;
    }
    nodeCommand=new NodeCommands();
    nodeCommand.setNode(this);
    nodeCommand.initRemoveProperty(doGetProperty(key).getId(),key);
    nodeCommand.execute();
    EventManager em=EventManager.getManager();
    EventData eventData=new EventData(nodeCommand);
    if (!em.generateProActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData)) {
      setRollbackOnly();
      nodeCommand.undo();
      throw new NotFoundException("Generate pro-active event failed, " + "unable to remove property[" + key + "] from "+ this);
    }
    em.generateReActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData);
    return nodeCommand.getOldProperty();
  }
 catch (  ExecuteFailedException e) {
    nodeCommand.undo();
    throw new NotFoundException("Failed executing command " + "while removing property[" + key + "] on "+ this,e);
  }
 finally {
    releaseLock(this,LockType.WRITE);
  }
}
