{
  if (key == null) {
    throw new IllegalArgumentException("Null parameter.");
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  try {
    Property property=null;
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      property=null;
      if (propertyMap != null) {
        property=propertyMap.remove(cachedIndex.getKeyId());
      }
      if (property == null) {
        if (ensureFullProperties()) {
          property=propertyMap.remove(cachedIndex.getKeyId());
          if (property != null) {
            break;
          }
        }
      }
 else {
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      ensureFullProperties();
      for (      int keyId : propertyMap.keySet()) {
        if (!nodeManager.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            property=propertyMap.remove(indexToCheck.getKeyId());
            break;
          }
        }
      }
    }
    if (property == null) {
      return null;
    }
    NodeOpData data=new NodeOpData(this,id,property.getId());
    EventData eventData=new EventData(data);
    if (!nodeManager.generateProActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData)) {
      nodeManager.setRollbackOnly();
      throw new NotFoundException("Generate pro-active event failed, " + "unable to remove property[" + key + "] from "+ this);
    }
    nodeManager.generateReActiveEvent(Event.NODE_REMOVE_PROPERTY,eventData);
    return getPropertyValue(property);
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
  }
}
