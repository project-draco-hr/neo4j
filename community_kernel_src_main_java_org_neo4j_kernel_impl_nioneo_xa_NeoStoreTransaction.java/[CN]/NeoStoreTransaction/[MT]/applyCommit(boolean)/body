{
  try (LockGroup lockGroup=new LockGroup()){
    committed=true;
    CommandSorter sorter=new CommandSorter();
    if (context.getRelationshipTypeTokenCommands().size() != 0) {
      java.util.Collections.sort(context.getRelationshipTypeTokenCommands(),sorter);
      for (      Command.RelationshipTypeTokenCommand command : context.getRelationshipTypeTokenCommands()) {
        command.execute();
        if (isRecovered) {
          addRelationshipType((int)command.getKey());
        }
      }
    }
    if (context.getLabelTokenCommands().size() != 0) {
      java.util.Collections.sort(context.getLabelTokenCommands(),sorter);
      for (      Command.LabelTokenCommand command : context.getLabelTokenCommands()) {
        command.execute();
        if (isRecovered) {
          addLabel((int)command.getKey());
        }
      }
    }
    if (context.getPropertyKeyTokenCommands().size() != 0) {
      java.util.Collections.sort(context.getPropertyKeyTokenCommands(),sorter);
      for (      Command.PropertyKeyTokenCommand command : context.getPropertyKeyTokenCommands()) {
        command.execute();
        if (isRecovered) {
          addPropertyKey((int)command.getKey());
        }
      }
    }
    java.util.Collections.sort(context.getRelCommands(),sorter);
    java.util.Collections.sort(context.getPropCommands(),sorter);
    executeCreated(lockGroup,isRecovered,context.getPropCommands(),context.getRelCommands(),context.getNodeCommands().values(),context.getRelGroupCommands());
    executeModified(lockGroup,isRecovered,context.getPropCommands(),context.getRelCommands(),context.getNodeCommands().values(),context.getRelGroupCommands());
    executeDeleted(lockGroup,context.getPropCommands(),context.getRelCommands(),context.getNodeCommands().values(),context.getRelGroupCommands());
    Collection<NodeLabelUpdate> labelUpdates=gatherLabelUpdatesSortedByNodeId();
    if (!labelUpdates.isEmpty()) {
      updateLabelScanStore(labelUpdates);
      cacheAccess.applyLabelUpdates(labelUpdates);
    }
    if (!context.getNodeCommands().isEmpty() || !context.getPropCommands().isEmpty()) {
      indexes.updateIndexes(new LazyIndexUpdates(getNodeStore(),getPropertyStore(),groupedNodePropertyCommands(context.getPropCommands()),new HashMap<>(context.getNodeCommands())));
    }
    for (    SchemaRuleCommand command : context.getSchemaRuleCommands()) {
      command.setTxId(getCommitTxId());
      command.execute();
switch (command.getMode()) {
case DELETE:
        cacheAccess.removeSchemaRuleFromCache(command.getKey());
      break;
default :
    cacheAccess.addSchemaRule(command.getSchemaRule());
}
}
if (context.getNeoStoreCommand() != null) {
context.getNeoStoreCommand().execute();
if (isRecovered) {
  removeGraphPropertiesFromCache();
}
}
if (!isRecovered) {
context.updateFirstRelationships();
context.commitCows();
}
neoStore.setLastCommittedTx(getCommitTxId());
if (isRecovered) {
neoStore.updateIdGenerators();
}
}
 }
