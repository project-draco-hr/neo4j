{
  if (committed) {
    throw new XAException("Cannot rollback partialy commited " + "transaction[" + getIdentifier() + "]. Recover and "+ "commit");
  }
  try {
    boolean freeIds=neoStore.freeIdsDuringRollback();
    if (relationshipTypeTokenRecords != null) {
      for (      RelationshipTypeTokenRecord record : relationshipTypeTokenRecords.values()) {
        if (record.isCreated()) {
          if (freeIds) {
            getRelationshipTypeStore().freeId(record.getId());
          }
          for (          DynamicRecord dynamicRecord : record.getNameRecords()) {
            if (dynamicRecord.isCreated()) {
              getRelationshipTypeStore().freeId((int)dynamicRecord.getId());
            }
          }
        }
        removeRelationshipTypeFromCache(record.getId());
      }
    }
    for (    RecordChange<Long,NodeRecord,Void> change : nodeRecords.changes()) {
      NodeRecord record=change.forReadingLinkage();
      if (freeIds && record.isCreated()) {
        getNodeStore().freeId(record.getId());
      }
      removeNodeFromCache(record.getId());
    }
    for (    RecordChange<Long,RelationshipRecord,Void> change : relRecords.changes()) {
      long id=change.getKey();
      RelationshipRecord record=change.forReadingLinkage();
      if (freeIds && change.isCreated()) {
        getRelationshipStore().freeId(id);
      }
      removeRelationshipFromCache(id);
    }
    if (neoStoreRecord != null) {
      removeGraphPropertiesFromCache();
    }
    if (propertyKeyTokenRecords != null) {
      for (      PropertyKeyTokenRecord record : propertyKeyTokenRecords.values()) {
        if (record.isCreated()) {
          if (freeIds) {
            getPropertyStore().getPropertyKeyTokenStore().freeId(record.getId());
          }
          for (          DynamicRecord dynamicRecord : record.getNameRecords()) {
            if (dynamicRecord.isCreated()) {
              getPropertyStore().getPropertyKeyTokenStore().freeId((int)dynamicRecord.getId());
            }
          }
        }
      }
    }
    for (    RecordChange<Long,PropertyRecord,PrimitiveRecord> change : propertyRecords.changes()) {
      PropertyRecord record=change.forReadingLinkage();
      if (record.getNodeId() != -1) {
        removeNodeFromCache(record.getNodeId());
      }
 else       if (record.getRelId() != -1) {
        removeRelationshipFromCache(record.getRelId());
      }
      if (record.isCreated()) {
        if (freeIds) {
          getPropertyStore().freeId(record.getId());
        }
        for (        PropertyBlock block : record.getPropertyBlocks()) {
          for (          DynamicRecord dynamicRecord : block.getValueRecords()) {
            if (dynamicRecord.isCreated()) {
              if (dynamicRecord.getType() == PropertyType.STRING.intValue()) {
                getPropertyStore().freeStringBlockId(dynamicRecord.getId());
              }
 else               if (dynamicRecord.getType() == PropertyType.ARRAY.intValue()) {
                getPropertyStore().freeArrayBlockId(dynamicRecord.getId());
              }
 else {
                throw new InvalidRecordException("Unknown type on " + dynamicRecord);
              }
            }
          }
        }
      }
    }
    for (    RecordChange<Long,Collection<DynamicRecord>,SchemaRule> records : schemaRuleChanges.changes()) {
      long id=-1;
      for (      DynamicRecord record : records.forChangingData()) {
        if (id == -1) {
          id=record.getId();
        }
        if (freeIds && record.isCreated()) {
          getSchemaStore().freeId(record.getId());
        }
      }
    }
  }
  finally {
    indexUpdates.close();
    clear();
  }
}
