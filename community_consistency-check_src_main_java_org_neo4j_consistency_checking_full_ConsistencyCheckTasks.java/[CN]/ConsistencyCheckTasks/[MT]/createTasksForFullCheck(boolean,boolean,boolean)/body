{
  List<ConsistencyCheckerTask> tasks=new ArrayList<>();
  if (checkGraph) {
    MandatoryProperties mandatoryProperties=new MandatoryProperties(nativeStores);
    StoreProcessor processor=multiPass.processor(CheckStage.Stage1_NS_PropsLabels,PROPERTIES);
    tasks.add(create(CheckStage.Stage1_NS_PropsLabels.name(),nativeStores.getNodeStore(),processor));
    processor=multiPass.processor(CheckStage.Stage2_RS_Labels,LABELS);
    multiPass.reDecorateRelationship(processor,RelationshipRecordCheck.relationshipRecordCheckForwardPass());
    tasks.add(create(CheckStage.Stage2_RS_Labels.name(),nativeStores.getRelationshipStore(),processor));
    tasks.add(new CacheTask.CacheNextRel(CheckStage.Stage3_NS_NextRel,cacheAccess,Scanner.scan(nativeStores.getNodeStore())));
    processor=multiPass.processor(CheckStage.Stage4_RS_NextRel,NODES);
    multiPass.reDecorateRelationship(processor,RelationshipRecordCheck.relationshipRecordCheckBackwardPass(new PropertyChain<>(mandatoryProperties.forRelationships(reporter))));
    tasks.add(create(CheckStage.Stage4_RS_NextRel.name(),nativeStores.getRelationshipStore(),processor));
    multiPass.reDecorateNode(processor,NodeRecordCheck.toCheckNextRel(),true);
    multiPass.reDecorateNode(processor,NodeRecordCheck.toCheckNextRelationshipGroup(),false);
    tasks.add(new CacheTask.CheckNextRel(CheckStage.Stage5_Check_NextRel,cacheAccess,nativeStores,processor));
    processor=multiPass.processor(CheckStage.Stage6_RS_Forward,RELATIONSHIPS);
    multiPass.reDecorateRelationship(processor,RelationshipRecordCheck.relationshipRecordCheckSourceChain());
    tasks.add(create(CheckStage.Stage6_RS_Forward.name(),nativeStores.getRelationshipStore(),processor));
    processor=multiPass.processor(CheckStage.Stage7_RS_Backward,RELATIONSHIPS);
    multiPass.reDecorateRelationship(processor,RelationshipRecordCheck.relationshipRecordCheckSourceChain());
    tasks.add(create(CheckStage.Stage7_RS_Backward.name(),nativeStores.getRelationshipStore(),processor));
    StoreProcessor relGrpProcessor=multiPass.processor(Stage.PARALLEL_FORWARD,RELATIONSHIP_GROUPS);
    tasks.add(create("RelationshipGroupStore-RelGrp",nativeStores.getRelationshipGroupStore(),relGrpProcessor));
    PropertyReader propertyReader=new PropertyReader(nativeStores);
    tasks.add(recordScanner(CheckStage.Stage8_PS_Props.name(),new IterableStore<>(nativeStores.getNodeStore(),true),new PropertyAndNode2LabelIndexProcessor(reporter,(checkIndexes ? indexes : null),propertyReader,cacheAccess,mandatoryProperties.forNodes(reporter)),CheckStage.Stage8_PS_Props,new IterableStore<>(nativeStores.getPropertyStore(),true)));
    tasks.add(create("StringStore-Str",nativeStores.getStringStore(),multiPass.processor(Stage.SEQUENTIAL_FORWARD,STRINGS)));
    tasks.add(create("ArrayStore-Arrays",nativeStores.getArrayStore(),multiPass.processor(Stage.SEQUENTIAL_FORWARD,ARRAYS)));
  }
  tasks.add(create("SchemaStore",nativeStores.getSchemaStore()));
  final SchemaRecordCheck schemaCheck=new SchemaRecordCheck(new SchemaStorage(nativeStores.getSchemaStore()));
  tasks.add(new SchemaStoreProcessorTask<>("SchemaStoreProcessor-check_rules",statistics,numberOfThreads,nativeStores.getSchemaStore(),nativeStores,"check_rules",schemaCheck,progress,cacheAccess,defaultProcessor));
  tasks.add(new SchemaStoreProcessorTask<>("SchemaStoreProcessor-check_obligations",statistics,numberOfThreads,nativeStores.getSchemaStore(),nativeStores,"check_obligations",schemaCheck.forObligationChecking(),progress,cacheAccess,defaultProcessor));
  if (checkGraph) {
    tasks.add(create("RelationshipTypeTokenStore",nativeStores.getRelationshipTypeTokenStore()));
    tasks.add(create("PropertyKeyTokenStore",nativeStores.getPropertyKeyTokenStore()));
    tasks.add(create("LabelTokenStore",nativeStores.getLabelTokenStore()));
    tasks.add(create("RelationshipTypeNameStore",nativeStores.getRelationshipTypeNameStore()));
    tasks.add(create("PropertyKeyNameStore",nativeStores.getPropertyKeyNameStore()));
    tasks.add(create("LabelNameStore",nativeStores.getLabelNameStore()));
    tasks.add(create("NodeDynamicLabelStore",nativeStores.getNodeDynamicLabelStore()));
  }
  if (checkLabelScanStore) {
    tasks.add(recordScanner("NodeStoreToLabelScanStore",new IterableStore<>(nativeStores.getNodeStore(),true),new NodeToLabelScanRecordProcessor(reporter,labelScanStore),CheckStage.Stage9_NS_LabelCounts));
  }
  ConsistencyReporter filteredReporter=multiPass.reporter(NODES);
  if (checkLabelScanStore) {
    tasks.add(recordScanner("LabelScanStore",labelScanStore.newAllEntriesReader(),new LabelScanDocumentProcessor(filteredReporter,new LabelScanCheck()),Stage.SEQUENTIAL_FORWARD));
  }
  if (checkIndexes) {
    for (    IndexRule indexRule : indexes.rules()) {
      tasks.add(recordScanner(format("Index_%d",indexRule.getId()),new IndexIterator(indexes.accessorFor(indexRule)),new IndexEntryProcessor(filteredReporter,new IndexCheck(indexRule)),Stage.SEQUENTIAL_FORWARD));
    }
  }
  return tasks;
}
