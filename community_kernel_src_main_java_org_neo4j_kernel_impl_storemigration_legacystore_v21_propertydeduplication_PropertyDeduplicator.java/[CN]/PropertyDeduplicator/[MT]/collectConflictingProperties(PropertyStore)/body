{
  final PrimitiveLongObjectMap<List<DuplicateCluster>> duplicateClusters=Primitive.longObjectMap();
  long highId=store.getHighId();
  PropertyRecord head=store.newRecord(), tail=store.newRecord();
  for (long headRecordId=0; headRecordId < highId; ++headRecordId) {
    store.getRecord(headRecordId,head,FORCE);
    if (!head.inUse() || head.getPrevProp() != Record.NO_NEXT_PROPERTY.intValue()) {
      continue;
    }
    long propertyId=headRecordId;
    while (propertyId != Record.NO_NEXT_PROPERTY.intValue()) {
      store.getRecord(propertyId,tail,NORMAL);
      Iterable<PropertyBlock> propertyBlocks=tail;
      scanForDuplicates(propertyId,propertyBlocks);
      propertyId=tail.getNextProp();
    }
    final long localHeadRecordId=headRecordId;
    localDuplicateClusters.visitEntries(new PrimitiveIntObjectVisitor<DuplicateCluster,RuntimeException>(){
      @Override public boolean visited(      int key,      DuplicateCluster duplicateCluster){
        List<DuplicateCluster> clusters=duplicateClusters.get(localHeadRecordId);
        if (clusters == null) {
          clusters=new ArrayList<>();
          duplicateClusters.put(localHeadRecordId,clusters);
        }
        clusters.add(duplicateCluster);
        return false;
      }
    }
);
    seenPropertyKeys.clear();
    localDuplicateClusters.clear();
  }
  return duplicateClusters;
}
