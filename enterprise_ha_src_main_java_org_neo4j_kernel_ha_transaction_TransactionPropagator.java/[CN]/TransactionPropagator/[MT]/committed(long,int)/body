{
  int replicationFactor=desiredReplicationFactor;
  if (config.getServerId().toIntegerIndex() != authorId) {
    replicationFactor--;
  }
  if (replicationFactor == 0) {
    return;
  }
  Collection<Future<Void>> committers=new HashSet<>();
  try {
    int successfulReplications=0;
    Iterator<Slave> slaveList=filter(replicationStrategy.prioritize(slaves.getSlaves()).iterator(),authorId);
    CompletionNotifier notifier=new CompletionNotifier();
    for (int i=0; i < replicationFactor && slaveList.hasNext(); i++) {
      committers.add(slaveCommitters.submit(slaveCommitter(slaveList.next(),txId,notifier)));
    }
    Collection<Future<Void>> toAdd=new ArrayList<>();
    Collection<Future<Void>> toRemove=new ArrayList<>();
    while (!committers.isEmpty() && successfulReplications < replicationFactor) {
      toAdd.clear();
      toRemove.clear();
      for (      Future<Void> committer : committers) {
        if (!committer.isDone()) {
          continue;
        }
        if (isSuccessful(committer)) {
          successfulReplications++;
        }
 else         if (slaveList.hasNext()) {
          toAdd.add(slaveCommitters.submit(slaveCommitter(slaveList.next(),txId,notifier)));
        }
        toRemove.add(committer);
      }
      if (!toAdd.isEmpty()) {
        committers.addAll(toAdd);
      }
      if (!toRemove.isEmpty()) {
        committers.removeAll(toRemove);
      }
      if (!committers.isEmpty()) {
        notifier.waitForAnyCompletion();
      }
    }
    if (!(successfulReplications >= replicationFactor)) {
      log.logMessage("Transaction " + txId + " couldn't commit on enough slaves, desired "+ replicationFactor+ ", but could only commit at "+ successfulReplications);
    }
  }
 catch (  Throwable t) {
    log.logMessage("Unknown error commit master transaction at slave",t);
  }
 finally {
    for (    Future<Void> committer : committers) {
      committer.cancel(false);
    }
  }
}
