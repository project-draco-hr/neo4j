{
  api=dbRule.getGraphDatabaseAPI();
  nonIndexedPropKey="notIndexed";
  indexedPropKey="indexed";
  Label usedLabel=DynamicLabel.label("UsedLabel");
  try (Transaction transaction=api.beginTx()){
    api.schema().indexFor(usedLabel).on(indexedPropKey).create();
    transaction.success();
  }
   try (Transaction transaction=api.beginTx()){
    indexedValue="value1";
    nonIndexedValue="value2";
    Node nodeA=api.createNode(usedLabel);
    nodeA.setProperty(indexedPropKey,indexedValue);
    nodeA.setProperty(nonIndexedPropKey,nonIndexedValue);
    nodeId=nodeA.getId();
    transaction.success();
  }
   DependencyResolver resolver=api.getDependencyResolver();
  NeoStoreSupplier neoStoreSupplier=resolver.resolveDependency(NeoStoreSupplier.class);
  NeoStore neoStore=neoStoreSupplier.get();
  nodeStore=neoStore.getNodeStore();
  PropertyKeyTokenStore propertyKeyTokenStore=neoStore.getPropertyKeyTokenStore();
  propertyKeys=PropertyDeduplicatorTestUtil.indexPropertyKeys(propertyKeyTokenStore);
  propertyStore=neoStore.getPropertyStore();
  nodeRecord=nodeStore.getRecord(nodeId);
  propertyId=nodeRecord.getNextProp();
  indexMock=mock(IndexLookup.Index.class);
  when(indexMock.contains(nodeId,indexedValue)).thenReturn(true);
  propertyRemoverMock=mock(DuplicatePropertyRemover.class);
}
