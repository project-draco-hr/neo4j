def __init__(self, argv=None):
    format_output = subprocess.Popen(['dot', '-T?'], stderr=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[1]
    supported_formats = format_output.split(': ')[2][:(-1)].split(' ')
    if (not argv):
        argv = sys.argv
    self.usage = '%prog [options] inputfile'
    self.version = ('Version: %s\n' % __VERSION__)
    self.version += ('Copyright(c) 2008-2009: %s\n' % __AUTHOR__)
    self.option_list = [Option('-o', '--outfile', action='store', dest='outfile', help='Output file'), Option('-L', '--layout', action='store', dest='layout', default='dot', type='choice', choices=['dot', 'neato', 'twopi', 'circo', 'fdp'], help='Layout type. LAYOUT=<dot|neato|twopi|circo|fdp>'), Option('-F', '--format', action='store', dest='format', default='png', type='choice', choices=supported_formats, help=(('Format type. FORMAT=<' + '|'.join(supported_formats)) + '>')), Option('--debug', action='store_true', dest='do_debug', help=SUPPRESS_HELP), Option('-v', '--verbose', action='store_true', dest='do_verbose', default=False, help='verbose output')]
    self.parser = OptionParser(usage=self.usage, version=self.version, option_list=self.option_list)
    (self.options, self.args) = self.parser.parse_args()
    if (len(self.args) != 1):
        self.parser.print_help()
        sys.exit(1)
    self.options.infile = self.args[0]
