{
  description=dodgeStartingUnicodeMarker(description);
  long endNodeId;
  Map<String,Object> payload;
  try {
    payload=JsonHelper.jsonToMap(description);
    endNodeId=getNodeIdFromUri((String)payload.get("to"));
  }
 catch (  PropertyValueException e) {
    return buildBadJsonExceptionResponse(description,e,renderer);
  }
  List<PathRepresentation> paths;
  try {
    paths=actions.findPaths(startNodeId,endNodeId,single,payload);
  }
 catch (  StartNodeNotFoundException e) {
    return Response.status(Status.NOT_FOUND).build();
  }
catch (  EndNodeNotFoundException e) {
    return Response.status(Status.BAD_REQUEST).build();
  }
catch (  StartNodeSameAsEndNodeException e) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  if (paths.isEmpty()) {
    return Response.status(single ? Status.NOT_FOUND : Status.NO_CONTENT).build();
  }
  return addHeaders(Response.ok(renderer.render(paths.toArray(new PathRepresentation[paths.size()])),renderer.getMediaType())).build();
}
