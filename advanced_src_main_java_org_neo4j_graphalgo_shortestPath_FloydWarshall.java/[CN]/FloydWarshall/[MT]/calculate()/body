{
  if (doneCalculation) {
    return;
  }
  doneCalculation=true;
  int n=nodeSet.size();
  costMatrix=(CostType[][])new Object[n][n];
  predecessors=new Integer[n][n];
  IndexedNodes=new Node[n];
  nodeIndexes=new HashMap<Node,Integer>();
  for (int i=0; i < n; ++i) {
    for (int j=0; j < n; ++j) {
      costMatrix[i][j]=infinitelyBad;
    }
    costMatrix[i][i]=startCost;
  }
  int nodeIndex=0;
  for (  Node node : nodeSet) {
    nodeIndexes.put(node,nodeIndex);
    IndexedNodes[nodeIndex]=node;
    ++nodeIndex;
  }
  for (  Relationship relationship : relationshipSet) {
    Integer i1=nodeIndexes.get(relationship.getStartNode());
    Integer i2=nodeIndexes.get(relationship.getEndNode());
    if (i1 == null || i2 == null) {
      continue;
    }
    if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.OUTGOING)) {
      costMatrix[i1][i2]=costEvaluator.getCost(relationship,false);
      predecessors[i1][i2]=i1;
    }
    if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.INCOMING)) {
      costMatrix[i2][i1]=costEvaluator.getCost(relationship,true);
      predecessors[i2][i1]=i2;
    }
  }
  for (int v=0; v < n; ++v) {
    for (int i=0; i < n; ++i) {
      for (int j=0; j < n; ++j) {
        CostType alternative=costAccumulator.addCosts(costMatrix[i][v],costMatrix[v][j]);
        if (costComparator.compare(costMatrix[i][j],alternative) > 0) {
          costMatrix[i][j]=alternative;
          predecessors[i][j]=predecessors[v][j];
        }
      }
    }
  }
}
