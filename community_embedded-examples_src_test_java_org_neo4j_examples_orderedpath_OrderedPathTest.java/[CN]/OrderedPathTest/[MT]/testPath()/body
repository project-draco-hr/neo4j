{
  final ArrayList<RelationshipType> orderedPathContext=new ArrayList<RelationshipType>();
  orderedPathContext.add(REL1);
  orderedPathContext.add(withName("REL2"));
  orderedPathContext.add(withName("REL3"));
  TraversalDescription td=Traversal.description().evaluator(new Evaluator(){
    @Override public Evaluation evaluate(    final Path path){
      if (path.length() == 0) {
        return Evaluation.EXCLUDE_AND_CONTINUE;
      }
      RelationshipType expectedType=orderedPathContext.get(path.length() - 1);
      boolean isExpectedType=path.lastRelationship().isType(expectedType);
      boolean included=path.length() == orderedPathContext.size() && isExpectedType;
      boolean continued=path.length() < orderedPathContext.size() && isExpectedType;
      return Evaluation.of(included,continued);
    }
  }
);
  Traverser t=td.traverse(db.getNodeById(1));
  for (  Path path : t) {
    System.out.println(path);
  }
  assertEquals(1,count(td.traverse(db.getNodeById(1))));
}
