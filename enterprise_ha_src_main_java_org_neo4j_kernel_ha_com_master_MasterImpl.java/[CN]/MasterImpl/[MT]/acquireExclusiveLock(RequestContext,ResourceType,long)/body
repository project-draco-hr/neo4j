{
  assertCorrectEpoch(context);
  Locks.Client session;
  try {
    session=conversationManager.acquire(context).getLocks();
  }
 catch (  NoSuchEntryException|ConcurrentAccessException e) {
    return spi.packTransactionObligationResponse(context,new LockResult(LockStatus.NOT_LOCKED,"Unable to acquire exclusive lock: " + e.getMessage()));
  }
  try {
    for (    long resourceId : resourceIds) {
      session.acquireExclusive(type,resourceId);
    }
    return spi.packTransactionObligationResponse(context,new LockResult(LockStatus.OK_LOCKED));
  }
 catch (  DeadlockDetectedException e) {
    return spi.packTransactionObligationResponse(context,new LockResult(LockStatus.DEAD_LOCKED,"Can't acquire exclusive lock, because it would have caused a deadlock: " + e.getMessage()));
  }
catch (  IllegalResourceException e) {
    return spi.packTransactionObligationResponse(context,new LockResult(LockStatus.NOT_LOCKED));
  }
 finally {
    conversationManager.release(context);
  }
}
