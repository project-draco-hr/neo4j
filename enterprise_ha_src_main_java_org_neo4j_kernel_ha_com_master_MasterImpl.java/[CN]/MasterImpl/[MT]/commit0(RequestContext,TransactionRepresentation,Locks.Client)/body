{
  if (locks.trySharedLock(ResourceTypes.SCHEMA,ResourceTypes.schemaResource())) {
    long txId=spi.applyPreparedTransaction(preparedTransaction);
    return spi.packTransactionObligationResponse(context,txId);
  }
 else {
    throw new TransactionFailureException(Status.Schema.SchemaModifiedConcurrently,"Failed to commit, because another transaction is making " + "schema changes. Slave commits are disallowed while schema changes are being committed. " + "Retrying the transaction should yield a successful result.");
  }
}
