{
  assertTrue(nStore.loadLightNode(node));
  ArrayMap<Integer,PropertyData> props=nStore.getProperties(node,false);
  int count=0;
  for (  int keyId : props.keySet()) {
    int id=props.get(keyId).getId();
    PropertyRecord record=pStore.getRecord(id);
    PropertyData data=new PropertyData(id,getValue(record));
    if (data.getId() == prop1) {
      assertEquals("prop1",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals("string1",data.getValue());
      nStore.changeProperty(node,prop1,"-string1");
    }
 else     if (data.getId() == prop2) {
      assertEquals("prop2",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals(new Integer(1),data.getValue());
      nStore.changeProperty(node,prop2,new Integer(-1));
    }
 else     if (data.getId() == prop3) {
      assertEquals("prop3",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals(new Boolean(true),data.getValue());
      nStore.changeProperty(node,prop3,new Boolean(false));
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  count=0;
  RelationshipChainPosition pos=rStore.getRelationshipChainPosition(node);
  while (true) {
    Iterable<RelationshipData> relData=rStore.getMoreRelationships(node,pos);
    if (!relData.iterator().hasNext()) {
      break;
    }
    for (    RelationshipData rel : relData) {
      if (rel.getId() == rel1) {
        assertEquals(node,rel.firstNode());
        assertEquals(relType1,rel.relationshipType());
      }
 else       if (rel.getId() == rel2) {
        assertEquals(node,rel.secondNode());
        assertEquals(relType2,rel.relationshipType());
      }
 else {
        throw new IOException();
      }
      count++;
    }
  }
  assertEquals(2,count);
}
