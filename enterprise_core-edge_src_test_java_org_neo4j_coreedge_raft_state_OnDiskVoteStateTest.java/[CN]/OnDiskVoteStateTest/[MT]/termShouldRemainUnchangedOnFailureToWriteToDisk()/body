{
  StoreFileChannel channel=mock(StoreFileChannel.class);
  when(channel.read(any(ByteBuffer.class))).thenReturn(-1);
  FileSystemAbstraction fsa=mock(FileSystemAbstraction.class);
  when(fsa.open(any(File.class),anyString())).thenReturn(channel);
  when(channel.write(any(ByteBuffer.class))).thenReturn(99).thenThrow(new IOException());
  final Supplier databaseHealthSupplier=mock(Supplier.class);
  when(databaseHealthSupplier.get()).thenReturn(mock(DatabaseHealth.class));
  OnDiskVoteState<CoreMember> state=new OnDiskVoteState<>(fsa,new File(testDir.directory(),"on.disk.state"),100,databaseHealthSupplier,new CoreMemberMarshal());
  AdvertisedSocketAddress firstLocalhost=new AdvertisedSocketAddress("localhost:" + 1234);
  CoreMember firstMember=new CoreMember(firstLocalhost,firstLocalhost);
  state.votedFor(firstMember,0);
  assertEquals(firstMember,state.votedFor());
  AdvertisedSocketAddress secondLocalhost=new AdvertisedSocketAddress("localhost:" + 1235);
  CoreMember secondMember=new CoreMember(secondLocalhost,secondLocalhost);
  try {
    state.votedFor(secondMember,1);
    fail("Test setup should have caused an exception here");
  }
 catch (  Exception e) {
    assertEquals(firstMember,state.votedFor());
  }
}
