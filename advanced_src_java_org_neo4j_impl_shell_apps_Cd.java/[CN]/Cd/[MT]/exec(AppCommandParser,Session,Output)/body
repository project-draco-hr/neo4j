{
  List<Long> paths=readPaths(session);
  Node currentNode=this.getCurrentNode(session);
  Node newNode=null;
  if (parser.arguments().isEmpty()) {
    newNode=NodeManager.getManager().getReferenceNode();
    paths.clear();
  }
 else {
    String arg=parser.arguments().get(0);
    long newId=currentNode.getId();
    if (arg.equals("..")) {
      if (paths.size() > 0) {
        newId=paths.remove(paths.size() - 1);
      }
    }
 else     if (arg.equals(".")) {
    }
 else {
      newId=Long.parseLong(arg);
      if (newId == currentNode.getId()) {
        throw new ShellException("Can't cd to the current node");
      }
      boolean absolute=parser.options().containsKey("a");
      if (!absolute && !this.nodeIsConnected(currentNode,newId)) {
        throw new ShellException("Node " + newId + " isn't connected to the current node");
      }
      paths.add(currentNode.getId());
    }
    newNode=this.getNodeById(newId);
  }
  this.setCurrentNode(session,newNode);
  session.set(AbstractClient.PROMPT_KEY,"neo-sh [" + newNode.getId() + "] $ ");
  session.set(WORKING_DIR_KEY,this.makePath(paths));
  return null;
}
