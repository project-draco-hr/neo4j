{
  data.get();
  String script="nodeIndex = g.idx('node_auto_index');" + "edgeIndex = g.idx('relationship_auto_index');" + ""+ "node = { uri, properties -> "+ "existing = nodeIndex.get('uri', uri);"+ "properties['uri'] = uri;"+ "if (existing) {    "+ "return existing[0];  "+ "}  else {"+ "    return g.addVertex(properties);"+ "};"+ "};"+ "Object.metaClass.makeNode = node;"+ "edge = { type, source_uri, target_uri, properties ->"+ "  source = nodeIndex.get('uri', source_uri) >> 1;"+ "  target = nodeIndex.get('uri', target_uri) >> 1;"+ "  nodeKey = source.id + '-' + target.id;"+ "  existing = edgeIndex.get('nodes', nodeKey);"+ "  if (existing) {"+ "    return existing;"+ "  };"+ "  properties['nodes'] = nodeKey;"+ "  g.addEdge(source, target, type, properties);"+ "};"+ "Object.metaClass.makeEdge = edge;";
  String payload="{\"script\":\"" + script + "\"}";
  description(formatGroovy(script));
  gen.get().expectedStatus(Status.OK.getStatusCode()).payload(JSONPrettifier.parse(payload));
  String response=gen.get().post(ENDPOINT).entity();
  for (int i=0; i < 1000; i++) {
    String uri="uri" + i;
    payload="{\"script\":\"n = Object.metaClass.makeNode('" + uri + "',[:]\"}";
    gen.get().expectedStatus(Status.OK.getStatusCode()).payload(JSONPrettifier.parse(payload));
    response=gen.get().post(ENDPOINT).entity();
    assertTrue(response.contains(uri));
  }
  for (int i=0; i < 999; i++) {
    String uri="uri";
    payload="{\"script\":\"n = Object.metaClass.makeEdge('knows','" + uri + i+ "','"+ uri+ (i + 1)+ "'[:]\"}";
    gen.get().expectedStatus(Status.OK.getStatusCode()).payload(JSONPrettifier.parse(payload));
    response=gen.get().post(ENDPOINT).entity();
    assertTrue(response.contains(uri));
  }
}
