{
  RandomAdversary adversary=new RandomAdversary(0.1,0.1,0.0);
  adversary.setProbabilityFactor(0.0);
  EphemeralFileSystemAbstraction fs=new EphemeralFileSystemAbstraction();
  AdversarialFileSystemAbstraction afs=new AdversarialFileSystemAbstraction(adversary,fs);
  PageSwapperFactory swapperFactory=new SingleFilePageSwapperFactory(afs);
  int maxPages=10;
  int cachePageSize=8192;
  LinearHistoryPageCacheTracer tracer=new LinearHistoryPageCacheTracer();
  File fileA=new File("a");
  File fileB=new File("b");
  fs.open(fileA,"rw").close();
  fs.open(fileB,"rw").close();
  try (MuninnPageCache cache=new MuninnPageCache(swapperFactory,maxPages,cachePageSize,tracer);PagedFile pfA=cache.map(fileA,8192);PagedFile pfB=cache.map(fileB,8192)){
    adversary.setProbabilityFactor(1.0);
    ThreadLocalRandom rng=ThreadLocalRandom.current();
    for (int i=0; i < 200; i++) {
      try {
        boolean readOnly=rng.nextBoolean();
        int flags=readOnly ? PF_SHARED_LOCK : PF_EXCLUSIVE_LOCK;
        int startPage=rng.nextInt(0,10);
        int iterations=rng.nextInt(1,10);
        PagedFile file=rng.nextBoolean() ? pfA : pfB;
        try (PageCursor cursor=file.io(startPage,flags)){
          for (int j=0; j < iterations; j++) {
            cursor.next();
            Thread.sleep(1);
            if (!readOnly) {
              for (int k=0; k < 8192 / 4; k++) {
                cursor.putInt(rng.nextInt());
              }
            }
          }
        }
         if (rng.nextDouble() < 0.1) {
          file.flushAndForce();
        }
 else         if (rng.nextBoolean()) {
          cache.flushAndForce();
        }
      }
 catch (      Throwable ignore) {
      }
    }
    adversary.setProbabilityFactor(0.0);
  }
   tracer.printHistory(System.out);
}
