{
  return new IndexHits<T>(){
    @Override public boolean hasNext(){
      return ids.hasNext();
    }
    @Override public T next(){
      return entityOf(ids.next());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public ResourceIterator<T> iterator(){
      return this;
    }
    @Override public int size(){
      return ids.size();
    }
    @Override public void close(){
      ids.close();
    }
    @Override public T getSingle(){
      try {
        long singleId=PrimitiveLongCollections.single(ids,-1L);
        return singleId == -1 ? null : entityOf(singleId);
      }
  finally {
        close();
      }
    }
    @Override public float currentScore(){
      return 0;
    }
  }
;
}
