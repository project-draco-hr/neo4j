{
  int logIndex=1;
  IdGeneratorFactory idGeneratorFactory=mock(IdGeneratorFactory.class);
  IdGenerator idGenerator=mock(IdGenerator.class);
  when(idGenerator.nextId()).thenReturn(1L);
  when(idGeneratorFactory.get(any(IdType.class))).thenReturn(idGenerator);
  StubTransactionCommitProcess commitProcess=new StubTransactionCommitProcess(null,null);
  when(dependencies.resolveDependency(TransactionRepresentationCommitProcess.class)).thenReturn(commitProcess);
  StorageEngine storageEngine=mockedStorageEngine();
  when(dependencies.resolveDependency(StorageEngine.class)).thenReturn(storageEngine);
  ReplicatedTokenHolder<Token,LabelTokenRecord> tokenHolder=new ReplicatedLabelTokenHolder(new StubReplicator(),idGeneratorFactory,dependencies,TIMEOUT_MILLIS,NullLogProvider.getInstance());
  tokenHolder.setLastCommittedIndex(-1);
  ReplicatedTokenRequest tokenRequest=new ReplicatedTokenRequest(LABEL,"Person",createCommandBytes(createCommands(EXPECTED_TOKEN_ID)));
  tokenHolder.onReplicated(tokenRequest,logIndex);
  List<TransactionRepresentation> transactions=commitProcess.transactionsToApply;
  assertEquals(1,transactions.size());
  assertEquals(logIndex,decodeLogIndexFromTxHeader(transactions.get(0).additionalHeader()));
}
