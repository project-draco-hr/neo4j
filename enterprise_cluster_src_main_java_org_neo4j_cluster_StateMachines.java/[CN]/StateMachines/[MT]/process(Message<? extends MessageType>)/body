{
  stateMachineExecutor.execute(new Runnable(){
    OutgoingMessageHolder temporaryOutgoing=new OutgoingMessageHolder();
    @Override public void run(){
      monitor.beganProcessing(message);
      lock.writeLock().lock();
      try {
synchronized (timeouts) {
          StateMachine stateMachine=stateMachines.get(message.getMessageType().getClass());
          if (stateMachine == null) {
            return;
          }
          handleMessage(stateMachine,message);
          Message<? extends MessageType> outgoingMessage;
          List<Message<? extends MessageType>> toSend=new LinkedList<>();
          try {
            while ((outgoingMessage=outgoing.nextOutgoingMessage()) != null) {
              message.copyHeadersTo(outgoingMessage,CONVERSATION_ID,CREATED_BY);
              for (              MessageProcessor outgoingProcessor : outgoingProcessors) {
                try {
                  if (!outgoingProcessor.process(outgoingMessage)) {
                    break;
                  }
                }
 catch (                Throwable e) {
                  log.warn("Outgoing message processor threw exception",e);
                }
              }
              if (outgoingMessage.hasHeader(Message.TO)) {
                outgoingMessage.setHeader(Message.INSTANCE_ID,instanceIdHeaderValue);
                toSend.add(outgoingMessage);
              }
 else {
                StateMachine internalStatemachine=stateMachines.get(outgoingMessage.getMessageType().getClass());
                if (internalStatemachine != null) {
                  handleMessage(internalStatemachine,outgoingMessage);
                }
              }
            }
            if (!toSend.isEmpty()) {
              sender.process(toSend);
            }
          }
 catch (          Exception e) {
            log.warn("Error processing message " + message,e);
          }
        }
      }
  finally {
        lock.writeLock().unlock();
      }
      executor.drain();
      monitor.finishedProcessing(message);
    }
    private void handleMessage(    StateMachine stateMachine,    Message<? extends MessageType> message){
      stateMachine.handle(message,temporaryOutgoing);
      for (Message<? extends MessageType> next; (next=temporaryOutgoing.nextOutgoingMessage()) != null; ) {
        outgoing.offer(next);
      }
    }
  }
);
  return true;
}
