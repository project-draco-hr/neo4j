{
  return new Indicator.Decorator(actual,process){
    private final Timer total=new Timer(null);
    private long totalCount;
    private Map<String,Timer> timers=new HashMap<String,Timer>();
    @Override public void startProcess(    long totalCount){
      super.startProcess(totalCount);
      this.totalCount=totalCount;
      total.items=totalCount;
      total.start();
    }
    @Override public void startPart(    String part,    long totalCount){
      super.startPart(part,totalCount);
      Timer timer=new Timer(part);
      timers.put(part,timer);
      timer.items=totalCount;
      timer.start();
    }
    @Override public void completePart(    String part){
      timers.get(part).stop();
      super.completePart(part);
    }
    @Override public void completeProcess(){
      total.stop();
      super.completeProcess();
      this.accept(visitor);
    }
    private void accept(    Visitor visitor){
      try {
        visitor.beginTimingProgress(total.items,total.time);
        for (        Timer timer : timers.values()) {
          timer.accept(visitor);
        }
        visitor.endTimingProgress();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
;
}
