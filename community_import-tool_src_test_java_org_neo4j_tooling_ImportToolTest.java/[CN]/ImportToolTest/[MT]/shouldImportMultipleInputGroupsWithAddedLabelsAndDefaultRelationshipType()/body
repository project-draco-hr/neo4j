{
  List<String> nodeIds=nodeIds();
  Configuration config=Configuration.COMMAS;
  final String[] firstGroupLabels={"AddedOne","AddedTwo"};
  final String[] secondGroupLabels={"AddedThree"};
  final String firstGroupType="TYPE_1";
  final String secondGroupType="TYPE_2";
  ImportTool.main(arguments("--into",directory.absolutePath(),"--nodes:" + join(firstGroupLabels,":"),nodeData(true,config,nodeIds,lines(0,NODE_COUNT / 2)).getAbsolutePath(),"--nodes:" + join(secondGroupLabels,":"),nodeData(true,config,nodeIds,lines(NODE_COUNT / 2,NODE_COUNT)).getAbsolutePath(),"--relationships:" + firstGroupType,relationshipData(true,config,nodeIds,lines(0,RELATIONSHIP_COUNT / 2),false).getAbsolutePath(),"--relationships:" + secondGroupType,relationshipData(true,config,nodeIds,lines(RELATIONSHIP_COUNT / 2,RELATIONSHIP_COUNT),false).getAbsolutePath()));
  verifyData(new Validator<Node>(){
    @Override public void validate(    Node node){
      if (node.getId() < NODE_COUNT / 2) {
        assertNodeHasLabels(node,firstGroupLabels);
      }
 else {
        assertNodeHasLabels(node,secondGroupLabels);
      }
    }
  }
,new Validator<Relationship>(){
    @Override public void validate(    Relationship relationship){
      if (relationship.getId() < RELATIONSHIP_COUNT / 2) {
        assertEquals(firstGroupType,relationship.getType().name());
      }
 else {
        assertEquals(secondGroupType,relationship.getType().name());
      }
    }
  }
);
}
