{
  final List<LogEntry> newEntries=new ArrayList<>();
  for (  LogEntry logEntry : logEntries) {
    try {
      logEntry.accept(new LogHandler.Filter(null){
        @Override public void startEntry(        LogEntry.Start startEntry) throws IOException {
          newEntries.add(new LogEntry.Start(startEntry.getMasterId(),startEntry.getLocalId(),startEntry.getTimeWritten(),startEntry.getLastCommittedTxWhenTransactionStarted(),startEntry.getAdditionalHeader(),startEntry.getStartPosition()));
        }
        @Override public void onePhaseCommitEntry(        LogEntry.OnePhaseCommit onePhaseCommitEntry) throws IOException {
          newEntries.add(new LogEntry.OnePhaseCommit(LogEntry.CURRENT_LOG_ENTRY_VERSION,onePhaseCommitEntry.getTxId(),onePhaseCommitEntry.getTimeWritten()));
        }
        @Override public void commandEntry(        LogEntry.Command commandEntry) throws IOException {
          newEntries.add(new LogEntry.Command(LogEntry.CURRENT_LOG_ENTRY_VERSION,commandEntry.getXaCommand()));
        }
      }
);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return newEntries;
}
