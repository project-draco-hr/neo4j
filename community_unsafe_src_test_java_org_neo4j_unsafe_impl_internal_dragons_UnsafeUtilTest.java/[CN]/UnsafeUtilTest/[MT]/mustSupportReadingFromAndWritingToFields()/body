{
  Obj obj;
  long aBooleanOffset=getFieldOffset(Obj.class,"aBoolean");
  obj=new Obj();
  putBoolean(obj,aBooleanOffset,true);
  assertThat(obj.aBoolean,is(true));
  assertThat(getBoolean(obj,aBooleanOffset),is(true));
  obj.aBoolean=false;
  assertThat(obj,is(new Obj()));
  putBooleanVolatile(obj,aBooleanOffset,true);
  assertThat(obj.aBoolean,is(true));
  assertThat(getBooleanVolatile(obj,aBooleanOffset),is(true));
  obj.aBoolean=false;
  assertThat(obj,is(new Obj()));
  long aByteOffset=getFieldOffset(Obj.class,"aByte");
  obj=new Obj();
  putByte(obj,aByteOffset,(byte)1);
  assertThat(obj.aByte,is((byte)1));
  assertThat(getByte(obj,aByteOffset),is((byte)1));
  obj.aByte=0;
  assertThat(obj,is(new Obj()));
  putByteVolatile(obj,aByteOffset,(byte)2);
  assertThat(obj.aByte,is((byte)2));
  assertThat(getByteVolatile(obj,aByteOffset),is((byte)2));
  obj.aByte=0;
  assertThat(obj,is(new Obj()));
  long aShortOffset=getFieldOffset(Obj.class,"aShort");
  obj=new Obj();
  putShort(obj,aShortOffset,(byte)1);
  assertThat(obj.aShort,is((short)1));
  assertThat(getShort(obj,aShortOffset),is((short)1));
  obj.aShort=0;
  assertThat(obj,is(new Obj()));
  putShortVolatile(obj,aShortOffset,(short)2);
  assertThat(obj.aShort,is((short)2));
  assertThat(getShortVolatile(obj,aShortOffset),is((short)2));
  obj.aShort=0;
  assertThat(obj,is(new Obj()));
  long aFloatOffset=getFieldOffset(Obj.class,"aFloat");
  obj=new Obj();
  putFloat(obj,aFloatOffset,1);
  assertThat(obj.aFloat,is((float)1));
  assertThat(getFloat(obj,aFloatOffset),is((float)1));
  obj.aFloat=0;
  assertThat(obj,is(new Obj()));
  putFloatVolatile(obj,aFloatOffset,2);
  assertThat(obj.aFloat,is((float)2));
  assertThat(getFloatVolatile(obj,aFloatOffset),is((float)2));
  obj.aFloat=0;
  assertThat(obj,is(new Obj()));
  long aCharOffset=getFieldOffset(Obj.class,"aChar");
  obj=new Obj();
  putChar(obj,aCharOffset,'1');
  assertThat(obj.aChar,is('1'));
  assertThat(getChar(obj,aCharOffset),is('1'));
  obj.aChar=0;
  assertThat(obj,is(new Obj()));
  putCharVolatile(obj,aCharOffset,'2');
  assertThat(obj.aChar,is('2'));
  assertThat(getCharVolatile(obj,aCharOffset),is('2'));
  obj.aChar=0;
  assertThat(obj,is(new Obj()));
  long anIntOffset=getFieldOffset(Obj.class,"anInt");
  obj=new Obj();
  putInt(obj,anIntOffset,1);
  assertThat(obj.anInt,is(1));
  assertThat(getInt(obj,anIntOffset),is(1));
  obj.anInt=0;
  assertThat(obj,is(new Obj()));
  putIntVolatile(obj,anIntOffset,2);
  assertThat(obj.anInt,is(2));
  assertThat(getIntVolatile(obj,anIntOffset),is(2));
  obj.anInt=0;
  assertThat(obj,is(new Obj()));
  long aLongOffset=getFieldOffset(Obj.class,"aLong");
  obj=new Obj();
  putLong(obj,aLongOffset,1);
  assertThat(obj.aLong,is(1L));
  assertThat(getLong(obj,aLongOffset),is(1L));
  obj.aLong=0;
  assertThat(obj,is(new Obj()));
  putLongVolatile(obj,aLongOffset,2);
  assertThat(obj.aLong,is(2L));
  assertThat(getLongVolatile(obj,aLongOffset),is(2L));
  obj.aLong=0;
  assertThat(obj,is(new Obj()));
  long aDoubleOffset=getFieldOffset(Obj.class,"aDouble");
  obj=new Obj();
  putDouble(obj,aDoubleOffset,1);
  assertThat(obj.aDouble,is((double)1));
  assertThat(getDouble(obj,aDoubleOffset),is((double)1));
  obj.aDouble=0;
  assertThat(obj,is(new Obj()));
  putDoubleVolatile(obj,aDoubleOffset,2);
  assertThat(obj.aDouble,is((double)2));
  assertThat(getDoubleVolatile(obj,aDoubleOffset),is((double)2));
  obj.aDouble=0;
  assertThat(obj,is(new Obj()));
  long objectOffset=getFieldOffset(Obj.class,"object");
  obj=new Obj();
  Object a=new Object();
  Object b=new Object();
  putObject(obj,objectOffset,a);
  assertThat(obj.object,is(a));
  assertThat(getObject(obj,objectOffset),is(a));
  obj.object=null;
  assertThat(obj,is(new Obj()));
  putObjectVolatile(obj,objectOffset,b);
  assertThat(obj.object,is(b));
  assertThat(getObjectVolatile(obj,objectOffset),is(b));
  obj.object=null;
  assertThat(obj,is(new Obj()));
}
