{
  long address=malloc(8);
  try {
    putByte(address,(byte)1);
    assertThat(getByte(address),is((byte)1));
    setMemory(address,8,(byte)0);
    assertThat(getByte(address),is((byte)0));
    putByteVolatile(address,(byte)1);
    assertThat(getByteVolatile(address),is((byte)1));
    setMemory(address,8,(byte)0);
    assertThat(getByteVolatile(address),is((byte)0));
    putShort(address,(short)1);
    assertThat(getShort(address),is((short)1));
    setMemory(address,8,(byte)0);
    assertThat(getShort(address),is((short)0));
    putShortVolatile(address,(short)1);
    assertThat(getShortVolatile(address),is((short)1));
    setMemory(address,8,(byte)0);
    assertThat(getShortVolatile(address),is((short)0));
    putFloat(address,(float)1);
    assertThat(getFloat(address),is((float)1));
    setMemory(address,8,(byte)0);
    assertThat(getFloat(address),is((float)0));
    putFloatVolatile(address,(float)1);
    assertThat(getFloatVolatile(address),is((float)1));
    setMemory(address,8,(byte)0);
    assertThat(getFloatVolatile(address),is((float)0));
    putChar(address,'1');
    assertThat(getChar(address),is('1'));
    setMemory(address,8,(byte)0);
    assertThat(getChar(address),is((char)0));
    putCharVolatile(address,'1');
    assertThat(getCharVolatile(address),is('1'));
    setMemory(address,8,(byte)0);
    assertThat(getCharVolatile(address),is((char)0));
    putInt(address,1);
    assertThat(getInt(address),is(1));
    setMemory(address,8,(byte)0);
    assertThat(getInt(address),is(0));
    putIntVolatile(address,1);
    assertThat(getIntVolatile(address),is(1));
    setMemory(address,8,(byte)0);
    assertThat(getIntVolatile(address),is(0));
    putLong(address,1);
    assertThat(getLong(address),is(1L));
    setMemory(address,8,(byte)0);
    assertThat(getLong(address),is(0L));
    putLongVolatile(address,1);
    assertThat(getLongVolatile(address),is(1L));
    setMemory(address,8,(byte)0);
    assertThat(getLongVolatile(address),is(0L));
    putDouble(address,1);
    assertThat(getDouble(address),is((double)1));
    setMemory(address,8,(byte)0);
    assertThat(getDouble(address),is((double)0));
    putDoubleVolatile(address,1);
    assertThat(getDoubleVolatile(address),is((double)1));
    setMemory(address,8,(byte)0);
    assertThat(getDoubleVolatile(address),is((double)0));
  }
  finally {
    free(address);
  }
}
