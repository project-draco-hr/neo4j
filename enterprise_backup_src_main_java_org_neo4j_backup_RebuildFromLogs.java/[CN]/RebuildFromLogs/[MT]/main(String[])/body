{
  if (args == null) {
    printUsage();
    return;
  }
  Args params=Args.withFlags(FULL_CHECK).parse(args);
  @SuppressWarnings("boxing") boolean full=params.getBoolean(FULL_CHECK,false,true);
  List<String> orphans=params.orphans();
  args=orphans.toArray(new String[orphans.size()]);
  if (args.length != 2) {
    printUsage("Exactly two positional arguments expected: " + "<source dir with logs> <target dir for graphdb>, got " + args.length);
    System.exit(-1);
    return;
  }
  File source=new File(args[0]), target=new File(args[1]);
  if (!source.isDirectory()) {
    printUsage(source + " is not a directory");
    System.exit(-1);
    return;
  }
  if (target.exists()) {
    if (target.isDirectory()) {
      if (new BackupService().directoryContainsDb(target.getAbsoluteFile())) {
        printUsage("target graph database already exists");
        System.exit(-1);
        return;
      }
      System.err.println("WARNING: the directory " + target + " already exists");
    }
 else {
      printUsage(target + " is a file");
      System.exit(-1);
      return;
    }
  }
  try (PageCache pageCache=StandalonePageCacheFactory.createPageCache(new DefaultFileSystemAbstraction())){
    GraphDatabaseAPI graphdb=BackupService.startTemporaryDb(target.getAbsoluteFile(),pageCache,stringMap());
    try {
      PhysicalLogFiles logFiles=new PhysicalLogFiles(source,FS);
      long highestVersion=logFiles.getHighestLogVersion();
      if (highestVersion < 0) {
        printUsage("Inconsistent number of log files found in " + source);
        return;
      }
      long txCount=findLastTransactionId(logFiles,highestVersion);
      ProgressMonitorFactory progress;
      if (txCount < 0) {
        progress=ProgressMonitorFactory.NONE;
        System.err.println("Unable to report progress, cannot find highest txId, attempting rebuild anyhow.");
      }
 else {
        progress=ProgressMonitorFactory.textual(System.err);
      }
      progress.singlePart(format("Rebuilding store from %s transactions ",txCount),txCount);
      RebuildFromLogs rebuilder=new RebuildFromLogs(graphdb).applyTransactionsFrom(source);
      if (!full) {
        rebuilder.checkConsistency();
      }
    }
  finally {
      graphdb.shutdown();
    }
  }
 }
