{
  if (args == null) {
    printUsage();
    return;
  }
  Args params=new Args(args);
  @SuppressWarnings("boxing") boolean full=params.getBoolean("full",false,true);
  args=params.orphans().toArray(new String[0]);
  if (args.length != 2) {
    printUsage("Exactly two positional arguments expected: " + "<source dir with logs> <target dir for graphdb>, got " + args.length);
    System.exit(-1);
    return;
  }
  File source=new File(args[0]), target=new File(args[1]);
  if (!source.isDirectory()) {
    printUsage(source + " is not a directory");
    System.exit(-1);
    return;
  }
  if (target.exists()) {
    if (target.isDirectory()) {
      if (OnlineBackup.directoryContainsDb(target.getAbsolutePath())) {
        printUsage("target graph database already exists");
        System.exit(-1);
        return;
      }
 else {
        System.err.println("WARNING: the directory " + target + " already exists");
      }
    }
 else {
      printUsage(target + " is a file");
      System.exit(-1);
      return;
    }
  }
  long maxFileId=findMaxLogFileId(source);
  if (maxFileId < 0) {
    printUsage("Inconsistent number of log files found in " + source);
    System.exit(-1);
    return;
  }
  long txCount=findLastTransactionId(source,LOGICAL_LOG_DEFAULT_NAME + ".v" + maxFileId);
  String txdifflog=params.get("txdifflog",null,new File(target,"txdiff.log").getAbsolutePath());
  AbstractGraphDatabase graphdb=OnlineBackup.startTemporaryDb(target.getAbsolutePath(),new TxDiffLogConfig(full ? VerificationLevel.FULL_WITH_LOGGING : VerificationLevel.LOGGING,txdifflog));
  ProgressIndicator progress;
  if (txCount < 0) {
    progress=null;
    System.err.println("Unable to report progress, cannot find highest txId, attempting rebuild anyhow.");
  }
 else {
    progress=textual(System.err,txCount);
    System.err.printf("Rebuilding store from %s transactions %n",Long.valueOf(txCount));
  }
  try {
    try {
      RebuildFromLogs rebuilder=new RebuildFromLogs(graphdb).applyTransactionsFrom(progress,source);
      if (progress != null)       progress.done(txCount);
      if (!full)       rebuilder.checkConsistency();
    }
  finally {
      graphdb.shutdown();
    }
  }
 catch (  IOException e) {
    System.err.println();
    e.printStackTrace(System.err);
    System.exit(-1);
    return;
  }
}
