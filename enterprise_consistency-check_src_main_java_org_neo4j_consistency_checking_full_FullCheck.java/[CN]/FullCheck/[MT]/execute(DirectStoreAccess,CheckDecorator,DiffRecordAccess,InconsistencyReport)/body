{
  ConsistencyReporter reporter=new ConsistencyReporter(recordAccess,report);
  StoreProcessor processEverything=new StoreProcessor(decorator,reporter);
  ProgressMonitorFactory.MultiPartBuilder progress=progressFactory.multipleParts("Full consistency check");
  List<StoppableRunnable> tasks=new ArrayList<>(16);
  StoreAccess nativeStores=directStoreAccess.nativeStores();
  MultiPassStore.Factory multiPass=new MultiPassStore.Factory(decorator,totalMappedMemory,nativeStores,recordAccess,report);
  tasks.add(new StoreProcessorTask<>(nativeStores.getNodeStore(),progress,order,processEverything,multiPass.processors(PROPERTIES,RELATIONSHIPS)));
  tasks.add(new StoreProcessorTask<>(nativeStores.getRelationshipStore(),progress,order,processEverything,multiPass.processors(NODES,PROPERTIES,RELATIONSHIPS)));
  tasks.add(new StoreProcessorTask<>(nativeStores.getPropertyStore(),progress,order,processEverything,multiPass.processors(PROPERTIES,STRINGS,ARRAYS)));
  tasks.add(new StoreProcessorTask<>(nativeStores.getStringStore(),progress,order,processEverything,multiPass.processors(STRINGS)));
  tasks.add(new StoreProcessorTask<>(nativeStores.getArrayStore(),progress,order,processEverything,multiPass.processors(ARRAYS)));
  tasks.add(new StoreProcessorTask<>(nativeStores.getSchemaStore(),progress,order,processEverything,processEverything));
  final SchemaRecordCheck schemaCheck=new SchemaRecordCheck((SchemaStore)nativeStores.getSchemaStore());
  tasks.add(new SchemaStoreProcessorTask<>(nativeStores.getSchemaStore(),"check_rules",schemaCheck,progress,order,processEverything,processEverything));
  tasks.add(new SchemaStoreProcessorTask<>(nativeStores.getSchemaStore(),"check_obligations",schemaCheck.forObligationChecking(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getRelationshipTypeTokenStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getPropertyKeyTokenStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getLabelTokenStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getRelationshipTypeNameStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getPropertyKeyNameStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getLabelNameStore(),progress,order,processEverything,processEverything));
  tasks.add(new StoreProcessorTask<>(nativeStores.getNodeDynamicLabelStore(),progress,order,processEverything,processEverything));
  int iPass=0;
  for (  ConsistencyReporter filteredReporter : multiPass.reporters(order,NODES)) {
    tasks.add(new RecordScanner<NodeLabelRange>(directStoreAccess.labelScanStore().newAllEntriesReader(),format("LabelScanStore_%d",iPass),progress,new LabelScanDocumentProcessor(filteredReporter,new LabelScanCheck())));
    for (    IndexRule indexRule : loadAllIndexRules(directStoreAccess.nativeStores().getSchemaStore())) {
      tasks.add(new RecordScanner<Long>(new IndexIterator(indexRule,directStoreAccess.indexes()),format("Index_%d_%d",indexRule.getId(),iPass),progress,new IndexEntryProcessor(filteredReporter,new IndexCheck(indexRule))));
    }
    iPass++;
  }
  order.execute(tasks,progress.build());
}
