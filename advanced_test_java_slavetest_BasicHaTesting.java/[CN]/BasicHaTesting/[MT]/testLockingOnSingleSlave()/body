{
  initializeDbs(1);
  GraphDatabaseService slave=haDbs.get(0);
  Transaction tx=master.getGraphDb().beginTx();
  try {
    Node node1=master.getGraphDb().createNode();
    master.getGraphDb().getReferenceNode().createRelationshipTo(node1,REL_TYPE);
    Node node2=master.getGraphDb().createNode();
    node1.createRelationshipTo(node2,REL_TYPE);
    tx.success();
  }
  finally {
    tx.finish();
  }
  ((HighlyAvailableGraphDatabase)slave).pullUpdates();
  Node node1=slave.getReferenceNode().getSingleRelationship(REL_TYPE,Direction.OUTGOING).getEndNode();
  Node node2=node1.getSingleRelationship(REL_TYPE,Direction.OUTGOING).getEndNode();
  Queue<String> results=new LinkedList<String>();
  WaitingWorker worker1=new WaitingWorker("1",slave,results);
  WaitingWorker worker2=new WaitingWorker("2",slave,results);
  WaitingWorker masterWorker=new WaitingWorker("M",master.getGraphDb(),results);
  worker1.add(new GrabWriteLockJob(node1),true);
  worker2.add(new GrabWriteLockJob(node2),true);
  worker1.add(new GrabWriteLockJob(node2),true);
  worker2.add(new GrabWriteLockJob(node1),true);
  worker2.add(new RestartTxJob(true),true);
  Thread.sleep(1000);
  worker1.halt();
  worker2.halt();
  masterWorker.halt();
  System.out.println(results);
  assertCollection(results,"1:W " + node1.getId(),"2:W " + node2.getId(),"2:DL " + node1.getId());
}
