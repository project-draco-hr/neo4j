{
  final Index<Node> index=nodeIndex("index",LuceneIndexImplementation.EXACT_CONFIG);
  final int count=5000;
  final int group=1;
  final int threads=3;
  final Collection<Thread> threadList=new ArrayList<Thread>();
  final AtomicInteger id=new AtomicInteger();
  final AtomicBoolean halt=new AtomicBoolean();
  long t=System.currentTimeMillis();
  for (int h=0; h < threads; h++) {
    final int threadId=h;
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          for (int i=0; i < count; i+=group) {
            if (halt.get())             break;
            try (Transaction tx=graphDb.beginTx()){
              for (int ii=0; ii < group; ii++) {
                Node node=graphDb.createNode();
                index.get("key","value" + System.currentTimeMillis() % count).getSingle();
                index.add(node,"key","value" + id.getAndIncrement());
              }
              tx.success();
            }
             if (i % 100 == 0)             System.out.println(threadId + ": " + i);
          }
        }
 catch (        Exception e) {
          e.printStackTrace(System.out);
          halt.set(true);
        }
      }
    }
;
    threadList.add(thread);
    thread.start();
  }
  for (  Thread aThread : threadList) {
    aThread.join();
  }
  long t1=System.currentTimeMillis() - t;
  System.out.println(t1 + ", " + (double)t1 / (double)count);
}
