{
  if (nodes.length == 1) {
    return new PathEvaluator.Adapter<STATE>(){
      @Override public Evaluation evaluate(      Path path,      BranchState state){
        for (        Node node : path.reverseNodes()) {
          if (node.equals(nodes[0])) {
            return Evaluation.INCLUDE_AND_CONTINUE;
          }
        }
        return Evaluation.EXCLUDE_AND_CONTINUE;
      }
    }
;
  }
  final Set<Node> fullSet=new HashSet<>(asList(nodes));
  return new PathEvaluator.Adapter<STATE>(){
    @Override public Evaluation evaluate(    Path path,    BranchState state){
      Set<Node> set=new HashSet<>(fullSet);
      for (      Node node : path.reverseNodes()) {
        if (set.remove(node) && set.isEmpty()) {
          return Evaluation.INCLUDE_AND_CONTINUE;
        }
      }
      return Evaluation.EXCLUDE_AND_CONTINUE;
    }
  }
;
}
