{
  lockGroup.add(lockService.acquireNodeLock(command.getKey(),LockService.LockType.WRITE_LOCK));
  if (recovery) {
    neoStore.getNodeStore().setHighId(command.getAfter().getId());
  }
  neoStore.getNodeStore().updateRecord(command.getAfter());
  Collection<DynamicRecord> toUpdate=new ArrayList<>(command.getAfter().getDynamicLabelRecords());
  Set<Long> idsToRemove=new HashSet<>();
  for (  DynamicRecord record : command.getBefore().getDynamicLabelRecords()) {
    idsToRemove.add(record.getId());
  }
  for (  DynamicRecord record : command.getAfter().getDynamicLabelRecords()) {
    idsToRemove.remove(record.getId());
  }
  for (  long id : idsToRemove) {
    toUpdate.add(new DynamicRecord(id));
  }
  if (recovery) {
    for (    DynamicRecord record : toUpdate) {
      neoStore.getNodeStore().getDynamicLabelStore().setHighId(record.getId());
    }
  }
  neoStore.getNodeStore().updateDynamicLabelRecords(toUpdate);
  invalidateCache(command);
  if (nodeHasBeenUpgradedToDense(command)) {
    command.invalidateCache(cacheAccess);
  }
  return true;
}
