{
  final ReusableRelationship rel=new ReusableRelationship();
  final ByteBuffer buffer=ByteBuffer.allocateDirect(4 * 1024 * RECORD_SIZE);
  final long fileSize=fileChannel.size();
  return new PrefetchingIterator<RelationshipRecord>(){
    private long position=(approximateStartId * RECORD_SIZE) - ((approximateStartId * RECORD_SIZE) % buffer.capacity());
    private final Collection<RelationshipRecord> pageRecords=new ArrayList<>();
    private Iterator<RelationshipRecord> pageRecordsIterator=IteratorUtil.emptyIterator();
    @Override protected RelationshipRecord fetchNextOrNull(){
      if (pageRecordsIterator.hasNext()) {
        return pageRecordsIterator.next();
      }
      while (position < fileSize) {
        int recordOffset=0;
        buffer.clear();
        try {
          fileChannel.read(buffer,position);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        pageRecords.clear();
        while (recordOffset < buffer.capacity() && (recordOffset + position) < fileSize) {
          buffer.position(recordOffset);
          long id=(position + recordOffset) / RECORD_SIZE;
          readRecord(buffer,id,rel);
          if (rel.inUse()) {
            pageRecords.add(rel.createRecord());
          }
          recordOffset+=RECORD_SIZE;
        }
        position+=buffer.capacity();
        pageRecordsIterator=pageRecords.iterator();
        if (pageRecordsIterator.hasNext()) {
          return pageRecordsIterator.next();
        }
      }
      return null;
    }
  }
;
}
