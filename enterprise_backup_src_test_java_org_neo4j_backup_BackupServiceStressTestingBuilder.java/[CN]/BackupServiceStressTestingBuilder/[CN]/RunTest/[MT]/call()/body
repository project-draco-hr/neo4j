{
  final GraphDatabaseAPI db=(GraphDatabaseAPI)new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir.getAbsolutePath()).setConfig(OnlineBackupSettings.online_backup_server,backupHostname + ":" + backupPort).setConfig(GraphDatabaseSettings.keep_logical_logs,"true").newGraphDatabase();
  try {
    createIndex(db);
    createSomeData(db);
    rotateLogAndCheckPoint(db);
    final AtomicBoolean keepGoing=new AtomicBoolean(true);
    Dependencies dependencies=new Dependencies(db.getDependencyResolver());
    dependencies.satisfyDependencies(new Config(),NullLogProvider.getInstance(),new Monitors());
    LifeSupport life=new LifeSupport();
    OnlineBackupKernelExtension backup;
    try {
      backup=life.add((OnlineBackupKernelExtension)new OnlineBackupExtensionFactory().newKernelExtension(DependenciesProxy.dependencies(dependencies,OnlineBackupExtensionFactory.Dependencies.class)));
    }
 catch (    Throwable e) {
      throw new RuntimeException(e);
    }
    life.start();
    ExecutorService executor=Executors.newFixedThreadPool(2);
    executor.execute(new Runnable(){
      @Override public void run(){
        while (keepGoing.get() && until.getAsBoolean()) {
          createSomeData(db);
        }
      }
    }
);
    final AtomicInteger inconsistentDbs=new AtomicInteger(0);
    executor.submit(new Callable<Void>(){
      private final BackupService backupService=new BackupService(fileSystem,NullLogProvider.getInstance(),new Monitors());
      @Override public Void call() throws IOException {
        while (keepGoing.get() && until.getAsBoolean()) {
          fileSystem.deleteRecursively(backupDir);
          BackupService.BackupOutcome backupOutcome=backupService.doFullBackup(backupHostname,backupPort,backupDir.getAbsoluteFile(),ConsistencyCheck.DEFAULT,new Config(),BackupClient.BIG_READ_TIMEOUT,false);
          if (!backupOutcome.isConsistent()) {
            keepGoing.set(false);
            int num=inconsistentDbs.incrementAndGet();
            File dir=new File(brokenDir,"" + num);
            fileSystem.mkdir(dir);
            fileSystem.copyRecursively(backupDir,dir);
          }
        }
        return null;
      }
    }
);
    while (keepGoing.get() && until.getAsBoolean()) {
      Thread.sleep(500);
    }
    executor.shutdown();
    assertTrue(executor.awaitTermination(30,TimeUnit.SECONDS));
    life.shutdown();
    return inconsistentDbs.get();
  }
  finally {
    db.shutdown();
  }
}
