{
  buffer.clear();
  buffer.limit(1);
  if (channel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  byte commandType=buffer.get();
  buffer.clear();
  buffer.limit(18);
  if (channel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  byte cls=buffer.get();
  if (cls != NODE && cls != RELATIONSHIP) {
    return null;
  }
  int indexNameLength=buffer.getInt();
  long entityId=buffer.getLong();
  int keyCharLength=buffer.getInt();
  byte valueType=buffer.get();
  String indexName=PrimitiveUtils.readString(channel,buffer,indexNameLength);
  if (indexName == null) {
    return null;
  }
  String key=PrimitiveUtils.readString(channel,buffer,keyCharLength);
  if (key == null) {
    return null;
  }
  Object value=null;
  if (valueType >= VALUE_TYPE_INT && valueType <= VALUE_TYPE_DOUBLE) {
switch (valueType) {
case VALUE_TYPE_INT:
      value=buffer.getInt();
    break;
case VALUE_TYPE_LONG:
  value=buffer.getLong();
break;
case VALUE_TYPE_FLOAT:
value=buffer.getFloat();
break;
case VALUE_TYPE_DOUBLE:
value=buffer.getDouble();
break;
}
}
 else if (valueType == VALUE_TYPE_STRING) {
value=PrimitiveUtils.readLengthAndString(channel,buffer);
}
if (value == null) {
return null;
}
Long startNodeId=null;
Long endNodeId=null;
if (commandType == ADD_COMMAND && cls == RELATIONSHIP) {
startNodeId=PrimitiveUtils.readLong(channel,buffer);
endNodeId=PrimitiveUtils.readLong(channel,buffer);
if (startNodeId == null || endNodeId == null) {
return null;
}
}
IndexIdentifier identifier=new IndexIdentifier(null,indexName,dataSource.indexStore.get(indexName));
switch (commandType) {
case ADD_COMMAND:
return cls == NODE ? new AddCommand(identifier,entityId,key,value) : new AddRelationshipCommand(identifier,entityId,key,value,startNodeId,endNodeId);
case REMOVE_COMMAND:
return new RemoveCommand(identifier,entityId,key,value);
case CLEAR_COMMAND:
return new ClearCommand(identifier);
default :
throw new IOException("Unknown command type[" + commandType + "]");
}
}
