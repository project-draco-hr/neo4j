{
  this.script=script;
  out.clear();
  in.clear();
  LogbackService logbackService=new LogbackService(new Config(Collections.<String,String>emptyMap(),InternalAbstractGraphDatabase.Configuration.class,GraphDatabaseSettings.class),new LoggerContext());
  for (int i=0; i < nrOfServers; i++) {
    final URI uri=new URI("neo4j://localhost:800" + (i + 1));
    Monitors monitors=new Monitors();
    NetworkedServerFactory factory=new NetworkedServerFactory(life,new MultiPaxosServerFactory(new ClusterConfiguration("default",StringLogger.SYSTEM),new LogbackService(new Config(Collections.<String,String>emptyMap(),InternalAbstractGraphDatabase.Configuration.class,GraphDatabaseSettings.class),(LoggerContext)LoggerFactory.getILoggerFactory()),monitors.newMonitor(StateMachines.Monitor.class)),new FixedTimeoutStrategy(1000),logbackService,new ObjectStreamFactory(),new ObjectStreamFactory(),monitors.newMonitor(NetworkReceiver.Monitor.class),monitors.newMonitor(NetworkSender.Monitor.class),monitors.newMonitor(NamedThreadFactory.Monitor.class));
    ServerIdElectionCredentialsProvider electionCredentialsProvider=new ServerIdElectionCredentialsProvider();
    ProtocolServer server=factory.newNetworkedServer(new Config(MapUtil.stringMap(ClusterSettings.cluster_server.name(),uri.getHost() + ":" + uri.getPort(),ClusterSettings.server_id.name(),"" + i)),new InMemoryAcceptorInstanceStore(),electionCredentialsProvider);
    server.addBindingListener(electionCredentialsProvider);
    final Cluster cluster2=server.newClient(Cluster.class);
    final AtomicReference<ClusterConfiguration> config2=clusterStateListener(uri,cluster2);
    servers.add(cluster2);
    out.add(cluster2);
    configurations.add(config2);
  }
  life.start();
}
