{
  this.script=script;
  out.clear();
  in.clear();
  LogbackService logbackService=new LogbackService(new Config(MapUtil.stringMap()),new LoggerContext());
  for (int i=0; i < nrOfServers; i++) {
    final URI uri=new URI("neo4j://localhost:800" + (i + 1));
    NetworkedServerFactory factory=new NetworkedServerFactory(life,new MultiPaxosServerFactory(new ClusterConfiguration("default"),new LogbackService(null,(LoggerContext)LoggerFactory.getILoggerFactory())),new FixedTimeoutStrategy(1000),logbackService);
    ServerIdElectionCredentialsProvider electionCredentialsProvider=new ServerIdElectionCredentialsProvider();
    ProtocolServer server=factory.newNetworkedServer(new Config(MapUtil.stringMap(ClusterSettings.cluster_server.name(),uri.getHost() + ":" + uri.getPort())),new InMemoryAcceptorInstanceStore(),electionCredentialsProvider);
    server.addBindingListener(electionCredentialsProvider);
    final Cluster cluster2=server.newClient(Cluster.class);
    final AtomicReference<ClusterConfiguration> config2=clusterStateListener(uri,cluster2);
    servers.add(cluster2);
    out.add(cluster2);
    configurations.add(config2);
  }
  life.start();
}
