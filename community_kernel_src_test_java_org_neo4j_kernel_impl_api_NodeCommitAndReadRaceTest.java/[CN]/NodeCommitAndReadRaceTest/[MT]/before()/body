{
  File storeDir=new File("dir");
  Config config=configForStoreDir(new Config(),storeDir);
  PageCache pageCache=pageCacheRule.getPageCache(fsr.get(),config);
  IdGeneratorFactory idGeneratorFactory=new DefaultIdGeneratorFactory();
  Monitors monitors=new Monitors();
  StoreFactory storeFactory=new StoreFactory(config,idGeneratorFactory,pageCache,fsr.get(),DEV_NULL,monitors);
  neoStore=storeFactory.newNeoStore(true,false);
  IndexingService indexingService=mock(IndexingService.class);
  PropertyKeyTokenHolder propertyKeyTokenHolder=new PropertyKeyTokenHolder(mock(TokenCreator.class));
  LabelTokenHolder labelTokenHolder=new LabelTokenHolder(mock(TokenCreator.class));
  TokenCreator relationshipTypeTokenCreator=new DirectTokenCreator(neoStore);
  relationshipTokenHolder=new RelationshipTypeTokenHolder(relationshipTypeTokenCreator);
  DiskLayer diskLayer=new DiskLayer(propertyKeyTokenHolder,labelTokenHolder,relationshipTokenHolder,mock(SchemaStorage.class),singletonProvider(neoStore),indexingService);
  Loader<NodeImpl> loader=nodeLoader(neoStore.getNodeStore());
  AutoLoadingCache<NodeImpl> nodeCache=new AutoLoadingCache<>(new StrongReferenceCache<NodeImpl>(getClass().getSimpleName()),loader);
  EntityFactory entityFactory=mock(EntityFactory.class);
  RelationshipChainLoader relationshipChainLoader=new RelationshipChainLoader(neoStore);
  RelationshipLoader relationshipLoader=new RelationshipLoader(LockService.NO_LOCK_SERVICE,new NoCache<RelationshipImpl>(getClass().getSimpleName()),relationshipChainLoader);
  PersistenceCache cache=new PersistenceCache(nodeCache,mock(AutoLoadingCache.class),entityFactory,relationshipLoader,propertyKeyTokenHolder,relationshipTokenHolder,labelTokenHolder,null);
  StoreReadLayer readLayer=new CacheLayer(diskLayer,cache,indexingService,mock(SchemaCache.class));
  operations=new StateHandlingStatementOperations(readLayer,mock(LegacyPropertyTrackers.class),mock(ConstraintIndexCreator.class),mock(LegacyIndexStore.class));
}
