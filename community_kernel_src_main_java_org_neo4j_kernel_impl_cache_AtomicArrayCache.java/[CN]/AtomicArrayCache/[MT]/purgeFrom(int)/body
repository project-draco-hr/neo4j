{
  if (currentSize.get() <= (maxSize * 0.95f)) {
    return;
  }
  purgeCount++;
  long sizeBefore=currentSize.get();
  try {
    int index=1;
    do {
      if ((pos - index) >= 0) {
        int minusPos=pos - index;
        remove(minusPos);
        if (currentSize.get() <= (maxSize * 0.9f)) {
          return;
        }
      }
      if ((pos + index) < cache.length()) {
        int plusPos=pos + index;
        remove(plusPos);
        if (currentSize.get() <= (maxSize * 0.9f)) {
          return;
        }
      }
      index++;
    }
 while ((pos - index) >= 0 || (pos + index) < cache.length());
    remove(pos);
  }
  finally {
    long timestamp=System.currentTimeMillis();
    if (timestamp - lastPurgeLogTimestamp > minLogInterval) {
      lastPurgeLogTimestamp=timestamp;
      long sizeAfter=currentSize.get();
      String sizeBeforeStr=getSize(sizeBefore);
      String sizeAfterStr=getSize(sizeAfter);
      String diffStr=getSize(sizeBefore - sizeAfter);
      String missPercentage=((float)missCount / (float)(hitCount + missCount) * 100.0f) + "%";
      String colPercentage=((float)collisions / (float)totalPuts * 100.0f) + "%";
      logger.logMessage(name + " purge (nr " + purgeCount+ ") "+ sizeBeforeStr+ " -> "+ sizeAfterStr+ " ("+ diffStr+ ") "+ missPercentage+ " misses, "+ colPercentage+ " collisions.",true);
      int elementCount=0;
      long size=0;
      for (int i=0; i < cache.length(); i++) {
        EntityWithSize obj=cache.get(i);
        if (obj != null) {
          elementCount++;
          size+=obj.size();
        }
      }
      logger.logMessage(name + " purge (nr " + purgeCount+ "): elementCount now="+ elementCount+ " and size="+ getSize(size)+ " ("+ getSize(currentSize.get())+ ") ["+ getSize(currentSize.get() - size)+ "]",true);
    }
  }
}
