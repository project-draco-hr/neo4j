{
  msgLog.logMessage("XaResourceManager[" + name + "] sorting "+ xidMap.size()+ " xids");
  Iterator<Xid> keyIterator=xidMap.keySet().iterator();
  LinkedList<Xid> xids=new LinkedList<Xid>();
  while (keyIterator.hasNext()) {
    xids.add(keyIterator.next());
  }
  Collections.sort(xids,new Comparator<Xid>(){
    public int compare(    Xid o1,    Xid o2){
      Integer id1=txOrderMap.get(o1);
      Integer id2=txOrderMap.get(o2);
      if (id1 == null && id2 == null) {
        return 0;
      }
      if (id1 == null) {
        return Integer.MAX_VALUE;
      }
      if (id2 == null) {
        return Integer.MIN_VALUE;
      }
      return id1 - id2;
    }
  }
);
  txOrderMap.clear();
  Logger logger=Logger.getLogger(tf.getClass().getName());
  while (!xids.isEmpty()) {
    Xid xid=xids.removeFirst();
    XidStatus status=xidMap.get(xid);
    TransactionStatus txStatus=status.getTransactionStatus();
    XaTransaction xaTransaction=txStatus.getTransaction();
    int identifier=xaTransaction.getIdentifier();
    if (xaTransaction.isRecovered()) {
      if (txStatus.commitStarted()) {
        logger.fine("Marking 1PC [" + name + "] tx "+ identifier+ " as done");
        log.doneInternal(identifier);
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else       if (!txStatus.prepared()) {
        logger.fine("Rolling back non prepared tx [" + name + "]"+ "txIdent["+ identifier+ "]");
        log.doneInternal(xaTransaction.getIdentifier());
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else {
        logger.fine("2PC tx [" + name + "] "+ txStatus+ " txIdent["+ identifier+ "]");
      }
    }
  }
  checkIfRecoveryComplete();
}
