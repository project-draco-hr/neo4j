{
  when(indexProvider.getProviderDescriptor()).thenReturn(PROVIDER_DESCRIPTOR);
  when(indexProvider.getPopulator(anyLong(),any(IndexDescriptor.class),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenReturn(populator);
  data.getsProcessedByStoreScanFrom(storeView);
  when(indexProvider.getOnlineAccessor(anyLong(),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenReturn(accessor);
  when(indexProvider.snapshotMetaFiles()).thenReturn(IteratorUtil.<File>emptyIterator());
  when(indexProvider.storeMigrationParticipant(any(FileSystemAbstraction.class),any(PageCache.class))).thenReturn(StoreMigrationParticipant.NOT_PARTICIPATING);
  when(nameLookup.labelGetName(anyInt())).thenAnswer(new NameLookupAnswer("label"));
  when(nameLookup.propertyKeyGetName(anyInt())).thenAnswer(new NameLookupAnswer("property"));
  return life.add(IndexingService.create(new IndexSamplingConfig(new Config()),life.add(new Neo4jJobScheduler()),new DefaultSchemaIndexProviderMap(indexProvider),storeView,nameLookup,loop(iterator(rules)),logProvider,monitor,DO_NOTHING_CALLBACK));
}
