{
  long indexId=1;
  IndexingService indexing=newIndexingServiceWithMockedDependencies(populator,accessor,withData());
  IOException exception=new IOException("Expected failure");
  when(nameLookup.labelGetName(labelId)).thenReturn("TheLabel");
  when(nameLookup.propertyKeyGetName(propertyKeyId)).thenReturn("propertyKey");
  when(indexProvider.getOnlineAccessor(eq(indexId),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenThrow(exception);
  life.start();
  ArgumentCaptor<Boolean> closeArgs=ArgumentCaptor.forClass(Boolean.class);
  indexing.createIndex(indexRule(indexId,labelId,propertyKeyId,PROVIDER_DESCRIPTOR));
  verify(populator,timeout(1000).times(2)).close(closeArgs.capture());
  assertEquals(FAILED,indexing.getIndexProxy(1).getState());
  assertEquals(asList(true,false),closeArgs.getAllValues());
  assertThat(storedFailure(),containsString(format("java.io.IOException: Expected failure%n\tat ")));
  logProvider.assertAtLeastOnce(inLog(IndexPopulationJob.class).error(equalTo("Failed to populate index: [:TheLabel(propertyKey) [provider: {key=quantum-dex, version=25.0}]]"),causedBy(exception)));
  logProvider.assertNone(inLog(IndexPopulationJob.class).info("Index population completed. Index is now online: [%s]",":TheLabel(propertyKey) [provider: {key=quantum-dex, version=25.0}]"));
}
