{
  long nodeId=0, indexId=1, otherIndexId=2;
  NodePropertyUpdate update=add(nodeId,"value");
  doAnswer(nodeUpdatesAnswer(update)).when(storeView).nodeAsUpdates(eq(nodeId),any(Collection.class));
  DoubleLongRegister register=mock(DoubleLongRegister.class);
  when(register.readSecond()).thenReturn(42L);
  when(storeView.indexSample(any(IndexDescriptor.class),any(DoubleLongRegister.class))).thenReturn(register);
  IndexAccessor accessor=spy(new TrackingIndexAccessor());
  IndexRule index=indexRule(1,labelId,propertyKeyId,PROVIDER_DESCRIPTOR);
  IndexingService indexing=newIndexingServiceWithMockedDependencies(populator,accessor,withData(update),index);
  when(indexProvider.getInitialState(indexId)).thenReturn(ONLINE);
  life.init();
  IndexRule otherIndex=indexRule(otherIndexId,labelId,propertyKeyId,PROVIDER_DESCRIPTOR);
  indexing.createIndexes(otherIndex);
  indexing.dropIndex(otherIndex);
  indexing.apply(nodeIdsAsIndexUpdates(PrimitiveLongCollections.asSet(PrimitiveLongCollections.iterator(nodeId))));
  indexing.createIndexes(index);
  reset(accessor);
  life.start();
  verify(accessor,times(2)).newUpdater(RECOVERY);
}
