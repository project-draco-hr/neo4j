{
  when(populator.newPopulatingUpdater(storeView)).thenReturn(updater);
  CountDownLatch latch=new CountDownLatch(1);
  doAnswer(afterAwaiting(latch)).when(populator).add(anyLong(),any());
  IndexingService indexingService=newIndexingServiceWithMockedDependencies(populator,accessor,withData(add(1,"value1")),IteratorUtil.<IndexRule>emptyIterator());
  life.start();
  indexingService.createIndex(indexRule(0,labelId,propertyKeyId,PROVIDER_DESCRIPTOR));
  IndexProxy proxy=indexingService.getProxyForRule(0);
  assertEquals(InternalIndexState.POPULATING,proxy.getState());
  try (IndexUpdater updater=proxy.newUpdater(IndexUpdateMode.ONLINE)){
    updater.process(add(2,"value2"));
  }
   latch.countDown();
  verify(populator,timeout(1000)).close(true);
  assertEquals(InternalIndexState.ONLINE,proxy.getState());
  InOrder order=inOrder(populator,accessor,updater);
  order.verify(populator).create();
  order.verify(populator).add(1,"value1");
  order.verify(populator).newPopulatingUpdater(storeView);
  order.verify(updater).close();
  order.verify(populator).verifyDeferredConstraints(storeView);
  order.verify(populator).newPopulatingUpdater(storeView);
  order.verify(updater).process(add(2,"value2"));
  order.verify(updater).close();
  order.verify(populator).close(true);
  verifyNoMoreInteractions(updater);
  verifyNoMoreInteractions(populator);
  verifyZeroInteractions(accessor);
}
