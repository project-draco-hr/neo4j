{
  when(populator.newPopulatingUpdater(storeView)).thenReturn(updater);
  CountDownLatch latch=new CountDownLatch(1);
  doAnswer(afterAwaiting(latch)).when(populator).add(any());
  IndexingService indexingService=newIndexingServiceWithMockedDependencies(populator,accessor,withData(add(1,"value1")));
  life.start();
  indexingService.createIndexes(indexRule(0,labelId,propertyKeyId,PROVIDER_DESCRIPTOR));
  IndexProxy proxy=indexingService.getIndexProxy(0);
  assertEquals(InternalIndexState.POPULATING,proxy.getState());
  NodePropertyUpdate value2=add(2,"value2");
  try (IndexUpdater updater=proxy.newUpdater(IndexUpdateMode.ONLINE)){
    updater.process(value2);
  }
   latch.countDown();
  waitForIndexesToComeOnline(indexingService,0);
  verify(populator,timeout(1000)).close(true);
  assertEquals(InternalIndexState.ONLINE,proxy.getState());
  InOrder order=inOrder(populator,accessor,updater);
  order.verify(populator).create();
  order.verify(populator).includeSample(add(1,"value1"));
  order.verify(populator).add(singletonList(add(1,"value1")));
  order.verify(populator).newPopulatingUpdater(storeView);
  order.verify(updater).close();
  order.verify(populator).verifyDeferredConstraints(storeView);
  order.verify(populator).sampleResult();
  order.verify(populator).close(true);
  verifyNoMoreInteractions(updater);
  verifyNoMoreInteractions(populator);
  verifyZeroInteractions(accessor);
}
