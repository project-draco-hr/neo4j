{
  final long nodeId1=1;
  final long nodeId2=2;
  final PrimitiveLongSet nodeIds=setOf(nodeId1,nodeId2);
  final NodePropertyUpdate nodeUpdate1=add(nodeId1,"foo");
  final NodePropertyUpdate nodeUpdate2=add(nodeId2,"bar");
  final Set<NodePropertyUpdate> nodeUpdates=asSet(nodeUpdate1,nodeUpdate2);
  final AtomicBoolean applyingRecoveredDataCalled=new AtomicBoolean();
  final AtomicBoolean appliedRecoveredDataCalled=new AtomicBoolean();
  IndexingService.Monitor monitor=new IndexingService.MonitorAdapter(){
    @Override public void applyingRecoveredData(    PrimitiveLongSet recoveredNodeIds){
      assertEquals(nodeIds,recoveredNodeIds);
      applyingRecoveredDataCalled.set(true);
    }
    @Override public void appliedRecoveredData(    Iterable<NodePropertyUpdate> updates){
      assertEquals(nodeUpdates,asSet(updates));
      appliedRecoveredDataCalled.set(true);
    }
  }
;
  IndexingService indexing=newIndexingServiceWithMockedDependencies(populator,accessor,withData(),monitor);
  doAnswer(nodeUpdatesAnswer(nodeUpdate1)).when(storeView).nodeAsUpdates(eq(nodeId1),any(NodeRecord.class),any(Collection.class));
  doAnswer(nodeUpdatesAnswer(nodeUpdate2)).when(storeView).nodeAsUpdates(eq(nodeId2),any(NodeRecord.class),any(Collection.class));
  life.init();
  IndexUpdates updates=nodeIdsAsIndexUpdates(nodeIds);
  indexing.apply(updates);
  life.start();
  assertTrue("applyingRecoveredData was not called",applyingRecoveredDataCalled.get());
  assertTrue("appliedRecoveredData was not called",appliedRecoveredDataCalled.get());
}
