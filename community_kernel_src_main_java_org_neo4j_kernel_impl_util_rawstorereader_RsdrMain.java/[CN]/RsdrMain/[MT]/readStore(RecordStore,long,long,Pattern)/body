{
  toId=Math.min(toId,store.getHighId());
  try (StoreChannel channel=files.open(store.getStorageFileName(),"r")){
    for (long i=fromId; i <= toId; i++) {
      try {
        AbstractBaseRecord record=store.getRecord(i);
        String str=record.toString();
        if (pattern == null || pattern.matcher(str).find()) {
          console.printf("%6s %s%n",i,str);
        }
      }
 catch (      InvalidRecordException e) {
        int recordSize=store.getRecordSize();
        long offset=recordSize * i;
        ByteBuffer buf=ByteBuffer.allocate(recordSize);
        int count=channel.read(buf,offset);
        byte[] bytes=new byte[count];
        buf.clear();
        buf.get(bytes);
        String hex=DatatypeConverter.printHexBinary(bytes);
        String str=new String(bytes,0,count,"ASCII");
        String format="%6s 0x%08X %s%" + ((recordSize - count) + recordSize + 2) + "s%n";
        console.printf(format,i,offset,hex,str);
      }
    }
  }
 }
