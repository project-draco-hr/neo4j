{
  File base=new File("base");
  FileNames fileNames=new FileNames(base);
  FileSystemAbstraction fsa=mock(FileSystemAbstraction.class);
  Log log=mock(Log.class);
  List<File> filesPresent=new LinkedList<>();
  filesPresent.add(fileNames.getForVersion(0));
  filesPresent.add(fileNames.getForVersion(1));
  filesPresent.add(fileNames.getForVersion(10));
  filesPresent.add(fileNames.getForVersion(11));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "01"));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "001"));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "-1"));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "1a"));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "a1"));
  filesPresent.add(new File(base,FileNames.BASE_FILE_NAME + "ab"));
  when(fsa.listFiles(base)).thenReturn(filesPresent.toArray(new File[]{}));
  SortedMap<Long,File> allFiles=fileNames.getAllFiles(fsa,log);
  assertEquals(4,allFiles.size());
  assertEquals(allFiles.get(0L),fileNames.getForVersion(0));
  assertEquals(allFiles.get(1L),fileNames.getForVersion(1));
  assertEquals(allFiles.get(10L),fileNames.getForVersion(10));
  assertEquals(allFiles.get(11L),fileNames.getForVersion(11));
  verify(log,times(7)).warn(anyString());
}
