{
  DirectNetworking net=new DirectNetworking();
  final CoreMember leaderId=member(0);
  final CoreMember sleepyId=member(2);
  final CoreMember[] awakeMembers={leaderId,member(1)};
  final CoreMember[] allMembers={leaderId,member(1),sleepyId};
  RaftTestFixture fixture=new RaftTestFixture(net,3,allMembers);
  fixture.members().withId(leaderId).raftInstance().bootstrapWithInitialMembers(new RaftTestGroup(allMembers));
  fixture.members().withId(leaderId).timeoutService().invokeTimeout(RaftInstance.Timeouts.ELECTION);
  net.processMessages();
  final CoreMember leader=fixture.members().withId(leaderId).member();
  net.disconnect(sleepyId);
  fixture.members().withId(leaderId).raftInstance().handle(new Request(leader,valueOf(10)));
  fixture.members().withId(leaderId).raftInstance().handle(new Request(leader,valueOf(20)));
  fixture.members().withId(leaderId).raftInstance().handle(new Request(leader,valueOf(30)));
  fixture.members().withId(leaderId).raftInstance().handle(new Request(leader,valueOf(40)));
  net.processMessages();
  for (  CoreMember awakeMember : awakeMembers) {
    assertThat(integerValues(fixture.members().withId(awakeMember).raftLog()),hasItems(10,20,30,40));
  }
  assertThat(integerValues(fixture.members().withId(sleepyId).raftLog()),empty());
  net.reconnect(sleepyId);
  Thread.sleep(500);
  net.processMessages();
  assertThat(integerValues(fixture.members().withId(sleepyId).raftLog()),hasItems(10,20,30,40));
}
