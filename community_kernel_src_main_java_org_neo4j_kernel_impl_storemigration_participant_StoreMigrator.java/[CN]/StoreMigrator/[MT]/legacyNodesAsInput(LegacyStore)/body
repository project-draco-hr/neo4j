{
  final LegacyNodeStoreReader reader=legacyStore.getNodeStoreReader();
  return new InputIterable<InputNode>(){
    @Override public InputIterator<InputNode> iterator(){
      final Iterator<NodeRecord> source;
      try {
        source=reader.iterator();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      final StoreSourceTraceability traceability=new StoreSourceTraceability("legacy nodes",reader.getRecordSize());
      return new SourceInputIterator<InputNode,NodeRecord>(traceability){
        @Override public boolean hasNext(){
          return source.hasNext();
        }
        @Override public InputNode next(){
          if (!hasNext()) {
            throw new NoSuchElementException();
          }
          NodeRecord record=source.next();
          traceability.atId(record.getId());
          return new InputNode("legacy store",record.getId(),record.getId() * NodeRecordFormat.RECORD_SIZE,record.getId(),InputEntity.NO_PROPERTIES,record.getNextProp(),InputNode.NO_LABELS,record.getLabelField());
        }
        @Override public void close(){
        }
      }
;
    }
    @Override public boolean supportsMultiplePasses(){
      return true;
    }
  }
;
}
