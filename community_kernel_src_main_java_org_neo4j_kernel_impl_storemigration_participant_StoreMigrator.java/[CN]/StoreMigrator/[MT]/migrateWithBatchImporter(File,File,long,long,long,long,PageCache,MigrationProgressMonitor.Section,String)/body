{
  prepareBatchImportMigration(storeDir,migrationDir);
  if (!Legacy20Store.LEGACY_VERSION.equals(versionToUpgradeFrom)) {
    throw new IllegalStateException("Unknown version to upgrade from: " + versionToUpgradeFrom);
  }
  LegacyStore legacyStore=new Legacy20Store(fileSystem,new File(storeDir,MetaDataStore.DEFAULT_NAME));
  Configuration importConfig=new Configuration.Overridden(config);
  AdditionalInitialIds additionalInitialIds=readAdditionalIds(storeDir,lastTxId,lastTxChecksum,lastTxLogVersion,lastTxLogByteOffset);
  BatchImporter importer=new ParallelBatchImporter(migrationDir.getAbsoluteFile(),fileSystem,importConfig,logService,withDynamicProcessorAssignment(migrationBatchImporterMonitor(legacyStore,progressMonitor,importConfig),importConfig),additionalInitialIds,config);
  InputIterable<InputNode> nodes=legacyNodesAsInput(legacyStore);
  InputIterable<InputRelationship> relationships=legacyRelationshipsAsInput(legacyStore);
  File badFile=new File(storeDir,Configuration.BAD_FILE_NAME);
  try (OutputStream badOutput=new BufferedOutputStream(new FileOutputStream(badFile,false))){
    importer.doImport(Inputs.input(nodes,relationships,IdMappers.actual(),IdGenerators.fromInput(),true,Collectors.badCollector(badOutput,0)));
  }
   StoreFile.fileOperation(DELETE,fileSystem,migrationDir,null,Iterables.<StoreFile,StoreFile>iterable(StoreFile.PROPERTY_STORE,StoreFile.PROPERTY_STRING_STORE,StoreFile.PROPERTY_ARRAY_STORE,StoreFile.PROPERTY_KEY_TOKEN_STORE,StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE),true,false,StoreFileType.values());
  legacyStore.close();
}
