{
  Iterable<StoreFile> filesToMove;
  StoreFile[] idFilesToDelete;
switch (versionToUpgradeFrom) {
case Legacy20Store.LEGACY_VERSION:
    filesToMove=Arrays.asList(StoreFile.NODE_STORE,StoreFile.RELATIONSHIP_STORE,StoreFile.RELATIONSHIP_GROUP_STORE,StoreFile.COUNTS_STORE_LEFT,StoreFile.COUNTS_STORE_RIGHT);
  idFilesToDelete=allExcept(StoreFile.RELATIONSHIP_GROUP_STORE);
break;
case Legacy21Store.LEGACY_VERSION:
filesToMove=Arrays.asList(StoreFile.NODE_STORE,StoreFile.COUNTS_STORE_LEFT,StoreFile.COUNTS_STORE_RIGHT,StoreFile.PROPERTY_STORE,StoreFile.PROPERTY_KEY_TOKEN_STORE,StoreFile.PROPERTY_KEY_TOKEN_NAMES_STORE);
idFilesToDelete=new StoreFile[]{};
break;
case Legacy22Store.LEGACY_VERSION:
case Legacy23Store.LEGACY_VERSION:
filesToMove=Collections.emptyList();
idFilesToDelete=new StoreFile[]{};
break;
default :
throw new IllegalStateException("Unknown version to upgrade from: " + versionToUpgradeFrom);
}
StoreFile.fileOperation(DELETE,fileSystem,migrationDir,null,Iterables.<StoreFile,StoreFile>iterable(idFilesToDelete),true,false,StoreFileType.ID);
StoreFile.fileOperation(MOVE,fileSystem,migrationDir,storeDir,filesToMove,true,true,StoreFileType.values());
if (!Legacy23Store.LEGACY_VERSION.equals(versionToUpgradeFrom)) {
StoreFile.removeTrailers(versionToUpgradeFrom,fileSystem,storeDir,pageCache.pageSize());
}
File neoStore=new File(storeDir,MetaDataStore.DEFAULT_NAME);
long logVersion=MetaDataStore.getRecord(pageCache,neoStore,Position.LOG_VERSION);
long lastCommittedTx=MetaDataStore.getRecord(pageCache,neoStore,Position.LAST_TRANSACTION_ID);
updateOrAddNeoStoreFieldsAsPartOfMigration(migrationDir,storeDir);
legacyLogs.deleteUnusedLogFiles(storeDir);
if (!Legacy23Store.LEGACY_VERSION.equals(versionToUpgradeFrom)) {
new StoreMigratorCheckPointer(storeDir,fileSystem).checkPoint(logVersion,lastCommittedTx);
}
}
