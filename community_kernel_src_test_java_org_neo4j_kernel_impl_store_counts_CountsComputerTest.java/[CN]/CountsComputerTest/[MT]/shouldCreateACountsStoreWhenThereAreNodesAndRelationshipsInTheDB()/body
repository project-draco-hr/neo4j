{
  final GraphDatabaseAPI db=(GraphDatabaseAPI)dbBuilder.newGraphDatabase();
  try (Transaction tx=db.beginTx()){
    Node nodeA=db.createNode(DynamicLabel.label("A"));
    Node nodeC=db.createNode(DynamicLabel.label("C"));
    Node nodeD=db.createNode(DynamicLabel.label("D"));
    Node node=db.createNode();
    nodeA.createRelationshipTo(nodeD,DynamicRelationshipType.withName("TYPE"));
    node.createRelationshipTo(nodeC,DynamicRelationshipType.withName("TYPE2"));
    tx.success();
  }
   final CountsState countsState=CountsComputer.computeCounts(db);
  long lastCommittedTransactionId=getLastTxId(db);
  db.shutdown();
  cleanupCountsForRebuilding();
  rebuildCounts(countsState,lastCommittedTransactionId);
  try (CountsStore<CountsKey> store=CountsStore.open(fs,pageCache,betaStoreFile(),RECORD_SERIALIZER)){
    assertEquals(BASE_TX_ID + 1 + 1+ 1+ 1+ 1+ 1,store.lastTxId());
    assertEquals(15,store.totalRecordsStored());
    assertEquals(4,get(store,nodeKey(-1)));
    assertEquals(1,get(store,nodeKey(0)));
    assertEquals(1,get(store,nodeKey(1)));
    assertEquals(1,get(store,nodeKey(2)));
    assertEquals(0,get(store,nodeKey(3)));
    assertEquals(2,get(store,relationshipKey(-1,-1,-1)));
    assertEquals(1,get(store,relationshipKey(-1,0,-1)));
    assertEquals(1,get(store,relationshipKey(-1,1,-1)));
    assertEquals(0,get(store,relationshipKey(-1,2,-1)));
    assertEquals(1,get(store,relationshipKey(0,0,2)));
    assertEquals(0,get(store,relationshipKey(2,0,0)));
    assertEquals(1,get(store,relationshipKey(-1,1,1)));
    assertEquals(0,get(store,relationshipKey(-1,0,1)));
  }
 }
