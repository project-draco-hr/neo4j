{
  Node root=this.buildIseTreePopulation();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST};
  StopEvaluator stopEvaluator=new StopEvaluator(){
    public boolean isStopNode(    TraversalPosition position){
      try {
        Node node=position.currentNode();
        String nodeId=(String)node.getProperty("node.test.id");
        return nodeId.equals("5") || nodeId.equals("6") || nodeId.equals("3")|| nodeId.equals("4");
      }
 catch (      Exception e) {
        return false;
      }
    }
  }
;
  Traverser traverser=TraverserFactory.getFactory().createTraverser(BREADTH_FIRST,root,traversableRels,stopEvaluator,ReturnableEvaluator.ALL);
  try {
    this.assertNextNodeId(traverser,"1");
    this.assertNextNodeId(traverser,"2");
    this.assertNextNodeId(traverser,"3");
    this.assertNextNodeId(traverser,"4");
    this.assertNextNodeId(traverser,"5");
    this.assertNextNodeId(traverser,"6");
    assertTrue("Too many nodes returned from traversal",traverser.iterator().hasNext() == false);
  }
 catch (  java.util.NoSuchElementException nsee) {
    fail("Too few nodes returned from traversal");
  }
 finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
