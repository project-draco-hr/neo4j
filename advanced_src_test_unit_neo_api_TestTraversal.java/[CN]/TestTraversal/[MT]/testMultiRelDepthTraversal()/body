{
  Node root=this.buildIseTreePopulation();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST};
  Traverser traverser=TraverserFactory.getFactory().createTraverser(DEPTH_FIRST,root,traversableRels,StopEvaluator.END_OF_NETWORK,ReturnableEvaluator.ALL);
  try {
    this.assertNextNodeId(traverser,"1");
    this.assertNextNodeId(traverser,"4");
    this.assertNextNodeId(traverser,"3");
    this.assertNextNodeId(traverser,"7");
    this.assertNextNodeId(traverser,"2");
    this.assertNextNodeId(traverser,"6");
    this.assertNextNodeId(traverser,"5");
    this.assertNextNodeId(traverser,"13");
    this.assertNextNodeId(traverser,"12");
    this.assertNextNodeId(traverser,"11");
    this.assertNextNodeId(traverser,"10");
    assertTrue("Too many nodes returned from traversal",traverser.iterator().hasNext() == false);
  }
 catch (  java.util.NoSuchElementException nsee) {
    fail("Too few nodes returned from traversal");
  }
 finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
