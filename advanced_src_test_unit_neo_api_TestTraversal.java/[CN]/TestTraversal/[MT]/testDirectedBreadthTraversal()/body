{
  Node root=this.buildIseTreePopulation();
  Node startNode=null;
  try {
    ReturnableEvaluator returnEvaluator=new ReturnableEvaluator(){
      public boolean isReturnableNode(      TraversalPosition pos){
        try {
          Node node=pos.currentNode();
          String key="node.test.id";
          String nodeId=(String)node.getProperty(key);
          return nodeId.equals("2");
        }
 catch (        Exception e) {
          return false;
        }
      }
    }
;
    TraverserFactory factory=TraverserFactory.getFactory();
    Traverser toTheMiddleTraverser=factory.createTraverser(BREADTH_FIRST,root,MyRelTypes.TEST,Direction.BOTH,StopEvaluator.END_OF_NETWORK,returnEvaluator);
    startNode=toTheMiddleTraverser.iterator().next();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Something went wrong when trying to get a start node " + "in the middle of the tree: " + e);
  }
  Traverser traverser=TraverserFactory.getFactory().createTraverser(BREADTH_FIRST,startNode,MyRelTypes.TEST,Direction.OUTGOING,StopEvaluator.END_OF_NETWORK,ReturnableEvaluator.ALL);
  try {
    this.assertNextNodeId(traverser,"2");
    this.assertNextNodeId(traverser,"5");
    this.assertNextNodeId(traverser,"6");
    this.assertNextNodeId(traverser,"10");
    this.assertNextNodeId(traverser,"11");
    this.assertNextNodeId(traverser,"12");
    this.assertNextNodeId(traverser,"13");
    assertTrue("Too many nodes returned from traversal",traverser.iterator().hasNext() == false);
  }
 catch (  java.util.NoSuchElementException nsee) {
    nsee.printStackTrace();
    fail("Too few nodes returned from traversal");
  }
 finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
