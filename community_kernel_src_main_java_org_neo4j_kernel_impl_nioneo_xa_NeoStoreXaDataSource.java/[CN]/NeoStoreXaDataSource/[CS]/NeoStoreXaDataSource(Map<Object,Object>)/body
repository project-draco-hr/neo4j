{
  super(config);
  readOnly=Boolean.parseBoolean((String)config.get(Config.READ_ONLY));
  this.lockManager=(LockManager)config.get(LockManager.class);
  this.lockReleaser=(LockReleaser)config.get(LockReleaser.class);
  storeDir=(String)config.get("store_dir");
  msgLog=StringLogger.getLogger(storeDir);
  String store=(String)config.get("neo_store");
  if (!config.containsKey(REBUILD_IDGENERATORS_FAST)) {
    config.put(REBUILD_IDGENERATORS_FAST,"true");
  }
  File file=new File(store);
  String create="" + config.get("create");
  if (!readOnly && !file.exists() && "true".equals(create)) {
    msgLog.logMessage("Creating new db @ " + store,true);
    autoCreatePath(store);
    NeoStore.createStore(store,config);
  }
  providers=new ArrayList<Pair<TransactionInterceptorProvider,Object>>(2);
  for (  TransactionInterceptorProvider provider : Service.load(TransactionInterceptorProvider.class)) {
    Object conf=config.get(provider.getClass().getSimpleName() + "." + provider.name());
    if (conf != null) {
      providers.add(Pair.of(provider,conf));
    }
  }
  TransactionFactory tf=null;
  if ("true".equalsIgnoreCase((String)config.get(Config.INTERCEPT_COMMITTING_TRANSACTIONS)) && !providers.isEmpty()) {
    tf=new InterceptingTransactionFactory();
  }
 else {
    tf=new TransactionFactory();
  }
  neoStore=new NeoStore(config);
  config.put(NeoStore.class,neoStore);
  xaContainer=XaContainer.create(this,(String)config.get("logical_log"),new CommandFactory(neoStore),tf,providers.isEmpty() ? null : providers,config);
  try {
    if (!readOnly) {
      neoStore.setRecoveredStatus(true);
      try {
        xaContainer.openLogicalLog();
      }
  finally {
        neoStore.setRecoveredStatus(false);
      }
    }
    if (!xaContainer.getResourceManager().hasRecoveredTransactions()) {
      neoStore.makeStoreOk();
    }
 else {
      logger.fine("Waiting for TM to take care of recovered " + "transactions.");
    }
    idGenerators=new ArrayMap<Class<?>,Store>(5,false,false);
    this.idGenerators.put(Node.class,neoStore.getNodeStore());
    this.idGenerators.put(Relationship.class,neoStore.getRelationshipStore());
    this.idGenerators.put(RelationshipType.class,neoStore.getRelationshipTypeStore());
    this.idGenerators.put(PropertyStore.class,neoStore.getPropertyStore());
    this.idGenerators.put(PropertyIndex.class,neoStore.getPropertyStore().getIndexStore());
    setKeepLogicalLogsIfSpecified((String)config.get(Config.KEEP_LOGICAL_LOGS),Config.DEFAULT_DATA_SOURCE_NAME);
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
 catch (  Throwable e) {
    try {
      neoStore.close();
    }
 catch (    Exception closeException) {
      msgLog.logMessage("Couldn't close neostore after startup failure");
    }
    throw Exceptions.launderedException(e);
  }
}
