{
  super(BRANCH_ID,Config.DEFAULT_DATA_SOURCE_NAME);
  config=conf;
  this.providers=providers;
  readOnly=conf.getBoolean(Configuration.read_only);
  this.lockManager=lockManager;
  this.lockReleaser=lockReleaser;
  msgLog=stringLogger;
  storeDir=conf.get(Configuration.store_dir);
  String store=conf.get(Configuration.neo_store);
  File file=new File(store);
  if (!readOnly && !fileSystemAbstraction.fileExists(store)) {
    msgLog.logMessage("Creating new db @ " + store,true);
    autoCreatePath(store);
    sf.createNeoStore(store).close();
  }
  final TransactionFactory tf;
  boolean shouldIntercept=conf.getBoolean(Configuration.intercept_committing_transactions);
  if (shouldIntercept && !providers.isEmpty()) {
    tf=new InterceptingTransactionFactory(dependencyResolver);
  }
 else {
    tf=new TransactionFactory();
  }
  neoStore=sf.newNeoStore(store);
  xaContainer=xaFactory.newXaContainer(this,conf.get(Configuration.logical_log),new CommandFactory(neoStore),tf,shouldIntercept && !providers.isEmpty() ? providers : null,dependencyResolver);
  try {
    if (!readOnly) {
      neoStore.setRecoveredStatus(true);
      try {
        xaContainer.openLogicalLog();
      }
  finally {
        neoStore.setRecoveredStatus(false);
      }
    }
    if (!xaContainer.getResourceManager().hasRecoveredTransactions()) {
      neoStore.makeStoreOk();
    }
 else {
      logger.fine("Waiting for TM to take care of recovered " + "transactions.");
    }
    idGenerators=new ArrayMap<Class<?>,Store>((byte)5,false,false);
    this.idGenerators.put(Node.class,neoStore.getNodeStore());
    this.idGenerators.put(Relationship.class,neoStore.getRelationshipStore());
    this.idGenerators.put(RelationshipType.class,neoStore.getRelationshipTypeStore());
    this.idGenerators.put(PropertyStore.class,neoStore.getPropertyStore());
    this.idGenerators.put(PropertyIndex.class,neoStore.getPropertyStore().getIndexStore());
    setKeepLogicalLogsIfSpecified(conf.getBoolean(new GraphDatabaseSetting.BooleanSetting("online_backup_enabled")) ? "true" : conf.get(Configuration.keep_logical_logs),Config.DEFAULT_DATA_SOURCE_NAME);
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
 catch (  Throwable e) {
    try {
      neoStore.close();
    }
 catch (    Exception closeException) {
      msgLog.logMessage("Couldn't close neostore after startup failure");
    }
    throw Exceptions.launderedException(e);
  }
}
