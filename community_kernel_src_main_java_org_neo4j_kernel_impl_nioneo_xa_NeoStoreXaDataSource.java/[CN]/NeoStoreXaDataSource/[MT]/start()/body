{
  life=new LifeSupport();
  readOnly=config.get(Configuration.read_only);
  storeDir=config.get(Configuration.store_dir);
  File store=config.get(Configuration.neo_store);
  storeFactory.ensureStoreExists();
  indexProvider=dependencyResolver.resolveDependency(SchemaIndexProvider.class,SchemaIndexProvider.HIGHEST_PRIORITIZED_OR_NONE);
  storeMigrationProcess.addParticipant(indexProvider.storeMigrationParticipant());
  DefaultSchemaIndexProviderMap providerMap=new DefaultSchemaIndexProviderMap(indexProvider);
  storeMigrationProcess.migrateIfNeeded(store.getParentFile());
  neoStore=storeFactory.newNeoStore(store);
  schemaCache=new SchemaCache(Collections.<SchemaRule>emptyList());
  final NodeManager nodeManager=dependencyResolver.resolveDependency(NodeManager.class);
  Iterator<? extends Cache<?>> caches=nodeManager.caches().iterator();
  persistenceCache=new PersistenceCache((AutoLoadingCache<NodeImpl>)caches.next(),(AutoLoadingCache<RelationshipImpl>)caches.next(),new Thunk<GraphPropertiesImpl>(){
    @Override public GraphPropertiesImpl evaluate(){
      return nodeManager.getGraphProperties();
    }
  }
,nodeManager);
  cacheAccess=new BridgingCacheAccess(nodeManager,schemaCache,updateableSchemaState,persistenceCache);
  try {
    indexingService=life.add(new IndexingService(scheduler,providerMap,new NeoStoreIndexStoreView(lockService,neoStore),tokenNameLookup,updateableSchemaState,logging,indexingServiceMonitor));
    integrityValidator=new IntegrityValidator(neoStore,indexingService);
    labelScanStore=life.add(dependencyResolver.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore());
    fileListing=new NeoStoreFileListing(storeDir,labelScanStore,indexingService);
    Provider<NeoStore> neoStoreProvider=new Provider<NeoStore>(){
      @Override public NeoStore instance(){
        return getNeoStore();
      }
    }
;
    kernel=life.add(new Kernel(propertyKeyTokenHolder,updateableSchemaState,schemaWriteGuard,indexingService,nodeManager,neoStoreProvider,persistenceCache,schemaCache,providerMap,fs,config,labelScanStore,new CacheLayer(new DiskLayer(propertyKeyTokenHolder,labelTokens,relationshipTypeTokens,new SchemaStorage(neoStore.getSchemaStore()),neoStoreProvider,indexingService),persistenceCache,indexingService,schemaCache,nodeManager),scheduler,transactionMonitor,kernelHealth,readOnly,cacheAccess,integrityValidator,locks,lockService,remoteTxHook,txIdGenerator,transactionHeaderInformation,this,logging));
    kernel.registerTransactionHook(transactionEventHandlers);
    life.init();
    life.start();
    propertyKeyTokenHolder.addTokens(((TokenStore<?>)neoStore.getPropertyKeyTokenStore()).getTokens(Integer.MAX_VALUE));
  }
 catch (  Throwable e) {
    try {
      neoStore.close();
    }
 catch (    Exception closeException) {
      msgLog.logMessage("Couldn't close neostore after startup failure");
    }
    throw Exceptions.launderedException(e);
  }
}
