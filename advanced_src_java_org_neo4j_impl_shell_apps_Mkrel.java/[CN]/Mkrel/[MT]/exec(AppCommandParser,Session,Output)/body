{
  boolean createNode=parser.options().containsKey("c");
  boolean suppliedNode=parser.options().containsKey("n");
  Node node=null;
  if (createNode) {
    node=getNeoServer().getNeo().createNode();
  }
 else   if (suppliedNode) {
    node=getNodeById(Long.parseLong(parser.options().get("n")));
  }
 else {
    throw new ShellException("Must either create node (-c)" + " or supply node id (-n <id>)");
  }
  if (parser.options().get("t") == null) {
    throw new ShellException("Must supply relationship type " + "(-t <relationship-type-name>)");
  }
  RelationshipType type=this.getRelationshipType(parser.options().get("t"));
  Direction direction=this.getDirection(parser.options().get("d"));
  Node startNode=direction == Direction.OUTGOING ? this.getCurrentNode(session) : node;
  Node endNode=direction == Direction.OUTGOING ? node : this.getCurrentNode(session);
  startNode.createRelationshipTo(endNode,type);
  return null;
}
