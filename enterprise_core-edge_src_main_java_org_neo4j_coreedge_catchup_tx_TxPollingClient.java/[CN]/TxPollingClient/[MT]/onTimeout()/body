{
  timeout.renew();
  if (applier.workPending()) {
    return;
  }
  try {
    MemberId core=connectionStrategy.coreMember();
    long lastAppliedTxId=applier.lastAppliedTxId();
    pullRequestMonitor.txPullRequest(lastAppliedTxId);
    StoreId localStoreId=localDatabase.storeId();
    TxPullRequest txPullRequest=new TxPullRequest(lastAppliedTxId,localStoreId);
    CatchupResult catchupResult=catchUpClient.makeBlockingRequest(core,txPullRequest,new CatchUpResponseAdaptor<CatchupResult>(){
      @Override public void onTxPullResponse(      CompletableFuture<CatchupResult> signal,      TxPullResponse response){
        applier.queue(response.tx());
        timeout.renew();
      }
      @Override public void onTxStreamFinishedResponse(      CompletableFuture<CatchupResult> signal,      TxStreamFinishedResponse response){
        signal.complete(response.status());
      }
    }
);
    if (catchupResult == CatchupResult.E_TRANSACTION_PRUNED) {
      pause();
      log.info("Tx pull unable to get transactions starting from " + lastAppliedTxId);
      localDatabase.stop();
      new CopyStoreSafely(fs,localDatabase,copiedStoreRecovery,log).copyWholeStoreFrom(core,localStoreId,storeFetcher);
      localDatabase.start();
      applier.refreshLastAppliedTx();
      resume();
    }
  }
 catch (  Throwable e) {
    log.warn("Tx pull attempt failed, will retry at the next regularly scheduled polling attempt.",e);
  }
}
