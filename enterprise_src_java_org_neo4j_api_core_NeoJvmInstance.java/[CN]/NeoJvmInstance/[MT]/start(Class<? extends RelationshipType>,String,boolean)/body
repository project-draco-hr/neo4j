{
  if (started) {
    throw new RuntimeException("A Neo instance already started");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  storeDir=convertFileSeparators(storeDir);
  String separator=System.getProperty("file.separator");
  String store=storeDir + separator + "neostore";
  params.put("neo_store",store);
  params.put("create",String.valueOf(create));
  String logicalLog=storeDir + separator + "nioneo_logical.log";
  params.put("logical_log",logicalLog);
  params.put("neostore.nodestore.db.mapped_memory","20M");
  params.put("neostore.propertystore.db.mapped_memory","90M");
  params.put("neostore.propertystore.db.index.mapped_memory","1M");
  params.put("neostore.propertystore.db.index.keys.mapped_memory","1M");
  params.put("neostore.propertystore.db.strings.mapped_memory","130M");
  params.put("neostore.propertystore.db.arrays.mapped_memory","1M");
  params.put("neostore.relationshipstore.db.mapped_memory","50M");
  byte resourceId[]="414141".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty("neo.tx_log_directory",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}
