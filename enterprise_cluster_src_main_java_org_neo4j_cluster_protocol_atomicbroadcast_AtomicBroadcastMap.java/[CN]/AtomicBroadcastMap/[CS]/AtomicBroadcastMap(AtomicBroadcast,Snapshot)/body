{
  snapshot.setSnapshotProvider(new SnapshotProvider(){
    @Override public void getState(    ObjectOutputStream output) throws IOException {
      output.writeObject(new HashMap(map));
    }
    @Override public void setState(    ObjectInputStream input) throws IOException, ClassNotFoundException {
      map=new ConcurrentHashMap((Map<K,V>)input.readObject());
      LoggerFactory.getLogger(getClass()).info("Updated snapshot state:" + map);
    }
  }
);
  this.atomicBroadcast=atomicBroadcast;
  atomicBroadcastListener=new AtomicBroadcastListener(){
    @Override public void receive(    Payload value){
      try {
        MapCommand command=(MapCommand)serializer.receive(value);
        command.execute(map);
synchronized (AtomicBroadcastMap.this) {
          if (command.equals(lastCommand)) {
            lastCommand=null;
            AtomicBroadcastMap.this.notifyAll();
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
;
  atomicBroadcast.addAtomicBroadcastListener(atomicBroadcastListener);
}
