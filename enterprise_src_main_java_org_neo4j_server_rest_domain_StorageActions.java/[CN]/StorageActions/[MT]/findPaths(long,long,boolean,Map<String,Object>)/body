{
  Transaction tx=graphdb.graph.beginTx();
  try {
    Node startNode;
    Node endNode;
    try {
      startNode=graphdb.graph.getNodeById(startNodeId);
    }
 catch (    NotFoundException e) {
      throw new StartNodeNotFoundException();
    }
    try {
      endNode=graphdb.graph.getNodeById(endNodeId);
    }
 catch (    NotFoundException e) {
      throw new EndNodeNotFoundException();
    }
    Integer maxDepth=(Integer)map.get("max depth");
    maxDepth=(maxDepth != null) ? maxDepth : new Integer(1);
    if (!single) {
      Boolean singleBoolean=(Boolean)map.get("single");
      if (singleBoolean != null) {
        single=singleBoolean;
      }
    }
    String algorithm=(String)map.get("algorithm");
    algorithm=(algorithm != null) ? algorithm : "shortestPath";
    RelationshipExpander expander=RelationshipExpanderBuilder.describeRelationships(map);
    PathFinder<Path> finder=null;
    if (algorithm.equals("shortestPath")) {
      finder=GraphAlgoFactory.shortestPath(expander,maxDepth.intValue());
    }
 else     if (algorithm.equals("allSimplePaths")) {
      finder=GraphAlgoFactory.allSimplePaths(expander,maxDepth.intValue());
    }
 else     if (algorithm.equals("allPaths")) {
      finder=GraphAlgoFactory.allPaths(expander,maxDepth.intValue());
    }
    List<PathRepresentation> result=new ArrayList<PathRepresentation>();
    if (finder != null) {
      if (single) {
        Path path=finder.findSinglePath(startNode,endNode);
        if (path != null) {
          result.add(new PathRepresentation(baseUri,path));
        }
      }
 else {
        for (        Path path : finder.findAllPaths(startNode,endNode)) {
          result.add(new PathRepresentation(baseUri,path));
        }
      }
    }
    tx.success();
    return result;
  }
  finally {
    tx.finish();
  }
}
