{
  gen.get().addSnippet("get-admins",createSourceSnippet("get-admins",this.getClass()));
  System.out.println("All admins:");
  Node admins=getNodeByName("Admins");
  Traverser traverser=admins.traverse(Traverser.Order.BREADTH_FIRST,StopEvaluator.END_OF_GRAPH,ReturnableEvaluator.ALL_BUT_START_NODE,RoleRels.PART_OF,Direction.INCOMING,RoleRels.MEMBER_OF,Direction.INCOMING);
  gen.get().addSnippet("o-get-admins",createOutputSnippet(traverserToString(traverser)));
  String query="start admins=(" + admins.getId() + ") match admins<-[:MEMBER_OF]-directUser, admins<-[:PART_OF*]-subrole<-[:MEMBER_OF]-indUser return directUser, indUser, subrole";
  gen.get().addSnippet("query-get-admins",createCypherSnippet(query));
  String result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("Engin"));
  gen.get().addSnippet("o-query-get-admins",createQueryResultSnippet(result));
  gen.get().addSnippet("get-user-memberships",createSourceSnippet("get-user-memberships",this.getClass()));
  Node jale=getNodeByName("Jale");
  traverser=jale.traverse(Traverser.Order.DEPTH_FIRST,StopEvaluator.END_OF_GRAPH,ReturnableEvaluator.ALL_BUT_START_NODE,RoleRels.MEMBER_OF,Direction.OUTGOING,RoleRels.PART_OF,Direction.OUTGOING);
  gen.get().addSnippet("o-get-user-memberships",createOutputSnippet(traverserToString(traverser)));
  query="start jale=(" + jale.getId() + ") match jale-[:MEMBER_OF]->directRole-[:PART_OF*]->superRole return jale, directRole, superRole";
  gen.get().addSnippet("query-get-user-memberships",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("Users"));
  gen.get().addSnippet("o-query-get-user-memberships",createQueryResultSnippet(result));
  gen.get().addSnippet("get-groups",createSourceSnippet("get-groups",this.getClass()));
  Node referenceNode=getNodeByName("Reference_Node");
  traverser=referenceNode.traverse(Traverser.Order.BREADTH_FIRST,StopEvaluator.END_OF_GRAPH,ReturnableEvaluator.ALL_BUT_START_NODE,RoleRels.ROOT,Direction.INCOMING,RoleRels.PART_OF,Direction.INCOMING);
  gen.get().addSnippet("o-get-groups",createOutputSnippet(traverserToString(traverser)));
  query="start refNode=(" + referenceNode.getId() + ") match refNode<-[:ROOT]->topGroup<-[:PART_OF*]-subGroup return refNode, topGroup, subGroup";
  gen.get().addSnippet("query-get-groups",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("Users"));
  gen.get().addSnippet("o-query-get-groups",createQueryResultSnippet(result));
  gen.get().addSnippet("get-members",createSourceSnippet("get-members",this.getClass()));
  traverser=referenceNode.traverse(Traverser.Order.BREADTH_FIRST,StopEvaluator.END_OF_GRAPH,new ReturnableEvaluator(){
    @Override public boolean isReturnableNode(    TraversalPosition currentPos){
      if (currentPos.isStartNode()) {
        return false;
      }
      Relationship rel=currentPos.lastRelationshipTraversed();
      return rel.isType(RoleRels.MEMBER_OF);
    }
  }
,RoleRels.ROOT,Direction.INCOMING,RoleRels.PART_OF,Direction.INCOMING,RoleRels.MEMBER_OF,Direction.INCOMING);
  gen.get().addSnippet("o-get-members",createOutputSnippet(traverserToString(traverser)));
  query="start refNode=(" + referenceNode.getId() + ") "+ "match refNode<-[:ROOT]->topGroup<-[:PART_OF*]-subGroup, "+ "topGroup<-[:MEMBER_OF]-topGroupUser, "+ "subGroup<-[:MEMBER_OF]-subGroupUser return topGroup, topGroupUser, subGroup, subGroupUser";
  gen.get().addSnippet("query-get-members",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("Engin"));
  gen.get().addSnippet("o-query-get-members",createQueryResultSnippet(result));
}
