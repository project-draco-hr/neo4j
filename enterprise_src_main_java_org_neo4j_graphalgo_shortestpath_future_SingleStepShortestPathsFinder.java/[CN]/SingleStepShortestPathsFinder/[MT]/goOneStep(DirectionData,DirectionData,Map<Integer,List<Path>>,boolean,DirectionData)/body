{
  if (!directionData.hasNext()) {
    return;
  }
  LevelData levelData=directionData.next();
  LevelData otherSideHit=otherSide.visitedNodes.get(levelData.node);
  if (otherSideHit != null) {
    int depth=directionData.currentDepth + otherSideHit.depth;
    if (!directionData.sharedFrozenDepth.isFrozen()) {
      directionData.sharedFrozenDepth.depth=depth;
    }
    if (depth <= directionData.sharedFrozenDepth.depth) {
      directionData.haveFoundSomething=true;
      if (depth < directionData.sharedFrozenDepth.depth) {
        directionData.sharedFrozenDepth.depth=depth;
        otherSide.stop=true;
        if (stopAsEarlyAsPossible) {
          directionData.sharedStop.value=true;
        }
      }
      List<Path> paths=hits.get(depth);
      if (paths == null) {
        paths=new ArrayList<Path>();
        hits.put(depth,paths);
      }
      Path.Builder startPath=directionData == startSide ? levelData.path : otherSideHit.path;
      Path.Builder endPath=directionData == startSide ? otherSideHit.path : levelData.path;
      paths.add(startPath.build(endPath));
    }
    if (depth == 1) {
      directionData.sharedStop.value=true;
    }
  }
}
