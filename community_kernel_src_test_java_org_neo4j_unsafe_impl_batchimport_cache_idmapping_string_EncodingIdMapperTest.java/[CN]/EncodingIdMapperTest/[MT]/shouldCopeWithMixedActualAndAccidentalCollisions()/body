{
  Monitor monitor=mock(Monitor.class);
  Encoder encoder=mock(Encoder.class);
  String a=new String("a");
  String b=new String("b");
  String c=new String("c");
  String a2=new String("a");
  String e=new String("e");
  String f=new String("f");
  when(encoder.encode(a)).thenReturn(1L);
  when(encoder.encode(b)).thenReturn(1L);
  when(encoder.encode(c)).thenReturn(3L);
  when(encoder.encode(a2)).thenReturn(1L);
  when(encoder.encode(e)).thenReturn(2L);
  when(encoder.encode(f)).thenReturn(1L);
  IdMapper mapper=mapper(encoder,Radix.STRING,monitor);
  InputIterable<Object> ids=wrap("source",Arrays.<Object>asList("a","b","c","a","e","f"));
  Group.Adapter groupA=new Group.Adapter(1,"A");
  Group.Adapter groupB=new Group.Adapter(2,"B");
  Group[] groups=new Group[]{groupA,groupA,groupA,groupB,groupB,groupB};
  try (ResourceIterator<Object> iterator=ids.iterator()){
    for (int i=0; iterator.hasNext(); i++) {
      mapper.put(iterator.next(),i,groups[i]);
    }
  }
   mapper.prepare(ids,mock(ProgressListener.class));
  verify(monitor).numberOfCollisions(2);
  assertEquals(0L,mapper.get(a,groupA));
  assertEquals(1L,mapper.get(b,groupA));
  assertEquals(2L,mapper.get(c,groupA));
  assertEquals(3L,mapper.get(a2,groupB));
  assertEquals(4L,mapper.get(e,groupB));
  assertEquals(5L,mapper.get(f,groupB));
}
