{
  this.declaration=declaration;
  this.base=base;
  for (  Parameter parameter : declaration.parameters()) {
    TypeReference type=parameter.type();
    if (type.isInnerClass()) {
      classWriter.visitInnerClass(byteCodeName(type),outerName(type),type.simpleName(),type.modifiers());
    }
  }
  this.methodVisitor=classWriter.visitMethod(ACC_PUBLIC,declaration.name(),desc(declaration),signature(declaration),exceptions(declaration));
  this.methodVisitor.visitCode();
  this.expressionVisitor=new ByteCodeExpressionVisitor(this.methodVisitor);
  stateStack.push(new Method(methodVisitor,declaration.returnType().isVoid()));
}
