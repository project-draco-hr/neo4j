{
  ProgressMonitorFactory.MultiPartBuilder builder=ProgressMonitorFactory.NONE.multipleParts(testName.getMethodName());
  ProgressListener part1=builder.progressForPart("part1",1);
  ProgressListener part2=builder.progressForPart("part2",1);
  final Completion completion=builder.build();
  final CountDownLatch begin=new CountDownLatch(1), end=new CountDownLatch(1);
  new Thread(){
    @Override public void run(){
      begin.countDown();
      try {
        completion.await(1,SECONDS);
      }
 catch (      Exception e) {
        return;
      }
      end.countDown();
    }
  }
.start();
  Runnable callback=mock(Runnable.class);
  completion.notify(callback);
  assertTrue(begin.await(1,SECONDS));
  verifyZeroInteractions(callback);
  try {
    completion.await(1,TimeUnit.MILLISECONDS);
    fail("should have thrown exception");
  }
 catch (  TimeoutException expected) {
    assertEquals("Process did not complete within 1 MILLISECONDS.",expected.getMessage());
  }
  part1.done();
  verifyZeroInteractions(callback);
  part2.done();
  verify(callback).run();
  completion.await(0,TimeUnit.NANOSECONDS);
  assertTrue(end.await(1,SECONDS));
  callback=mock(Runnable.class);
  completion.notify(callback);
  verify(callback).run();
}
