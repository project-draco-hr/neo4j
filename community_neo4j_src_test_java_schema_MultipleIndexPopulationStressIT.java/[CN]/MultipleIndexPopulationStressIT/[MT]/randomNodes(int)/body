{
  return new Iterable<InputNode>(){
    @Override public Iterator<InputNode> iterator(){
      return new PrefetchingIterator<InputNode>(){
        private int i;
        @Override protected InputNode fetchNextOrNull(){
          if (i >= count) {
            return null;
          }
          try {
            return new InputNode("Nodes",i,i,(long)i,randomProperties(),null,randomLabels(),null);
          }
  finally {
            i++;
          }
        }
        private String[] randomLabels(){
          return random.randoms().selection(TOKENS,1,TOKENS.length,false);
        }
        private Object[] randomProperties(){
          String[] keys=random.randoms().selection(TOKENS,1,TOKENS.length,false);
          Object[] result=new Object[keys.length * 2];
          int i=0;
          for (          String key : keys) {
            result[i++]=key;
            result[i++]=randomPropertyValue(random.random());
          }
          return result;
        }
      }
;
    }
  }
;
}
