{
  Log log=logProvider.getLog(getClass());
  Monitors monitors=new Monitors();
  Config consistencyCheckerConfig=tuningConfiguration.with(MapUtil.stringMap(GraphDatabaseSettings.read_only.name(),Settings.TRUE));
  StoreFactory factory=new StoreFactory(storeDir,consistencyCheckerConfig,new DefaultIdGeneratorFactory(fileSystem),pageCache,fileSystem,logProvider,monitors);
  ConsistencySummaryStatistics summary;
  final File reportFile=chooseReportPath(storeDir,tuningConfiguration);
  Log reportLog=new ConsistencyReportLog(Suppliers.lazySingleton(new Supplier<PrintWriter>(){
    @Override public PrintWriter get(){
      try {
        return new PrintWriter(createOrOpenAsOuputStream(fileSystem,reportFile,true));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
));
  try (NeoStore neoStore=factory.newNeoStore(false)){
    neoStore.makeStoreOk();
    StoreAccess store=new StoreAccess(neoStore);
    LabelScanStore labelScanStore=null;
    try {
      labelScanStore=new LuceneLabelScanStoreBuilder(storeDir,store.getRawNeoStore(),fileSystem,logProvider).build();
      SchemaIndexProvider indexes=new LuceneSchemaIndexProvider(DirectoryFactory.PERSISTENT,storeDir);
      DirectStoreAccess stores=new DirectStoreAccess(store,labelScanStore,indexes);
      FullCheck check=new FullCheck(tuningConfiguration,progressFactory);
      summary=check.execute(stores,new DuplicatingLog(log,reportLog));
    }
  finally {
      try {
        if (null != labelScanStore) {
          labelScanStore.shutdown();
        }
      }
 catch (      IOException e) {
        log.error("Failure during shutdown of label scan store",e);
      }
    }
  }
   if (!summary.isConsistent()) {
    log.warn("See '%s' for a detailed consistency report.",reportFile.getPath());
    return Result.FAILURE;
  }
  return Result.SUCCESS;
}
