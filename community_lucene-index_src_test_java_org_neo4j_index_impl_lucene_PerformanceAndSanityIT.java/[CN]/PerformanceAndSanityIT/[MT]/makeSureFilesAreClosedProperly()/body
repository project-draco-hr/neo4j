{
  commitTx();
  graphDb=new GraphDatabaseFactory().newEmbeddedDatabase(TargetDirectory.forTest(getClass()).cleanDirectory("filesClosedProperty").getAbsolutePath());
  final Index<Node> index=nodeIndex("open-files",LuceneIndexImplementation.EXACT_CONFIG);
  final long time=System.currentTimeMillis();
  final CountDownLatch latch=new CountDownLatch(30);
  int coreCount=Runtime.getRuntime().availableProcessors();
  ExecutorService pool=Executors.newFixedThreadPool(coreCount);
  for (int t=0; t < latch.getCount(); t++) {
    pool.execute(new Runnable(){
      @Override public void run(){
        for (int i=0; System.currentTimeMillis() - time < 60 * 1000 * 2; i++) {
          if (i % 10 == 0) {
            if (i % 100 == 0) {
              int type=(int)(System.currentTimeMillis() % 3);
              if (type == 0) {
                IndexHits<Node> itr=index.get("key","value5");
                try {
                  itr.getSingle();
                }
 catch (                NoSuchElementException e) {
                }
              }
 else               if (type == 1) {
                IndexHits<Node> itr=index.get("key","value5");
                for (int size=0; itr.hasNext() && size < 5; size++) {
                  itr.next();
                }
                itr.close();
              }
 else {
                IndexHits<Node> itr=index.get("key","crap value");
                if (System.currentTimeMillis() % 10 > 5) {
                  IteratorUtil.count((Iterator<Node>)itr);
                }
              }
            }
 else {
              IteratorUtil.count((Iterator<Node>)index.get("key","value5"));
            }
          }
 else {
            try (Transaction tx=graphDb.beginTx()){
              for (int ii=0; ii < 20; ii++) {
                Node node=graphDb.createNode();
                index.add(node,"key","value" + ii);
              }
              tx.success();
            }
           }
        }
      }
    }
);
  }
  pool.shutdown();
  pool.awaitTermination(10,TimeUnit.DAYS);
  graphDb.shutdown();
  graphDb=new TestGraphDatabaseFactory().newImpermanentDatabase();
}
