{
  this.fileSystem=fileSystem;
  this.logProvider=logService.getInternalLogProvider();
  this.storeDir=storeDir;
  this.neo4jConfig=new Config(stringMap(dense_node_threshold.name(),valueOf(config.denseNodeThreshold()),pagecache_memory.name(),valueOf(config.writeBufferSize())),GraphDatabaseSettings.class);
  final PageCacheTracer tracer=new DefaultPageCacheTracer();
  this.pageCache=createPageCache(fileSystem,neo4jConfig,logProvider,tracer);
  this.ioTracer=new IoTracer(){
    @Override public long countBytesWritten(){
      return tracer.countBytesWritten();
    }
  }
;
  this.neoStores=newNeoStores(pageCache);
  if (alreadyContainsData(neoStores)) {
    neoStores.close();
    throw new IllegalStateException(storeDir + " already contains data, cannot do import here");
  }
  try {
    neoStores.rebuildCountStoreIfNeeded();
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException(e);
  }
  neoStores.getMetaDataStore().setLastCommittedAndClosedTransactionId(initialIds.lastCommittedTransactionId(),initialIds.lastCommittedTransactionChecksum(),initialIds.lastCommittedTransactionLogVersion(),initialIds.lastCommittedTransactionLogByteOffset());
  this.propertyKeyRepository=new BatchingPropertyKeyTokenRepository(neoStores.getPropertyKeyTokenStore(),initialIds.highPropertyKeyTokenId());
  this.labelRepository=new BatchingLabelTokenRepository(neoStores.getLabelTokenStore(),initialIds.highLabelTokenId());
  this.relationshipTypeRepository=new BatchingRelationshipTypeTokenRepository(neoStores.getRelationshipTypeTokenStore(),initialIds.highRelationshipTypeTokenId());
  Dependencies dependencies=new Dependencies();
  dependencies.satisfyDependency(neo4jConfig);
  dependencies.satisfyDependency(fileSystem);
  dependencies.satisfyDependency(this);
  dependencies.satisfyDependency(logService);
  KernelContext kernelContext=new KernelContext(){
    @Override public FileSystemAbstraction fileSystem(){
      return BatchingNeoStores.this.fileSystem;
    }
    @Override public File storeDir(){
      return BatchingNeoStores.this.storeDir;
    }
  }
;
  @SuppressWarnings({"unchecked","rawtypes"}) KernelExtensions extensions=life.add(new KernelExtensions(kernelContext,(Iterable)Service.load(KernelExtensionFactory.class),dependencies,UnsatisfiedDependencyStrategies.ignore()));
  life.start();
  labelScanStore=life.add(extensions.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore());
}
