{
  NodeRecord node=inUse(new NodeRecord(42,false,NONE,NONE));
  new InlineNodeLabels(node.getLabelField(),node){
    @Override public Collection<DynamicRecord> put(    long[] labelIds,    NodeStore nodeStore,    DynamicRecordAllocator allocator){
      return putSorted(labelIds,nodeStore,allocator);
    }
  }
.put(new long[]{1,18,13,14,15,16,12},null,null);
  LabelTokenRecord label1=inUse(new LabelTokenRecord(1));
  LabelTokenRecord label12=inUse(new LabelTokenRecord(12));
  LabelTokenRecord label13=inUse(new LabelTokenRecord(13));
  LabelTokenRecord label14=inUse(new LabelTokenRecord(14));
  LabelTokenRecord label15=inUse(new LabelTokenRecord(15));
  LabelTokenRecord label16=inUse(new LabelTokenRecord(16));
  LabelTokenRecord label18=inUse(new LabelTokenRecord(18));
  add(label1);
  add(label12);
  add(label13);
  add(label14);
  add(label15);
  add(label16);
  add(label18);
  add(node);
  ConsistencyReport.NodeConsistencyReport report=check(node);
  verify(report).labelsOutOfOrder(18,13);
  verify(report).labelsOutOfOrder(16,12);
}
