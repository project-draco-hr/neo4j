{
  initializeStores(storeDir,stringMap());
  startTx();
  long node1=nextId(Node.class);
  transaction.nodeDoCreate(node1);
  long node2=nextId(Node.class);
  transaction.nodeDoCreate(node2);
  DefinedProperty n1prop1=nodeAddProperty(node1,index("prop1"),"string1");
  DefinedProperty n1prop2=nodeAddProperty(node1,index("prop2"),1);
  DefinedProperty n1prop3=nodeAddProperty(node1,index("prop3"),true);
  DefinedProperty n2prop1=nodeAddProperty(node2,index("prop1"),"string2");
  DefinedProperty n2prop2=nodeAddProperty(node2,index("prop2"),2);
  DefinedProperty n2prop3=nodeAddProperty(node2,index("prop3"),false);
  int relType1=(int)nextId(RelationshipType.class);
  String typeName1="relationshiptype1";
  transaction.relationshipTypeDoCreateForName(typeName1,relType1);
  int relType2=(int)nextId(RelationshipType.class);
  String typeName2="relationshiptype2";
  transaction.relationshipTypeDoCreateForName(typeName2,relType2);
  long rel1=nextId(Relationship.class);
  transaction.relationshipDoCreate(rel1,relType1,node1,node2);
  long rel2=nextId(Relationship.class);
  transaction.relationshipDoCreate(rel2,relType2,node2,node1);
  DefinedProperty r1prop1=relAddProperty(rel1,index("prop1"),"string1");
  DefinedProperty r1prop2=relAddProperty(rel1,index("prop2"),1);
  DefinedProperty r1prop3=relAddProperty(rel1,index("prop3"),true);
  DefinedProperty r2prop1=relAddProperty(rel2,index("prop1"),"string2");
  DefinedProperty r2prop2=relAddProperty(rel2,index("prop2"),2);
  DefinedProperty r2prop3=relAddProperty(rel2,index("prop3"),false);
  commitTx();
  ds.stop();
  initializeStores(storeDir,stringMap());
  startTx();
  validateNodeRel1(node1,n1prop1,n1prop2,n1prop3,rel1,rel2,relType1,relType2);
  validateNodeRel2(node2,n2prop1,n2prop2,n2prop3,rel1,rel2,relType1,relType2);
  validateRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
  validateRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
  validateRelTypes(relType1,relType2);
  validateRelTypes(relType1,relType2);
  commitTx();
  ds.stop();
  initializeStores(storeDir,stringMap());
  startTx();
  deleteRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
  deleteRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
  deleteNode1(node1,n1prop1,n1prop2,n1prop3);
  deleteNode2(node2,n2prop1,n2prop2,n2prop3);
  commitTx();
  ds.stop();
  initializeStores(storeDir,stringMap());
  startTx();
  assertFalse(nodeExists(node1));
  assertFalse(nodeExists(node2));
  testGetRels(new long[]{rel1,rel2});
  long nodeIds[]=new long[10];
  for (int i=0; i < 3; i++) {
    nodeIds[i]=nextId(Node.class);
    transaction.nodeDoCreate(nodeIds[i]);
    nodeAddProperty(nodeIds[i],index("nisse"),new Integer(10 - i));
  }
  for (int i=0; i < 2; i++) {
    long id=nextId(Relationship.class);
    transaction.relationshipDoCreate(id,relType1,nodeIds[i],nodeIds[i + 1]);
    transaction.relationshipDoDelete(id,relType1,nodeIds[i],nodeIds[i + 1]);
  }
  for (int i=0; i < 3; i++) {
    transaction.nodeDoDelete(nodeIds[i]);
  }
  commitTx();
  ds.stop();
}
