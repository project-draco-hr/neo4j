{
  ArrayMap<Integer,Pair<DefinedProperty,Long>> props=new ArrayMap<>();
  propertyLoader.relLoadProperties(rel,newPropertyReceiver(props));
  int count=0;
  for (  int keyId : props.keySet()) {
    long id=props.get(keyId).other();
    PropertyRecord record=pStore.getRecord(id);
    PropertyBlock block=record.getPropertyBlock(props.get(keyId).first().propertyKeyId());
    DefinedProperty data=block.newPropertyData(pStore);
    if (data.propertyKeyId() == prop1.propertyKeyId()) {
      assertEquals("prop1",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals("-string2",data.value());
    }
 else     if (data.propertyKeyId() == prop2.propertyKeyId()) {
      assertEquals("prop2",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(-2,data.value());
    }
 else     if (data.propertyKeyId() == prop3.propertyKeyId()) {
      assertEquals("prop3",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(true,data.value());
      transaction.relationshipDoRemoveProperty(rel,prop3);
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  CountingPropertyReceiver propertyCounter=new CountingPropertyReceiver();
  propertyLoader.relLoadProperties(rel,propertyCounter);
  assertEquals(3,propertyCounter.count);
  assertRelationshipData(rel,firstNode,secondNode,relType);
  relDelete(rel);
  assertHasRelationships(firstNode);
  assertHasRelationships(secondNode);
}
