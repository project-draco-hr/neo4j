{
  final RelationshipType R1=MyRelTypes.R1;
  final RelationshipType R2=MyRelTypes.R2;
  Node aT=createInstance("aType");
  Node a1=createInstance("a1");
  Node bT=createInstance("bType");
  Node b1=createInstance("b1");
  Node cT=createInstance("cType");
  Node c1=createInstance("c1");
  Node c2=createInstance("c2");
  Node dT=createInstance("dType");
  Node d1=createInstance("d1");
  Node d2=createInstance("d2");
  Node eT=createInstance("eType");
  Node e1=createInstance("e1");
  aT.createRelationshipTo(a1,R1);
  bT.createRelationshipTo(b1,R1);
  cT.createRelationshipTo(c1,R1);
  cT.createRelationshipTo(c2,R1);
  dT.createRelationshipTo(d1,R1);
  dT.createRelationshipTo(d2,R1);
  eT.createRelationshipTo(e1,R1);
  a1.createRelationshipTo(b1,R2);
  b1.createRelationshipTo(c1,R2);
  b1.createRelationshipTo(c2,R2);
  c1.createRelationshipTo(d1,R2);
  c2.createRelationshipTo(d2,R2);
  d1.createRelationshipTo(e1,R2);
  d2.createRelationshipTo(e1,R2);
  PatternNode pA=new PatternNode();
  PatternNode pAI=new PatternNode();
  pA.createRelationshipTo(pAI,R1);
  PatternNode pB=new PatternNode();
  PatternNode pBI=new PatternNode();
  pB.createRelationshipTo(pBI,R1);
  PatternNode pC=new PatternNode();
  PatternNode pCI=new PatternNode();
  pC.createRelationshipTo(pCI,R1);
  PatternNode pD=new PatternNode();
  PatternNode pDI=new PatternNode();
  pD.createRelationshipTo(pDI,R1);
  PatternNode pE=new PatternNode();
  PatternNode pEI=new PatternNode();
  pE.createRelationshipTo(pEI,R1);
  pAI.createRelationshipTo(pBI,R2);
  pBI.createRelationshipTo(pCI,R2);
  pCI.createRelationshipTo(pDI,R2);
  pDI.createRelationshipTo(pEI,R2);
  int count=0;
  for (  PatternMatch match : doMatch(pA,aT)) {
    assertEquals(match.getNodeFor(pA),aT);
    assertEquals(match.getNodeFor(pAI),a1);
    assertEquals(match.getNodeFor(pB),bT);
    assertEquals(match.getNodeFor(pBI),b1);
    assertEquals(match.getNodeFor(pC),cT);
    Node c=match.getNodeFor(pCI);
    if (!c.equals(c1) && !c.equals(c2)) {
      fail("either c1 or c2");
    }
    assertEquals(match.getNodeFor(pD),dT);
    Node d=match.getNodeFor(pDI);
    if (!d.equals(d1) && !d.equals(d2)) {
      fail("either d1 or d2");
    }
    assertEquals(match.getNodeFor(pE),eT);
    assertEquals(match.getNodeFor(pEI),e1);
    count++;
  }
  assertEquals(2,count);
  count=0;
  for (  PatternMatch match : doMatch(pCI,c2)) {
    assertEquals(match.getNodeFor(pA),aT);
    assertEquals(match.getNodeFor(pAI),a1);
    assertEquals(match.getNodeFor(pB),bT);
    assertEquals(match.getNodeFor(pBI),b1);
    assertEquals(match.getNodeFor(pC),cT);
    assertEquals(match.getNodeFor(pCI),c2);
    assertEquals(match.getNodeFor(pD),dT);
    assertEquals(match.getNodeFor(pDI),d2);
    assertEquals(match.getNodeFor(pE),eT);
    assertEquals(match.getNodeFor(pEI),e1);
    count++;
  }
  assertEquals(1,count);
}
