{
  if (hitDocs.size() > min) {
    min=hitDocs.size();
  }
  int n=min * 2;
  TopDocs topDocs=null;
  if (sort == null) {
    topDocs=searcher.search(weight,filter,n);
  }
 else {
    if (this.score) {
      TopFieldCollector collector=LuceneDataSource.scoringCollector(sort,n);
      searcher.search(weight,null,collector);
      topDocs=collector.topDocs();
    }
 else {
      topDocs=searcher.search(weight,filter,n,sort);
    }
  }
  length=topDocs.totalHits;
  ScoreDoc[] scoreDocs=topDocs.scoreDocs;
  float scoreNorm=1.0f;
  if (length > 0 && topDocs.getMaxScore() > 1.0f) {
    scoreNorm=1.0f / topDocs.getMaxScore();
  }
  int start=hitDocs.size() - nDeletedHits;
  int nDels2=countDeletions(searcher);
  if (nDeletions < 0 || nDels2 > nDeletions) {
    nDeletedHits=0;
    int i2=0;
    for (int i1=0; i1 < hitDocs.size() && i2 < scoreDocs.length; i1++) {
      int id1=hitDocs.get(i1).id;
      int id2=scoreDocs[i2].doc;
      if (id1 == id2) {
        i2++;
      }
 else {
        nDeletedHits++;
      }
    }
    start=i2;
  }
  int end=scoreDocs.length < length ? scoreDocs.length : length;
  length+=nDeletedHits;
  for (int i=start; i < end; i++) {
    hitDocs.addElement(new HitDoc(scoreDocs[i].score * scoreNorm,scoreDocs[i].doc));
  }
  nDeletions=nDels2;
}
