{
  when(config.jobLimit()).thenReturn(2);
  JobScheduler jobScheduler=new Neo4jJobScheduler();
  jobScheduler.init();
  final IndexSamplingJobTracker jobTracker=new IndexSamplingJobTracker(config,jobScheduler);
  final CountDownLatch latch1=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(1);
  WaitingIndexSamplingJob job1=new WaitingIndexSamplingJob(new IndexDescriptor(1,1),latch1);
  WaitingIndexSamplingJob job2=new WaitingIndexSamplingJob(new IndexDescriptor(2,2),latch1);
  jobTracker.scheduleSamplingJob(job1);
  jobTracker.scheduleSamplingJob(job2);
  Future<?> stopping=Executors.newSingleThreadExecutor().submit(new Runnable(){
    @Override public void run(){
      latch2.countDown();
      try {
        jobTracker.awaitAllJobs(10,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  latch2.await();
  assertFalse(stopping.isDone());
  latch1.countDown();
  stopping.get(10,SECONDS);
  assertTrue(stopping.isDone());
  assertNull(stopping.get());
  assertTrue(job1.executed);
  assertTrue(job2.executed);
}
