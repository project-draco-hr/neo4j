{
  when(config.jobLimit()).thenReturn(1);
  JobScheduler jobScheduler=new Neo4jJobScheduler();
  jobScheduler.init();
  final IndexSamplingJobTracker jobTracker=new IndexSamplingJobTracker(config,jobScheduler);
  final DoubleLatch latch=new DoubleLatch();
  final DoubleLatch waitingLatch=new DoubleLatch();
  assertTrue(jobTracker.canExecuteMoreSamplingJobs());
  jobTracker.scheduleSamplingJob(new IndexSamplingJob(){
    private final IndexDescriptor descriptor=new IndexDescriptor(1,2);
    @Override public void run(){
      latch.start();
      latch.awaitFinish();
    }
    @Override public IndexDescriptor descriptor(){
      return descriptor;
    }
  }
);
  latch.awaitStart();
  assertFalse(jobTracker.canExecuteMoreSamplingJobs());
  final AtomicBoolean waiting=new AtomicBoolean(false);
  new Thread(new Runnable(){
    @Override public void run(){
      waiting.set(true);
      waitingLatch.start();
      jobTracker.waitUntilCanExecuteMoreSamplingJobs();
      waiting.set(false);
      waitingLatch.finish();
    }
  }
).start();
  waitingLatch.awaitStart();
  assertTrue(waiting.get());
  latch.finish();
  waitingLatch.awaitFinish();
  assertFalse(waiting.get());
  while (!jobTracker.canExecuteMoreSamplingJobs()) {
    Thread.yield();
  }
}
