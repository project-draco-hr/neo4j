{
  StoreFetcher storeFetcher=Mockito.mock(StoreFetcher.class);
  MemberId memberId=new MemberId(UUID.randomUUID());
  LocalDatabase localDatabase=Mockito.mock(LocalDatabase.class);
  Mockito.when(localDatabase.isEmpty()).thenReturn(false);
  Mockito.doThrow(IllegalStateException.class).when(localDatabase).ensureSameStoreId(memberId,storeFetcher);
  TopologyService hazelcastTopology=Mockito.mock(TopologyService.class);
  ClusterTopology clusterTopology=Mockito.mock(ClusterTopology.class);
  Mockito.when(hazelcastTopology.currentTopology()).thenReturn(clusterTopology);
  Mockito.when(clusterTopology.coreMembers()).thenReturn(asSet(memberId));
  DataSourceManager dataSourceManager=Mockito.mock(DataSourceManager.class);
  Lifecycle txPulling=Mockito.mock(Lifecycle.class);
  EdgeStartupProcess edgeStartupProcess=new EdgeStartupProcess(storeFetcher,localDatabase,txPulling,dataSourceManager,new AlwaysChooseFirstMember(hazelcastTopology),new ConstantTimeRetryStrategy(1,MILLISECONDS),NullLogProvider.getInstance(),Mockito.mock(EdgeTopologyService.class),Config.empty());
  try {
    edgeStartupProcess.start();
    fail("should have thrown");
  }
 catch (  IllegalStateException ex) {
  }
  Mockito.verify(dataSourceManager).start();
  Mockito.verify(localDatabase).isEmpty();
  Mockito.verify(localDatabase).ensureSameStoreId(memberId,storeFetcher);
  Mockito.verifyNoMoreInteractions(localDatabase,dataSourceManager);
  Mockito.verifyZeroInteractions(txPulling);
}
