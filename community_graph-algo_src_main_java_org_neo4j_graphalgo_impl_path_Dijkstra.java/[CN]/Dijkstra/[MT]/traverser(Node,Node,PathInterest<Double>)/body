{
  PathExpander dijkstraExpander;
  PathEvaluator dijkstraEvaluator;
  if (stateInUse) {
    dijkstraExpander=expander;
    dijkstraEvaluator=Evaluators.includeWhereEndNodeIs(end);
  }
 else {
    org.apache.commons.lang3.mutable.MutableDouble shortestSoFar=new org.apache.commons.lang3.mutable.MutableDouble(Double.MAX_VALUE);
    dijkstraExpander=new DijkstraPathExpander(expander,shortestSoFar,epsilon,interest.stopAfterLowestCost());
    dijkstraEvaluator=new DijkstraEvaluator(shortestSoFar,end,costEvaluator);
  }
  return (lastTraverser=new MonoDirectionalTraversalDescription().uniqueness(Uniqueness.NODE_PATH).expand(dijkstraExpander,stateFactory).order(new DijkstraSelectorFactory(interest,costEvaluator)).evaluator(dijkstraEvaluator).traverse(start));
}
