{
  final Traverser traverser=traverser(start,end,pathInterest(true,stopAfterLowestCost));
  return new Iterable<WeightedPath>(){
    @Override public Iterator<WeightedPath> iterator(){
      return new WeightedPathIterator(traverser.iterator(),costEvaluator,stopAfterLowestCost);
    }
  }
;
}
