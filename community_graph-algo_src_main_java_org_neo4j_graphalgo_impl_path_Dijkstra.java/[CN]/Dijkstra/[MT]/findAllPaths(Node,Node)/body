{
  Predicate<Path> filter=new Predicate<Path>(){
    public boolean accept(    Path position){
      return position.endNode().equals(end);
    }
  }
;
  final Traverser traverser=TRAVERSAL.expand(expander).order(new SelectorFactory(costEvaluator)).filter(filter).traverse(start);
  return new Iterable<WeightedPath>(){
    public Iterator<WeightedPath> iterator(){
      return new StopAfterWeightIterator(traverser.iterator(),costEvaluator);
    }
  }
;
}
