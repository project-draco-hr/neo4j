{
  assumeFalse(SystemUtils.IS_OS_WINDOWS);
  List<String> myQuery=Arrays.asList("[source, cypher]","----","LOAD CSV FROM \"my_file.csv\" AS line","RETURN line;","----");
  GraphDatabaseCypherService database=mock(GraphDatabaseCypherService.class);
  GraphDatabaseFacade graph=mock(GraphDatabaseFacade.class);
  Schema schema=mock(Schema.class);
  when(graph.schema()).thenReturn(schema);
  doNothing().when(schema).awaitIndexesOnline(anyLong(),any(TimeUnit.class));
  when(database.getGraphDatabaseService()).thenReturn(graph);
  when(database.beginTransaction(any(KernelTransaction.Type.class),any(AccessMode.class))).thenReturn(mock(InternalTransaction.class));
  Block block=new Block(myQuery,BlockType.CYPHER);
  org.neo4j.graphdb.Result result=mock(org.neo4j.graphdb.Result.class);
  ArgumentCaptor<String> fileQuery=ArgumentCaptor.forClass(String.class);
  ArgumentCaptor<String> httpQuery=ArgumentCaptor.forClass(String.class);
  when(graph.execute(fileQuery.capture(),eq(Collections.<String,Object>emptyMap()))).thenReturn(result);
  state=spy(new State(database,null,new File("/dev/null"),"http://myurl"));
  doReturn("apa").when(state).prettify(httpQuery.capture());
  state.knownFiles.add("my_file.csv");
  block.process(state);
  assertThat(fileQuery.getValue(),containsString("file:/dev/null/my_file.csv"));
  assertThat(httpQuery.getValue(),containsString("http://myurl/my_file.csv"));
}
