{
  if (lhs == null || rhs == null) {
    return null;
  }
  if (lhs instanceof Number && rhs instanceof Number) {
    if (lhs instanceof Double || rhs instanceof Double || lhs instanceof Float|| rhs instanceof Float) {
      double left=((Number)lhs).doubleValue();
      double right=((Number)rhs).doubleValue();
      if (Math.abs(right) < EPSILON) {
        throw new ArithmeticException("/ by zero",null);
      }
      return left / right;
    }
    if (lhs instanceof Long || rhs instanceof Long || lhs instanceof Integer|| rhs instanceof Integer|| lhs instanceof Short|| rhs instanceof Short|| lhs instanceof Byte|| rhs instanceof Byte) {
      long left=((Number)lhs).longValue();
      long right=((Number)rhs).longValue();
      if (right == 0) {
        throw new ArithmeticException("/ by zero",null);
      }
      return left / right;
    }
  }
  throw new CypherTypeException("Cannot divide " + lhs.getClass().getSimpleName() + " and "+ rhs.getClass().getSimpleName(),null);
}
