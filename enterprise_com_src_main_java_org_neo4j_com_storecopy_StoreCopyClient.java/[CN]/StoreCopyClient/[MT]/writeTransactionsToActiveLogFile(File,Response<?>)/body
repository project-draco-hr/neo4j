{
  LifeSupport life=new LifeSupport();
  try {
    PhysicalLogFiles logFiles=new PhysicalLogFiles(storeDir,fs);
    TransactionMetadataCache transactionMetadataCache=new TransactionMetadataCache(10,100);
    ReadOnlyLogVersionRepository logVersionRepository=new ReadOnlyLogVersionRepository(fs,storeDir);
    LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,Long.MAX_VALUE,new ReadOnlyTransactionIdStore(fs,storeDir),logVersionRepository,new Monitors().newMonitor(PhysicalLogFile.Monitor.class),transactionMetadataCache));
    life.start();
    WritableLogChannel channel=logFile.getWriter();
    final TransactionLogWriter writer=new TransactionLogWriter(new LogEntryWriterv1(channel,new CommandWriter(channel)));
    final AtomicLong firstTxId=new AtomicLong(-1);
    response.accept(new Response.Handler(){
      @Override public void obligation(      long txId) throws IOException {
        throw new UnsupportedOperationException("Shouldn't be called");
      }
      @Override public Visitor<CommittedTransactionRepresentation,IOException> transactions(){
        return new Visitor<CommittedTransactionRepresentation,IOException>(){
          @Override public boolean visit(          CommittedTransactionRepresentation transaction) throws IOException {
            long txId=transaction.getCommitEntry().getTxId();
            writer.append(transaction.getTransactionRepresentation(),txId);
            firstTxId.compareAndSet(-1,txId);
            return false;
          }
        }
;
      }
    }
);
    writeLogHeader(fs,logFiles.getLogFileForVersion(logVersionRepository.getCurrentLogVersion()),logVersionRepository.getCurrentLogVersion(),firstTxId.get() != -1 ? firstTxId.get() - 1 : 0);
  }
  finally {
    life.shutdown();
  }
}
