{
  LifeSupport life=new LifeSupport();
  try {
    PhysicalLogFiles logFiles=new PhysicalLogFiles(tempStoreDir,fs);
    TransactionMetadataCache transactionMetadataCache=new TransactionMetadataCache(10,100);
    ReadOnlyLogVersionRepository logVersionRepository=new ReadOnlyLogVersionRepository(pageCache,tempStoreDir);
    LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,Long.MAX_VALUE,new ReadOnlyTransactionIdStore(pageCache,tempStoreDir),logVersionRepository,new Monitors().newMonitor(PhysicalLogFile.Monitor.class),transactionMetadataCache));
    life.start();
    WritableLogChannel channel=logFile.getWriter();
    final TransactionLogWriter writer=new TransactionLogWriter(new LogEntryWriter(channel,new CommandWriter(channel)));
    final AtomicLong firstTxId=new AtomicLong(BASE_TX_ID);
    response.accept(new Response.Handler(){
      @Override public void obligation(      long txId) throws IOException {
        throw new UnsupportedOperationException("Shouldn't be called");
      }
      @Override public Visitor<CommittedTransactionRepresentation,Exception> transactions(){
        return new Visitor<CommittedTransactionRepresentation,Exception>(){
          @Override public boolean visit(          CommittedTransactionRepresentation transaction) throws IOException {
            long txId=transaction.getCommitEntry().getTxId();
            if (firstTxId.compareAndSet(BASE_TX_ID,txId)) {
              monitor.startReceivingTransactions(txId);
            }
            writer.append(transaction.getTransactionRepresentation(),txId);
            return false;
          }
        }
;
      }
    }
);
    long endTxId=firstTxId.get();
    if (endTxId != BASE_TX_ID) {
      monitor.finishReceivingTransactions(endTxId);
    }
    long currentLogVersion=logVersionRepository.getCurrentLogVersion();
    writer.checkPoint(new LogPosition(currentLogVersion,LOG_HEADER_SIZE));
    File currentLogFile=logFiles.getLogFileForVersion(currentLogVersion);
    writeLogHeader(fs,currentLogFile,currentLogVersion,max(BASE_TX_ID,endTxId - 1));
    if (!forensics) {
      File neoStore=new File(tempStoreDir,MetaDataStore.DEFAULT_NAME);
      MetaDataStore.setRecord(pageCache,neoStore,MetaDataStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,LOG_HEADER_SIZE);
    }
  }
  finally {
    life.shutdown();
  }
}
