{
  LogicalTransactionStore transactionStore=mock(LogicalTransactionStore.class);
  FileSystemAbstraction fs=fsRule.get();
  PageCache pageCache=pageCacheRule.getPageCache(fs);
  try (NeoStores neoStore=createNeoStore(fs,pageCache)){
    MetaDataStore store=neoStore.getMetaDataStore();
    store.transactionCommitted(2,111,BASE_TX_COMMIT_TIMESTAMP);
    store.transactionCommitted(3,222,BASE_TX_COMMIT_TIMESTAMP);
    store.transactionCommitted(4,333,BASE_TX_COMMIT_TIMESTAMP);
    store.transactionCommitted(5,444,BASE_TX_COMMIT_TIMESTAMP);
    store.transactionCommitted(6,555,BASE_TX_COMMIT_TIMESTAMP);
    final long expectedTxId=8L;
    store.transactionCommitted(expectedTxId,777,BASE_TX_COMMIT_TIMESTAMP);
    ResponsePacker packer=new ResponsePacker(transactionStore,store,Suppliers.singleton(newStoreIdForCurrentVersion()));
    Response<Object> response=packer.packTransactionObligationResponse(new RequestContext(0,0,0,0,0),new Object());
    assertTrue(response instanceof TransactionObligationResponse);
    ((TransactionObligationResponse)response).accept(new Response.Handler(){
      @Override public void obligation(      long txId) throws IOException {
        assertEquals(expectedTxId,txId);
      }
      @Override public Visitor<CommittedTransactionRepresentation,Exception> transactions(){
        throw new UnsupportedOperationException("not expected");
      }
    }
);
  }
 }
