{
  return new TypeSafeMatcher<Iterable<T>>(){
    @Override protected boolean matchesSafely(    Iterable<T> items){
      Set<Matcher<? super T>> matchers=uniqueMatchers();
      for (      T item : items) {
        Matcher<? super T> matcherFound=null;
        for (        Matcher<? super T> matcherConsidered : matchers) {
          if (matcherConsidered.matches(item)) {
            if (matcherFound == null) {
              matcherFound=matcherConsidered;
            }
 else {
              return false;
            }
          }
        }
        if (matcherFound == null) {
          return false;
        }
 else {
          matchers.remove(matcherFound);
        }
      }
      return matchers.isEmpty();
    }
    @Override public void describeTo(    Description description){
      Set<Matcher<? super T>> matchers=uniqueMatchers();
      description.appendText("items that each match exactly one of ");
      description.appendList("{ ",", "," }",matchers);
      description.appendText(" and exactly as many items as matchers");
    }
    private Set<Matcher<? super T>> uniqueMatchers(){
      Set<Matcher<? super T>> matchers=new HashSet<>();
      for (      Matcher<? super T> expectedMatcher : expectedMatchers) {
        matchers.add(expectedMatcher);
      }
      return matchers;
    }
  }
;
}
