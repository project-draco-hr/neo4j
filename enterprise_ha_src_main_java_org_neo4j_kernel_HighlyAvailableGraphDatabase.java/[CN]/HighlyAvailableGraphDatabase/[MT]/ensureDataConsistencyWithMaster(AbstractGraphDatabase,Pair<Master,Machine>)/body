{
  if (master.other().getMachineId() == machineId) {
    getMessageLog().logMessage("I am master so cannot consistency check data with master");
    return;
  }
 else   if (master.first() == null) {
    RuntimeException cause=new RuntimeException("Unable to get master from ZK");
    shutdown(cause,false);
    throw cause;
  }
  XaDataSource nioneoDataSource=newDb.getXaDataSourceManager().getNeoStoreDataSource();
  long myLastCommittedTx=nioneoDataSource.getLastCommittedTxId();
  Pair<Integer,Long> myMaster;
  Response<Pair<Integer,Long>> response=null;
  Pair<Integer,Long> mastersMaster;
  try {
    myMaster=nioneoDataSource.getMasterForCommittedTx(myLastCommittedTx);
    response=master.first().getMasterIdForCommittedTx(myLastCommittedTx,getStoreId(newDb));
    mastersMaster=response.response();
  }
 catch (  NoSuchLogVersionException e) {
    getMessageLog().logMessage("Logical log file for txId " + myLastCommittedTx + " missing [version="+ e.getVersion()+ "]. If this is startup then it will be recovered later, otherwise it might be a problem.");
    return;
  }
catch (  IOException e) {
    getMessageLog().logMessage("Failed to get master ID for txId " + myLastCommittedTx + ".",e);
    return;
  }
catch (  Exception e) {
    getMessageLog().logMessage("Exception while getting master ID for txId " + myLastCommittedTx + ".",e);
    throw new BranchedDataException("Maybe not branched data, but it could solve it",e);
  }
 finally {
    if (response != null) {
      response.close();
    }
  }
  if (myMaster.first() != XaLogicalLog.MASTER_ID_REPRESENTING_NO_MASTER && !myMaster.equals(mastersMaster)) {
    String msg="Branched data, I (machineId:" + machineId + ") think machineId for txId ("+ myLastCommittedTx+ ") is "+ myMaster+ ", but master (machineId:"+ master.other().getMachineId()+ ") says that it's "+ mastersMaster;
    getMessageLog().logMessage(msg,true);
    RuntimeException exception=new BranchedDataException(msg);
    safelyShutdownDb(newDb);
    shutdown(exception,false);
    throw exception;
  }
  getMessageLog().logMessage("Master id for last committed tx ok with highestTxId=" + myLastCommittedTx + " with masterId="+ myMaster,true);
}
