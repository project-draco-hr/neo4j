{
  this.storeDir=storeDir;
  TxModule txModule=newTxModule(inputParams,finishHook);
  LockManager lockManager=lockManagerFactory.create(txModule);
  LockReleaser lockReleaser=new LockReleaser(lockManager,txModule.getTxManager());
  final Config config=new Config(graphDbService,storeDir,inputParams,kernelPanicEventGenerator,txModule,lockManager,lockReleaser,idGeneratorFactory,new SyncHookFactory(),relTypeCreator,txIdFactory.create(txModule.getTxManager()),lastCommittedTxIdSetter);
  graphDbInstance=new GraphDbInstance(storeDir,true,config);
  this.msgLog=StringLogger.getLogger(storeDir + "/messages.log");
  this.graphDbService=graphDbService;
  graphDbInstance.start(graphDbService,new KernelExtensionLoader(){
    public void load(    final Map<Object,Object> params){
      extensions=new KernelExtension.KernelData(){
        @Override public String version(){
          return KERNEL_VERSION;
        }
        @Override public Config getConfig(){
          return config;
        }
        @Override public Map<Object,Object> getConfigParams(){
          return params;
        }
        @Override public GraphDatabaseService graphDatabase(){
          return EmbeddedGraphDbImpl.this.graphDbService;
        }
        protected void loaded(        KernelExtension extension){
          if (extension instanceof IndexProvider) {
            indexProviders.put(extension.getKey(),(IndexProvider)extension);
          }
        }
      }
;
      extensions.startup(msgLog);
    }
  }
);
  nodeManager=config.getGraphDbModule().getNodeManager();
  this.indexStore=graphDbInstance.getConfig().getIndexStore();
}
