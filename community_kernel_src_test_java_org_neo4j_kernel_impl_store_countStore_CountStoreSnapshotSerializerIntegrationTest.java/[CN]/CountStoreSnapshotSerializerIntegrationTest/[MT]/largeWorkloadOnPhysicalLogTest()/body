{
  FileSystemAbstraction fs=new DefaultFileSystemAbstraction();
  File tempFile=new File("temp.dat");
  tempFile.deleteOnExit();
  StoreChannel rawChannel=fs.create(tempFile);
  final LogHeader header=new LogHeader(CURRENT_LOG_VERSION,1,42l);
  PhysicalLogVersionedStoreChannel physicalLogVersionedStoreChannel=new PhysicalLogVersionedStoreChannel(rawChannel,header.logVersion,header.logFormatVersion);
  ConcurrentHashMap<CountsKey,long[]> map=CountStoreMapGenerator.simpleCountStoreMap(100000);
  Snapshot snapshot=new Snapshot(1,map);
  Snapshot recovered;
  try (PhysicalWritableLogChannel tempChannel=new PhysicalWritableLogChannel(physicalLogVersionedStoreChannel)){
    serialize(tempChannel,snapshot);
  }
   physicalLogVersionedStoreChannel.position(0);
  try (ReadAheadLogChannel readAheadLogChannel=new ReadAheadLogChannel(physicalLogVersionedStoreChannel,LogVersionBridge.NO_MORE_CHANNELS)){
    recovered=deserialize(readAheadLogChannel);
  }
   Assert.assertEquals(snapshot.getTxId(),recovered.getTxId());
  for (  Map.Entry<CountsKey,long[]> pair : snapshot.getMap().entrySet()) {
    long[] value=recovered.getMap().get(pair.getKey());
    Assert.assertNotNull(value);
    Assert.assertTrue(Arrays.equals(value,pair.getValue()));
  }
  for (  Map.Entry<CountsKey,long[]> pair : recovered.getMap().entrySet()) {
    long[] value=snapshot.getMap().get(pair.getKey());
    Assert.assertNotNull(value);
    Assert.assertTrue(Arrays.equals(value,pair.getValue()));
  }
}
