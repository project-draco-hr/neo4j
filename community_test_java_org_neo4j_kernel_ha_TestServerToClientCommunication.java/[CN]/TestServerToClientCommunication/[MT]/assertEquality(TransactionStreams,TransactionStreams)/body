{
  if (expected == null || expected.getStreams().isEmpty()) {
    assertTrue("expected no transactions",actual == null || actual.getStreams().isEmpty());
  }
 else {
    assertTrue("expected transactions, but got none",actual != null && !actual.getStreams().isEmpty());
    Collection<Pair<String,TransactionStream>> expStreams=expected.getStreams();
    Collection<Pair<String,TransactionStream>> actStreams=actual.getStreams();
    assertEquals(String.format("Not equal number of streams, expected <%s> got <%s>",expStreams.size(),actStreams.size()),expStreams.size(),actStreams.size());
    Iterator<Pair<String,TransactionStream>> iterExp=expStreams.iterator();
    Iterator<Pair<String,TransactionStream>> iterAct=actStreams.iterator();
    while (iterExp.hasNext()) {
      Pair<String,TransactionStream> exp=iterExp.next(), act=iterAct.next();
      assertEquals(exp.first(),act.first());
      Collection<Pair<Long,ReadableByteChannel>> expData=exp.other().getChannels();
      Collection<Pair<Long,ReadableByteChannel>> actData=act.other().getChannels();
      assertEquals(String.format("Not equal number of transactions, expected <%s> got <%s>",expData.size(),actData.size()),expData.size(),actData.size());
      if (expData.isEmpty())       continue;
      Iterator<Pair<Long,ReadableByteChannel>> expIter=expData.iterator();
      Iterator<Pair<Long,ReadableByteChannel>> actIter=actData.iterator();
      while (expIter.hasNext()) {
        Pair<Long,ReadableByteChannel> e=expIter.next(), a=actIter.next();
        assertEquals(e.first(),a.first());
        assertEquality(String.format("%s:0x%X",exp.first(),e.first()),e.other(),a.other());
      }
    }
  }
}
