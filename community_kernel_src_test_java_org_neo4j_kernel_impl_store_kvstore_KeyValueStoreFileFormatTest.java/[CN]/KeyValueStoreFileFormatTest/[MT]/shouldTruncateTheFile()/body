{
  Map<String,String> config=new HashMap<>();
  config.put(GraphDatabaseSettings.pagecache_memory.name(),"8M");
  config.put(GraphDatabaseSettings.mapped_memory_page_size.name(),"128");
{
    Format format=new Format("one","two");
    Map<String,byte[]> headers=new HashMap<>();
    headers.put("one",new byte[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});
    headers.put("two",new byte[]{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2});
    Data data=data(entry(bytes(12),bytes('v','a','l',1)),entry(bytes(13),bytes('v','a','l',2)),entry(bytes(15),bytes('v','a','l',3)),entry(bytes(16),bytes('v','a','l',4)),entry(bytes(17),bytes('v','a','l',5)),entry(bytes(18),bytes('v','a','l',6)));
    try (KeyValueStoreFile ignored=format.create(config,headers,data)){
    }
   }
{
    Format format=new Format("three","four");
    Map<String,byte[]> headers=new HashMap<>();
    headers.put("three",new byte[]{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});
    headers.put("four",new byte[]{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4});
    DataProvider data=new DataProvider(){
      @Override public void close() throws IOException {
      }
      @Override public boolean visit(      WritableBuffer key,      WritableBuffer value) throws IOException {
        throw new IOException("boom!");
      }
    }
;
    try (KeyValueStoreFile ignored=format.create(config,headers,data)){
    }
 catch (    IOException io) {
      assertEquals("boom!",io.getMessage());
      assertFormatSpecifierAndHeadersOnly(headers,fs.get(),storeFile.get());
    }
  }
}
