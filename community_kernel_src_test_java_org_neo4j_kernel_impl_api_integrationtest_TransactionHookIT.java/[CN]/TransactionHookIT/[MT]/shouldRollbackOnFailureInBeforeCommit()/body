{
  TransactionHook hook=mock(TransactionHook.class);
  when(hook.beforeCommit(any(TxState.class),any(KernelTransaction.class))).thenReturn(new TransactionHook.Outcome(){
    @Override public boolean isSuccessful(){
      return false;
    }
    @Override public Throwable failure(){
      return new Throwable();
    }
  }
);
  kernel.registerTransactionHook(hook);
  DataWriteOperations ops=dataWriteOperationsInNewTransaction();
  ops.nodeCreate();
  try {
    commit();
    fail("Expected this to fail.");
  }
 catch (  TransactionFailureException e) {
    XAException xaException=(XAException)e.getCause().getCause();
    assertThat(xaException.errorCode,equalTo(XAException.XA_RBOTHER));
    assertThat(xaException.getCause().getMessage(),equalTo("Transaction handler failed."));
  }
  verify(hook).beforeCommit(any(TxState.class),any(KernelTransaction.class));
  verify(hook).afterRollback(any(TxState.class),any(KernelTransaction.class),any(TransactionHook.Outcome.class));
  verifyNoMoreInteractions(hook);
}
