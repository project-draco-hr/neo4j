{
  assumeNotNull("this test can only run on UNIX",PID);
  File path=dir.graphDbDir().getAbsoluteFile();
  System.out.println("in path: " + path);
  ProcessBuilder prototype=new ProcessBuilder("java","-ea","-Xmx1G","-Djava.awt.headless=true","-Dforce_create_constraint=" + config.force_create_constraint,"-D" + param("use_cypher") + "="+ USE_CYPHER,"-cp",System.getProperty("java.class.path"),getClass().getName(),path.getPath());
  prototype.environment().put("JAVA_HOME",System.getProperty("java.home"));
{
    System.out.println("== first subprocess ==");
    Process process=prototype.start();
    if (awaitMessage(process,"kill me") != null) {
      throw new IllegalStateException("first process failed to execute properly");
    }
    kill(config.kill_signal,process);
    awaitMessage(process,null);
  }
{
    System.out.println("== second subprocess ==");
    Process process=prototype.start();
    Integer exitCode=awaitMessage(process,"kill me");
    if (exitCode == null) {
      kill(config.kill_signal,process);
      awaitMessage(process,null);
    }
 else     if (exitCode != 0) {
      System.out.println("! second process did not exit in an expected manner");
    }
  }
  GraphDatabaseService db=graphdb(path);
  try {
    shouldHaveUniquenessConstraintForNamePropertyOnPersonLabel(db);
    nodesWithPersonLabelHaveUniqueName(db);
  }
  finally {
    db.shutdown();
  }
}
