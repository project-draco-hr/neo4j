{
  EphemeralFileSystemAbstraction fsa=new EphemeralFileSystemAbstraction();
  fsa.mkdir(testDir.directory());
  StateMarshal<ReplicatedLockTokenState<CoreMember>> marshal=new ReplicatedLockTokenState.Marshal<>(new CoreMember.CoreMemberMarshal());
  DurableStateStorage<ReplicatedLockTokenState<CoreMember>> storage=new DurableStateStorage<>(fsa,testDir.directory(),"state",marshal,100,health(),NullLogProvider.getInstance());
  ReplicatedLockTokenStateMachine stateMachine=new ReplicatedLockTokenStateMachine<>(storage);
  CoreMember memberA=new CoreMember(new AdvertisedSocketAddress("1"),new AdvertisedSocketAddress("2"));
  CoreMember memberB=new CoreMember(new AdvertisedSocketAddress("3"),new AdvertisedSocketAddress("4"));
  int candidateId;
  candidateId=0;
  stateMachine.applyCommand(new ReplicatedLockTokenRequest<>(memberA,candidateId),0);
  candidateId=1;
  stateMachine.applyCommand(new ReplicatedLockTokenRequest<>(memberB,candidateId),1);
  stateMachine.flush();
  fsa.crash();
  DurableStateStorage<ReplicatedLockTokenState<CoreMember>> storage2=new DurableStateStorage<>(fsa,testDir.directory(),"state",marshal,100,health(),NullLogProvider.getInstance());
  ReplicatedLockTokenState<CoreMember> initialState=storage2.getInitialState();
  assertEquals(memberB,initialState.get().owner());
  assertEquals(candidateId,initialState.get().id());
}
