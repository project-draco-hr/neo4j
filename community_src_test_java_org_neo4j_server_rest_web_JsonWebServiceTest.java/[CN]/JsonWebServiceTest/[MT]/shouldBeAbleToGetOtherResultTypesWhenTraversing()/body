{
  long startNode=helper.createNode(MapUtil.map("name","Mattias"));
  long node1=helper.createNode(MapUtil.map("name","Emil"));
  long node2=helper.createNode(MapUtil.map("name","Johan"));
  long node3=helper.createNode(MapUtil.map("name","Tobias"));
  long rel1=helper.createRelationship("knows",startNode,node1);
  long rel2=helper.createRelationship("knows",startNode,node2);
  long rel3=helper.createRelationship("knows",node1,node3);
  Response response=service.jsonTraverse(startNode,TraverserReturnType.relationship,"");
  assertEquals(Status.OK.getStatusCode(),response.getStatus());
  String entity=entityAsString(response);
  assertTrue(entity.contains("/relationship/" + rel1));
  assertTrue(entity.contains("/relationship/" + rel2));
  assertFalse(entity.contains("/relationship/" + rel3));
  response=service.jsonTraverse(startNode,TraverserReturnType.path,"");
  assertEquals(Status.OK.getStatusCode(),response.getStatus());
  entity=entityAsString(response);
  assertTrue(entity.contains("nodes"));
  assertTrue(entity.contains("relationships"));
  assertTrue(entity.contains("length"));
}
