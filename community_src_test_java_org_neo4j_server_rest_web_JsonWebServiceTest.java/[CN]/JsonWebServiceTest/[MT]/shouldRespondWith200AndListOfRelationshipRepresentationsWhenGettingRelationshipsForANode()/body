{
  long nodeId=helper.createNode();
  helper.createRelationship("LIKES",nodeId,helper.createNode());
  helper.createRelationship("LIKES",helper.createNode(),nodeId);
  helper.createRelationship("HATES",nodeId,helper.createNode());
  Response response=service.jsonGetRelationships(nodeId,RelationshipDirection.all,new AmpersandSeparatedList());
  assertEquals(200,response.getStatus());
  assertEquals(response.getMetadata().getFirst(HttpHeaders.CONTENT_ENCODING),"UTF-8");
  verifyRelReps(3,entityAsString(response));
  response=service.jsonGetRelationships(nodeId,RelationshipDirection.in,new AmpersandSeparatedList());
  assertEquals(200,response.getStatus());
  verifyRelReps(1,entityAsString(response));
  response=service.jsonGetRelationships(nodeId,RelationshipDirection.out,new AmpersandSeparatedList());
  assertEquals(200,response.getStatus());
  verifyRelReps(2,entityAsString(response));
  response=service.jsonGetRelationships(nodeId,RelationshipDirection.out,new AmpersandSeparatedList("LIKES&HATES"));
  assertEquals(200,response.getStatus());
  verifyRelReps(2,entityAsString(response));
  response=service.jsonGetRelationships(nodeId,RelationshipDirection.all,new AmpersandSeparatedList("LIKES"));
  assertEquals(200,response.getStatus());
  verifyRelReps(2,entityAsString(response));
}
