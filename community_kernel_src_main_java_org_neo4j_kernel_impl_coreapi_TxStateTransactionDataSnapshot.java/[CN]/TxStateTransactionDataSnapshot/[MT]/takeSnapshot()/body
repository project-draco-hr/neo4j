{
  try {
    for (    Long nodeId : state.addedAndRemovedNodes().getRemoved()) {
      try (Cursor<NodeItem> node=storeStatement.acquireSingleNodeCursor(nodeId)){
        if (node.next()) {
          try (Cursor<PropertyItem> properties=node.get().properties()){
            while (properties.next()) {
              removedNodeProperties.add(new NodePropertyEntryView(nodeId,store.propertyKeyGetName(properties.get().propertyKeyId()),null,properties.get().value()));
            }
          }
           try (Cursor<LabelItem> labels=node.get().labels()){
            while (labels.next()) {
              removedLabels.add(new LabelEntryView(nodeId,store.labelGetName(labels.get().getAsInt())));
            }
          }
         }
      }
     }
    for (    Long relId : state.addedAndRemovedRelationships().getRemoved()) {
      Relationship relationshipProxy=relationship(relId);
      try (Cursor<RelationshipItem> relationship=storeStatement.acquireSingleRelationshipCursor(relId)){
        if (relationship.next()) {
          try (Cursor<PropertyItem> properties=relationship.get().properties()){
            while (properties.next()) {
              removedRelationshipProperties.add(new RelationshipPropertyEntryView(relationshipProxy,store.propertyKeyGetName(properties.get().propertyKeyId()),null,properties.get().value()));
            }
          }
         }
      }
     }
    for (    NodeState nodeState : state.modifiedNodes()) {
      Iterator<StorageProperty> added=nodeState.addedAndChangedProperties();
      while (added.hasNext()) {
        DefinedProperty property=(DefinedProperty)added.next();
        assignedNodeProperties.add(new NodePropertyEntryView(nodeState.getId(),store.propertyKeyGetName(property.propertyKeyId()),property.value(),committedValue(nodeState,property.propertyKeyId())));
      }
      Iterator<Integer> removed=nodeState.removedProperties();
      while (removed.hasNext()) {
        Integer property=removed.next();
        removedNodeProperties.add(new NodePropertyEntryView(nodeState.getId(),store.propertyKeyGetName(property),null,committedValue(nodeState,property)));
      }
      ReadableDiffSets<Integer> labels=nodeState.labelDiffSets();
      for (      Integer label : labels.getAdded()) {
        assignedLabels.add(new LabelEntryView(nodeState.getId(),store.labelGetName(label)));
      }
      for (      Integer label : labels.getRemoved()) {
        removedLabels.add(new LabelEntryView(nodeState.getId(),store.labelGetName(label)));
      }
    }
    for (    RelationshipState relState : state.modifiedRelationships()) {
      Relationship relationship=relationship(relState.getId());
      Iterator<StorageProperty> added=relState.addedAndChangedProperties();
      while (added.hasNext()) {
        DefinedProperty property=(DefinedProperty)added.next();
        assignedRelationshipProperties.add(new RelationshipPropertyEntryView(relationship,store.propertyKeyGetName(property.propertyKeyId()),property.value(),committedValue(store,relState,property.propertyKeyId())));
      }
      Iterator<Integer> removed=relState.removedProperties();
      while (removed.hasNext()) {
        Integer property=removed.next();
        removedRelationshipProperties.add(new RelationshipPropertyEntryView(relationship,store.propertyKeyGetName(property),null,committedValue(store,relState,property)));
      }
    }
  }
 catch (  PropertyKeyIdNotFoundKernelException|LabelNotFoundKernelException e) {
    throw new IllegalStateException("An entity that does not exist was modified.",e);
  }
}
