{
  try {
    for (    Long nodeId : state.addedAndRemovedNodes().getRemoved()) {
      Iterator<DefinedProperty> props=storeReadLayer.nodeGetAllProperties(storeStatement,nodeId);
      while (props.hasNext()) {
        DefinedProperty prop=props.next();
        removedNodeProperties.add(new NodePropertyEntryView(nodeId,storeReadLayer.propertyKeyGetName(prop.propertyKeyId()),null,prop.value()));
      }
      PrimitiveIntIterator labels=storeReadLayer.nodeGetLabels(storeStatement,nodeId);
      while (labels.hasNext()) {
        removedLabels.add(new LabelEntryView(nodeId,storeReadLayer.labelGetName(labels.next())));
      }
    }
    for (    Long relId : state.addedAndRemovedRelationships().getRemoved()) {
      Relationship relationship=relationship(relId);
      Iterator<DefinedProperty> props=storeReadLayer.relationshipGetAllProperties(storeStatement,relId);
      while (props.hasNext()) {
        DefinedProperty prop=props.next();
        removedRelationshipProperties.add(new RelationshipPropertyEntryView(relationship,storeReadLayer.propertyKeyGetName(prop.propertyKeyId()),null,prop.value()));
      }
    }
    for (    NodeState nodeState : state.modifiedNodes()) {
      Iterator<DefinedProperty> added=nodeState.addedAndChangedProperties();
      while (added.hasNext()) {
        DefinedProperty property=added.next();
        assignedNodeProperties.add(new NodePropertyEntryView(nodeState.getId(),storeReadLayer.propertyKeyGetName(property.propertyKeyId()),property.value(),committedValue(storeReadLayer,nodeState,property.propertyKeyId())));
      }
      Iterator<Integer> removed=nodeState.removedProperties();
      while (removed.hasNext()) {
        Integer property=removed.next();
        removedNodeProperties.add(new NodePropertyEntryView(nodeState.getId(),storeReadLayer.propertyKeyGetName(property),null,committedValue(storeReadLayer,nodeState,property)));
      }
      ReadableDiffSets<Integer> labels=nodeState.labelDiffSets();
      for (      Integer label : labels.getAdded()) {
        assignedLabels.add(new LabelEntryView(nodeState.getId(),storeReadLayer.labelGetName(label)));
      }
      for (      Integer label : labels.getRemoved()) {
        removedLabels.add(new LabelEntryView(nodeState.getId(),storeReadLayer.labelGetName(label)));
      }
    }
    for (    RelationshipState relState : state.modifiedRelationships()) {
      Relationship relationship=relationship(relState.getId());
      Iterator<DefinedProperty> added=relState.addedAndChangedProperties();
      while (added.hasNext()) {
        DefinedProperty property=added.next();
        assignedRelationshipProperties.add(new RelationshipPropertyEntryView(relationship,storeReadLayer.propertyKeyGetName(property.propertyKeyId()),property.value(),committedValue(storeReadLayer,relState,property.propertyKeyId())));
      }
      Iterator<Integer> removed=relState.removedProperties();
      while (removed.hasNext()) {
        Integer property=removed.next();
        removedRelationshipProperties.add(new RelationshipPropertyEntryView(relationship,storeReadLayer.propertyKeyGetName(property),null,committedValue(storeReadLayer,relState,property)));
      }
    }
  }
 catch (  EntityNotFoundException|PropertyKeyIdNotFoundKernelException|LabelNotFoundKernelException e) {
    throw new ThisShouldNotHappenError("Jake","An entity that does not exist was modified.",e);
  }
}
