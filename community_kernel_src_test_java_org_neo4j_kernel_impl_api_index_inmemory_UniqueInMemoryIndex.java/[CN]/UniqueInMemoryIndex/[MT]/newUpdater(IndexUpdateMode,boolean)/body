{
  return new UniquePropertyIndexUpdater(this){
    @Override protected void flushUpdates(    Iterable<NodePropertyUpdate> updates) throws IOException, IndexEntryConflictException {
      for (      NodePropertyUpdate update : updates) {
switch (update.getUpdateMode()) {
case CHANGED:
case REMOVED:
          UniqueInMemoryIndex.this.remove(update.getNodeId(),update.getValueBefore());
      }
    }
    for (    NodePropertyUpdate update : updates) {
switch (update.getUpdateMode()) {
case ADDED:
case CHANGED:
        add(update.getNodeId(),update.getValueAfter(),IndexUpdateMode.ONLINE == mode);
    }
  }
}
@Override public Reservation validate(Iterable<NodePropertyUpdate> updates) throws IOException {
  return Reservation.EMPTY;
}
@Override public void remove(Iterable<Long> nodeIds){
  for (  long nodeId : nodeIds) {
    UniqueInMemoryIndex.this.remove(nodeId);
  }
}
}
;
}
