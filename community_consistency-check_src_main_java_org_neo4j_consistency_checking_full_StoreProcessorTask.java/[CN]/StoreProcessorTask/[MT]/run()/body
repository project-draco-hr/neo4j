{
  statistics.reset();
  beforeProcessing(processor);
  try {
    if (processor.getStage().getCacheSlotSizes().length > 0) {
      cacheAccess.setCacheSlotSizes(processor.getStage().getCacheSlotSizes());
    }
    cacheAccess.setForward(processor.getStage().isForward());
    if (processor.getStage().isParallel()) {
      long highId;
      if (processor.getStage() == CheckStage.Stage1_NS_PropsLabels) {
        highId=storeAccess.getNodeStore().getHighId();
      }
 else       if (processor.getStage() == CheckStage.Stage8_PS_Props) {
        highId=storeAccess.getPropertyStore().getHighId();
      }
 else {
        highId=storeAccess.getNodeStore().getHighId();
      }
      long recordsPerCPU=RecordDistributor.calculateRecodsPerCpu(highId,numberOfThreads);
      QueueDistributor<R> distributor=distribution.distributor(recordsPerCPU,numberOfThreads);
      processor.applyFilteredParallel(store,progressListener,numberOfThreads,recordsPerCPU,distributor);
    }
 else {
      processor.applyFiltered(store,progressListener);
    }
    cacheAccess.setForward(true);
  }
 catch (  Throwable e) {
    progressListener.failed(e);
    throw Exceptions.launderedException(e);
  }
 finally {
    afterProcessing(processor);
  }
  statistics.print(name);
}
