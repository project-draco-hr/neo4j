{
  String jsonString=new PrettyJSON().array().object().key("method").value("POST").key("to").value("/node").key("id").value(0).key("body").object().key("age").value(1).endObject().endObject().object().key("method").value("POST").key("to").value("/node").key("id").value(1).key("body").object().key("age").value(12).endObject().endObject().object().key("method").value("POST").key("to").value("{0}/relationships").key("id").value(3).key("body").object().key("to").value("{1}").key("data").object().key("name").value("bob").endObject().key("type").value("KNOWS").endObject().endObject().object().key("method").value("POST").key("to").value("/index/relationship/my_rels/name/bob").key("id").value(4).key("body").value("{3}").endObject().endArray().toString();
  String uri=functionalTestHelper.dataUri() + "batch";
  ClientResponse response=CLIENT.resource(uri).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).entity(jsonString).post(ClientResponse.class);
  assertEquals(200,response.getStatus());
  List<Map<String,Object>> results=JsonHelper.jsonToList(response.getEntity(String.class));
  assertEquals(4,results.size());
  assertEquals(1,helper.getIndexedRelationships("my_rels","name","bob").size());
  gen.get().payload(jsonString).expectedStatus(200).post(uri);
}
