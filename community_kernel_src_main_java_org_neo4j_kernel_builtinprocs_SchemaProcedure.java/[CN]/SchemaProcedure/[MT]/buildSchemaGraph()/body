{
  final Map<String,NodeImpl> nodes=new HashMap<>();
  final Map<String,Set<RelationshipImpl>> relationships=new HashMap<>();
  ReadOperations readOperations=kernelTransaction.acquireStatement().readOperations();
  StatementTokenNameLookup statementTokenNameLookup=new StatementTokenNameLookup(readOperations);
  try (Transaction transaction=graphDatabaseAPI.beginTx()){
    ResourceIterator<Label> labelsInDatabase=graphDatabaseAPI.getAllLabelsInUse().iterator();
    while (labelsInDatabase.hasNext()) {
      Label label=labelsInDatabase.next();
      Map<String,Object> properties=new HashMap<>();
      Iterator<IndexDescriptor> indexDescriptorIterator=readOperations.indexesGetForLabel(readOperations.labelGetForName(label.name()));
      ArrayList<String> indexes=new ArrayList<>();
      while (indexDescriptorIterator.hasNext()) {
        indexes.add(statementTokenNameLookup.propertyKeyGetName(indexDescriptorIterator.next().getPropertyKeyId()));
      }
      properties.put("indexes",indexes);
      Iterator<NodePropertyConstraint> nodePropertyConstraintIterator=readOperations.constraintsGetForLabel(readOperations.labelGetForName(label.name()));
      ArrayList<String> constraints=new ArrayList<>();
      while (nodePropertyConstraintIterator.hasNext()) {
        constraints.add(nodePropertyConstraintIterator.next().userDescription(statementTokenNameLookup));
      }
      properties.put("constraints",constraints);
      getOrCreateLabel(label.name(),properties,nodes);
    }
    Iterator<RelationshipType> relationshipTypeIterator=graphDatabaseAPI.getAllRelationshipTypesInUse().iterator();
    while (relationshipTypeIterator.hasNext()) {
      RelationshipType relationshipType=relationshipTypeIterator.next();
      String relationshipTypeGetName=relationshipType.name();
      int relId=readOperations.relationshipTypeGetForName(relationshipTypeGetName);
      ResourceIterator<Label> labelsInUse=graphDatabaseAPI.getAllLabelsInUse().iterator();
      List<NodeImpl> startNodes=new LinkedList<>();
      List<NodeImpl> endNodes=new LinkedList<>();
      while (labelsInUse.hasNext()) {
        Label labelToken=labelsInUse.next();
        String labelName=labelToken.name();
        Map<String,Object> properties=new HashMap<>();
        NodeImpl node=getOrCreateLabel(labelName,properties,nodes);
        int labelId=readOperations.labelGetForName(labelName);
        if (readOperations.countsForRelationship(labelId,relId,ReadOperations.ANY_LABEL) > 0) {
          startNodes.add(node);
        }
        if (readOperations.countsForRelationship(ReadOperations.ANY_LABEL,relId,labelId) > 0) {
          endNodes.add(node);
        }
      }
      for (      NodeImpl startNode : startNodes) {
        for (        NodeImpl endNode : endNodes) {
          RelationshipImpl relationship=addRelationship(startNode,endNode,relationshipTypeGetName,relationships);
        }
      }
    }
    transaction.success();
    return getGraphResult(nodes,relationships);
  }
 }
