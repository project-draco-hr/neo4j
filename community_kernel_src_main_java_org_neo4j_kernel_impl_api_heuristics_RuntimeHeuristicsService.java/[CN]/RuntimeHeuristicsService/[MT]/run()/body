{
  for (int i=0; i < 100; i++) {
    long id=random.nextLong() % store.highestNodeIdInUse();
    if (store.nodeExists(id)) {
      try {
        List<Integer> relTypes=asList(store.nodeGetRelationshipTypes(id));
        List<Integer> labels=asList(store.nodeGetLabels(id));
        Map<Integer,Integer> incomingDegrees=new HashMap<>();
        Map<Integer,Integer> outgoingDegrees=new HashMap<>();
        for (        Integer relType : relTypes) {
          incomingDegrees.put(relType,store.nodeGetDegree(id,Direction.INCOMING,relType));
          outgoingDegrees.put(relType,store.nodeGetDegree(id,Direction.OUTGOING,relType));
        }
        data.addNodeObservation(labels,relTypes,incomingDegrees,outgoingDegrees);
      }
 catch (      EntityNotFoundException e) {
        data.addSkippedNodeObservation();
      }
    }
 else {
      data.addSkippedNodeObservation();
    }
  }
  data.addMaxNodesObservation(store.highestNodeIdInUse());
  data.recalculate();
}
