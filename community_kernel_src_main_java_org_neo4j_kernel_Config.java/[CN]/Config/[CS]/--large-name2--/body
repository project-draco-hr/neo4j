{
  this.storeDir=storeDir;
  this.inputParams=inputParams;
  this.idGeneratorFactory=idGeneratorFactory;
  this.relTypeCreator=relTypeCreator;
  this.txIdGenerator=txIdGenerator;
  this.params=getDefaultParams();
  params.put(FileSystemAbstraction.class,fileSystem);
  this.txModule=txModule;
  this.lockManager=lockManager;
  this.lockReleaser=lockReleaser;
  this.idGeneratorModule=new IdGeneratorModule(new IdGenerator());
  this.readOnly=Boolean.parseBoolean((String)params.get(READ_ONLY));
  this.backupSlave=Boolean.parseBoolean((String)params.get(BACKUP_SLAVE));
  this.syncHookFactory=txSyncHookFactory;
  this.persistenceModule=new PersistenceModule();
  this.cacheManager=new AdaptiveCacheManager();
  params.put(LogBufferFactory.class,logBufferFactory);
  graphDbModule=new GraphDbModule(graphDb,cacheManager,lockManager,txModule.getTxManager(),idGeneratorModule.getIdGenerator(),readOnly);
  indexStore=new IndexStore(storeDir);
  params.put(IndexStore.class,indexStore);
  if (storeId != null)   params.put(StoreId.class,storeId);
  params.put(IdGeneratorFactory.class,idGeneratorFactory);
  params.put(TxIdGenerator.class,txIdGenerator);
  params.put(TransactionManager.class,txModule.getTxManager());
  params.put(LastCommittedTxIdSetter.class,lastCommittedTxIdSetter);
  params.put(GraphDbModule.class,graphDbModule);
}
