{
  User existingUser=users.findByName(name);
  if (existingUser != null) {
    try {
      User updatedUser=existingUser.augment().withCredentials(createPasswordCredential(password)).withRequiredPasswordChange(false).build();
      users.update(existingUser,updatedUser);
      return updatedUser;
    }
 catch (    ConcurrentModificationException e) {
      return setPassword(name,password);
    }
catch (    IllegalTokenException e) {
      throw new ThisShouldNotHappenError("Jake","Token/username are not being modified.",e);
    }
  }
 else {
    throw new RuntimeException("No such user: " + name);
  }
}
