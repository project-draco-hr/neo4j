{
  Node node1=getGraphDb().createNode();
  Node node2=getGraphDb().createNode();
  assertEquals(0,node1.getDegree());
  assertEquals(0,node2.getDegree());
  node1.createRelationshipTo(node2,MyRelTypes.TEST);
  assertEquals(1,node1.getDegree());
  assertEquals(1,node2.getDegree());
  node1.createRelationshipTo(getGraphDb().createNode(),MyRelTypes.TEST2);
  assertEquals(2,node1.getDegree());
  assertEquals(1,node2.getDegree());
  newTransaction();
  assertEquals(2,node1.getDegree());
  assertEquals(1,node2.getDegree());
  for (int i=0; i < 1000; i++) {
    if (i % 2 == 0) {
      node1.createRelationshipTo(node2,MyRelTypes.TEST);
    }
 else {
      node2.createRelationshipTo(node1,MyRelTypes.TEST);
    }
    assertEquals(i + 2 + 1,node1.getDegree());
    assertEquals(i + 1 + 1,node2.getDegree());
    if (i % 10 == 0) {
      newTransaction();
      clearCache();
    }
  }
  for (int i=0; i < 2; i++) {
    assertEquals(1002,node1.getDegree());
    assertEquals(1002,node1.getDegree(Direction.BOTH));
    assertEquals(502,node1.getDegree(Direction.OUTGOING));
    assertEquals(500,node1.getDegree(Direction.INCOMING));
    assertEquals(1,node1.getDegree(MyRelTypes.TEST2));
    assertEquals(1001,node1.getDegree(MyRelTypes.TEST));
    assertEquals(1001,node1.getDegree(MyRelTypes.TEST,Direction.BOTH));
    assertEquals(501,node1.getDegree(MyRelTypes.TEST,Direction.OUTGOING));
    assertEquals(500,node1.getDegree(MyRelTypes.TEST,Direction.INCOMING));
    assertEquals(1,node1.getDegree(MyRelTypes.TEST2,Direction.OUTGOING));
    assertEquals(0,node1.getDegree(MyRelTypes.TEST2,Direction.INCOMING));
    newTransaction();
  }
  for (  Relationship rel : node1.getRelationships()) {
    rel.delete();
  }
  node1.delete();
  for (  Relationship rel : node2.getRelationships()) {
    rel.delete();
  }
  node2.delete();
  newTransaction();
}
