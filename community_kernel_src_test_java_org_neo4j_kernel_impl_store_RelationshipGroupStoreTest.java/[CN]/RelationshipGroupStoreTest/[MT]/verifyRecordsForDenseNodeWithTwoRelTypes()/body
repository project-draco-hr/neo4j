{
  newDb(2);
  Node node;
  Relationship rel1, rel2, rel3, rel4, rel5, rel6;
  try (Transaction tx=db.beginTx()){
    node=db.createNode();
    rel1=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST);
    rel2=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST);
    rel3=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST);
    rel4=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
    rel5=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
    rel6=node.createRelationshipTo(db.createNode(),MyRelTypes.TEST2);
    tx.success();
  }
   NeoStores neoStores=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class).testAccessNeoStores();
  NodeStore nodeStore=neoStores.getNodeStore();
  NodeRecord nodeRecord=getRecord(nodeStore,node.getId());
  long group=nodeRecord.getNextRel();
  RecordStore<RelationshipGroupRecord> groupStore=neoStores.getRelationshipGroupStore();
  RelationshipGroupRecord groupRecord=getRecord(groupStore,group);
  assertFalse(groupRecord.getNext() == -1);
  assertRelationshipChain(neoStores.getRelationshipStore(),node,groupRecord.getFirstOut(),rel1.getId(),rel2.getId(),rel3.getId());
  RelationshipGroupRecord otherGroupRecord=CommonAbstractStore.getRecord(groupStore,groupRecord.getNext());
  assertEquals(-1,otherGroupRecord.getNext());
  assertRelationshipChain(neoStores.getRelationshipStore(),node,otherGroupRecord.getFirstOut(),rel4.getId(),rel5.getId(),rel6.getId());
}
