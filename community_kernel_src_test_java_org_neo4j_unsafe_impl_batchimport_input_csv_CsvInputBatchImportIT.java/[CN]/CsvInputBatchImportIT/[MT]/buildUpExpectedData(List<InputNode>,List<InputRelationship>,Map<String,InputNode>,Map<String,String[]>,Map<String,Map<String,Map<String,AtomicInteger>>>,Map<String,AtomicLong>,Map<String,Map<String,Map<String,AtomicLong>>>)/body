{
  for (  InputNode node : nodeData) {
    expectedNodes.put((String)node.id(),node);
    expectedNodeNames.put(nameOf(node),node.labels());
    countNodeLabels(nodeCounts,node.labels());
  }
  for (  InputRelationship relationship : relationshipData) {
    InputNode startNode=expectedNodes.get(relationship.startNode());
    InputNode endNode=expectedNodes.get(relationship.endNode());
{
      expectedRelationships.get(nameOf(startNode)).get(nameOf(endNode)).get(relationship.type()).incrementAndGet();
    }
    relationshipCounts.get(null).get(null).get(null).incrementAndGet();
    relationshipCounts.get(null).get(relationship.type()).get(null).incrementAndGet();
    for (    String startNodeLabelName : asSet(startNode.labels())) {
      Map<String,Map<String,AtomicLong>> startLabelCounts=relationshipCounts.get(startNodeLabelName);
      startLabelCounts.get(null).get(null).incrementAndGet();
      Map<String,AtomicLong> typeCounts=startLabelCounts.get(relationship.type());
      typeCounts.get(null).incrementAndGet();
      for (      String endNodeLabelName : asSet(endNode.labels())) {
        startLabelCounts.get(null).get(endNodeLabelName).incrementAndGet();
        typeCounts.get(endNodeLabelName).incrementAndGet();
      }
    }
    for (    String endNodeLabelName : asSet(endNode.labels())) {
      relationshipCounts.get(null).get(null).get(endNodeLabelName).incrementAndGet();
      relationshipCounts.get(null).get(relationship.type()).get(endNodeLabelName).incrementAndGet();
    }
  }
}
