{
  Map<String,InputNode> expectedNodes=new HashMap<>();
  Map<String,String[]> expectedNodeNames=new HashMap<>();
  Map<String,Map<String,Map<String,AtomicInteger>>> expectedRelationships=new AutoCreatingHashMap<>(nested(String.class,nested(String.class,values(AtomicInteger.class))));
  Map<String,AtomicLong> expectedNodeCounts=new AutoCreatingHashMap<>(values(AtomicLong.class));
  Map<String,Map<String,Map<String,AtomicLong>>> expectedRelationshipCounts=new AutoCreatingHashMap<>(nested(String.class,nested(String.class,values(AtomicLong.class))));
  buildUpExpectedData(nodeData,relationshipData,expectedNodes,expectedNodeNames,expectedRelationships,expectedNodeCounts,expectedRelationshipCounts);
  GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabase(directory.graphDbDir());
  try (Transaction tx=db.beginTx()){
    for (    Node node : db.getAllNodes()) {
      String name=(String)node.getProperty("name");
      String[] labels=expectedNodeNames.remove(name);
      assertEquals(asSet(labels),names(node.getLabels()));
    }
    assertEquals(0,expectedNodeNames.size());
    for (    Relationship relationship : db.getAllRelationships()) {
      String startNodeName=(String)relationship.getStartNode().getProperty("name");
      Map<String,Map<String,AtomicInteger>> inner=expectedRelationships.get(startNodeName);
      String endNodeName=(String)relationship.getEndNode().getProperty("name");
      Map<String,AtomicInteger> innerInner=inner.get(endNodeName);
      String type=relationship.getType().name();
      int countAfterwards=innerInner.get(type).decrementAndGet();
      assertThat(countAfterwards,greaterThanOrEqualTo(0));
      if (countAfterwards == 0) {
        innerInner.remove(type);
        if (innerInner.isEmpty()) {
          inner.remove(endNodeName);
          if (inner.isEmpty()) {
            expectedRelationships.remove(startNodeName);
          }
        }
      }
    }
    assertEquals(0,expectedRelationships.size());
    NeoStores neoStores=((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(RecordStorageEngine.class).testAccessNeoStores();
    Function<String,Integer> labelTranslationTable=translationTable(neoStores.getLabelTokenStore(),ReadOperations.ANY_LABEL);
    for (    Pair<Integer,Long> count : allNodeCounts(labelTranslationTable,expectedNodeCounts)) {
      assertEquals("Label count mismatch for label " + count.first(),count.other().longValue(),neoStores.getCounts().nodeCount(count.first().intValue(),newDoubleLongRegister()).readSecond());
    }
    Function<String,Integer> relationshipTypeTranslationTable=translationTable(neoStores.getRelationshipTypeTokenStore(),ReadOperations.ANY_RELATIONSHIP_TYPE);
    for (    Pair<RelationshipCountKey,Long> count : allRelationshipCounts(labelTranslationTable,relationshipTypeTranslationTable,expectedRelationshipCounts)) {
      RelationshipCountKey key=count.first();
      assertEquals("Label count mismatch for label " + key,count.other().longValue(),neoStores.getCounts().relationshipCount(key.startLabel,key.type,key.endLabel,newDoubleLongRegister()).readSecond());
    }
    tx.success();
  }
  finally {
    db.shutdown();
  }
}
