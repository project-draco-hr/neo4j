{
  List<Long> ids=new ArrayList<Long>();
  LuceneXaConnection con=getReadOnlyConnection();
  LuceneTransaction luceneTx=con != null ? con.getLuceneTx() : null;
  Collection<Long> removedIds=Collections.emptySet();
  IndexSearcher additionsSearcher=null;
  if (luceneTx != null) {
    if (keyForDirectLookup != null) {
      ids.addAll(luceneTx.getAddedIds(this,keyForDirectLookup,valueForDirectLookup));
    }
 else {
      additionsSearcher=luceneTx.getAdditionsAsSearcher(this,additionalParametersOrNull);
    }
    removedIds=keyForDirectLookup != null ? luceneTx.getRemovedIds(this,keyForDirectLookup,valueForDirectLookup) : luceneTx.getRemovedIds(this,query);
  }
  IndexHits<Long> idIterator=null;
  IndexSearcherRef searcher=service.dataSource().getIndexSearcher(identifier,true);
  if (searcher != null) {
    boolean foundInCache=false;
    LruCache<String,Collection<Long>> cachedIdsMap=null;
    if (keyForDirectLookup != null) {
      cachedIdsMap=service.dataSource().getFromCache(identifier,keyForDirectLookup);
      foundInCache=fillFromCache(cachedIdsMap,ids,keyForDirectLookup,valueForDirectLookup.toString(),removedIds);
    }
    if (!foundInCache) {
      DocToIdIterator searchedIds=new DocToIdIterator(search(searcher,query,additionalParametersOrNull,additionsSearcher,removedIds),removedIds,searcher);
      if (ids.isEmpty()) {
        idIterator=searchedIds;
      }
 else {
        Collection<IndexHits<Long>> iterators=new ArrayList<IndexHits<Long>>();
        iterators.add(searchedIds);
        iterators.add(new ConstantScoreIterator<Long>(ids,Float.NaN));
        idIterator=new CombinedIndexHits<Long>(iterators);
      }
    }
  }
  idIterator=idIterator == null ? new ConstantScoreIterator<Long>(ids,0) : idIterator;
  return newEntityIterator(idIterator);
}
