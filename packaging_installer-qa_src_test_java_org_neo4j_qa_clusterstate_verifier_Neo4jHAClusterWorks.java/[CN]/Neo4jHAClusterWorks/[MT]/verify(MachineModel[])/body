{
  for (  MachineModel machine : machines) {
    machine.verifyThat(new HABeanExists(machines));
  }
  RestCreateNode createNode=new RestCreateNode();
  int rounds=4;
  long nodeId=-1;
  for (int i=0; i < machines.length * rounds; i++) {
    MachineModel machine=machines[i % machines.length];
    try {
switch (pickState(i)) {
case CREATE_NODE:
        machine.forceApply(createNode);
      nodeId=createNode.getCreatedNodeId();
    break;
case VERIFY_NODE_EXISTS:
  machine.verifyThat(new RestNodeExists(nodeId));
break;
case DELETE_NODE:
machine.verifyThat(new RestNodeExists(nodeId));
machine.forceApply(new RestDeleteNode(nodeId));
break;
case VERIFY_NODE_DELETED:
machine.verifyThat(new RestNodeDoesntExist(nodeId));
break;
}
}
 catch (Exception e) {
switch (pickState(i)) {
case CREATE_NODE:
throw new HAClusterDoesNotWorkException("Creating a node on server '" + machine.getVMDefinition().ip() + "' in the cluster failed. See nested exception.",e);
case VERIFY_NODE_EXISTS:
throw new HAClusterDoesNotWorkException("Expected node with id " + nodeId + " that I had created on separate server to appear on server '"+ machine.getVMDefinition().ip()+ "',  but failed. See nested exception.",e);
case DELETE_NODE:
throw new HAClusterDoesNotWorkException("Deleting node with id " + nodeId + ", which I had created on separate server, failed on server '"+ machine.getVMDefinition().ip()+ "'. See nested exception.",e);
case VERIFY_NODE_DELETED:
throw new HAClusterDoesNotWorkException("Expected node with id " + nodeId + ", which I had deleted on separate server, to disappear on server '"+ machine.getVMDefinition().ip()+ "', but it it didn't. See nested exception.",e);
}
throw new HAClusterDoesNotWorkException("Ensuring HA cluster works failed while executing request on server " + machine.getVMDefinition().ip() + ". Was at stage "+ i+ " in loop, nodeId was "+ nodeId+ ". See nested exception.",e);
}
}
}
