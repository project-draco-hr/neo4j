{
  KernelStatement state=mock(KernelStatement.class);
  LockHolder lockHolder=mock(LockHolder.class);
  ReleasableLock lock=mock(ReleasableLock.class);
  when(lockHolder.getReleasableIndexEntryReadLock(anyInt(),anyInt(),anyString())).thenReturn(lock);
  when(lockHolder.getReleasableIndexEntryWriteLock(anyInt(),anyInt(),anyString())).thenReturn(lock);
  try {
    IndexReader indexReader=mock(IndexReader.class);
    when(indexReader.lookup(Matchers.any())).thenReturn(IteratorUtil.emptyPrimitiveLongIterator());
    when(state.getIndexReader(anyLong())).thenReturn(indexReader);
  }
 catch (  IndexNotFoundKernelException e) {
    throw new Error(e);
  }
  when(state.txState()).thenReturn(txState);
  when(state.hasTxState()).thenReturn(true);
  when(state.hasTxStateWithChanges()).thenAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return txState.hasChanges();
    }
  }
);
  when(state.locks()).thenReturn(lockHolder);
  return state;
}
