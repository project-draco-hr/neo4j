{
  final AssertableLogProvider logProvider=new AssertableLogProvider();
  LogService logService=new AbstractLogService(){
    @Override public LogProvider getUserLogProvider(){
      return NullLogProvider.getInstance();
    }
    @Override public LogProvider getInternalLogProvider(){
      return logProvider;
    }
  }
;
  LearnerContextImpl ctx=new LearnerContextImpl(new InstanceId(1),mock(CommonContextState.class),logService,mock(Timeouts.class),mock(PaxosInstanceStore.class),mock(AcceptorInstanceStore.class),mock(ObjectInputStreamFactory.class),mock(ObjectOutputStreamFactory.class),mock(HeartbeatContextImpl.class));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1l));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1l));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(2l));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(2l));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1l));
  logProvider.assertExactly(inLog(LearnerState.class).warn(containsString("Did not have learned value for Paxos instance 1.")),inLog(LearnerState.class).warn(containsString("Did not have learned value for Paxos instance 2.")),inLog(LearnerState.class).warn(containsString("Did not have learned value for Paxos instance 1.")));
}
