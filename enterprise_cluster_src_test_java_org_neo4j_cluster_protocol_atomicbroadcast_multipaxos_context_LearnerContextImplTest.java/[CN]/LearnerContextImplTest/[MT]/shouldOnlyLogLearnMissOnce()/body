{
  StringBuffer buffer=new StringBuffer();
  final StringLogger logger=StringLogger.wrap(buffer);
  Logging logging=new DevNullLoggingService(){
    @Override public StringLogger getMessagesLog(    Class loggingClass){
      return logger;
    }
  }
;
  LearnerContextImpl ctx=new LearnerContextImpl(new InstanceId(1),mock(CommonContextState.class),logging,mock(Timeouts.class),mock(PaxosInstanceStore.class),mock(AcceptorInstanceStore.class),mock(ObjectInputStreamFactory.class),mock(ObjectOutputStreamFactory.class),mock(HeartbeatContextImpl.class));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1L));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1L));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(2L));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(2L));
  ctx.notifyLearnMiss(new org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId(1L));
  String[] logs=buffer.toString().split("\n");
  assertEquals(3,logs.length);
  assertThat(logs[0],containsString("Did not have learned value for Paxos instance 1."));
  assertThat(logs[1],containsString("Did not have learned value for Paxos instance 2."));
  assertThat(logs[2],containsString("Did not have learned value for Paxos instance 1."));
}
