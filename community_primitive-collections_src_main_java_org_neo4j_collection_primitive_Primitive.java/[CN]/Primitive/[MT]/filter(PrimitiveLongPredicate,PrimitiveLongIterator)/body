{
  return new PrimitiveLongIterator(){
    long next=-1;
    boolean hasNext=false;
{
      computeNext();
    }
    @Override public boolean hasNext(){
      return hasNext;
    }
    @Override public long next(){
      if (hasNext) {
        long result=next;
        computeNext();
        return result;
      }
      throw new NoSuchElementException();
    }
    private void computeNext(){
      while (iterator.hasNext()) {
        next=iterator.next();
        if (predicate.accept(next)) {
          hasNext=true;
          return;
        }
      }
      hasNext=false;
    }
  }
;
}
