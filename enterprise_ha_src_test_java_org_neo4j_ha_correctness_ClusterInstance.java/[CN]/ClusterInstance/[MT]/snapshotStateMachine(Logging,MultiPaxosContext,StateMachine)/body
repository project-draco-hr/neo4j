{
  Object ctx;
  Class<? extends MessageType> msgType=stateMachine.getMessageType();
  if (msgType == AtomicBroadcastMessage.class) {
    ctx=snapshotCtx.getAtomicBroadcastContext();
  }
 else   if (msgType == AcceptorMessage.class) {
    ctx=snapshotCtx.getAcceptorContext();
  }
 else   if (msgType == ProposerMessage.class) {
    ctx=snapshotCtx.getProposerContext();
  }
 else   if (msgType == LearnerMessage.class) {
    ctx=snapshotCtx.getLearnerContext();
  }
 else   if (msgType == HeartbeatMessage.class) {
    ctx=snapshotCtx.getHeartbeatContext();
  }
 else   if (msgType == ElectionMessage.class) {
    ctx=snapshotCtx.getElectionContext();
  }
 else   if (msgType == SnapshotMessage.class) {
    ctx=new SnapshotContext(snapshotCtx.getClusterContext(),snapshotCtx.getLearnerContext());
  }
 else   if (msgType == ClusterMessage.class) {
    ctx=snapshotCtx.getClusterContext();
  }
 else {
    throw new IllegalArgumentException("I don't know how to snapshot this state machine: " + stateMachine);
  }
  return new StateMachine(ctx,stateMachine.getMessageType(),stateMachine.getState(),logging);
}
