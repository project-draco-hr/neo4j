{
  final DefaultComboBoxModel<String> extensionPackagesModel=new DefaultComboBoxModel<>(extensionPackagesConfig.get().toArray(new String[0]));
  final JComboBox<String> extensionPackages=new JComboBox<>(extensionPackagesModel);
  JButton addPackageButton=buttonWithText("+",new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String newPackage=JOptionPane.showInputDialog("Package containing extension(s) to include");
      if (newPackage != null) {
        extensionPackagesModel.addElement(newPackage);
        extensionPackagesConfig.set(itemsAsList(extensionPackagesModel));
      }
    }
  }
);
  JButton removePackageButton=buttonWithText("-",new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int selectedIndex=extensionPackages.getSelectedIndex();
      if (selectedIndex != -1) {
        extensionPackagesModel.removeElementAt(selectedIndex);
        extensionPackagesConfig.set(itemsAsList(extensionPackagesModel));
      }
    }
  }
);
  JPanel packagesPanel=new JPanel();
  packagesPanel.setLayout(new BoxLayout(packagesPanel,Y_AXIS));
  packagesPanel.setBorder(BorderFactory.createTitledBorder("Server Extensions"));
  packagesPanel.add(new HeadlinePanel("Extension packages for " + environment.getExtensionsDirectory().getAbsolutePath() + ")"));
  JPanel packagesComponentsPanel=new JPanel();
  packagesComponentsPanel.setLayout(new BoxLayout(packagesComponentsPanel,X_AXIS));
  packagesComponentsPanel.add(extensionPackages);
  packagesComponentsPanel.add(addPackageButton);
  packagesComponentsPanel.add(removePackageButton);
  packagesPanel.add(packagesComponentsPanel);
  return packagesPanel;
}
