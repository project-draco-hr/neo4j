{
  int initialHeapValue=heapSizeConfig.get().intValue();
  int availableTotalPhysicalMemory=getAvailableTotalPhysicalMemoryMb();
  final JSlider heapSizeSlider=new JSlider(HORIZONTAL,0,availableTotalPhysicalMemory,initialHeapValue);
  heapSizeSlider.setEnabled(heapSizeConfig.isWritable());
  heapSizeSlider.setToolTipText(heapSizeToolTopText());
  heapSizeSlider.setPaintTicks(true);
  heapSizeSlider.setPaintTrack(true);
  heapSizeSlider.setPaintLabels(true);
  int majorTickSpacing=appropriateMajorTickSpacing(availableTotalPhysicalMemory);
  heapSizeSlider.setMajorTickSpacing(majorTickSpacing);
  heapSizeSlider.setMinorTickSpacing(majorTickSpacing / 2);
  heapSizeSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!heapSizeSlider.getValueIsAdjusting()) {
        heapSizeConfig.set(heapSizeSlider.getValue());
        heapSizeSlider.setToolTipText(heapSizeToolTopText());
      }
    }
  }
);
  JPanel heapSizePanel=new JPanel();
  heapSizePanel.setLayout(new BoxLayout(heapSizePanel,Y_AXIS));
  heapSizePanel.add(new HeadlinePanel("Heap size (changes requires restart)"));
  heapSizePanel.add(heapSizeSlider);
  return heapSizePanel;
}
