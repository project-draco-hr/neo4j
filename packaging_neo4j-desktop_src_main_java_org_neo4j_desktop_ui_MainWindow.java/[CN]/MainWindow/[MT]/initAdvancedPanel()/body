{
  JPanel advancedPanel=new JPanel();
  advancedPanel.setLayout(new BoxLayout(advancedPanel,Y_AXIS));
  advancedPanel.setVisible(false);
  advancedPanel.add(new HeadlinePanel("Advanced settings"));
  int initialHeapValue=heapSizeConfig.get().intValue();
  int availableTotalPhysicalMemory=getAvailableTotalPhysicalMemoryMb();
  final JSlider heapSizeSlider=new JSlider(HORIZONTAL,0,availableTotalPhysicalMemory,initialHeapValue);
  heapSizeSlider.setEnabled(heapSizeConfig.isWritable());
  heapSizeSlider.setToolTipText(heapSizeToolTopText());
  heapSizeSlider.setPaintTicks(true);
  heapSizeSlider.setPaintTrack(true);
  heapSizeSlider.setPaintLabels(true);
  int majorTickSpacing=appropriateMajorTickSpacing(availableTotalPhysicalMemory);
  heapSizeSlider.setMajorTickSpacing(majorTickSpacing);
  heapSizeSlider.setMinorTickSpacing(majorTickSpacing / 2);
  heapSizeSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!heapSizeSlider.getValueIsAdjusting()) {
        heapSizeConfig.set(heapSizeSlider.getValue());
        heapSizeSlider.setToolTipText(heapSizeToolTopText());
      }
    }
  }
);
  JPanel heapSizePanel=new JPanel();
  heapSizePanel.setLayout(new BoxLayout(heapSizePanel,Y_AXIS));
  heapSizePanel.add(new HeadlinePanel("Heap size (changes requires restart)"));
  heapSizePanel.add(heapSizeSlider);
  advancedPanel.add(heapSizePanel);
  final DefaultComboBoxModel<String> extensionPackagesModel=new DefaultComboBoxModel<String>(extensionPackagesConfig.get().toArray(new String[0]));
  final JComboBox<String> extensionPackages=new JComboBox<String>(extensionPackagesModel);
  JButton addPackageButton=buttonWithText("+",new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String newPackage=JOptionPane.showInputDialog("Package containing extension(s) to include");
      if (newPackage != null) {
        extensionPackagesModel.addElement(newPackage);
        extensionPackagesConfig.set(itemsAsList(extensionPackagesModel));
      }
    }
  }
);
  JButton removePackageButton=buttonWithText("-",new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int selectedIndex=extensionPackages.getSelectedIndex();
      if (selectedIndex != -1) {
        extensionPackagesModel.removeElementAt(selectedIndex);
        extensionPackagesConfig.set(itemsAsList(extensionPackagesModel));
      }
    }
  }
);
  JPanel packagesPanel=new JPanel();
  packagesPanel.setLayout(new BoxLayout(packagesPanel,Y_AXIS));
  packagesPanel.add(new HeadlinePanel("Extension packages for " + environment.getExtensionsDirectory().getAbsolutePath() + ")"));
  JPanel packagesComponentsPanel=new JPanel();
  packagesComponentsPanel.setLayout(new BoxLayout(packagesComponentsPanel,X_AXIS));
  packagesComponentsPanel.add(extensionPackages);
  packagesComponentsPanel.add(addPackageButton);
  packagesComponentsPanel.add(removePackageButton);
  packagesPanel.add(packagesComponentsPanel);
  advancedPanel.add(packagesPanel);
  return advancedPanel;
}
