{
  com.sun.source.tree.Tree leaf=trees.getPath(target).getLeaf();
  final com.sun.tools.javac.tree.JCTree.JCModifiers modifiers;
  if (leaf instanceof com.sun.tools.javac.tree.JCTree.JCMethodDecl) {
    com.sun.tools.javac.tree.JCTree.JCMethodDecl method=(com.sun.tools.javac.tree.JCTree.JCMethodDecl)leaf;
    modifiers=method.mods != null ? method.mods : (method.mods=makeModifiers(target,0));
  }
 else   if (leaf instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl) {
    com.sun.tools.javac.tree.JCTree.JCClassDecl clazz=(com.sun.tools.javac.tree.JCTree.JCClassDecl)leaf;
    modifiers=clazz.mods != null ? clazz.mods : (clazz.mods=makeModifiers(target,0));
  }
 else   if (leaf instanceof com.sun.tools.javac.tree.JCTree.JCVariableDecl) {
    com.sun.tools.javac.tree.JCTree.JCVariableDecl param=(com.sun.tools.javac.tree.JCTree.JCVariableDecl)leaf;
    modifiers=param.mods != null ? param.mods : (param.mods=makeModifiers(target,0));
  }
 else {
    return false;
  }
  for (  com.sun.tools.javac.tree.JCTree.JCAnnotation annotation : modifiers.annotations) {
    if (annotation.annotationType instanceof com.sun.tools.javac.tree.JCTree.JCIdent) {
      com.sun.tools.javac.tree.JCTree.JCIdent ident=(com.sun.tools.javac.tree.JCTree.JCIdent)annotation.annotationType;
      if (ident.getName().contentEquals(annotationType))       return false;
    }
  }
  modifiers.annotations=modifiers.annotations.prepend(maker.Annotation(typeName(annotationType),makeParams(parameters)));
  return true;
}
