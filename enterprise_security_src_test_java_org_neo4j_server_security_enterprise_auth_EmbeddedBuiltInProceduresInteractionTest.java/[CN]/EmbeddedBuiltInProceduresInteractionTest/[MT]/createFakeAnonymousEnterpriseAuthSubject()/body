{
  return new EnterpriseAuthSubject(){
    @Override public boolean allowsReads(){
      return ANONYMOUS.allowsReads();
    }
    @Override public boolean allowsWrites(){
      return ANONYMOUS.allowsWrites();
    }
    @Override public boolean allowsSchemaWrites(){
      return ANONYMOUS.allowsSchemaWrites();
    }
    @Override public boolean overrideOriginalMode(){
      return ANONYMOUS.overrideOriginalMode();
    }
    @Override public AuthorizationViolationException onViolation(    String msg){
      return ANONYMOUS.onViolation(msg);
    }
    @Override public String name(){
      return ANONYMOUS.name();
    }
    @Override public boolean isAdmin(){
      return false;
    }
    @Override public void logout(){
      ANONYMOUS.logout();
    }
    @Override public AuthenticationResult getAuthenticationResult(){
      return ANONYMOUS.getAuthenticationResult();
    }
    @Override public void setPassword(    String password,    boolean requirePasswordChange) throws IOException, InvalidArgumentsException {
      ANONYMOUS.setPassword(password,requirePasswordChange);
    }
    @Override public boolean allowsProcedureWith(    String[] roleNames) throws InvalidArgumentsException {
      return ANONYMOUS.allowsProcedureWith(roleNames);
    }
    @Override public String username(){
      return ANONYMOUS.username();
    }
    @Override public boolean hasUsername(    String username){
      return ANONYMOUS.hasUsername(username);
    }
    @Override public void ensureUserExistsWithName(    String username) throws InvalidArgumentsException {
      ANONYMOUS.ensureUserExistsWithName(username);
    }
  }
;
}
