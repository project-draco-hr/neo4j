{
  LogRotationControl logRotationControl=mock(LogRotationControl.class);
  TransactionIdStore transactionIdStore=new DeadSimpleTransactionIdStore(0l);
  TxIdGenerator txIdGenerator=new DefaultTxIdGenerator(singletonProvider(transactionIdStore));
  LogPositionCache positionCache=new LogPositionCache(10,100);
  final byte[] additionalHeader=new byte[]{1,2,5};
  final int masterId=2, authorId=1;
  final long timeWritten=12345, latestCommittedTxWhenStarted=4545;
  LifeSupport life=new LifeSupport();
  LogFile logFile=life.add(new PhysicalLogFile(fs,dir,DEFAULT_NAME,1000,NO_PRUNING,transactionIdStore,mock(LogVersionRepository.class),new Monitors().newMonitor(PhysicalLogFile.Monitor.class),logRotationControl,positionCache,new Visitor<ReadableLogChannel,IOException>(){
    @Override public boolean visit(    ReadableLogChannel element) throws IOException {
      return false;
    }
  }
));
  life.start();
  addATransactionAndRewind(logFile.getWriter(),txIdGenerator,positionCache,additionalHeader,masterId,authorId,timeWritten,latestCommittedTxWhenStarted);
  life.shutdown();
  life=new LifeSupport();
  final AtomicInteger recoveredTransactions=new AtomicInteger();
  logFile=life.add(new PhysicalLogFile(fs,dir,DEFAULT_NAME,1000,NO_PRUNING,transactionIdStore,mock(LogVersionRepository.class),new Monitors().newMonitor(PhysicalLogFile.Monitor.class),logRotationControl,positionCache,new LogFileRecoverer(new VersionAwareLogEntryReader(CommandReaderFactory.DEFAULT),new Consumer<TransactionRepresentation,IOException>(){
    @Override public boolean accept(    TransactionRepresentation transaction) throws IOException {
      assertArrayEquals(additionalHeader,transaction.additionalHeader());
      assertEquals(masterId,transaction.getMasterId());
      assertEquals(authorId,transaction.getAuthorId());
      assertEquals(timeWritten,transaction.getTimeWritten());
      assertEquals(latestCommittedTxWhenStarted,transaction.getLatestCommittedTxWhenStarted());
      recoveredTransactions.incrementAndGet();
      return true;
    }
  }
)));
  life.add(new PhysicalTransactionStore(logFile,txIdGenerator,positionCache,new VersionAwareLogEntryReader(CommandReaderFactory.DEFAULT)));
  try {
    life.start();
  }
  finally {
    life.shutdown();
  }
  assertEquals(1,recoveredTransactions.get());
}
