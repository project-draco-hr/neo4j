{
  DependencyResolver resolver=targetDb.getDependencyResolver();
  TransactionIdStore transactionIdStore=resolver.resolveDependency(TransactionIdStore.class);
  LogicalTransactionStore transactionStore=resolver.resolveDependency(LogicalTransactionStore.class);
  try {
    transactionStore.getMetadataFor(transactionIdStore.getLastCommittingTransactionId());
    return;
  }
 catch (  NoSuchTransactionException e) {
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
  LifeSupport life=new LifeSupport();
  BackupClient recoveryClient=life.add(new BackupClient(sourceHostNameOrIp,sourcePort,resolver.resolveDependency(Logging.class),resolver.resolveDependency(Monitors.class),targetDb.storeId()));
  life.start();
  try (Response<Void> response=recoveryClient.incrementalBackup(anonymous(transactionIdStore.getLastCommittingTransactionId() - 1))){
    TransactionAppender appender=transactionStore.getAppender();
    for (    CommittedTransactionRepresentation transaction : response.getTxs()) {
      appender.append(transaction);
    }
  }
 catch (  RuntimeException e) {
    if (e.getCause() != null && e.getCause() instanceof MissingLogDataException) {
      logger.warn("Important: There are no available transaction logs on the target database, which " + "means the backup could not save a point-in-time reference. This means you cannot use this " + "backup for incremental backups, and it means you cannot use it directly to seed an HA "+ "cluster. The next time you perform a backup, a full backup will be done. If you wish to "+ "use this backup as a seed for a cluster, you need to start a stand-alone database on "+ "it, and commit one write transaction, to create the transaction log needed to seed the "+ "cluster. To avoid this happening, make sure you never manually delete transaction log "+ "files (nioneo_logical.log.vXXX), and that you configure the database to keep at least a "+ "few days worth of transaction logs.");
    }
  }
 finally {
    life.shutdown();
  }
}
