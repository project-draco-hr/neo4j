{
  byte typeId=(byte)(bArray[0] & 0x3F);
  if (typeId == PropertyType.STRING.intValue()) {
    byte encoding=(byte)((bArray[0] & 0x30) >> 6);
    ByteBuffer buf=ByteBuffer.wrap(bArray);
    buf.get();
    String[] array=new String[buf.getInt()];
    for (int r=0; r < array.length; r++) {
      if (encoding == 1) {
        char[] chars=new char[buf.getInt()];
        for (int i=0; i < chars.length; i++)         chars[i]=(char)buf.get();
        array[r]=new String(chars);
      }
 else {
        byte[] bytes=new byte[buf.getInt()];
        buf.get(bytes);
        array[r]=UTF8.decode(bytes);
      }
    }
    return array;
  }
 else {
    ShortArray type=ShortArray.typeOf(typeId);
    Bits bits=Bits.bitsFromBytes(bArray);
    bits.getByte();
    int bitsUsedInLastByte=bits.getByte();
    int requiredBits=bits.getByte();
    if (requiredBits == 0)     return type.createArray(0);
    int length=((bArray.length - 3) * 8 - (8 - bitsUsedInLastByte)) / requiredBits;
    Object result=type.createArray(length);
    for (int i=0; i < length; i++) {
      type.get(result,i,bits,requiredBits);
    }
    return result;
  }
}
