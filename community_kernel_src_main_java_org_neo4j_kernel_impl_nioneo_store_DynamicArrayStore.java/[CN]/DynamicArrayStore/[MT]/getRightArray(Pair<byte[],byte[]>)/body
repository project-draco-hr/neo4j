{
  byte[] header=data.first();
  byte[] bArray=data.other();
  byte typeId=header[0];
  if (typeId == PropertyType.STRING.intValue()) {
    ByteBuffer headerBuffer=ByteBuffer.wrap(header,1,header.length - 1);
    int arrayLength=headerBuffer.getInt();
    String[] result=new String[arrayLength];
    ByteBuffer dataBuffer=ByteBuffer.wrap(bArray);
    for (int i=0; i < arrayLength; i++) {
      int byteLength=dataBuffer.getInt();
      byte[] stringByteArray=new byte[byteLength];
      dataBuffer.get(stringByteArray);
      result[i]=PropertyStore.decodeString(stringByteArray);
    }
    return result;
  }
 else {
    ShortArray type=ShortArray.typeOf(typeId);
    int bitsUsedInLastByte=header[1];
    int requiredBits=header[2];
    if (requiredBits == 0)     return type.createEmptyArray();
    Object result;
    if (type == ShortArray.BYTE && requiredBits == Byte.SIZE) {
      result=bArray;
    }
 else {
      Bits bits=Bits.bitsFromBytes(bArray);
      int length=(bArray.length * 8 - (8 - bitsUsedInLastByte)) / requiredBits;
      result=type.createArray(length,bits,requiredBits);
    }
    return result;
  }
}
