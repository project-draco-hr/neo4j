{
  Class<?> componentType=array.getClass().getComponentType();
  boolean isPrimitiveByteArray=componentType.equals(Byte.TYPE);
  boolean isByteArray=componentType.equals(Byte.class) || isPrimitiveByteArray;
  byte[] bytes=null;
  ShortArray type=ShortArray.typeOf(array);
  if (type == null)   throw new IllegalArgumentException(array + " not a valid array type.");
  int arrayLength=Array.getLength(array);
  int requiredBits=isByteArray ? Byte.SIZE : type.calculateRequiredBitsForArray(array);
  int totalBits=requiredBits * arrayLength;
  int numberOfBytes=(totalBits - 1) / 8 + 1;
  int bitsUsedInLastByte=totalBits % 8;
  bitsUsedInLastByte=bitsUsedInLastByte == 0 ? 8 : bitsUsedInLastByte;
  numberOfBytes+=NUMBER_HEADER_SIZE;
  int length=arrayLength;
  if (isByteArray) {
    bytes=new byte[NUMBER_HEADER_SIZE + length];
    bytes[0]=(byte)type.intValue();
    bytes[1]=(byte)bitsUsedInLastByte;
    bytes[2]=(byte)requiredBits;
    if (isPrimitiveByteArray)     arraycopy((byte[])array,0,bytes,NUMBER_HEADER_SIZE,length);
 else {
      Byte[] source=(Byte[])array;
      for (int i=0; i < source.length; i++)       bytes[NUMBER_HEADER_SIZE + i]=source[i].byteValue();
    }
  }
 else {
    Bits bits=Bits.bits(numberOfBytes);
    bits.put((byte)type.intValue());
    bits.put((byte)bitsUsedInLastByte);
    bits.put((byte)requiredBits);
    for (int i=0; i < length; i++)     type.put(Array.get(array,i),bits,requiredBits);
    bytes=bits.asBytes();
  }
  return allocateRecords(startBlock,bytes);
}
