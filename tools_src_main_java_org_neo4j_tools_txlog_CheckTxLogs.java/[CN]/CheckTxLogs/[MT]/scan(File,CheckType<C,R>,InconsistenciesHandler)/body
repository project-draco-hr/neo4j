{
  out.println("Checking logs for " + check.name() + " inconsistencies");
  CommittedRecords<R> state=new CommittedRecords<>(check);
  boolean validLogs=true;
  long commandsRead=0;
  try (LogEntryCursor logEntryCursor=LogTestUtils.openLogs(fs,storeDirectory)){
    while (logEntryCursor.next()) {
      LogEntry entry=logEntryCursor.get();
      if (entry instanceof LogEntryCommand) {
        Command command=((LogEntryCommand)entry).getXaCommand();
        if (check.commandClass().isInstance(command)) {
          long logVersion=logEntryCursor.getCurrentLogVersion();
          C cmd=check.commandClass().cast(command);
          validLogs&=process(cmd,check,state,logVersion,handler);
        }
      }
      commandsRead++;
    }
  }
   out.println("Processed " + storeDirectory.getCanonicalPath() + " with "+ commandsRead+ " commands");
  out.println(state);
  return validLogs;
}
