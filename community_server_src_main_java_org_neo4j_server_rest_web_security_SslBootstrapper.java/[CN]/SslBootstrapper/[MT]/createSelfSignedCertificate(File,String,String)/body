{
  try {
    KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("RSA");
    keyPairGenerator.initialize(1024);
    KeyPair KPair=keyPairGenerator.generateKeyPair();
    X509V3CertificateGenerator v3CertGen=new X509V3CertificateGenerator();
    v3CertGen.setSerialNumber(BigInteger.valueOf(new SecureRandom().nextInt()));
    v3CertGen.setIssuerDN(new X509Principal("CN=" + hostName + ", OU=None, O=None L=None, C=None"));
    v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60* 24* 30));
    v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + (1000L * 60 * 60* 24* 365* 10)));
    v3CertGen.setSubjectDN(new X509Principal("CN=" + hostName + ", OU=None, O=None L=None, C=None"));
    v3CertGen.setPublicKey(KPair.getPublic());
    v3CertGen.setSignatureAlgorithm("MD5WithRSAEncryption");
    X509Certificate PKCertificate=v3CertGen.generateX509Certificate(KPair.getPrivate());
    FileOutputStream fos=new FileOutputStream("/tmp/testCert.cert");
    fos.write(PKCertificate.getEncoded());
    fos.close();
    KeyStore privateKS=KeyStore.getInstance("JKS");
    privateKS.setKeyEntry("sample.alias",KPair.getPrivate(),keyPassword.toCharArray(),new java.security.cert.Certificate[]{PKCertificate});
    privateKS.store(new FileOutputStream(keyStore.getAbsolutePath()),keyStorePassword.toCharArray());
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  InvalidKeyException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  SignatureException e) {
    e.printStackTrace();
  }
catch (  CertificateEncodingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  KeyStoreException e) {
    e.printStackTrace();
  }
catch (  CertificateException e) {
    e.printStackTrace();
  }
}
