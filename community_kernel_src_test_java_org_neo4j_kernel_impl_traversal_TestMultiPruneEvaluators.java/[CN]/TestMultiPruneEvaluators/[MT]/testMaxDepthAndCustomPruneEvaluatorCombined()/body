{
  Evaluator lessThanThreeRels=new Evaluator(){
    public Evaluation evaluate(    Path path){
      return count(path.endNode().getRelationships(Direction.OUTGOING).iterator()) < 3 ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.INCLUDE_AND_CONTINUE;
    }
  }
;
  TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.all()).evaluator(toDepth(1)).evaluator(lessThanThreeRels);
  Set<String> expectedNodes=new HashSet<String>(asList("a","b","c","d","e"));
  try (Transaction tx=beginTx()){
    for (    Path position : description.traverse(node("a"))) {
      String name=(String)position.endNode().getProperty("name");
      assertTrue(name + " shouldn't have been returned",expectedNodes.remove(name));
    }
    tx.success();
  }
   assertTrue(expectedNodes.isEmpty());
}
