{
  KernelTransaction initialKTX=mock(KernelTransaction.class);
  KernelTransaction.Type transactionType=null;
  AccessMode transactionMode=null;
  QueryRegistryOperations initialQueryRegistry=mock(QueryRegistryOperations.class);
  ExecutingQuery executingQuery=mock(ExecutingQuery.class);
  PropertyContainerLocker locker=null;
  ThreadToStatementContextBridge txBridge=mock(ThreadToStatementContextBridge.class);
  Guard guard=mock(Guard.class);
  DbmsOperations.Factory dbmsOperationsFactory=null;
  KernelTransaction secondKTX=mock(KernelTransaction.class);
  InternalTransaction secondTransaction=mock(InternalTransaction.class);
  Statement secondStatement=mock(Statement.class);
  QueryRegistryOperations secondQueryRegistry=mock(QueryRegistryOperations.class);
  when(executingQuery.queryText()).thenReturn("X");
  when(executingQuery.queryParameters()).thenReturn(Collections.emptyMap());
  when(statement.queryRegistration()).thenReturn(initialQueryRegistry);
  when(databaseQueryService.beginTransaction(transactionType,transactionMode)).thenReturn(secondTransaction);
  when(txBridge.getKernelTransactionBoundToThisThread(true)).thenReturn(initialKTX,secondKTX);
  when(txBridge.get()).thenReturn(secondStatement);
  when(secondStatement.queryRegistration()).thenReturn(secondQueryRegistry);
  Neo4jTransactionalContext context=new Neo4jTransactionalContext(databaseQueryService,transaction,transactionType,transactionMode,statement,executingQuery,locker,txBridge,dbmsOperationsFactory,guard);
  context.commitAndRestartTx();
  Object[] mocks={txBridge,transaction,initialQueryRegistry,initialKTX,secondQueryRegistry,secondKTX};
  InOrder order=Mockito.inOrder(mocks);
  order.verify(txBridge).getKernelTransactionBoundToThisThread(true);
  order.verify(txBridge).unbindTransactionFromCurrentThread();
  order.verify(txBridge).get();
  order.verify(secondQueryRegistry).registerExecutingQuery(executingQuery);
  order.verify(txBridge).getKernelTransactionBoundToThisThread(true);
  order.verify(txBridge).unbindTransactionFromCurrentThread();
  order.verify(txBridge).bindTransactionToCurrentThread(initialKTX);
  order.verify(initialQueryRegistry).unregisterExecutingQuery(executingQuery);
  order.verify(transaction).success();
  order.verify(transaction).close();
  order.verify(txBridge).unbindTransactionFromCurrentThread();
  order.verify(txBridge).bindTransactionToCurrentThread(secondKTX);
  verifyNoMoreInteractions(mocks);
}
