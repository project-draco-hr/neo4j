{
  Node root=getGraphDb().createNode();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST};
  Direction[] traversableDirs=new Direction[]{Direction.OUTGOING};
  this.sanityCheckTraverser("Sanity check failed: null traversable " + "rels should throw an " + "IllegalArgumentException",BREADTH_FIRST,root,null,traversableDirs[0],StopEvaluator.END_OF_NETWORK,ReturnableEvaluator.ALL);
  this.sanityCheckTraverser("Sanity check failed: null traversable " + "rels should throw an " + "IllegalArgumentException",BREADTH_FIRST,root,traversableRels[0],null,StopEvaluator.END_OF_NETWORK,ReturnableEvaluator.ALL);
  this.sanityCheckTraverser("Sanity check failed: null stop eval " + "should throw an IllegalArgumentException",BREADTH_FIRST,root,traversableRels[0],traversableDirs[0],null,ReturnableEvaluator.ALL);
  this.sanityCheckTraverser("Sanity check failed: null returnable " + "evaluator should throw an " + "IllegalArgumentException",BREADTH_FIRST,root,traversableRels[0],traversableDirs[0],StopEvaluator.END_OF_NETWORK,null);
  this.sanityCheckTraverser("Sanity check failed: null returnable " + "evaluator should throw an " + "IllegalArgumentException",BREADTH_FIRST,root,traversableRels[0],null,StopEvaluator.END_OF_NETWORK,null);
  this.sanityCheckTraverser("Sanity check failed: null returnable " + "evaluator should throw an " + "IllegalArgumentException",BREADTH_FIRST,root,null,traversableDirs[0],StopEvaluator.END_OF_NETWORK,null);
  root.delete();
}
