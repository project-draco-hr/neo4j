{
  GraphDatabaseService neo=dbRule.getGraphDatabaseAPI();
  try (Transaction tx=neo.beginTx()){
    final Node emil=neo.createNode();
    emil.setProperty("name","Emil Eifr??m");
    emil.setProperty("country_of_residence","USA");
    final Node tobias=neo.createNode();
    tobias.setProperty("name","Tobias Ivarsson");
    tobias.setProperty("country_of_residence","Sweden");
    final Node johan=neo.createNode();
    johan.setProperty("name","Johan Svensson");
    johan.setProperty("country_of_residence","Sweden");
    final Relationship emilKNOWStobias=emil.createRelationshipTo(tobias,type.KNOWS);
    final Relationship johanKNOWSemil=johan.createRelationshipTo(emil,type.KNOWS);
    final Relationship tobiasKNOWSjohan=tobias.createRelationshipTo(johan,type.KNOWS);
    final Relationship tobiasWORKS_FORemil=tobias.createRelationshipTo(emil,type.WORKS_FOR);
    OutputStream out=new ByteArrayOutputStream();
    SubgraphMapper subgraphMapper=new SubgraphMapper(){
      @Override public String getSubgraphFor(      Node node){
        if (node.hasProperty("country_of_residence")) {
          return (String)node.getProperty("country_of_residence");
        }
        return null;
      }
    }
;
    GraphvizWriter writer=new GraphvizWriter();
    SubgraphMapper.SubgraphMappingWalker walker=new SubgraphMapper.SubgraphMappingWalker(subgraphMapper){
      @Override protected Iterable<Node> nodes(){
        return asList(emil,tobias,johan);
      }
      @Override protected Iterable<Relationship> relationships(){
        return asList(emilKNOWStobias,johanKNOWSemil,tobiasKNOWSjohan,tobiasWORKS_FORemil);
      }
    }
;
    writer.emit(out,walker);
    tx.success();
  }
 }
