{
  Map<String,String> params=defaultBackupPortHostParams();
  params.put(OnlineBackupSettings.online_backup_enabled.name(),"false");
  final List<String> storesThatHaveBeenStreamed=new ArrayList<>();
  final CountDownLatch firstStoreFinishedStreaming=new CountDownLatch(1);
  final CountDownLatch transactionCommitted=new CountDownLatch(1);
  final GraphDatabaseAPI db=(GraphDatabaseAPI)new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir.getAbsolutePath()).setConfig(params).newGraphDatabase();
  createAndIndexNode(db,1);
  NeoStoreDataSource ds=db.getDependencyResolver().resolveDependency(DataSourceManager.class).getDataSource();
  long expectedLastTxId=ds.getNeoStore().getLastCommittedTransactionId();
  BackupService.BackupOutcome backupOutcome;
  try {
    Config config=new Config(defaultBackupPortHostParams());
    Monitors monitors=new Monitors();
    monitors.addMonitorListener(new StoreSnoopingMonitor(firstStoreFinishedStreaming,transactionCommitted,storesThatHaveBeenStreamed));
    OnlineBackupKernelExtension backup=new OnlineBackupKernelExtension(config,db,db.getDependencyResolver().resolveDependency(KernelPanicEventGenerator.class),new DevNullLoggingService(),monitors);
    backup.start();
    BackupService backupService=new BackupService(fileSystem);
    ExecutorService executor=Executors.newSingleThreadExecutor();
    executor.execute(new Runnable(){
      @Override public void run(){
        awaitLatch(firstStoreFinishedStreaming);
        createAndIndexNode(db,1);
        db.getDependencyResolver().resolveDependency(DataSourceManager.class).getDataSource().getNeoStore().flush();
        transactionCommitted.countDown();
      }
    }
);
    backupOutcome=backupService.doFullBackup(BACKUP_HOST,backupPort,backupDir.getAbsolutePath(),true,new Config(params),BackupClient.BIG_READ_TIMEOUT);
    backup.stop();
    executor.shutdown();
    executor.awaitTermination(30,TimeUnit.SECONDS);
  }
  finally {
    db.shutdown();
  }
  assertEquals(DbRepresentation.of(storeDir),DbRepresentation.of(backupDir));
  assertTrue(backupOutcome.isConsistent());
  checkPreviousCommittedTxIdFromFirstLog(expectedLastTxId);
}
