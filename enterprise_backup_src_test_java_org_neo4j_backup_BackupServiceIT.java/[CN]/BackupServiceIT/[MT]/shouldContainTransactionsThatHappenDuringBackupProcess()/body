{
  defaultBackupPortHostParams();
  Config defaultConfig=dbRule.getConfigCopy();
  dbRule.setConfig(OnlineBackupSettings.online_backup_enabled,"false");
  Config withOnlineBackupEnabled=dbRule.getConfigCopy();
  final Barrier.Control barrier=new Barrier.Control();
  final GraphDatabaseAPI db=dbRule.getGraphDatabaseAPI();
  createAndIndexNode(db,1);
  NeoStoreDataSource ds=db.getDependencyResolver().resolveDependency(DataSourceManager.class).getDataSource();
  long expectedLastTxId=ds.getNeoStore().getLastCommittedTransactionId();
  monitors.addMonitorListener(new StoreSnoopingMonitor(barrier));
  OnlineBackupKernelExtension backup=new OnlineBackupKernelExtension(defaultConfig,db,db.getDependencyResolver().resolveDependency(KernelPanicEventGenerator.class),NullLogProvider.getInstance(),monitors);
  backup.start();
  BackupService backupService=backupService();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  executor.execute(new Runnable(){
    @Override public void run(){
      barrier.awaitUninterruptibly();
      createAndIndexNode(db,1);
      db.getDependencyResolver().resolveDependency(NeoStoreSupplier.class).get().flush();
      barrier.release();
    }
  }
);
  BackupService.BackupOutcome backupOutcome=backupService.doFullBackup(BACKUP_HOST,backupPort,backupDir.getAbsolutePath(),true,withOnlineBackupEnabled,BackupClient.BIG_READ_TIMEOUT,false);
  backup.stop();
  executor.shutdown();
  executor.awaitTermination(30,TimeUnit.SECONDS);
  checkPreviousCommittedTxIdFromLog(0,expectedLastTxId);
  checkLastCommittedTxIdInLogAndNeoStore(expectedLastTxId + 1);
  assertEquals(DbRepresentation.of(db),DbRepresentation.of(backupDir));
  assertTrue(backupOutcome.isConsistent());
}
