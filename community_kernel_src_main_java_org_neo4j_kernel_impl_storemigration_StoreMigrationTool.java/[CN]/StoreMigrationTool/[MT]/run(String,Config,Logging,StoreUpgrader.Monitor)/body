{
  FileSystemAbstraction fs=new DefaultFileSystemAbstraction();
  ConfigMapUpgradeConfiguration upgradeConfiguration=new ConfigMapUpgradeConfiguration(config);
  StoreUpgrader migrationProcess=new StoreUpgrader(upgradeConfiguration,fs,monitor,logging);
  LifeSupport life=new LifeSupport();
  KernelExtensions kernelExtensions=life.add(new KernelExtensions(GraphDatabaseDependencies.newDependencies().kernelExtensions(),config,kernelExtensionDependencyResolver(fs,config),ignore()));
  config=StoreFactory.configForStoreDir(config,new File(legacyStoreDirectory));
  life.start();
  SchemaIndexProvider schemaIndexProvider=kernelExtensions.resolveDependency(SchemaIndexProvider.class,SchemaIndexProvider.HIGHEST_PRIORITIZED_OR_NONE);
  try {
    UpgradableDatabase upgradableDatabase=new UpgradableDatabase(new StoreVersionCheck(fs));
    migrationProcess.addParticipant(new StoreMigrator(new VisibleMigrationProgressMonitor(logging.getMessagesLog(StoreMigrationTool.class),System.out),fs,upgradableDatabase,config,logging));
    migrationProcess.addParticipant(schemaIndexProvider.storeMigrationParticipant(fs,upgradableDatabase));
  }
 catch (  IllegalArgumentException e) {
  }
  try (PageCache pageCache=createPageCache(fs,config)){
    long startTime=System.currentTimeMillis();
    migrationProcess.migrateIfNeeded(new File(legacyStoreDirectory),schemaIndexProvider,pageCache);
    long duration=System.currentTimeMillis() - startTime;
    logging.getMessagesLog(StoreMigrationTool.class).info(format("Migration completed in %d s%n",duration / 1000));
  }
 catch (  IOException e) {
    throw new StoreUpgrader.UnableToUpgradeException("Failure during upgrade",e);
  }
 finally {
    life.shutdown();
  }
}
