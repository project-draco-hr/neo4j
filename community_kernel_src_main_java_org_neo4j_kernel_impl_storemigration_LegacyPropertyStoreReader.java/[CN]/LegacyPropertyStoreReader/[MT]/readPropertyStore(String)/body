{
  FileChannel fileChannel=new RandomAccessFile(fileName,"r").getChannel();
  int recordLength=25;
  int endHeaderSize=UTF8.encode(FROM_VERSION).length;
  long recordCount=(fileChannel.size() - endHeaderSize) / recordLength;
  ByteBuffer buffer=ByteBuffer.allocateDirect(recordLength);
  ArrayList<LegacyPropertyRecord> records=new ArrayList<LegacyPropertyRecord>();
  for (long id=0; id < recordCount; id++) {
    buffer.position(0);
    fileChannel.read(buffer);
    buffer.flip();
    long inUseByte=buffer.get();
    boolean inUse=(inUseByte & 0x1) == Record.IN_USE.intValue();
    if (inUse) {
      LegacyPropertyRecord record=new LegacyPropertyRecord(id);
      long typeInt=buffer.getInt();
      record.setType(getEnumType((int)typeInt & 0xFFFF));
      record.setInUse(true);
      record.setKeyIndexId(buffer.getInt());
      record.setPropBlock(buffer.getLong());
      long prevProp=getUnsignedInt(buffer);
      long prevModifier=(inUseByte & 0xF0L) << 28;
      long nextProp=getUnsignedInt(buffer);
      long nextModifier=(typeInt & 0xF0000L) << 16;
      record.setPrevProp(longFromIntAndMod(prevProp,prevModifier));
      record.setNextProp(longFromIntAndMod(nextProp,nextModifier));
      records.add(record);
    }
  }
  return records;
}
