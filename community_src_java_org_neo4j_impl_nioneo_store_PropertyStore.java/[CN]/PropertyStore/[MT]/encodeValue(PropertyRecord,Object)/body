{
  if (value instanceof String) {
    int stringBlockId=nextStringBlockId();
    record.setPropBlock(stringBlockId);
    String string=(String)value;
    int length=string.length();
    char[] chars=new char[length];
    string.getChars(0,length,chars,0);
    Collection<DynamicRecord> valueRecords=allocateStringRecords(stringBlockId,chars);
    for (    DynamicRecord valueRecord : valueRecords) {
      valueRecord.setType(PropertyType.STRING.intValue());
      record.addValueRecord(valueRecord);
    }
    record.setType(PropertyType.STRING);
  }
 else   if (value instanceof Integer) {
    record.setPropBlock(((Integer)value).intValue());
    record.setType(PropertyType.INT);
  }
 else   if (value instanceof Boolean) {
    record.setPropBlock((((Boolean)value).booleanValue() ? 1 : 0));
    record.setType(PropertyType.BOOL);
  }
 else   if (value instanceof Float) {
    record.setPropBlock(Float.floatToRawIntBits(((Float)value).floatValue()));
    record.setType(PropertyType.FLOAT);
  }
 else   if (value instanceof Long) {
    record.setPropBlock(((Long)value).longValue());
    record.setType(PropertyType.LONG);
  }
 else   if (value instanceof Double) {
    record.setPropBlock(Double.doubleToRawLongBits(((Double)value).doubleValue()));
    record.setType(PropertyType.DOUBLE);
  }
 else   if (value instanceof Byte) {
    record.setPropBlock(((Byte)value).byteValue());
    record.setType(PropertyType.BYTE);
  }
 else   if (value instanceof Character) {
    record.setPropBlock(((Character)value).charValue());
    record.setType(PropertyType.CHAR);
  }
 else   if (value.getClass().isArray()) {
    int arrayBlockId=nextArrayBlockId();
    record.setPropBlock(arrayBlockId);
    Collection<DynamicRecord> arrayRecords=allocateArrayRecords(arrayBlockId,value);
    for (    DynamicRecord valueRecord : arrayRecords) {
      valueRecord.setType(PropertyType.ARRAY.intValue());
      record.addValueRecord(valueRecord);
    }
    record.setType(PropertyType.ARRAY);
  }
 else   if (value instanceof Short) {
    record.setPropBlock(((Short)value).shortValue());
    record.setType(PropertyType.SHORT);
  }
 else {
    throw new RuntimeException("Unkown property type on: " + value);
  }
}
