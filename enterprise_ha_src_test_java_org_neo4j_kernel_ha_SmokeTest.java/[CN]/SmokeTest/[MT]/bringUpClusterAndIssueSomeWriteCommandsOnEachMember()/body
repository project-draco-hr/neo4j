{
  dbs=new HighlyAvailableGraphDatabase[3];
  dbs[0]=startDb(0);
  final List<Node> nodes=Collections.synchronizedList(new LinkedList());
  final List<Relationship> rels=Collections.synchronizedList(new LinkedList<Relationship>());
  for (int i=0; i < 10; i++)   createInitial(dbs[0],nodes,rels);
  dbs[1]=startDb(1);
  assertExists(dbs[1],nodes,rels);
  dbs[2]=startDb(2);
  assertExists(dbs[2],nodes,rels);
  System.out.println("============== Case simple create on all ================");
  ExecutorService threadPool=Executors.newFixedThreadPool(30);
  for (int i=0; i < 1000; i++) {
    for (    final HighlyAvailableGraphDatabase db : dbs) {
      threadPool.execute(new Runnable(){
        @Override public void run(){
          for (int i=0; i < 10; i++) {
            createNodeAndRelationship(db,nodes,rels);
          }
        }
      }
);
    }
  }
  threadPool.shutdown();
  while (!threadPool.awaitTermination(10,TimeUnit.SECONDS))   ;
  for (int i=0; i < dbs.length; i++) {
    HighlyAvailableGraphDatabase db=dbs[i];
    if (!db.isMaster())     db.getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
    db.shutdown();
    Thread.sleep(3000);
    ConsistencyCheckTool.main(new String[]{db.getStoreDir(),"-recovery"});
  }
  System.exit(0);
  System.out.println("============== Case simple master switch test ================");
  System.out.println("Start master test");
  dbs[0].shutdown();
  System.out.println("0 is now dead");
  Thread.sleep(1000);
  assertTrue(dbs[1].isMaster());
  dbs[0]=startDb(0);
  System.out.println("0 is now back on");
  assertTrue(dbs[1].isMaster());
  assertFalse(dbs[0].isMaster());
  System.out.println("============== Case brutal master switch test with create ================");
  for (int i=0; i < 10; i++) {
    int j=findMaster();
    HighlyAvailableGraphDatabase db1=dbs[(j + 1) % dbs.length];
    HighlyAvailableGraphDatabase db2=dbs[(j + 2) % dbs.length];
    db1.getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
    db2.getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
    System.out.println("Starting kill of " + j);
    dbs[j].shutdown();
    System.out.println("========> killed " + j);
    for (int k=0; k < 1000; k++) {
      createNodeAndRelationship(db1,nodes,rels);
      createNodeAndRelationship(db2,nodes,rels);
    }
    Thread.sleep(100);
    System.out.println("Starting " + dbs[j]);
    dbs[j]=startDb(j);
    System.out.println("Done starting " + j);
    Thread.sleep(100);
    for (int k=0; k < 100; k++) {
      createNodeAndRelationship(db1,nodes,rels);
      createNodeAndRelationship(db2,nodes,rels);
      createNodeAndRelationship(dbs[(j + 3) % dbs.length],nodes,rels);
    }
  }
  int currentMaster=findMaster();
  HighlyAvailableGraphDatabase master=dbs[currentMaster];
  assertExists(master,nodes,rels);
  HighlyAvailableGraphDatabase db1=dbs[(currentMaster + 1) % dbs.length];
  db1.getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
  assertExists(db1,nodes,rels);
  HighlyAvailableGraphDatabase db2=dbs[(currentMaster + 2) % dbs.length];
  db2.getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
  assertExists(db2,nodes,rels);
  for (  HighlyAvailableGraphDatabase db : dbs) {
    db.shutdown();
    Thread.sleep(1000);
    ConsistencyCheckTool.main(new String[]{db.getStoreDir(),"-recovery"});
  }
  dbs=startCluster(3);
  System.out.println("============== Case switch master, create on slave simple ================");
  dbs[0].shutdown();
  for (int i=0; i < 1; i++) {
    for (int db=1; db < dbs.length; db++) {
      createNodeAndRelationship(dbs[db],nodes,rels);
    }
  }
  dbs[2].getDependencyResolver().resolveDependency(UpdatePuller.class).pullUpdates();
  assertExists(dbs[1],nodes,rels);
  assertExists(dbs[2],nodes,rels);
  System.out.println("============== Case remove master, slave alone still works ================");
  dbs[1].shutdown();
  createNodeAndRelationship(dbs[2],nodes,rels);
  assertExists(dbs[2],nodes,rels);
  System.out.println("============== Case instance joins single machine cluster ================");
  dbs[1]=startDb(1);
  createNodeAndRelationship(dbs[1],nodes,rels);
  assertExists(dbs[1],nodes,rels);
  assertExists(dbs[2],nodes,rels);
  System.out.println("============== Case remove slave, master still working ================");
  dbs[1].shutdown();
  while (true) {
    try {
      createNodeAndRelationship(dbs[2],nodes,rels);
      break;
    }
 catch (    Exception e) {
      e.printStackTrace();
      continue;
    }
  }
  assertExists(dbs[2],nodes,rels);
  System.out.println("============== Done ================");
  dbs[2].shutdown();
  for (  HighlyAvailableGraphDatabase db : dbs) {
    Thread.sleep(3000);
    System.out.println("Checking " + db);
  }
}
