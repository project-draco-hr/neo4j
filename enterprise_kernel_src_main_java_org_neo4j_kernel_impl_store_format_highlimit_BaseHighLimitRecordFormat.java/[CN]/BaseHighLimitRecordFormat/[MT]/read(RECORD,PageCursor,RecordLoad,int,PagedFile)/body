{
  byte headerByte=primaryCursor.getByte();
  boolean inUse=isInUse(headerByte);
  boolean doubleRecordUnit=has(headerByte,HEADER_BIT_RECORD_UNIT);
  if (doubleRecordUnit) {
    boolean firstRecordUnit=has(headerByte,HEADER_BIT_FIRST_RECORD_UNIT);
    if (!firstRecordUnit) {
      record.clear();
      return;
    }
    int primaryEndOffset=calculatePrimaryCursorEndOffset(primaryCursor,recordSize);
    long secondaryId=Reference.decode(primaryCursor,PAGE_CURSOR_ADAPTER);
    long pageId=pageIdForRecord(secondaryId,storeFile.pageSize(),recordSize);
    int offset=offsetForId(secondaryId,storeFile.pageSize(),recordSize);
    try (SecondaryPageCursorReadDataAdapter readAdapter=new SecondaryPageCursorReadDataAdapter(primaryCursor,storeFile,pageId,offset,primaryEndOffset,PagedFile.PF_SHARED_READ_LOCK)){
      do {
        readAdapter.reposition();
        doReadInternal(record,primaryCursor,recordSize,headerByte,inUse,readAdapter);
      }
 while (readAdapter.shouldRetry());
      record.setSecondaryUnitId(secondaryId);
    }
   }
 else {
    doReadInternal(record,primaryCursor,recordSize,headerByte,inUse,PAGE_CURSOR_ADAPTER);
  }
}
