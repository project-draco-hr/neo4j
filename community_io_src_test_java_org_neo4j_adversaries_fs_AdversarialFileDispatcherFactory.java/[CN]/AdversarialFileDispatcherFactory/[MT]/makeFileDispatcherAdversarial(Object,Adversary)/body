{
  return new DelegateFileDispatcher(delegateFileDispatcher){
    private int mischievousLength(    int len){
      if (adversary.injectFailureOrMischief(IOException.class)) {
        len=len == 1 ? 1 : ThreadLocalRandom.current().nextInt(1,len);
      }
      return len;
    }
    @Override public long readv(    FileDescriptor fd,    long address,    int len) throws IOException {
      return super.readv(fd,address,mischievousLength(len));
    }
    @Override public int read(    FileDescriptor fd,    long address,    int len) throws IOException {
      return super.read(fd,address,mischievousLength(len));
    }
    @Override public int pwrite(    FileDescriptor fd,    long address,    int len,    long position) throws IOException {
      return super.pwrite(fd,address,mischievousLength(len),position);
    }
    @Override public int truncate(    FileDescriptor fd,    long size) throws IOException {
      adversary.injectFailure(IOException.class);
      return super.truncate(fd,size);
    }
    @Override public int pread(    FileDescriptor fd,    long address,    int len,    long position) throws IOException {
      return super.pread(fd,address,mischievousLength(len),position);
    }
    @Override public long writev(    FileDescriptor fd,    long address,    int len) throws IOException {
      return super.writev(fd,address,mischievousLength(len));
    }
    @Override public int write(    FileDescriptor fd,    long address,    int len) throws IOException {
      return super.write(fd,address,mischievousLength(len));
    }
  }
;
}
