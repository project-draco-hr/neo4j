{
  when(logFile.getWriter()).thenReturn(channel);
  long nextTxId=15;
  when(transactionIdStore.nextCommittingTransactionId()).thenReturn(nextTxId);
  TransactionAppender appender=life.add(new BatchingTransactionAppender(logFile,NO_ROTATION,positionCache,transactionIdStore,BYPASS,databaseHealth));
  final byte[] additionalHeader=new byte[]{1,2,5};
  final int masterId=2, authorId=1;
  final long timeStarted=12345, latestCommittedTxWhenStarted=nextTxId - 5, timeCommitted=timeStarted + 10;
  PhysicalTransactionRepresentation transactionRepresentation=new PhysicalTransactionRepresentation(singleCreateNodeCommand(0));
  transactionRepresentation.setHeader(additionalHeader,masterId,authorId,timeStarted,latestCommittedTxWhenStarted,timeCommitted,-1);
  LogEntryStart start=new LogEntryStart(0,0,0l,latestCommittedTxWhenStarted,null,LogPosition.UNSPECIFIED);
  LogEntryCommit commit=new OnePhaseCommit(nextTxId,0l);
  CommittedTransactionRepresentation transaction=new CommittedTransactionRepresentation(start,transactionRepresentation,commit);
  appender.append(new TransactionToApply(transactionRepresentation,transaction.getCommitEntry().getTxId()),logAppendEvent);
  LogEntryReader<ReadableLogChannel> logEntryReader=new VersionAwareLogEntryReader<>(new RecordStorageCommandReaderFactory());
  try (PhysicalTransactionCursor<ReadableLogChannel> reader=new PhysicalTransactionCursor<>(channel,logEntryReader)){
    reader.next();
    TransactionRepresentation result=reader.get().getTransactionRepresentation();
    assertArrayEquals(additionalHeader,result.additionalHeader());
    assertEquals(masterId,result.getMasterId());
    assertEquals(authorId,result.getAuthorId());
    assertEquals(timeStarted,result.getTimeStarted());
    assertEquals(timeCommitted,result.getTimeCommitted());
    assertEquals(latestCommittedTxWhenStarted,result.getLatestCommittedTxWhenStarted());
  }
 }
