{
  when(logFile.getWriter()).thenReturn(channel);
  long txId=15;
  when(transactionIdStore.nextCommittingTransactionId()).thenReturn(txId);
  TransactionAppender appender=life.add(new BatchingTransactionAppender(logFile,NO_ROTATION,positionCache,transactionIdStore,BYPASS,kernelHealth));
  TransactionRepresentation transaction=transaction(singleCreateNodeCommand(0),new byte[]{1,2,5},2,1,12345,4545,12345 + 10);
  appender.append(new TransactionToApply(transaction),logAppendEvent);
  final LogEntryReader<ReadableVersionableLogChannel> logEntryReader=new VersionAwareLogEntryReader<>();
  try (PhysicalTransactionCursor<ReadableVersionableLogChannel> reader=new PhysicalTransactionCursor<>(channel,logEntryReader)){
    reader.next();
    TransactionRepresentation tx=reader.get().getTransactionRepresentation();
    assertArrayEquals(transaction.additionalHeader(),tx.additionalHeader());
    assertEquals(transaction.getMasterId(),tx.getMasterId());
    assertEquals(transaction.getAuthorId(),tx.getAuthorId());
    assertEquals(transaction.getTimeStarted(),tx.getTimeStarted());
    assertEquals(transaction.getTimeCommitted(),tx.getTimeCommitted());
    assertEquals(transaction.getLatestCommittedTxWhenStarted(),tx.getLatestCommittedTxWhenStarted());
  }
 }
