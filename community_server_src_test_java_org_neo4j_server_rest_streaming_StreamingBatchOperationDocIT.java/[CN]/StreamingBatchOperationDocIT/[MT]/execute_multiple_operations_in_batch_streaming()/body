{
  long idJoe=data.get().get("Joe").getId();
  String jsonString=new PrettyJSON().array().object().key("method").value("PUT").key("to").value("/node/" + idJoe + "/properties").key("body").object().key("age").value(1).endObject().key("id").value(0).endObject().object().key("method").value("GET").key("to").value("/node/" + idJoe).key("id").value(1).endObject().object().key("method").value("POST").key("to").value("/node").key("body").object().key("age").value(1).endObject().key("id").value(2).endObject().object().key("method").value("POST").key("to").value("/node").key("body").object().key("age").value(1).endObject().key("id").value(3).endObject().endArray().toString();
  String entity=gen.get().expectedType(APPLICATION_JSON_TYPE).withHeader(StreamingJsonFormat.STREAM_HEADER,"true").payload(jsonString).expectedStatus(200).post(batchUri()).entity();
  System.out.println("entity = " + entity);
  List<Map<String,Object>> results=JsonHelper.jsonToList(entity);
  assertEquals(4,results.size());
  Map<String,Object> putResult=results.get(0);
  Map<String,Object> getResult=results.get(1);
  Map<String,Object> firstPostResult=results.get(2);
  Map<String,Object> secondPostResult=results.get(3);
  assertEquals(0,putResult.get("id"));
  assertEquals(2,firstPostResult.get("id"));
  assertEquals(3,secondPostResult.get("id"));
  assertEquals("/node/" + idJoe + "/properties",putResult.get("from"));
  assertEquals("/node/" + idJoe,getResult.get("from"));
  assertEquals("/node",firstPostResult.get("from"));
  assertEquals("/node",secondPostResult.get("from"));
  assertTrue(((String)firstPostResult.get("location")).length() > 0);
  assertTrue(((String)secondPostResult.get("location")).length() > 0);
  Map<String,Object> body=(Map<String,Object>)getResult.get("body");
  assertEquals(1,((Map<String,Object>)body.get("data")).get("age"));
}
