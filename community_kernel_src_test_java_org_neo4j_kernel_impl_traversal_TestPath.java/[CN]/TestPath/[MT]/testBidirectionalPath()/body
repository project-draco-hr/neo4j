{
  TraversalDescription side=getGraphDb().traversalDescription().uniqueness(Uniqueness.NODE_PATH);
  BidirectionalTraversalDescription bidirectional=bidirectionalTraversal().mirroredSides(side);
  Path bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  assertPathIsCorrect(bidirectionalPath);
  assertEquals(a,Iterables.first(bidirectional.traverse(a,e)).startNode());
  bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  bidirectionalPath.relationships();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  bidirectionalPath.nodes();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  bidirectionalPath.reverseRelationships();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  bidirectionalPath.reverseNodes();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=Iterables.first(bidirectional.traverse(a,e));
  bidirectionalPath.iterator();
  assertEquals(a,bidirectionalPath.startNode());
}
