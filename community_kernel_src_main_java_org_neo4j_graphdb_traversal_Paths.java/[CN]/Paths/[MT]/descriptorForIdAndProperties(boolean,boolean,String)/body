{
  return new Paths.PathDescriptor<T>(){
    @Override public String nodeRepresentation(    T path,    Node node){
      String representation=representation(node);
      return "(" + (nodeId ? node.getId() : "") + (nodeId && !representation.equals("") ? "," : "")+ representation+ ")";
    }
    private String representation(    PropertyContainer entity){
      StringBuilder builder=new StringBuilder();
      for (      String key : propertyKeys) {
        Object value=entity.getProperty(key,null);
        if (value != null) {
          if (builder.length() > 0) {
            builder.append(",");
          }
          builder.append(value);
        }
      }
      return builder.toString();
    }
    @Override public String relationshipRepresentation(    T path,    Node from,    Relationship relationship){
      Direction direction=relationship.getEndNode().equals(from) ? Direction.INCOMING : Direction.OUTGOING;
      StringBuilder builder=new StringBuilder();
      if (direction.equals(Direction.INCOMING)) {
        builder.append("<");
      }
      builder.append("--[" + (relId ? relationship.getId() : ""));
      String representation=representation(relationship);
      if (relId && !representation.equals("")) {
        builder.append(",");
      }
      builder.append(representation);
      builder.append("]--");
      if (direction.equals(Direction.OUTGOING)) {
        builder.append(">");
      }
      return builder.toString();
    }
  }
;
}
