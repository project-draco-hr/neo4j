{
  UniquenessConstraint constraint=new UniquenessConstraint(labelId,propertyKeyId);
  if (!state.unRemoveConstraint(constraint)) {
    for (Iterator<UniquenessConstraint> it=schemaReadDelegate.constraintsGetForLabelAndPropertyKey(labelId,propertyKeyId); it.hasNext(); ) {
      if (it.next().equals(labelId,propertyKeyId)) {
        return constraint;
      }
    }
    try {
      long indexId=constraintIndexCreator.createUniquenessConstraintIndex(this,labelId,propertyKeyId);
      state.addConstraint(constraint,indexId);
    }
 catch (    TransactionalException e) {
      throw new ConstraintCreationKernelException(constraint,e);
    }
catch (    KernelException e) {
      throw new ConstraintCreationKernelException(constraint,e);
    }
  }
  return constraint;
}
