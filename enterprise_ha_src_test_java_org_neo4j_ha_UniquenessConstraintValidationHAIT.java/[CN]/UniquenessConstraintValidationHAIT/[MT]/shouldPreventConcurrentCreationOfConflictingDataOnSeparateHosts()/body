{
  ClusterManager.ManagedCluster cluster=startClusterSeededWith(databaseWithUniquenessConstraint("Label1","key1"));
  final HighlyAvailableGraphDatabase slave1=cluster.getAnySlave();
  final HighlyAvailableGraphDatabase slave2=cluster.getAnySlave(slave1);
  TransactionTemplate template=new TransactionTemplate().retries(3).backoff(10,TimeUnit.SECONDS).retryOn(Predicates.<Throwable>instanceOf(ComException.class)).with(slave1);
  Future<Boolean> created=template.execute(new Function<Transaction,Future<Boolean>>(){
    @Override public Future<Boolean> apply(    Transaction transaction) throws RuntimeException {
      slave1.createNode(label("Label1")).setProperty("key1","value1");
      try {
        return otherThread.execute(createNode(slave2,"Label1","key1","value1"));
      }
  finally {
        assertThat(otherThread,isWaiting());
      }
    }
  }
);
  assertFalse("creating violating data should fail",created.get());
}
