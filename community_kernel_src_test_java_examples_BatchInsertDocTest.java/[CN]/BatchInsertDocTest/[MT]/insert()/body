{
  File tempStoreDir=new File("target/batchinserter-example").getAbsoluteFile();
  FileUtils.deleteRecursively(tempStoreDir);
  BatchInserter inserter=null;
  try {
    inserter=BatchInserters.inserter(new File("target/batchinserter-example").getAbsolutePath());
    Label personLabel=Label.label("Person");
    inserter.createDeferredSchemaIndex(personLabel).on("name").create();
    Map<String,Object> properties=new HashMap<>();
    properties.put("name","Mattias");
    long mattiasNode=inserter.createNode(properties,personLabel);
    properties.put("name","Chris");
    long chrisNode=inserter.createNode(properties,personLabel);
    RelationshipType knows=RelationshipType.withName("KNOWS");
    inserter.createRelationship(mattiasNode,chrisNode,knows,null);
  }
  finally {
    if (inserter != null) {
      inserter.shutdown();
    }
  }
  GraphDatabaseService db=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(new File("target/batchinserter-example")).setConfig(GraphDatabaseSettings.auth_store,Files.createTempFile("auth","").toString()).newGraphDatabase();
  try (Transaction tx=db.beginTx()){
    db.schema().awaitIndexesOnline(10,TimeUnit.SECONDS);
  }
   try (Transaction tx=db.beginTx()){
    Label personLabelForTesting=Label.label("Person");
    Node mNode=db.findNode(personLabelForTesting,"name","Mattias");
    Node cNode=mNode.getSingleRelationship(RelationshipType.withName("KNOWS"),Direction.OUTGOING).getEndNode();
    assertThat((String)cNode.getProperty("name"),is("Chris"));
    assertThat(db.schema().getIndexes(personLabelForTesting).iterator().hasNext(),is(true));
  }
  finally {
    db.shutdown();
  }
}
