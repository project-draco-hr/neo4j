{
  final Node node=dbRule.executeAndCommit(new Function<GraphDatabaseService,Node>(){
    @Override public Node apply(    GraphDatabaseService db){
      return db.createNode();
    }
  }
);
  dbRule.executeAndCommit(new Consumer<GraphDatabaseService>(){
    @Override public void accept(    GraphDatabaseService db){
      node.addLabel(label("FOOBAR"));
    }
  }
);
  dbRule.executeAndCommit(new Consumer<GraphDatabaseService>(){
    @Override public void accept(    GraphDatabaseService db){
      node.addLabel(label("BAZQUX"));
    }
  }
);
  dbRule.executeAndCommit(new Consumer<GraphDatabaseService>(){
    @Override public void accept(    GraphDatabaseService db){
      for (      Label label : node.getLabels()) {
        node.removeLabel(label);
      }
      node.addLabel(label("BAZQUX"));
    }
  }
);
  List<Label> labels=dbRule.executeAndCommit(new Function<GraphDatabaseService,List<Label>>(){
    @Override public List<Label> apply(    GraphDatabaseService db){
      List<Label> labels=new ArrayList<>();
      for (      Label label : node.getLabels()) {
        labels.add(label);
      }
      return labels;
    }
  }
);
  assertEquals(labels.toString(),1,labels.size());
  assertEquals("BAZQUX",labels.get(0).name());
}
