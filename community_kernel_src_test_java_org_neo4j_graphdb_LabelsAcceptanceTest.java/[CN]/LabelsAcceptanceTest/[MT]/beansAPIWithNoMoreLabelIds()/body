{
  final EphemeralIdGenerator.Factory idFactory=new EphemeralIdGenerator.Factory(){
    @Override public IdGenerator open(    File fileName,    int grabSize,    IdType idType,    long highId){
      if (idType == IdType.LABEL_TOKEN) {
        IdGenerator generator=generators.get(idType);
        if (generator == null) {
          generator=new EphemeralIdGenerator(idType){
            @Override public long nextId(){
              throw new UnderlyingStorageException("Id capacity exceeded");
            }
          }
;
          generators.put(idType,generator);
        }
        return generator;
      }
      return super.open(fileName,grabSize,idType,Long.MAX_VALUE);
    }
  }
;
  TestGraphDatabaseFactory dbFactory=new TestGraphDatabaseFactory(){
    @Override protected GraphDatabaseBuilder.DatabaseCreator createImpermanentDatabaseCreator(    final File storeDir,    final TestGraphDatabaseFactoryState state){
      return new GraphDatabaseBuilder.DatabaseCreator(){
        @Override public GraphDatabaseService newDatabase(        Map<String,String> config){
          return new ImpermanentGraphDatabase(storeDir,config,GraphDatabaseDependencies.newDependencies(state.databaseDependencies())){
            @Override protected void create(            File storeDir,            Map<String,String> params,            GraphDatabaseFacadeFactory.Dependencies dependencies){
              new CommunityFacadeFactory(){
                @Override protected EditionModule createEdition(                PlatformModule platformModule){
                  return new CommunityEditionModule(platformModule){
                    @Override protected IdGeneratorFactory createIdGeneratorFactory(                    FileSystemAbstraction fs){
                      return idFactory;
                    }
                  }
;
                }
                @Override protected PlatformModule createPlatform(                File storeDir,                Map<String,String> params,                Dependencies dependencies,                GraphDatabaseFacade graphDatabaseFacade){
                  return new ImpermanentPlatformModule(storeDir,params,databaseInfo(),dependencies,graphDatabaseFacade);
                }
              }
.newFacade(storeDir,params,dependencies,this);
            }
          }
;
        }
      }
;
    }
  }
;
  return dbFactory.newImpermanentDatabase();
}
