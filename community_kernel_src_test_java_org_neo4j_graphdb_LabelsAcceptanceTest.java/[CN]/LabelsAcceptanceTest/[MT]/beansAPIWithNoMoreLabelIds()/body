{
  final EphemeralIdGenerator.Factory idFactory=new EphemeralIdGenerator.Factory(){
    @Override public IdGenerator open(    FileSystemAbstraction fs,    File fileName,    int grabSize,    IdType idType,    long highId){
switch (idType) {
case LABEL_TOKEN:
{
          IdGenerator generator=generators.get(idType);
          if (generator == null) {
            generator=new EphemeralIdGenerator(idType){
              @Override public long nextId(){
                throw new UnderlyingStorageException("Id capacity exceeded");
              }
            }
;
            generators.put(idType,generator);
          }
          return generator;
        }
default :
      return super.open(fs,fileName,grabSize,idType,Long.MAX_VALUE);
  }
}
}
;
TestGraphDatabaseFactory dbFactory=new TestGraphDatabaseFactory(){
@Override protected GraphDatabaseBuilder.DatabaseCreator createImpermanentDatabaseCreator(final String storeDir,final TestGraphDatabaseFactoryState state){
  return new GraphDatabaseBuilder.DatabaseCreator(){
    @Override public GraphDatabaseService newDatabase(    Map<String,String> config){
      return new ImpermanentGraphDatabase(storeDir,config,state.databaseDependencies()){
        @Override protected IdGeneratorFactory createIdGeneratorFactory(){
          return idFactory;
        }
      }
;
    }
  }
;
}
}
;
return dbFactory.newImpermanentDatabase();
}
