{
  Store store=new Store("txId"){
    @Override void initialMetadata(    String key,    BigEndianByteArrayBuffer buffer){
switch (key) {
case "txId":
        buffer.putLong(buffer.size() - 8,1);
      break;
default :
    super.initialMetadata(key,buffer);
}
}
@Override protected int compareMetadata(Map<String,byte[]> lhs,Map<String,byte[]> rhs){
return Long.compare(lastLong(lhs.get("txId")),lastLong(rhs.get("txId")));
}
}
;
Field state=AbstractKeyValueStore.class.getDeclaredField("state");
state.setAccessible(true);
@SuppressWarnings("unchecked") RotationStrategy<Map<String,byte[]>> rotation=((KeyValueStoreState.Stopped)state.get(store)).rotation;
File[] files=new File[10];
{
Pair<File,KeyValueStoreFile<Map<String,byte[]>>> file=rotation.create();
files[0]=file.first();
for (int txId=2, i=1; i < files.length; txId<<=1, i++) {
KeyValueStoreFile<Map<String,byte[]>> old=file.other();
final int data=txId;
file=rotation.next(file.first(),Collections.singletonMap("txId",txId(txId)),data(new Entry(){
  @Override public void write(  WritableBuffer key,  WritableBuffer value){
    key.putByte(0,(byte)'f');
    key.putByte(1,(byte)'o');
    key.putByte(2,(byte)'o');
    value.putInt(0,data);
  }
}
));
old.close();
files[i]=file.first();
}
file.other().close();
}
try (StoreChannel channel=the.fileSystem().open(files[9],"rw")){
channel.position(16);
ByteBuffer value=ByteBuffer.allocate(16);
value.put((byte)0);
value.flip();
channel.writeAll(value);
}
 try (StoreChannel channel=the.fileSystem().open(files[8],"rw")){
channel.position(32);
ByteBuffer value=ByteBuffer.allocate(16);
value.put((byte)17);
value.flip();
channel.writeAll(value);
}
 try (StoreChannel channel=the.fileSystem().open(files[7],"rw")){
channel.position(32 + 32 + 32+ 16);
ByteBuffer value=ByteBuffer.allocate(16);
value.putLong(0);
value.putLong(0);
value.flip();
channel.writeAll(value);
}
 try (Lifespan life=new Lifespan()){
life.add(store);
assertEquals(64,lastLong(store.metadata().get("txId")));
}
 }
