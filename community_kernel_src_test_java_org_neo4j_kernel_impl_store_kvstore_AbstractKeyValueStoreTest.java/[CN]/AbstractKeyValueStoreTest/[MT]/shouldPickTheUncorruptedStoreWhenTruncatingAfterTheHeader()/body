{
  Store store=createTestStore();
  Pair<File,KeyValueStoreFile> file=store.rotationStrategy.create(EMPTY_DATA_PROVIDER,1);
  Pair<File,KeyValueStoreFile> next=store.rotationStrategy.next(file.first(),Headers.headersBuilder().put(TX_ID,(long)42).headers(),data(new Entry(){
    @Override public void write(    WritableBuffer key,    WritableBuffer value){
      key.putByte(0,(byte)'f');
      key.putByte(1,(byte)'o');
      key.putByte(2,(byte)'o');
      value.putInt(0,42);
    }
  }
));
  file.other().close();
  File correct=next.first();
  Pair<File,KeyValueStoreFile> nextNext=store.rotationStrategy.next(correct,Headers.headersBuilder().put(TX_ID,(long)43).headers(),data(new Entry(){
    @Override public void write(    WritableBuffer key,    WritableBuffer value){
      key.putByte(0,(byte)'f');
      key.putByte(1,(byte)'o');
      key.putByte(2,(byte)'o');
      value.putInt(0,42);
    }
  }
,new Entry(){
    @Override public void write(    WritableBuffer key,    WritableBuffer value){
      key.putByte(0,(byte)'b');
      key.putByte(1,(byte)'a');
      key.putByte(2,(byte)'r');
      value.putInt(0,4242);
    }
  }
));
  next.other().close();
  File corrupted=nextNext.first();
  nextNext.other().close();
  try (StoreChannel channel=resourceManager.fileSystem().open(corrupted,"rw")){
    channel.truncate(16 * 4);
  }
   try (Lifespan life=new Lifespan()){
    life.add(store);
    assertNotNull(store.get("foo"));
    assertEquals(42L,store.headers().get(TX_ID).longValue());
  }
 }
