{
  final Store store=resourceManager.managed(createTestStore());
  updateStore(store,1);
  Future<Long> rotation=threading.executeAndAwait(store.rotation,3l,new Predicate<Thread>(){
    @Override public boolean test(    Thread thread){
switch (thread.getState()) {
case BLOCKED:
case WAITING:
case TIMED_WAITING:
case TERMINATED:
        return true;
default :
      return false;
  }
}
}
,100,SECONDS);
assertFalse(rotation.isDone());
SECONDS.sleep(1);
assertFalse(rotation.isDone());
updateStore(store,3);
assertFalse(rotation.isDone());
SECONDS.sleep(1);
assertFalse(rotation.isDone());
updateStore(store,4);
assertFalse(rotation.isDone());
SECONDS.sleep(1);
assertFalse(rotation.isDone());
updateStore(store,2);
assertEquals(3,rotation.get().longValue());
assertEquals(3,store.headers().get(TX_ID).longValue());
store.rotation.apply(4l);
}
