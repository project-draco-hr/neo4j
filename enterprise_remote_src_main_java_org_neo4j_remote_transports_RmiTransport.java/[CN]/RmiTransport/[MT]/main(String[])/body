{
  String usage="Usage: " + RmiTarget.class.getName() + " <GraphDB dir> <rmi resource uri>";
  if (args.length < 2) {
    throw new IllegalArgumentException(usage);
  }
  final LocalGraphDatabase server;
  try {
    server=new LocalGraphDatabase(args[0]);
  }
 catch (  RuntimeException ex) {
    throw new IllegalArgumentException(usage,ex);
  }
  System.out.println("Created Neo4j server. Store directory: " + args[0]);
  Class<?> indexService;
  Method registerIndexMethod;
  try {
    indexService=Class.forName("org.neo4j.index.IndexService");
    registerIndexMethod=BasicGraphDatabaseServer.class.getDeclaredMethod("registerIndexService",String.class,indexService);
  }
 catch (  Exception ex) {
    indexService=null;
    registerIndexMethod=null;
  }
  for (int i=2; i < args.length; i++) {
    if (indexService == null) {
      System.err.println("Could not instantiate index \"" + args[i] + "\"\n    The index component is not loaded.");
      continue;
    }
    String argument[]=args[i].split(":",2);
    String className=argument[0];
    String indexName=argument.length == 2 ? argument[1] : argument[0];
    try {
      Class<?> cls=Class.forName(className);
      Constructor<?> ctor=cls.getConstructor(GraphDatabaseService.class);
      Object index=ctor.newInstance(server.container.service);
      registerIndexMethod.invoke(server,indexName,index);
      System.out.println("Registered index service: " + indexName);
    }
 catch (    Exception ex) {
      System.err.println("Could not instantiate index \"" + args[i]);
      ex.printStackTrace(System.err);
    }
  }
  final URI uri;
  final InetAddress addr;
  final InetAddress localhost;
  final InetAddress[] localhosts;
  try {
    uri=new URI(args[1]);
    addr=InetAddress.getByName(uri.getHost());
    localhost=InetAddress.getLocalHost();
    localhosts=InetAddress.getAllByName("localhost");
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException(usage,ex);
  }
  boolean addrIsLocalHost=addr.equals(localhost);
  for (  InetAddress local : localhosts) {
    if (addrIsLocalHost)     break;
    addrIsLocalHost=addr.equals(local);
  }
  if (addrIsLocalHost) {
    int port=uri.getPort();
    if (port == -1)     port=Registry.REGISTRY_PORT;
    try {
      LocateRegistry.createRegistry(port);
      System.out.println("Created RMI registry on localhost.");
    }
 catch (    Exception ex) {
    }
  }
  try {
    register(server,args[1]);
  }
 catch (  MalformedURLException ex) {
    throw new IllegalArgumentException(usage,ex);
  }
  System.out.println("Neo4j RMI server registered at: " + args[1]);
  System.out.println("Press Ctrl+C to stop serving.");
}
