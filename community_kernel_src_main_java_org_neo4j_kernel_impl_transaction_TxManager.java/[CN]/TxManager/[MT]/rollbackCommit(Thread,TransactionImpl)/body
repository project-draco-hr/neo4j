{
  try {
    tx.doRollback();
  }
 catch (  XAException e) {
    setTmNotOk(e);
    throw logAndReturn("Unable to rollback marked transaction. " + "Some resources may be commited others not. " + "Neo4j kernel should be SHUTDOWN for "+ "resource maintance and transaction recovery: "+ tx,Exceptions.withCause(new HeuristicMixedException("Unable to rollback " + tx + " ---> error code for rollback: "+ e.errorCode),e));
  }
  tx.doAfterCompletion();
  try {
    if (tx.isGlobalStartRecordWritten()) {
      getTxLog().txDone(tx.getGlobalId());
    }
  }
 catch (  IOException e) {
    setTmNotOk(e);
    throw logAndReturn("Error writing transaction log for " + tx,Exceptions.withCause(new SystemException("TM encountered a problem, error writing transaction log"),e));
  }
  tx.setStatus(Status.STATUS_NO_TRANSACTION);
  RollbackException rollbackException=new RollbackException("Failed to commit, transaction rolledback");
  ExceptionCauseSetter.setCause(rollbackException,tx.getRollbackCause());
  throw rollbackException;
}
