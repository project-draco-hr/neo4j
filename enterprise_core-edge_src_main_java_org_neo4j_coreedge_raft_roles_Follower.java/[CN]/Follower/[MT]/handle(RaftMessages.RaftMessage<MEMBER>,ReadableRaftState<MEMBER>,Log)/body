{
  Outcome<MEMBER> outcome=new Outcome<>(FOLLOWER,ctx);
switch (message.type()) {
case HEARTBEAT:
{
      Heart.beat(ctx,outcome,(Heartbeat<MEMBER>)message);
      break;
    }
case APPEND_ENTRIES_REQUEST:
{
    Appending.handleAppendEntriesRequest(ctx,outcome,(AppendEntries.Request<MEMBER>)message);
    break;
  }
case VOTE_REQUEST:
{
  Voting.handleVoteRequest(ctx,outcome,(RaftMessages.Vote.Request<MEMBER>)message);
  break;
}
case LOG_COMPACTION_INFO:
{
handleLeaderLogCompaction(ctx,outcome,(RaftMessages.LogCompactionInfo<MEMBER>)message);
break;
}
case ELECTION_TIMEOUT:
{
if (Election.start(ctx,outcome)) {
outcome.setNextRole(CANDIDATE);
}
break;
}
}
return outcome;
}
