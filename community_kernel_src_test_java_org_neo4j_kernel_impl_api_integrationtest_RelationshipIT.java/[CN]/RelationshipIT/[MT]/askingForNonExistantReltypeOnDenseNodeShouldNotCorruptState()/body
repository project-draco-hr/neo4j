{
  long[] rels=new long[200];
  long refNode;
  int relTypeTheNodeDoesUse, relTypeTheNodeDoesNotUse;
{
    DataWriteOperations statement=dataWriteOperationsInNewTransaction();
    relTypeTheNodeDoesUse=statement.relationshipTypeGetOrCreateForName("Type1");
    relTypeTheNodeDoesNotUse=statement.relationshipTypeGetOrCreateForName("Type2");
    refNode=statement.nodeCreate();
    long otherNode=statement.nodeCreate();
    for (int i=0; i < rels.length; i++) {
      rels[i]=statement.relationshipCreate(relTypeTheNodeDoesUse,refNode,otherNode);
    }
    commit();
  }
  this.db.getDependencyResolver().resolveDependency(Caches.class).clear();
{
    ReadOperations stmt=readOperationsInNewTransaction();
    assertRels(stmt.nodeGetRelationships(refNode,Direction.INCOMING,relTypeTheNodeDoesNotUse));
    assertRels(stmt.nodeGetRelationships(refNode,Direction.BOTH,relTypeTheNodeDoesUse),rels);
  }
}
