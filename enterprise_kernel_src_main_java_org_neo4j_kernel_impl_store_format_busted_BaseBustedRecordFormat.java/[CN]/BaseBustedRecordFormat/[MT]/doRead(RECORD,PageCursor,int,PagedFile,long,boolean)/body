{
  boolean recordUnit=has(headerByte,HEADER_BIT_RECORD_UNIT);
  if (recordUnit) {
    boolean firstRecordUnit=has(headerByte,HEADER_BIT_FIRST_RECORD_UNIT);
    if (!firstRecordUnit) {
      record.clear();
      return;
    }
  }
  long secondaryId=-1;
  DataAdapter<PageCursor> dataAdapter=PAGE_CURSOR_ADAPTER;
  SecondaryPageCursorControl secondaryPageCursorControl=SecondaryPageCursorControl.NULL;
  if (recordUnit) {
    int primaryEndOffset=primaryCursor.getOffset() + recordSize - 1;
    secondaryId=Reference.decode(primaryCursor,dataAdapter);
    @SuppressWarnings("resource") SecondaryPageCursorReadDataAdapter readAdapter=new SecondaryPageCursorReadDataAdapter(primaryCursor,storeFile,pageIdForRecord(secondaryId,storeFile.pageSize(),recordSize),offsetForId(secondaryId,storeFile.pageSize(),recordSize),primaryEndOffset,PagedFile.PF_SHARED_READ_LOCK);
    dataAdapter=readAdapter;
    secondaryPageCursorControl=readAdapter;
  }
  try {
    do {
      secondaryPageCursorControl.reposition();
      doReadInternal(record,primaryCursor,recordSize,headerByte,inUse,dataAdapter);
    }
 while (secondaryPageCursorControl.shouldRetry());
    if (recordUnit) {
      record.setSecondaryId(secondaryId);
    }
  }
  finally {
    secondaryPageCursorControl.close();
  }
}
