{
  final String coordinatorRole="coordinator";
  HeartbeatContext heartbeatContext=mock(HeartbeatContext.class);
  when(heartbeatContext.getFailed()).thenReturn(Collections.<InstanceId>emptySet());
  Map<InstanceId,URI> members=new HashMap<InstanceId,URI>();
  members.put(new InstanceId(1),URI.create("server1"));
  members.put(new InstanceId(2),URI.create("server2"));
  members.put(new InstanceId(3),URI.create("server3"));
  ClusterConfiguration clusterConfiguration=mock(ClusterConfiguration.class);
  when(clusterConfiguration.getMembers()).thenReturn(members);
  ClusterContext clusterContext=mock(ClusterContext.class);
  when(clusterContext.getConfiguration()).thenReturn(clusterConfiguration);
  Logging logging=Mockito.mock(Logging.class);
  when(logging.getMessagesLog(Matchers.<Class>any())).thenReturn(mock(StringLogger.class));
  MultiPaxosContext context=new MultiPaxosContext(new InstanceId(1),Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(coordinatorRole)),clusterConfiguration,Mockito.mock(Executor.class),logging,Mockito.mock(ObjectInputStreamFactory.class),Mockito.mock(ObjectOutputStreamFactory.class),Mockito.mock(AcceptorInstanceStore.class),Mockito.mock(Timeouts.class));
  ElectionContext toTest=context.getElectionContext();
  toTest.startElectionProcess(coordinatorRole);
  toTest.voted(coordinatorRole,new InstanceId(1),new IntegerElectionCredentials(100),-1);
  toTest.voted(coordinatorRole,new InstanceId(2),new IntegerElectionCredentials(100),-1);
  toTest.voted(coordinatorRole,new InstanceId(2),new IntegerElectionCredentials(101),-1);
  assertNull(toTest.getElectionWinner(coordinatorRole));
  assertEquals(2,toTest.getVoteCount(coordinatorRole));
}
