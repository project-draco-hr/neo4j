{
  final String role1="coordinator1";
  InstanceId me=new InstanceId(1);
  InstanceId leavingInstance=new InstanceId(2);
  InstanceId forQuorum=new InstanceId(3);
  ClusterConfiguration clusterConfiguration=mock(ClusterConfiguration.class);
  List<InstanceId> clusterMemberIds=new LinkedList<InstanceId>();
  clusterMemberIds.add(leavingInstance);
  clusterMemberIds.add(me);
  clusterMemberIds.add(forQuorum);
  when(clusterConfiguration.getMemberIds()).thenReturn(clusterMemberIds);
  MultiPaxosContext context=new MultiPaxosContext(me,10,Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(role1)),clusterConfiguration,new Executor(){
    @Override public void execute(    Runnable command){
      command.run();
    }
  }
,NullLogProvider.getInstance(),mock(ObjectInputStreamFactory.class),mock(ObjectOutputStreamFactory.class),mock(AcceptorInstanceStore.class),mock(Timeouts.class),mock(ElectionCredentialsProvider.class));
  HeartbeatContext heartbeatContext=context.getHeartbeatContext();
  ClusterContext clusterContext=context.getClusterContext();
  clusterContext.setLastElector(leavingInstance);
  clusterContext.setLastElectorVersion(8);
  clusterContext.left(leavingInstance);
  assertEquals(clusterContext.getLastElector(),InstanceId.NONE);
  assertEquals(clusterContext.getLastElectorVersion(),ClusterContext.NO_ELECTOR_VERSION);
  clusterContext.elected(role1,forQuorum,leavingInstance,9);
  assertEquals(clusterContext.getLastElector(),leavingInstance);
  assertEquals(clusterContext.getLastElectorVersion(),9);
}
