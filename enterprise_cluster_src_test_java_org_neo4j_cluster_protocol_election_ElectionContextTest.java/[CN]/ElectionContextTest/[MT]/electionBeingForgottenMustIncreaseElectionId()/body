{
  final String coordinatorRole="coordinator";
  HeartbeatContext heartbeatContext=mock(HeartbeatContext.class);
  when(heartbeatContext.getFailed()).thenReturn(Collections.<InstanceId>emptySet());
  Logging logging=mock(Logging.class);
  when(logging.getMessagesLog(Matchers.<Class>any())).thenReturn(mock(StringLogger.class));
  ElectionContext context=new MultiPaxosContext(new InstanceId(1),10,Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(coordinatorRole)),mock(ClusterConfiguration.class),mock(Executor.class),logging,mock(ObjectInputStreamFactory.class),mock(ObjectOutputStreamFactory.class),mock(AcceptorInstanceStore.class),mock(Timeouts.class),mock(ElectionCredentialsProvider.class)).getElectionContext();
  ElectionContext.VoteRequest voteRequestBefore=context.voteRequestForRole(new ElectionRole(coordinatorRole));
  context.forgetElection(coordinatorRole);
  ElectionContext.VoteRequest voteRequestAfter=context.voteRequestForRole(new ElectionRole(coordinatorRole));
  assertEquals(voteRequestBefore.getVersion() + 1,voteRequestAfter.getVersion());
}
