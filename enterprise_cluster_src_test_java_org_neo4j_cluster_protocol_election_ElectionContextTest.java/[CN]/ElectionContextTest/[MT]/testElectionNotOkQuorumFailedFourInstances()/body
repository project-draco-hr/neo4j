{
  Set<InstanceId> failed=new HashSet<InstanceId>();
  failed.add(new InstanceId(2));
  failed.add(new InstanceId(3));
  Map<InstanceId,URI> members=new HashMap<InstanceId,URI>();
  members.put(new InstanceId(1),URI.create("server1"));
  members.put(new InstanceId(2),URI.create("server2"));
  members.put(new InstanceId(3),URI.create("server3"));
  members.put(new InstanceId(4),URI.create("server4"));
  ClusterConfiguration clusterConfiguration=mock(ClusterConfiguration.class);
  when(clusterConfiguration.getMembers()).thenReturn(members);
  ClusterContext clusterContext=mock(ClusterContext.class);
  when(clusterContext.getConfiguration()).thenReturn(clusterConfiguration);
  MultiPaxosContext context=new MultiPaxosContext(new InstanceId(1),Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole("coordinator")),clusterConfiguration,Mockito.mock(Executor.class),Mockito.mock(Logging.class),Mockito.mock(ObjectInputStreamFactory.class),Mockito.mock(ObjectOutputStreamFactory.class),Mockito.mock(AcceptorInstanceStore.class),Mockito.mock(Timeouts.class),mock(ElectionCredentialsProvider.class));
  context.getHeartbeatContext().getFailed().addAll(failed);
  ElectionContext toTest=context.getElectionContext();
  assertFalse(toTest.electionOk());
}
