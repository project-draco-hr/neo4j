{
  TreeMap<DefinedProperty,DiffSets<Long>> sortedUpdates=getSortedIndexUpdates(descriptor);
  if (sortedUpdates == null) {
    return null;
  }
  DefinedProperty selectedLower;
  boolean selectedIncludeLower;
  DefinedProperty selectedUpper;
  boolean selectedIncludeUpper;
  int propertyKeyId=descriptor.getPropertyKeyId();
  if (lower == null) {
    selectedLower=DefinedProperty.stringProperty(propertyKeyId,STRING.lowLimit.castValue(String.class));
    selectedIncludeLower=STRING.lowLimit.isInclusive;
  }
 else {
    selectedLower=DefinedProperty.stringProperty(propertyKeyId,lower);
    selectedIncludeLower=includeLower;
  }
  if (upper == null) {
    selectedUpper=DefinedProperty.booleanProperty(propertyKeyId,STRING.highLimit.castValue(Boolean.class).booleanValue());
    selectedIncludeUpper=STRING.highLimit.isInclusive;
  }
 else {
    selectedUpper=DefinedProperty.stringProperty(propertyKeyId,upper);
    selectedIncludeUpper=includeUpper;
  }
  DiffSets<Long> diffs=new DiffSets<>();
  for (  Map.Entry<DefinedProperty,DiffSets<Long>> entry : sortedUpdates.subMap(selectedLower,selectedIncludeLower,selectedUpper,selectedIncludeUpper).entrySet()) {
    DiffSets<Long> diffSets=entry.getValue();
    diffs.addAll(diffSets.getAdded().iterator());
    diffs.removeAll(diffSets.getRemoved().iterator());
  }
  return diffs;
}
