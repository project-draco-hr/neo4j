{
  final Set<Long> txIds=txIdGroupedEntries.keySet();
  long min=Long.MAX_VALUE;
  long max=Long.MIN_VALUE;
  for (  long i : txIds) {
    min=Math.min(i,min);
    max=Math.max(i,max);
  }
  long nextCommittableTx=min;
  final InRangeRandomPicker picker=new InRangeRandomPicker(min,max);
  final List<LogEntry> mixedUp=new LinkedList<LogEntry>();
  while (!txIdGroupedEntries.isEmpty()) {
    long randTxId=picker.random();
    List<LogEntry> logEntries;
    while ((logEntries=fetchNext(txIdGroupedEntries,randTxId,nextCommittableTx)) == null) {
      randTxId=picker.inRange(randTxId + 1);
    }
    final LogEntry entry=logEntries.remove(0);
    mixedUp.add(entry);
    if (logEntries.isEmpty()) {
      txIdGroupedEntries.remove(randTxId);
      nextCommittableTx++;
    }
  }
  return mixedUp;
}
