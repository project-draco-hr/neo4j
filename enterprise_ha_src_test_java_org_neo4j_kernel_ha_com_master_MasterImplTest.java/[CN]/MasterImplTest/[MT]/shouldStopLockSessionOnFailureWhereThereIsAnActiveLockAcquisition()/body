{
  final CountDownLatch latch=new CountDownLatch(1);
  try {
    Client client=newWaitingLocksClient(latch);
    final MasterImpl master=newMasterWithLocksClient(client);
    HandshakeResult handshake=master.handshake(1,new StoreId()).response();
    final RequestContext context=new RequestContext(handshake.epoch(),1,2,0,0);
    master.newLockSession(context);
    Future<Void> acquireFuture=otherThread.execute(new WorkerCommand<Void,Void>(){
      @Override public Void doWork(      Void state) throws Exception {
        master.acquireExclusiveLock(context,ResourceTypes.NODE,1L);
        return null;
      }
    }
);
    otherThread.get().waitUntilWaiting();
    master.endLockSession(context,false);
    verify(client).stop();
    verify(client,never()).close();
    latch.countDown();
    acquireFuture.get();
    verify(client).close();
  }
  finally {
    latch.countDown();
  }
}
