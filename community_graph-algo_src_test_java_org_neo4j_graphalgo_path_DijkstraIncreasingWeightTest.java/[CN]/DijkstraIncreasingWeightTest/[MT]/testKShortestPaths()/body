{
  Node s=graph.makeNode("s");
  Node t=graph.makeNode("t");
  graph.makeEdge("s","a","length",2);
  graph.makeEdge("s","b","length",1);
  graph.makeEdge("s","c","length",1);
  graph.makeEdge("s","e","length",3);
  graph.makeEdge("a","t","length",0);
  graph.makeEdge("b","d","length",1);
  graph.makeEdge("c","d","length",1);
  graph.makeEdge("d","a","length",0);
  graph.makeEdge("d","t","length",1);
  graph.makeEdge("e","f","length",3);
  graph.makeEdge("f","t","length",3);
  PathExpander expander=PathExpanders.allTypesAndDirections();
  PathFinder<WeightedPath> algo=new Dijkstra(expander,CommonEvaluators.doubleCostEvaluator("length"),PathInterestFactory.numberOfShortest(NoneStrictMath.EPSILON,6));
  Iterator<WeightedPath> paths=algo.findAllPaths(s,t).iterator();
  int count=0;
  while (paths.hasNext()) {
    count++;
    WeightedPath path=paths.next();
    double expectedWeight;
    if (count <= 3) {
      expectedWeight=2.0;
    }
 else {
      expectedWeight=3.0;
    }
    assertTrue("Expected path number " + count + " to have weight of "+ expectedWeight,NoneStrictMath.equals(path.weight(),expectedWeight));
  }
  assertTrue("Expected exactly 6 returned paths",count == 6);
}
