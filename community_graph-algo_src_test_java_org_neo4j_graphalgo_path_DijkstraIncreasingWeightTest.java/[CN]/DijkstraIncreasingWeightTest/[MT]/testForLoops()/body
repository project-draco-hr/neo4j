{
  try (Transaction tx=graphDb.beginTx()){
    Node s=graph.makeNode("s");
    Node t=graph.makeNode("t");
    graph.makeEdge("s","a1","length",1);
    graph.makeEdge("a1","b","length",0);
    graph.makeEdge("b","a1","length",0);
    graph.makeEdge("a1","a2","length",1);
    graph.makeEdge("a2","a2","length",0);
    graph.makeEdge("a2","a3","length",1);
    graph.makeEdge("a3","c1","length",0);
    graph.makeEdge("a3","c2","length",0);
    graph.makeEdge("c1","a4","length",0);
    graph.makeEdge("c1","a4","length",0);
    graph.makeEdge("a4","t","length",1);
    PathExpander expander=PathExpanders.allTypesAndDirections();
    Dijkstra algo=new Dijkstra(expander,CommonEvaluators.doubleCostEvaluator("length"),PathInterestFactory.all(NoneStrictMath.EPSILON));
    Iterator<WeightedPath> paths=algo.findAllPaths(s,t).iterator();
    assertTrue("Expected at least one path",paths.hasNext());
    assertTrue("Expected first path of length 6",paths.next().length() == 6);
    assertTrue("Expected at least two paths",paths.hasNext());
    assertTrue("Expected second path of length 6",paths.next().length() == 6);
    assertFalse("Expected exactly two paths",paths.hasNext());
    tx.success();
  }
 }
