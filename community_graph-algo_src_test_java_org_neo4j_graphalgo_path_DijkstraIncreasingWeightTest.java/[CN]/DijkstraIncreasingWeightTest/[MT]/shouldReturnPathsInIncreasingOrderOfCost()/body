{
  Node s=graph.makeNode("s");
  Node t=graph.makeNode("t");
  graph.makeEdgeChain("s,e,f","length",1.0);
  graph.makeEdge("f","t","length",2);
  graph.makeEdge("s","a","length",2);
  graph.makeEdge("a","t","length",0);
  graph.makeEdge("s","c","length",1);
  graph.makeEdge("c","d","length",1);
  graph.makeEdge("s","b","length",1);
  graph.makeEdge("b","d","length",1);
  graph.makeEdge("d","a","length",0);
  graph.makeEdge("d","t","length",1);
  PathExpander expander=PathExpanders.allTypesAndDirections();
  Dijkstra algo=new Dijkstra(expander,CommonEvaluators.doubleCostEvaluator("length"),PathInterestFactory.all(NoneStrictMath.EPSILON));
  Iterator<WeightedPath> paths=algo.findAllPaths(s,t).iterator();
  for (int i=1; i <= 3; i++) {
    assertTrue("Expected at least " + i + " path(s)",paths.hasNext());
    assertTrue("Expected 3 paths of cost 2",NoneStrictMath.equals(paths.next().weight(),2));
  }
  for (int i=1; i <= 3; i++) {
    assertTrue("Expected at least " + i + " path(s)",paths.hasNext());
    assertTrue("Expected 3 paths of cost 3",NoneStrictMath.equals(paths.next().weight(),3));
  }
  assertTrue("Expected at least 7 paths",paths.hasNext());
  assertTrue("Expected 1 path of cost 4",NoneStrictMath.equals(paths.next().weight(),4));
  assertFalse("Expected exactly 7 paths",paths.hasNext());
}
