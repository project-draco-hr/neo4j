{
  GraphDatabaseAPI db=dbRule.getGraphDatabaseAPI();
  final TransactionManager tm=db.getDependencyResolver().resolveDependency(TransactionManager.class);
  final Node node=createNode();
  try (org.neo4j.graphdb.Transaction ignored=db.beginTx()){
    node.addLabel(Labels.MY_LABEL);
    final Transaction jtaTx=tm.suspend();
    boolean result;
    try {
      OtherThreadExecutor<Boolean> otherThread=new OtherThreadExecutor<>("Thread to resume tx in",null);
      result=otherThread.execute(new OtherThreadExecutor.WorkerCommand<Boolean,Boolean>(){
        @Override public Boolean doWork(        Boolean ignore){
          try {
            tm.resume(jtaTx);
            return node.hasLabel(Labels.MY_LABEL);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
 finally {
            try {
              tm.suspend();
            }
 catch (            SystemException e) {
              throw new RuntimeException(e);
            }
          }
        }
      }
);
    }
  finally {
      tm.resume(jtaTx);
    }
    assertTrue("The label should be visible when I've resumed the transaction.",result);
  }
 }
