{
  DataSourceManager dataSourceManager=mock(DataSourceManager.class);
  LocalDatabase localDatabase=new LocalDatabase(new File(""),mock(CopiedStoreRecovery.class),mock(StoreFiles.class),dataSourceManager,mock(Supplier.class),mock(Supplier.class),mock(LogProvider.class));
  ReplicatedIdGeneratorFactory idGeneratorFactory=mock(ReplicatedIdGeneratorFactory.class);
  RaftServer raftServer=mock(RaftServer.class);
  LifeSupport coreServer=mock(LifeSupport.class);
  DelayedRenewableTimeoutService raftTimeoutService=mock(DelayedRenewableTimeoutService.class);
  MembershipWaiterLifecycle membershipWaiter=mock(MembershipWaiterLifecycle.class);
  LifeSupport lifeSupport=CoreStartupProcess.createLifeSupport(localDatabase,idGeneratorFactory,raftTimeoutService,coreServer,membershipWaiter);
  assertThat(lifeSupport,startsComponent(raftTimeoutService).after(raftServer).because("server need to be ready to handle responses generated by timeout events"));
  assertThat(lifeSupport,startsComponent(raftTimeoutService).after(coreServer).because("elections which must request votes from the latest known voting members"));
  assertThat(lifeSupport,startsComponent(coreServer).after(dataSourceManager).because("transactions are replayed from the RAFT log into the data source"));
  assertThat(lifeSupport,startsComponent(idGeneratorFactory).after(dataSourceManager).because("IDs are generated into the data source"));
  assertThat(lifeSupport,startsComponent(membershipWaiter).after(raftTimeoutService).because("joining the cluster requires raft timeouts to be scheduled, so that a leader can be elected"));
}
