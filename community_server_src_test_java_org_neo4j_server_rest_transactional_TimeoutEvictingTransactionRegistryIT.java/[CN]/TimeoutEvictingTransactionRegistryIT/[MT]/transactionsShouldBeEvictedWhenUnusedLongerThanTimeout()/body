{
  FakeClock clock=new FakeClock();
  TestLogger log=new TestLogger();
  TimeoutEvictingTransactionRegistry registry=new TimeoutEvictingTransactionRegistry(clock,log);
  TransactionContext oldTx=mock(TransitionalTxManagementTransactionContext.class);
  TransactionContext newTx=mock(TransitionalTxManagementTransactionContext.class);
  long txId1=registry.begin();
  long txId2=registry.begin();
  registry.suspend(txId1,oldTx);
  clock.forwardMinutes(1);
  registry.suspend(txId2,newTx);
  registry.rollbackSuspendedTransactionsIdleSince(clock.currentTimeInMilliseconds() - 1000);
  assertThat(registry.resume(txId2),equalTo(newTx));
  try {
    registry.resume(txId1);
    fail("Should have thrown exception");
  }
 catch (  InvalidTransactionId exc) {
  }
  log.assertExactly(info("Transaction with id 1 has been idle for 60 seconds, and has been automatically rolled back."));
}
