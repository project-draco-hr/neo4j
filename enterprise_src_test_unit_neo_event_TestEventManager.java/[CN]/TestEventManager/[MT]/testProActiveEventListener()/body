{
  try {
    evtMgr.registerProActiveEventListener(null,Event.TEST_EVENT);
    fail("null listener should throw exception.");
  }
 catch (  EventListenerNotRegisteredException e) {
  }
  MyProActiveEventListener myEvtListener1=new MyProActiveEventListener();
  try {
    evtMgr.registerProActiveEventListener(myEvtListener1,null);
    fail("null event should throw exception.");
  }
 catch (  EventListenerNotRegisteredException e) {
  }
  evtMgr.registerProActiveEventListener(myEvtListener1,Event.TEST_EVENT);
  try {
    evtMgr.registerProActiveEventListener(myEvtListener1,Event.TEST_EVENT);
    fail("registration of same listener, should throw exception. ");
  }
 catch (  EventListenerAlreadyRegisteredException e) {
  }
  MyProActiveEventListener myEvtListener2=new MyProActiveEventListener();
  MyProActiveEventListener myEvtListener3=new MyProActiveEventListener();
  evtMgr.registerProActiveEventListener(myEvtListener2,Event.TEST_EVENT);
  evtMgr.registerProActiveEventListener(myEvtListener3,Event.TEST_EVENT);
  evtMgr.unregisterProActiveEventListener(myEvtListener3,Event.TEST_EVENT);
  try {
    evtMgr.unregisterProActiveEventListener(myEvtListener3,Event.TEST_EVENT);
    fail("unregister of non registered listener " + "should throw exception");
  }
 catch (  EventListenerNotRegisteredException e) {
  }
  evtMgr.registerProActiveEventListener(myEvtListener3,Event.TEST_EVENT);
  assertTrue(evtMgr.generateProActiveEvent(Event.TEST_EVENT,new EventData(null)));
  myEvtListener3.setState(false);
  assertTrue(!evtMgr.generateProActiveEvent(Event.TEST_EVENT,new EventData(null)));
  myEvtListener2.setState(false);
  myEvtListener3.setState(true);
  assertTrue(!evtMgr.generateProActiveEvent(Event.TEST_EVENT,new EventData(null)));
  myEvtListener2.setState(true);
  assertTrue(evtMgr.generateProActiveEvent(Event.TEST_EVENT,new EventData(null)));
  evtMgr.unregisterProActiveEventListener(myEvtListener1,Event.TEST_EVENT);
  evtMgr.unregisterProActiveEventListener(myEvtListener2,Event.TEST_EVENT);
  evtMgr.unregisterProActiveEventListener(myEvtListener3,Event.TEST_EVENT);
  assertTrue(evtMgr.generateProActiveEvent(Event.TEST_EVENT,new EventData(null)));
}
