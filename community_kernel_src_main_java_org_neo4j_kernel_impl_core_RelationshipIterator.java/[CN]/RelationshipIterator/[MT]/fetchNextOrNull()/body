{
  RelIdIterator currentTypeIterator=rels[currentTypeIndex];
  do {
    if (currentTypeIterator.hasNext()) {
      long nextId=currentTypeIterator.next();
      try {
        return nodeManager.newRelationshipProxyById(nextId);
      }
 catch (      NotFoundException e) {
      }
    }
    LoadStatus status;
    while (!currentTypeIterator.hasNext()) {
      if (currentTypeIndex + 1 < rels.length) {
        currentTypeIterator=rels[++currentTypeIndex];
      }
 else       if ((status=fromNode.getMoreRelationships(nodeManager,direction,types)).loaded() || lastTimeILookedThereWasMoreToLoad) {
        lastTimeILookedThereWasMoreToLoad=status.hasMoreToLoad();
        Map<Integer,RelIdIterator> newRels=new HashMap<>();
        for (        RelIdIterator itr : rels) {
          int type=itr.getType();
          RelIdArray newSrc=fromNode.getRelationshipIds(type);
          if (newSrc != null) {
            itr=itr.updateSource(newSrc,direction);
            itr.doAnotherRound();
          }
          newRels.put(type,itr);
        }
        if (allTypes) {
          ArrayMap<Integer,SetAndDirectionCounter> skipMap=nodeManager.getTransactionState().getCowRelationshipRemoveMap(fromNode);
          for (          RelIdArray ids : fromNode.getRelationshipIds()) {
            int type=ids.getType();
            RelIdIterator itr=newRels.get(type);
            if (itr == null) {
              SetAndDirectionCounter remove=skipMap != null ? skipMap.get(type) : null;
              itr=remove == null ? ids.iterator(direction) : new CombinedRelIdIterator(type,direction,ids,null,remove.set);
              newRels.put(type,itr);
            }
 else {
              itr=itr.updateSource(ids,direction);
              newRels.put(type,itr);
            }
          }
        }
        initializeRels(newRels.values().toArray(new RelIdIterator[newRels.size()]));
        currentTypeIterator=rels[currentTypeIndex];
      }
 else {
        break;
      }
    }
  }
 while (currentTypeIterator.hasNext());
  return null;
}
