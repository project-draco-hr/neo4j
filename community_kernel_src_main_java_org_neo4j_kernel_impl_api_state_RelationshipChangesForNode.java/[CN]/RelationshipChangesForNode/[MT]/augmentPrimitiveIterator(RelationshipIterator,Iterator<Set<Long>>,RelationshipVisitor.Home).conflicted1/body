{
  if (!diff.hasNext()) {
    return original;
  }
  return new RelationshipIterator(){
    private Iterator<Long> currentSetOfAddedRels;
    @Override public boolean hasNext(){
      return original.hasNext() || (currentSetOfAddedRels().hasNext());
    }
    private Iterator<Long> currentSetOfAddedRels(){
      while (diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels.hasNext())) {
        currentSetOfAddedRels=diff.next().iterator();
      }
      return currentSetOfAddedRels;
    }
    @Override public long next(){
      return original.hasNext() ? original.next() : currentSetOfAddedRels().next();
    }
    @Override public <EXCEPTION extends Exception>boolean relationshipVisit(    long relationshipId,    RelationshipVisitor<EXCEPTION> visitor) throws EXCEPTION {
      RelationshipVisitor.Home home=currentSetOfAddedRels != null ? txStateRelationshipHome : original;
      return home.relationshipVisit(relationshipId,visitor);
    }
  }
;
}
