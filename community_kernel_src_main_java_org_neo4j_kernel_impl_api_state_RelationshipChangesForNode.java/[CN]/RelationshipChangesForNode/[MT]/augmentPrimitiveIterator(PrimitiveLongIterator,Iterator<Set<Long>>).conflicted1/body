{
  if (!diff.hasNext()) {
    return original;
  }
  return new PrimitiveLongIterator(){
    private Iterator<Long> currentSetOfAddedRels;
    @Override public boolean hasNext(){
      return original.hasNext() || (currentSetOfAddedRels().hasNext());
    }
    private Iterator<Long> currentSetOfAddedRels(){
      while (diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels.hasNext())) {
        currentSetOfAddedRels=diff.next().iterator();
      }
      return currentSetOfAddedRels;
    }
    @Override public long next(){
      if (original.hasNext()) {
        long next=original.next();
        return next;
      }
 else {
        return currentSetOfAddedRels().next();
      }
    }
  }
;
}
