{
  long firstTxId=Math.max(msg.previousTxId(),BASE_TX_ID) + 1;
  long lastTxId=firstTxId;
  CatchupResult status=SUCCESS;
  StoreId localStoreId=storeIdSupplier.get();
  if (localStoreId == null || !localStoreId.equals(msg.expectedStoreId())) {
    status=E_STORE_ID_MISMATCH;
    log.info("Failed to serve TxPullRequest for tx %d and storeId %s because that storeId is different " + "from this machine with %s",lastTxId,msg.expectedStoreId(),localStoreId);
  }
 else   if (transactionIdStore.getLastCommittedTransactionId() >= firstTxId) {
    try (IOCursor<CommittedTransactionRepresentation> cursor=logicalTransactionStore.getTransactions(firstTxId)){
      while (cursor.next()) {
        ctx.write(ResponseMessageType.TX);
        CommittedTransactionRepresentation tx=cursor.get();
        lastTxId=tx.getCommitEntry().getTxId();
        ctx.write(new TxPullResponse(localStoreId,tx));
      }
      ctx.flush();
    }
 catch (    NoSuchTransactionException e) {
      status=E_TRANSACTION_PRUNED;
      log.info("Failed to serve TxPullRequest for tx %d because the transaction does not exist.",lastTxId);
    }
  }
  ctx.write(ResponseMessageType.TX_STREAM_FINISHED);
  TxStreamFinishedResponse response=new TxStreamFinishedResponse(status);
  ctx.write(response);
  ctx.flush();
  monitor.increment();
  protocol.expect(State.MESSAGE_TYPE);
}
