{
  return new AbstractAssigner(Clock.SYSTEM_CLOCK,10,TimeUnit.SECONDS){
    @Override public void start(    StageExecution[] executions){
      saturate(availableProcessor,executions);
      registerProcessorCount(executions);
    }
    private void saturate(    final int availableProcessor,    StageExecution[] executions){
      Random random=ThreadLocalRandom.current();
      int processors=availableProcessor;
      for (int rounds=0; rounds < availableProcessor && processors > 0; rounds++) {
        for (        StageExecution execution : executions) {
          for (          Step<?> step : execution.steps()) {
            if (random.nextBoolean() && step.incrementNumberOfProcessors() && --processors == 0) {
              return;
            }
          }
        }
      }
    }
    @Override public void check(    StageExecution[] executions){
    }
  }
;
}
