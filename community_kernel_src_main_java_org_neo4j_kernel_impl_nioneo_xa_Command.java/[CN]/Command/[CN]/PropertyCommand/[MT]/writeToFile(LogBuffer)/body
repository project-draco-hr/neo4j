{
  byte inUse=record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();
  if (record.getRelId() != -1) {
    inUse+=Record.REL_PROPERTY.byteValue();
  }
  buffer.put(PROP_COMMAND);
  buffer.putLong(record.getId());
  buffer.put(inUse);
  long nodeId=record.getNodeId();
  long relId=record.getRelId();
  if (nodeId != -1) {
    buffer.putLong(nodeId);
  }
 else   if (relId != -1) {
    buffer.putLong(relId);
  }
 else {
    buffer.putLong(-1);
  }
  buffer.putLong(record.getNextProp()).putLong(record.getPrevProp());
  int propBlocks=record.getPropertyBlocks().size();
  if (propBlocks <= 0) {
    throw new IllegalStateException("Non positive number of property blocks (" + propBlocks + ") for in use property record "+ record);
  }
  buffer.putInt(propBlocks);
  for (  PropertyBlock block : record.getPropertyBlocks()) {
    if (!record.inUse() && block.inUse()) {
      throw new IllegalStateException("dude, i cannot write this: " + record);
    }
    writePropertyBlock(buffer,block);
  }
}
