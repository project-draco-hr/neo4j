{
  buffer.clear();
  buffer.limit(17);
  if (byteChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  long id=buffer.getLong();
  byte inUseFlag=buffer.get();
  boolean inUse=false;
  if ((inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue()) {
    inUse=true;
  }
  boolean nodeProperty=true;
  if ((inUseFlag & Record.REL_PROPERTY.byteValue()) == Record.REL_PROPERTY.byteValue()) {
    nodeProperty=false;
  }
  long primitiveId=buffer.getLong();
  PropertyRecord record=new PropertyRecord(id);
  if (primitiveId != -1 && nodeProperty) {
    record.setNodeId(primitiveId);
  }
 else   if (primitiveId != -1) {
    record.setRelId(primitiveId);
  }
  if (inUse) {
    buffer.clear();
    buffer.limit(16 + 1);
    if (byteChannel.read(buffer) != buffer.limit()) {
      return null;
    }
    buffer.flip();
    long nextProp=buffer.getLong();
    long prevProp=buffer.getLong();
    record.setInUse(inUse);
    record.setNextProp(nextProp);
    record.setPrevProp(prevProp);
  }
  buffer.clear();
  buffer.limit(1);
  if (byteChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  int nrPropBlocks=buffer.get();
  while (nrPropBlocks-- > 0) {
    record.addPropertyBlock(readPropertyBlock(byteChannel,buffer));
  }
  return new PropertyCommand(neoStore == null ? null : neoStore.getPropertyStore(),record);
}
