{
  buffer.clear();
  buffer.limit(17);
  if (byteChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  long id=buffer.getLong();
  byte inUseFlag=buffer.get();
  boolean inUse=false;
  if ((inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue()) {
    inUse=true;
  }
  boolean nodeProperty=true;
  if ((inUseFlag & Record.REL_PROPERTY.byteValue()) == Record.REL_PROPERTY.byteValue()) {
    nodeProperty=false;
  }
  long primitiveId=buffer.getLong();
  PropertyRecord record=new PropertyRecord(id);
  if (primitiveId != -1 && nodeProperty) {
    record.setNodeId(primitiveId);
  }
 else   if (primitiveId != -1) {
    record.setRelId(primitiveId);
  }
  if (inUse) {
    buffer.clear();
    buffer.limit(16 + 4);
    if (byteChannel.read(buffer) != buffer.limit()) {
      return null;
    }
    buffer.flip();
    long nextProp=buffer.getLong();
    long prevProp=buffer.getLong();
    record.setNextProp(nextProp);
    record.setPrevProp(prevProp);
    int nrPropBlocks=buffer.getInt();
    if (nrPropBlocks == 0) {
      throw new IllegalStateException("Number of blocks reported for record " + id + " which is in use was "+ nrPropBlocks);
    }
    while (nrPropBlocks-- > 0) {
      PropertyBlock block=readPropertyBlock(byteChannel,buffer);
      if (block == null) {
        return null;
      }
      record.addPropertyBlock(block);
      if (block.inUse()) {
        record.setInUse(true);
      }
    }
    if (!record.inUse()) {
      throw new IllegalStateException("Read in record marked as in use but no blocks read in:\n\t" + record);
    }
  }
  return new PropertyCommand(neoStore == null ? null : neoStore.getPropertyStore(),record);
}
