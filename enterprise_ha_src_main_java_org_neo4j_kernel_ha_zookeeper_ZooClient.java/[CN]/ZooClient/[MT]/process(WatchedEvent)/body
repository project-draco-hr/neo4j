{
  try {
    String path=event.getPath();
    msgLog.logMessage(this + ", " + new Date()+ " Got event: "+ event+ "(path="+ path+ ")",true);
    if (path == null && event.getState() == Watcher.Event.KeeperState.Expired) {
      keeperState=KeeperState.Expired;
      if (zooKeeper != null) {
        try {
          zooKeeper.close();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          Thread.interrupted();
        }
      }
      zooKeeper=instantiateZooKeeper();
    }
 else     if (path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected) {
      long newSessionId=zooKeeper.getSessionId();
      Pair<Master,Machine> masterBeforeIWrite=getMasterFromZooKeeper(false);
      msgLog.logMessage("Get master before write:" + masterBeforeIWrite);
      boolean masterBeforeIWriteDiffers=masterBeforeIWrite.other().getMachineId() != getCachedMaster().other().getMachineId();
      if (newSessionId != sessionId || masterBeforeIWriteDiffers) {
        if (writeLastCommittedTx) {
          sequenceNr=setup();
          msgLog.logMessage("Did setup, seq=" + sequenceNr + " new sessionId="+ newSessionId);
          keeperState=KeeperState.SyncConnected;
          Pair<Master,Machine> masterAfterIWrote=getMasterFromZooKeeper(false);
          msgLog.logMessage("Get master after write:" + masterAfterIWrote);
          int masterId=masterAfterIWrote.other().getMachineId();
          msgLog.logMessage("Setting '" + MASTER_NOTIFY_CHILD + "' to "+ masterId);
          setDataChangeWatcher(MASTER_NOTIFY_CHILD,masterId);
          msgLog.logMessage("Did set '" + MASTER_NOTIFY_CHILD + "' to "+ masterId);
          if (sessionId != -1) {
            receiver.newMaster(masterAfterIWrote,new Exception());
          }
          sessionId=newSessionId;
        }
 else {
          msgLog.logMessage("Didn't do setup due to told not to write");
          keeperState=KeeperState.SyncConnected;
        }
      }
 else {
        msgLog.logMessage("SyncConnected with same session id: " + sessionId);
        keeperState=KeeperState.SyncConnected;
      }
    }
 else     if (path == null && event.getState() == Watcher.Event.KeeperState.Disconnected) {
      keeperState=KeeperState.Disconnected;
    }
 else     if (event.getType() == Watcher.Event.EventType.NodeDataChanged) {
      Pair<Master,Machine> currentMaster=getMasterFromZooKeeper(true);
      if (path.contains(MASTER_NOTIFY_CHILD)) {
        setDataChangeWatcher(MASTER_NOTIFY_CHILD,-1);
        if (currentMaster.other().getMachineId() == machineId) {
          receiver.newMaster(currentMaster,new Exception());
        }
      }
 else       if (path.contains(MASTER_REBOUND_CHILD)) {
        setDataChangeWatcher(MASTER_REBOUND_CHILD,-1);
        if (currentMaster.other().getMachineId() != machineId) {
          receiver.newMaster(currentMaster,new Exception());
        }
      }
 else {
        msgLog.logMessage("Unrecognized data change " + path);
      }
    }
  }
 catch (  RuntimeException e) {
    msgLog.logMessage("Error in ZooClient.process",e,true);
    e.printStackTrace();
    throw e;
  }
 finally {
    msgLog.flush();
  }
}
