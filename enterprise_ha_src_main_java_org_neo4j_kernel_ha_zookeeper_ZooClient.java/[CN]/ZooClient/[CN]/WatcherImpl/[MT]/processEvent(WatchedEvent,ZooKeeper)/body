{
  try {
    count.incrementAndGet();
    String path=event.getPath();
    msgLog.logMessage(this + ", " + new Date()+ " Got event: "+ event+ " (path="+ path+ ")",true);
    if (path == null && event.getState() == Watcher.Event.KeeperState.Expired) {
      keeperState=KeeperState.Expired;
      clusterReceiver.reconnect(new InformativeStackTrace("Reconnect due to session expired"));
    }
 else     if (path == null && event.getState() == Watcher.Event.KeeperState.SyncConnected) {
      long newSessionId=zooKeeper.getSessionId();
      if (newSessionId != sessionId) {
        if (writeLastCommittedTx) {
          sequenceNr=setup();
          msgLog.logMessage("Did setup, seq=" + sequenceNr + " new sessionId="+ newSessionId);
          int previousMaster=getCurrentMasterNotify();
          if (sessionId != -1) {
            clusterReceiver.newMaster(new InformativeStackTrace("Got SyncConnected event from ZK"));
            if (getCurrentMasterNotify() == getMyMachineId() && previousMaster == getMyMachineId()) {
              setDataChangeWatcher(MASTER_REBOUND_CHILD,getMyMachineId(),false);
            }
          }
          sessionId=newSessionId;
        }
 else {
          msgLog.logMessage("Didn't do setup due to told not to write");
          keeperState=KeeperState.SyncConnected;
          subscribeToDataChangeWatcher(MASTER_REBOUND_CHILD);
        }
        keeperState=KeeperState.SyncConnected;
        if (checkCompatibilityMode()) {
          msgLog.logMessage("Discovered compatibility node, will remain in compatibility mode until the node is removed");
          updater=new CompatibilitySlaveOnlyTxIdUpdater();
        }
      }
 else {
        msgLog.logMessage("SyncConnected with same session id: " + sessionId);
        keeperState=KeeperState.SyncConnected;
      }
    }
 else     if (path == null && event.getState() == Watcher.Event.KeeperState.Disconnected) {
      keeperState=KeeperState.Disconnected;
    }
 else     if (event.getType() == Watcher.Event.EventType.NodeDeleted) {
      msgLog.logMessage("Got a NodeDeleted event for " + path);
      ZooKeeperMachine currentMaster=(ZooKeeperMachine)getCachedMaster().other();
      if (path.contains(currentMaster.getZooKeeperPath())) {
        msgLog.logMessage("Acting on it, calling newMaster()");
        clusterReceiver.newMaster(new InformativeStackTrace("NodeDeleted event received (a machine left the cluster)"));
      }
    }
 else     if (event.getType() == Watcher.Event.EventType.NodeChildrenChanged) {
      if (path.endsWith(HA_SERVERS_CHILD)) {
        try {
          refreshHaServers();
          serversRefreshed=true;
          subscribeToChildrenChangeWatcher(HA_SERVERS_CHILD);
        }
 catch (        ZooKeeperException e) {
        }
      }
    }
 else     if (event.getType() == Watcher.Event.EventType.NodeDataChanged) {
      int updatedData=toInt(getZooKeeper(true).getData(path,true,null));
      msgLog.logMessage("Got event data " + updatedData);
      if (path.contains(MASTER_NOTIFY_CHILD)) {
        if (updatedData == machineId && !electionHappening) {
          try {
            electionHappening=true;
            clusterReceiver.newMaster(new InformativeStackTrace("NodeDataChanged event received (someone though I should be the master)"));
            serversRefreshed=true;
          }
  finally {
            electionHappening=false;
          }
        }
      }
 else       if (path.contains(MASTER_REBOUND_CHILD)) {
        if (updatedData != machineId && !electionHappening) {
          try {
            electionHappening=true;
            clusterReceiver.newMaster(new InformativeStackTrace("NodeDataChanged event received (new master ensures I'm slave)"));
            serversRefreshed=true;
          }
  finally {
            electionHappening=false;
          }
        }
      }
 else       if (path.contains(FLUSH_REQUESTED_CHILD)) {
        if (updatedData == STOP_FLUSHING) {
          stopFlushing();
        }
 else {
          startFlushing();
        }
      }
 else {
        msgLog.logMessage("Unrecognized data change " + path);
      }
    }
  }
 catch (  BrokerShutDownException e) {
  }
catch (  Exception e) {
    msgLog.logMessage("Error in ZooClient.process",e,true);
    throw Exceptions.launderedException(e);
  }
 finally {
    msgLog.flush();
    count.decrementAndGet();
  }
}
