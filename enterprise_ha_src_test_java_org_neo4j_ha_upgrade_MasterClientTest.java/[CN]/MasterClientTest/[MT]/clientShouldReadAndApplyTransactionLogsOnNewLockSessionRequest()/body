{
  MasterImpl master=spy(newMasterImpl(mockMasterImplSpiWith(StoreId.DEFAULT)));
  doReturn(voidResponseWithTransactionLogs()).when(master).newLockSession(any(RequestContext.class));
  cleanupRule.add(newMasterServer(master));
  TransactionAppender txAppender=mock(TransactionAppender.class);
  when(txAppender.append(any(TransactionRepresentation.class),anyLong())).thenReturn(mock(Commitment.class));
  TransactionRepresentationStoreApplier txApplier=mock(TransactionRepresentationStoreApplier.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  IndexUpdatesValidator indexUpdatesValidator=mock(IndexUpdatesValidator.class);
  when(indexUpdatesValidator.validate(any(TransactionRepresentation.class),any(TransactionApplicationMode.class))).thenReturn(ValidatedIndexUpdates.NONE);
  final Dependencies deps=new Dependencies();
  deps.satisfyDependencies(mock(LogicalTransactionStore.class),mock(LogFile.class),mock(LogRotation.class),mock(KernelHealth.class),txAppender,txApplier,txIdStore,indexUpdatesValidator);
  ResponseUnpacker unpacker=initAndStart(new TransactionCommittingResponseUnpacker(DependenciesProxy.dependencies(deps,TransactionCommittingResponseUnpacker.Dependencies.class)));
  MasterClient masterClient=cleanupRule.add(newMasterClient214(StoreId.DEFAULT,unpacker));
  masterClient.newLockSession(new RequestContext(1,2,3,4,5));
  verify(txAppender,times(TX_LOG_COUNT)).append(any(TransactionRepresentation.class),anyLong());
  verify(txApplier,times(TX_LOG_COUNT)).apply(any(TransactionRepresentation.class),any(ValidatedIndexUpdates.class),any(LockGroup.class),anyLong(),any(TransactionApplicationMode.class));
  verify(txIdStore,times(TX_LOG_COUNT)).transactionClosed(anyLong());
}
