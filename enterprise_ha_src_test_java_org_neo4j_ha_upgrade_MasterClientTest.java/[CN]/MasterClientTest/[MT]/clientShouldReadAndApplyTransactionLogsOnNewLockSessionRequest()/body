{
  MasterImpl master=spy(newMasterImpl(mockMasterImplSpiWith(StoreId.DEFAULT)));
  doReturn(voidResponseWithTransactionLogs()).when(master).newLockSession(any(RequestContext.class));
  cleanupRule.add(newMasterServer(master));
  DependencyResolver resolver=mock(DependencyResolver.class);
  LogicalTransactionStore txStore=mock(LogicalTransactionStore.class);
  TransactionRepresentationStoreApplier txApplier=mock(TransactionRepresentationStoreApplier.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  TransactionAppender txAppender=mock(TransactionAppender.class);
  LogFile logFile=mock(LogFile.class);
  when(resolver.resolveDependency(LogicalTransactionStore.class)).thenReturn(txStore);
  when(resolver.resolveDependency(TransactionRepresentationStoreApplier.class)).thenReturn(txApplier);
  when(resolver.resolveDependency(TransactionIdStore.class)).thenReturn(txIdStore);
  when(resolver.resolveDependency(LogFile.class)).thenReturn(logFile);
  when(resolver.resolveDependency(LogRotation.class)).thenReturn(mock(LogRotation.class));
  when(txStore.getAppender()).thenReturn(txAppender);
  ResponseUnpacker unpacker=initAndStart(new TransactionCommittingResponseUnpacker(resolver));
  MasterClient masterClient=cleanupRule.add(newMasterClient214(StoreId.DEFAULT,unpacker));
  masterClient.newLockSession(new RequestContext(1,2,3,4,5));
  verify(txAppender,times(TX_LOG_COUNT)).append(any(TransactionRepresentation.class),anyLong());
  verify(txApplier,times(TX_LOG_COUNT)).apply(any(TransactionRepresentation.class),any(LockGroup.class),anyLong(),any(TransactionApplicationMode.class));
  verify(txIdStore,times(TX_LOG_COUNT)).transactionClosed(anyLong());
}
