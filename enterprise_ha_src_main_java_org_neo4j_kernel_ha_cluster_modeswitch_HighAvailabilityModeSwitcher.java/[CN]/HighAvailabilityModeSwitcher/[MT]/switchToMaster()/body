{
  final CancellationHandle cancellationHandle=new CancellationHandle();
  startModeSwitching(new Runnable(){
    @Override public void run(){
      if (currentTargetState != HighAvailabilityMemberState.TO_MASTER) {
        return;
      }
      if (cancellationHandle.cancellationRequested()) {
        msgLog.info("Switch to master cancelled on start.");
        return;
      }
      componentSwitcher.switchToMaster();
      if (cancellationHandle.cancellationRequested()) {
        msgLog.info("Switch to master cancelled before ha communication started.");
        return;
      }
      haCommunicationLife.shutdown();
      haCommunicationLife=new LifeSupport();
      try {
        masterHaURI=switchToMaster.switchToMaster(haCommunicationLife,me);
        canAskForElections.set(true);
      }
 catch (      Throwable e) {
        msgLog.error("Failed to switch to master",e);
        election.demote(instanceId);
      }
    }
  }
,cancellationHandle);
}
