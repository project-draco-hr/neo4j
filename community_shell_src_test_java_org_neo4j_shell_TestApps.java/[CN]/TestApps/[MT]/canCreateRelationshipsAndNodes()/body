{
  RelationshipType type1=withName("type1");
  RelationshipType type2=withName("type2");
  RelationshipType type3=withName("type3");
  executeCommandExpectingException("mkrel -c","type");
  executeCommand("mkrel -ct " + type1.name());
  Transaction transaction=db.beginTx();
  Relationship relationship=db.getReferenceNode().getSingleRelationship(type1,Direction.OUTGOING);
  Node node=relationship.getEndNode();
  transaction.finish();
  executeCommand("mkrel -t " + type2.name() + " "+ node.getId());
  transaction=db.beginTx();
  Relationship otherRelationship=db.getReferenceNode().getSingleRelationship(type2,Direction.OUTGOING);
  assertEquals(node,otherRelationship.getEndNode());
  transaction.finish();
  executeCommand("mkrel -ct " + type3.name() + " --np \"{'name':'Neo','destiny':'The one'}\" --rp \"{'number':11}\"");
  transaction=db.beginTx();
  Relationship thirdRelationship=db.getReferenceNode().getSingleRelationship(type3,Direction.OUTGOING);
  assertThat(thirdRelationship,inTx(db,hasProperty("number").withValue(11)));
  Node thirdNode=thirdRelationship.getEndNode();
  transaction.finish();
  assertThat(thirdNode,inTx(db,hasProperty("name").withValue("Neo")));
  assertThat(thirdNode,inTx(db,hasProperty("destiny").withValue("The one")));
  executeCommand("cd -r " + thirdRelationship.getId());
  executeCommand("mv number other-number");
  assertThat(thirdRelationship,inTx(db,not(hasProperty("number"))));
  assertThat(thirdRelationship,inTx(db,hasProperty("other-number").withValue(11)));
  executeCommand("cd end");
  executeCommand("mkrel -ct " + type1.name() + " --np \"{'name':'new'}\" --cd");
  executeCommand("ls -p","name","new");
}
