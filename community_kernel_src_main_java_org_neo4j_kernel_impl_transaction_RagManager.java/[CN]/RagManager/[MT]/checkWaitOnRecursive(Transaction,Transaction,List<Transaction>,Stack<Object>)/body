{
  if (lockingTx.equals(waitingTx)) {
    StringBuffer circle=null;
    Object resource=null;
    do {
      lockingTx=(Transaction)graphStack.pop();
      resource=graphStack.pop();
      if (circle == null) {
        circle=new StringBuffer();
        circle.append(lockingTx + " <-[:HELD_BY]- " + resource);
      }
 else {
        circle.append(" <-[:WAITING_FOR]- " + lockingTx + " <-[:HELD_BY]- "+ resource);
      }
    }
 while (!graphStack.isEmpty());
    deadlockCount.incrementAndGet();
    throw new DeadlockDetectedException(waitingTx + " can't wait on resource " + resource+ " since => "+ circle);
  }
  checkedTransactions.add(lockingTx);
  Object resource=waitingTxMap.get(lockingTx);
  if (resource != null) {
    graphStack.push(resource);
    List<Transaction> lockingTxList=resourceMap.get(resource);
    if (lockingTxList != null) {
      Iterator<Transaction> itr=lockingTxList.iterator();
      while (itr.hasNext()) {
        lockingTx=itr.next();
        if (!checkedTransactions.contains(lockingTx)) {
          graphStack.push(lockingTx);
          checkWaitOnRecursive(lockingTx,waitingTx,checkedTransactions,graphStack);
          graphStack.pop();
        }
      }
    }
    graphStack.pop();
  }
}
