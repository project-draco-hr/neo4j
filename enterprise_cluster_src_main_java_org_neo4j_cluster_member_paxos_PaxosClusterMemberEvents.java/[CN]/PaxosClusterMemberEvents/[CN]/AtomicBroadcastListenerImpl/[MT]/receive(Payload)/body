{
  try {
    final Object value=serializer.receive(payload);
    if (value instanceof MemberIsAvailable) {
      final MemberIsAvailable memberIsAvailable=(MemberIsAvailable)value;
      clusterMembersSnapshot.availableMember(memberIsAvailable);
      log.info("Snapshot:" + clusterMembersSnapshot.getCurrentAvailableMembers());
      Listeners.notifyListeners(listeners,new Listeners.Notification<ClusterMemberListener>(){
        @Override public void notify(        ClusterMemberListener listener){
          listener.memberIsAvailable(memberIsAvailable.getRole(),memberIsAvailable.getInstanceId(),memberIsAvailable.getRoleUri(),memberIsAvailable.getStoreId());
        }
      }
);
    }
 else     if (value instanceof MemberIsUnavailable) {
      final MemberIsUnavailable memberIsUnavailable=(MemberIsUnavailable)value;
      clusterMembersSnapshot.unavailableMember(memberIsUnavailable.getClusterUri(),memberIsUnavailable.getInstanceId(),memberIsUnavailable.getRole());
      Listeners.notifyListeners(listeners,new Listeners.Notification<ClusterMemberListener>(){
        @Override public void notify(        ClusterMemberListener listener){
          listener.memberIsUnavailable(memberIsUnavailable.getRole(),memberIsUnavailable.getInstanceId());
        }
      }
);
    }
  }
 catch (  Throwable t) {
    log.error(String.format("Could not handle cluster member available message: %s (%d)",new BASE64Encoder().encode(payload.getBuf()),payload.getLen()),t);
  }
}
