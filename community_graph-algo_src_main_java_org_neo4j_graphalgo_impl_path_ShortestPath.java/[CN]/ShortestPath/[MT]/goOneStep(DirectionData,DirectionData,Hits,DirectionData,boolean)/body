{
  if (!directionData.hasNext()) {
    otherSide.finishCurrentLayerThenStop=true;
    return;
  }
  Node nextNode=directionData.next();
  LevelData otherSideHit=otherSide.visitedNodes.get(nextNode);
  if (otherSideHit != null) {
    int depth=directionData.currentDepth + otherSideHit.depth;
    if (directionData.sharedFrozenDepth.value == NULL) {
      directionData.sharedFrozenDepth.value=depth;
    }
    if (depth <= directionData.sharedFrozenDepth.value) {
      directionData.haveFoundSomething=true;
      if (depth < directionData.sharedFrozenDepth.value) {
        directionData.sharedFrozenDepth.value=depth;
        otherSide.stop=true;
      }
      DirectionData startSideData=directionData == startSide ? directionData : otherSide;
      DirectionData endSideData=directionData == startSide ? otherSide : directionData;
      if (hits.add(new Hit(startSideData,endSideData,nextNode),depth) >= maxResultCount) {
        directionData.stop=true;
        otherSide.stop=true;
        lastMetadata.paths++;
      }
 else       if (stopAsap) {
        if (otherSide.stop == true)         return;
        directionData.stop=true;
      }
    }
  }
}
