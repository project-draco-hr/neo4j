{
  if (!directionData.hasNext()) {
    otherSide.finishCurrentLayerThenStop=true;
    return;
  }
  Node nextNode=directionData.next();
  LevelData otherSideHit=otherSide.visitedNodes.get(nextNode);
  if (otherSideHit != null) {
    int depth=directionData.currentDepth + otherSideHit.depth;
    if (directionData.sharedFrozenDepth.intValue() == NULL) {
      directionData.sharedFrozenDepth.setValue(depth);
    }
    if (depth <= directionData.sharedFrozenDepth.intValue()) {
      directionData.haveFoundSomething=true;
      if (depth < directionData.sharedFrozenDepth.intValue()) {
        directionData.sharedFrozenDepth.setValue(depth);
        otherSide.stop=true;
      }
      DirectionData startSideData=directionData == startSide ? directionData : otherSide;
      DirectionData endSideData=directionData == startSide ? otherSide : directionData;
      Hit hit=new Hit(startSideData,endSideData,nextNode);
      Node start=startSide.startNode;
      Node end=(startSide == directionData) ? otherSide.startNode : directionData.startNode;
      monitorData(startSide,(otherSide == startSide) ? directionData : otherSide,nextNode);
      if (!stopAsap || filterPaths(hitToPaths(hit,start,end,stopAsap)).size() > 0) {
        if (hits.add(hit,depth) >= maxResultCount) {
          directionData.stop=true;
          otherSide.stop=true;
          lastMetadata.paths++;
        }
 else         if (stopAsap) {
          if (otherSide.stop) {
            return;
          }
          directionData.stop=true;
        }
      }
 else {
        directionData.haveFoundSomething=false;
        directionData.sharedFrozenDepth.setValue(NULL);
        otherSide.stop=false;
      }
    }
  }
}
