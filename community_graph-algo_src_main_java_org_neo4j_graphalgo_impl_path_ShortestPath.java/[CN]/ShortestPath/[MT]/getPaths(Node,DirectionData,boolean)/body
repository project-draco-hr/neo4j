{
  LevelData levelData=data.visitedNodes.get(connectingNode);
  if (levelData.depth == 0) {
    Collection<LinkedList<Relationship>> result=new ArrayList<LinkedList<Relationship>>();
    result.add(new LinkedList<Relationship>());
    return result;
  }
  Collection<PathData> set=new ArrayList<PathData>();
  GraphDatabaseService graphDb=data.startNode.getGraphDatabase();
  for (  long rel : levelData.relsToHere) {
    set.add(new PathData(connectingNode,new LinkedList<Relationship>(Arrays.asList(graphDb.getRelationshipById(rel)))));
    if (stopAsap)     break;
  }
  for (int i=0; i < levelData.depth - 1; i++) {
    Collection<PathData> nextSet=new ArrayList<PathData>();
    for (    PathData entry : set) {
      Node otherNode=entry.rels.getFirst().getOtherNode(entry.node);
      LevelData otherLevelData=data.visitedNodes.get(otherNode);
      int counter=0;
      for (      long rel : otherLevelData.relsToHere) {
        LinkedList<Relationship> rels=++counter == otherLevelData.relsToHere.length ? entry.rels : new LinkedList<Relationship>(entry.rels);
        rels.addFirst(graphDb.getRelationshipById(rel));
        nextSet.add(new PathData(otherNode,rels));
        if (stopAsap)         break;
      }
    }
    set=nextSet;
  }
  return new IterableWrapper<LinkedList<Relationship>,PathData>(set){
    @Override protected LinkedList<Relationship> underlyingObjectToObject(    PathData object){
      return object.rels;
    }
  }
;
}
