{
  DataSourceManager dataSourceManager=mock(DataSourceManager.class);
  ReplicatedIdGeneratorFactory idGeneratorFactory=mock(ReplicatedIdGeneratorFactory.class);
  RaftServer raftServer=mock(RaftServer.class);
  CatchupServer catchupServer=mock(CatchupServer.class);
  DelayedRenewableTimeoutService raftTimeoutService=mock(DelayedRenewableTimeoutService.class);
  MembershipWaiter membershipWaiter=mock(MembershipWaiter.class);
  RaftInstance raftInstance=mock(RaftInstance.class);
  CoreState recoverableStateMachine=mock(CoreState.class);
  LifeSupport lifeSupport=CoreServerStartupProcess.createLifeSupport(dataSourceManager,idGeneratorFactory,raftInstance,recoverableStateMachine,raftServer,catchupServer,raftTimeoutService,membershipWaiter,0,NullLogProvider.getInstance());
  assertThat(lifeSupport,startsComponent(raftTimeoutService).after(raftServer).because("server need to be ready to handle responses generated by timeout events"));
  assertThat(lifeSupport,startsComponent(raftTimeoutService).after(recoverableStateMachine).because("elections which must request votes from the latest known voting members"));
  assertThat(lifeSupport,startsComponent(recoverableStateMachine).after(dataSourceManager).because("transactions are replayed from the RAFT log into the data source"));
  assertThat(lifeSupport,startsComponent(idGeneratorFactory).after(dataSourceManager).because("IDs are generated into the data source"));
}
