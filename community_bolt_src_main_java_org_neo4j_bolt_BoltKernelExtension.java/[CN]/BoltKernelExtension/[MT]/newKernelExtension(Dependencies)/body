{
  final Config config=dependencies.config();
  final GraphDatabaseService gdb=dependencies.db();
  final GraphDatabaseAPI api=(GraphDatabaseAPI)gdb;
  final LogService logging=dependencies.logService();
  final Log log=logging.getInternalLog(Sessions.class);
  final LifeSupport life=new LifeSupport();
  final JobScheduler scheduler=dependencies.scheduler();
  final Sessions sessions=new ThreadedSessions(life.add(new StandardSessions(api,dependencies.usageData(),logging)),scheduler,logging);
  List<NettyServer.ProtocolInitializer> connectors=new ArrayList<>();
  List<Configuration> view=config.view(Settings.connector_group);
  for (  Configuration connector : view) {
    final HostnamePort socketAddress=connector.get(Settings.socket_address);
    if (connector.get(Settings.enabled)) {
      SslContext sslCtx;
      boolean requireEncryption=false;
switch (connector.get(Settings.tls_level)) {
case REQUIRED:
        requireEncryption=true;
case OPTIONAL:
      KeyStoreInformation keyStore=createKeyStore(connector,log);
    sslCtx=SslContextBuilder.forServer(keyStore.getCertificatePath(),keyStore.getPrivateKeyPath()).build();
  break;
default :
sslCtx=null;
break;
}
PrimitiveLongObjectMap<BiFunction<Channel,Boolean,BoltProtocol>> availableVersions;
if (requireEncryption) {
availableVersions=newVersions(logging,new EncryptionRequiredSessions(sessions));
}
 else {
availableVersions=newVersions(logging,sessions);
}
connectors.add(new SocketTransport(socketAddress,sslCtx,logging.getInternalLogProvider(),availableVersions));
}
}
if (connectors.size() > 0) {
life.add(new NettyServer(scheduler.threadFactory(boltNetworkIO),connectors));
log.info("Bolt Server extension loaded.");
}
return life;
}
