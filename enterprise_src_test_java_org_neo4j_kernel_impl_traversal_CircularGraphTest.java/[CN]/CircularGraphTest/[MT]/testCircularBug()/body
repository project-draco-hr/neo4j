{
  final long timestamp=3;
  Transaction tx=beginTx();
  getNodeWithName("2").setProperty("timestamp",1L);
  getNodeWithName("3").setProperty("timestamp",2L);
  tx.success();
  tx.finish();
  final RelationshipType type=DynamicRelationshipType.withName("TO");
  Traverser t=referenceNode().traverse(Order.DEPTH_FIRST,new StopEvaluator(){
    public boolean isStopNode(    TraversalPosition position){
      Relationship last=position.lastRelationshipTraversed();
      if (last != null && last.isType(type)) {
        Node node=position.currentNode();
        if (!node.hasProperty("timestamp"))         new Exception().printStackTrace();
        long currentTime=(Long)node.getProperty("timestamp");
        return currentTime >= timestamp;
      }
      return false;
    }
  }
,new ReturnableEvaluator(){
    public boolean isReturnableNode(    TraversalPosition position){
      Relationship last=position.lastRelationshipTraversed();
      if (last != null && last.isType(type)) {
        return true;
      }
      return false;
    }
  }
,type,Direction.OUTGOING);
  for (  Node node : t) {
    System.out.println(node);
  }
}
