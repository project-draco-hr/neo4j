{
  try (Statement statement=ctxProvider.statement()){
    try {
      int labelId=statement.schemaWriteOperations().labelGetOrCreateForName(label.name());
      int propertyKeyId=statement.schemaWriteOperations().propertyKeyGetOrCreateForName(propertyKey);
      statement.schemaWriteOperations().uniquenessConstraintCreate(labelId,propertyKeyId);
      return new PropertyUniqueConstraintDefinition(this,label,propertyKey);
    }
 catch (    AlreadyConstrainedException e) {
      throw new ConstraintViolationException(format("Label '%s' and property '%s' have a unique constraint defined on them.",label.name(),propertyKey),e);
    }
catch (    CreateConstraintFailureException e) {
      throw new ConstraintViolationException(e.getUserMessage(new StatementTokenNameLookup(statement.readOperations())),e);
    }
catch (    AlreadyIndexedException e) {
      throw new ConstraintViolationException(format("There already exists an index for label '%s' on property '%s'. " + "A constraint cannot be created until the index has been dropped.",label.name(),propertyKey),e);
    }
catch (    IllegalTokenNameException e) {
      throw new IllegalArgumentException(e);
    }
catch (    TooManyLabelsException e) {
      throw new IllegalStateException(e);
    }
catch (    InvalidTransactionTypeException e) {
      throw new ConstraintViolationException(e.getMessage(),e);
    }
catch (    ReadOnlyDatabaseKernelException e) {
      throw new ReadOnlyDbException();
    }
  }
 }
