{
  FileSystemAbstraction fileSystem=new EphemeralFileSystemAbstraction();
  StoreChannel storeChannel1=fileSystem.open(new File("foo.1"),"rw");
  ByteBuffer buffer=ByteBuffer.allocate(2);
  buffer.put((byte)0);
  buffer.put((byte)0);
  buffer.flip();
  storeChannel1.writeAll(buffer);
  storeChannel1.force(false);
  storeChannel1.close();
  buffer.flip();
  StoreChannel storeChannel2=fileSystem.open(new File("foo.2"),"r");
  buffer.put((byte)0);
  buffer.put((byte)1);
  buffer.flip();
  storeChannel2.writeAll(buffer);
  storeChannel2.force(false);
  storeChannel2.close();
  storeChannel1=fileSystem.open(new File("foo.1"),"r");
  final StoreChannel storeChannel2Copy=fileSystem.open(new File("foo.2"),"r");
  ReadAheadChannel<StoreChannel> channel=new ReadAheadChannel<StoreChannel>(storeChannel1){
    @Override protected StoreChannel next(    StoreChannel channel) throws IOException {
      return storeChannel2Copy;
    }
  }
;
  try {
    channel.getLong();
    fail("Should have thrown exception signalling end of file reached");
  }
 catch (  ReadPastEndException endOfFile) {
  }
  assertEquals(1,channel.getInt());
  try {
    channel.get();
    fail("Should have thrown exception signalling end of file reached");
  }
 catch (  ReadPastEndException endOfFile) {
  }
}
