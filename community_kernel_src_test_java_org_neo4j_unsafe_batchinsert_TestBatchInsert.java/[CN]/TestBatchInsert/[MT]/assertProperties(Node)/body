{
  for (  String key : properties.keySet()) {
    if (properties.get(key).getClass().isArray()) {
      Class<?> component=properties.get(key).getClass().getComponentType();
      if (!component.isPrimitive()) {
        assertTrue(Arrays.equals((Object[])properties.get(key),(Object[])node.getProperty(key)));
      }
 else {
        if (component == Integer.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((int[])properties.get(key),(int[])node.getProperty(key)));
          }
        }
 else         if (component == Boolean.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((boolean[])properties.get(key),(boolean[])node.getProperty(key)));
          }
        }
 else         if (component == Byte.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((byte[])properties.get(key),(byte[])node.getProperty(key)));
          }
        }
 else         if (component == Character.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((char[])properties.get(key),(char[])node.getProperty(key)));
          }
        }
 else         if (component == Long.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((long[])properties.get(key),(long[])node.getProperty(key)));
          }
        }
 else         if (component == Float.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((float[])properties.get(key),(float[])node.getProperty(key)));
          }
        }
 else         if (component == Double.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((double[])properties.get(key),(double[])node.getProperty(key)));
          }
        }
 else         if (component == Short.TYPE) {
          if (component.isPrimitive()) {
            assertTrue(Arrays.equals((short[])properties.get(key),(short[])node.getProperty(key)));
          }
        }
      }
    }
 else {
      assertEquals(properties.get(key),node.getProperty(key));
    }
  }
  for (  String stored : node.getPropertyKeys()) {
    assertTrue(properties.containsKey(stored));
  }
}
