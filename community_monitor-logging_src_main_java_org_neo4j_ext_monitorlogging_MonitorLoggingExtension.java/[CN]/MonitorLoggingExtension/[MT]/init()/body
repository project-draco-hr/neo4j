{
  Set<Map.Entry<Object,Object>> classes=props.entrySet();
  if (classes.isEmpty()) {
    return;
  }
  final Map<Class<?>,Logger> clazzez=new HashMap<>(classes.size());
  for (  Map.Entry<Object,Object> entry : classes) {
    String className=(String)entry.getKey();
    String logLevel=(String)entry.getValue();
    Class clazz;
    try {
      clazz=getClass().getClassLoader().loadClass(className);
    }
 catch (    ClassNotFoundException ex) {
      log.warn("When trying to add a logging monitor, not able to load class " + className,ex);
      continue;
    }
    Log classLog=logService.getInternalLog(clazz);
    Logger logger;
switch (logLevel) {
case "DEBUG":
      logger=classLog.debugLogger();
    break;
case "INFO":
  logger=classLog.infoLogger();
break;
case "WARN":
logger=classLog.warnLogger();
break;
case "ERROR":
logger=classLog.errorLogger();
break;
default :
log.warn("When trying to add a logging monitor for %s not able to understand the log level, got %s",className,logLevel);
continue;
}
clazzez.put(clazz,logger);
}
if (clazzez.isEmpty()) {
return;
}
LoggingListener listener=new LoggingListener(clazzez);
monitors.addMonitorListener(listener,listener.predicate);
}
