{
  Set<Map.Entry<Object,Object>> classes=props.entrySet();
  if (classes.isEmpty()) {
    return;
  }
  final Map<Class<?>,LogLevel> clazzez=new HashMap<>(classes.size());
  for (  Map.Entry<Object,Object> entry : classes) {
    String className=(String)entry.getKey();
    String logLevel=(String)entry.getValue();
    try {
      clazzez.put(getClass().getClassLoader().loadClass(className),LogLevel.valueOf(logLevel.toUpperCase()));
    }
 catch (    ClassNotFoundException ex) {
      logging.getMessagesLog(getClass()).warn("When trying to add a logging monitor, not able to load class " + className,ex);
    }
catch (    IllegalArgumentException ex) {
      logging.getMessagesLog(getClass()).warn("When trying to add a logging monitor for " + className + " not able to understand the log level, got "+ logLevel,ex);
    }
  }
  if (clazzez.isEmpty()) {
    return;
  }
  LoggingListener listener=new LoggingListener(logging,clazzez);
  monitors.addMonitorListener(listener,listener.predicate);
}
