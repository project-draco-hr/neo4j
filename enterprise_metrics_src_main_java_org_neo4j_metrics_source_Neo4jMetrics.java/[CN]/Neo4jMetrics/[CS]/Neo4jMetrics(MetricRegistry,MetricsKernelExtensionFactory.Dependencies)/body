{
  Config config=dependencies.configuration();
  networkMetrics=new NetworkMetrics(config,dependencies.monitors(),registry);
  if (config.get(MetricsSettings.neoTxEnabled)) {
    registry.register(name("neo4j.transaction","active"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getNumberOfActiveTransactions();
      }
    }
);
    registry.register(name("neo4j.transaction","committed"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getNumberOfCommittedTransactions();
      }
    }
);
    registry.register(name("neo4j.transaction","rollbacks"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getNumberOfRolledbackTransactions();
      }
    }
);
    registry.register(name("neo4j.transaction","terminated"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getNumberOfTerminatedTransactions();
      }
    }
);
    registry.register(name("neo4j.transaction","started"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getNumberOfStartedTransactions();
      }
    }
);
    registry.register(name("neo4j.transaction","peak_concurrent"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.transactionCounters().getPeakConcurrentNumberOfTransactions();
      }
    }
);
  }
  if (config.get(MetricsSettings.neoPageCacheEnabled)) {
    final PageCacheMonitor pageCacheCounters=dependencies.pageCacheCounters();
    registry.register(name("neo4j.page_cache","page_faults"),new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countFaults();
      }
    }
);
    registry.register(name("neo4j.page_cache","evictions"),new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countEvictions();
      }
    }
);
    registry.register(name("neo4j.page_cache","pins"),new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countPins();
      }
    }
);
    registry.register(name("neo4j.page_cache","unpins"),new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countUnpins();
      }
    }
);
    registry.register(name("neo4j.page_cache","flushes"),new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countFlushes();
      }
    }
);
  }
  if (config.get(MetricsSettings.neoCountsEnabled)) {
    registry.register(name("neo4j.ids_in_use","node"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.idGeneratorFactory().get(IdType.NODE).getNumberOfIdsInUse();
      }
    }
);
    registry.register(name("neo4j.ids_in_use","relationship"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.idGeneratorFactory().get(IdType.RELATIONSHIP).getNumberOfIdsInUse();
      }
    }
);
    registry.register(name("neo4j.ids_in_use","property"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.idGeneratorFactory().get(IdType.PROPERTY).getNumberOfIdsInUse();
      }
    }
);
    registry.register(name("neo4j.ids_in_use","relationship_type"),new Gauge<Long>(){
      @Override public Long getValue(){
        return dependencies.idGeneratorFactory().get(IdType.RELATIONSHIP_TYPE_TOKEN).getNumberOfIdsInUse();
      }
    }
);
  }
}
