{
  networkMetrics=new NetworkMetrics(config,monitors,registry);
  if (config.get(MetricsSettings.neoTxEnabled)) {
    registry.register(TX_ACTIVE,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfActiveTransactions();
      }
    }
);
    registry.register(TX_COMMITTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfCommittedTransactions();
      }
    }
);
    registry.register(TX_ROLLBACKS,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfRolledbackTransactions();
      }
    }
);
    registry.register(TX_TERMINATED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfTerminatedTransactions();
      }
    }
);
    registry.register(TX_STARTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfStartedTransactions();
      }
    }
);
    registry.register(TX_PEAK_CONCURRENT,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getPeakConcurrentNumberOfTransactions();
      }
    }
);
  }
  if (config.get(MetricsSettings.neoPageCacheEnabled)) {
    registry.register(PC_PAGE_FAULTS,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countFaults();
      }
    }
);
    registry.register(PC_EVICTIONS,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countEvictions();
      }
    }
);
    registry.register(PC_PINS,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countPins();
      }
    }
);
    registry.register(PC_UNPINS,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countUnpins();
      }
    }
);
    registry.register(PC_FLUSHES,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countFlushes();
      }
    }
);
    registry.register(PC_EVICTION_EXCEPTIONS,new Gauge<Long>(){
      @Override public Long getValue(){
        return pageCacheCounters.countEvictionExceptions();
      }
    }
);
  }
  if (config.get(MetricsSettings.neoCountsEnabled)) {
    registry.register(COUNTS_NODE,new Gauge<Long>(){
      @Override public Long getValue(){
        return idGeneratorFactory.get(IdType.NODE).getNumberOfIdsInUse();
      }
    }
);
    registry.register(COUNTS_RELATIONSHIP,new Gauge<Long>(){
      @Override public Long getValue(){
        return idGeneratorFactory.get(IdType.RELATIONSHIP).getNumberOfIdsInUse();
      }
    }
);
    registry.register(COUNTS_PROPERTY,new Gauge<Long>(){
      @Override public Long getValue(){
        return idGeneratorFactory.get(IdType.PROPERTY).getNumberOfIdsInUse();
      }
    }
);
    registry.register(COUNTS_RELATIONSHIP_TYPE,new Gauge<Long>(){
      @Override public Long getValue(){
        return idGeneratorFactory.get(IdType.RELATIONSHIP_TYPE_TOKEN).getNumberOfIdsInUse();
      }
    }
);
  }
}
