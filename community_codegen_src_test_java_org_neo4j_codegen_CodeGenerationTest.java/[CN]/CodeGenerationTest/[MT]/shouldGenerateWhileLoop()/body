{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock callEach=simple.generateMethod(void.class,"callEach",param(TypeReference.parameterizedType(Iterator.class,Runnable.class),"targets"))){
      try (CodeBlock loop=callEach.whileLoop(invoke(callEach.load("targets"),methodReference(Iterator.class,boolean.class,"hasNext")))){
        loop.expression(invoke(Expression.cast(Runnable.class,invoke(callEach.load("targets"),methodReference(Iterator.class,Object.class,"next"))),methodReference(Runnable.class,void.class,"run")));
      }
     }
     handle=simple.handle();
  }
   Runnable a=mock(Runnable.class);
  Runnable b=mock(Runnable.class);
  Runnable c=mock(Runnable.class);
  MethodHandle callEach=instanceMethod(handle.newInstance(),"callEach",Iterator.class);
  callEach.invoke(Arrays.asList(a,b,c).iterator());
  InOrder order=inOrder(a,b,c);
  order.verify(a).run();
  order.verify(b).run();
  order.verify(c).run();
  verifyNoMoreInteractions(a,b,c);
}
