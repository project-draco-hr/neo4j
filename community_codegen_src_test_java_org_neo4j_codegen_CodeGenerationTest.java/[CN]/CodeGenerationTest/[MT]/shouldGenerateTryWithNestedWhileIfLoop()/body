{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock callEach=simple.generateMethod(void.class,"callEach",param(TypeReference.parameterizedType(Iterator.class,Runnable.class),"targets"),param(boolean.class,"test"),param(Runnable.class,"runner"))){
      try (TryBlock tryBlock=callEach.tryBlock()){
        try (CodeBlock loop=tryBlock.whileLoop(invoke(callEach.load("targets"),methodReference(Iterator.class,boolean.class,"hasNext")))){
          try (CodeBlock doStuff=loop.ifStatement(not(callEach.load("test")))){
            doStuff.expression(invoke(doStuff.load("runner"),RUN));
          }
           loop.expression(invoke(Expression.cast(Runnable.class,invoke(callEach.load("targets"),methodReference(Iterator.class,Object.class,"next"))),methodReference(Runnable.class,void.class,"run")));
        }
         try (CodeBlock finallyBlock=tryBlock.finallyBlock()){
          finallyBlock.expression(invoke(finallyBlock.load("runner"),RUN));
        }
       }
     }
     handle=simple.handle();
  }
   Runnable a=mock(Runnable.class);
  Runnable b=mock(Runnable.class);
  Runnable c=mock(Runnable.class);
  Runnable runner1=mock(Runnable.class);
  Runnable runner2=mock(Runnable.class);
  MethodHandle callEach=instanceMethod(handle.newInstance(),"callEach",Iterator.class,boolean.class,Runnable.class);
  callEach.invoke(Arrays.asList(a,b,c).iterator(),false,runner1);
  callEach.invoke(Arrays.asList(a,b,c).iterator(),true,runner2);
  verify(runner1,times(4)).run();
  verify(runner2,times(1)).run();
}
