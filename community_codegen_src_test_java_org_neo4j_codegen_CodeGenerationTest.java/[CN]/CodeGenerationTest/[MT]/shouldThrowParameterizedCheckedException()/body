{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock fail=simple.generate(MethodDeclaration.method(void.class,"fail",param(parameterizedType(Thrower.class,typeParameter("E")),"thrower")).parameterizedWith("E",extending(Exception.class)).throwsException(typeParameter("E")))){
      fail.expression(invoke(fail.load("thrower"),methodReference(Thrower.class,void.class,"doThrow")));
    }
     handle=simple.handle();
  }
   try {
    instanceMethod(handle.newInstance(),"fail",Thrower.class).invoke(new Thrower<IOException>(){
      @Override public void doThrow() throws IOException {
        throw new IOException("Hello from the inside");
      }
    }
);
    fail("expected exception");
  }
 catch (  IOException e) {
    assertEquals("Hello from the inside",e.getMessage());
  }
}
