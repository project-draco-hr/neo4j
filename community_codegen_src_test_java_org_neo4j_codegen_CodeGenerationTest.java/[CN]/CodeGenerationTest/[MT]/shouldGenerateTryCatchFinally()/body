{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock run=simple.generateMethod(void.class,"run",param(Runnable.class,"body"),param(Runnable.class,"catcher"),param(Runnable.class,"finalize"))){
      try (TryBlock tryBlock=run.tryBlock()){
        tryBlock.expression(invoke(run.load("body"),RUN));
        try (CodeBlock catchBlock=tryBlock.catchBlock(param(RuntimeException.class,"E"))){
          catchBlock.expression(invoke(run.load("catcher"),RUN));
        }
         try (CodeBlock finallyBlock=tryBlock.finallyBlock()){
          finallyBlock.expression(invoke(run.load("finalize"),RUN));
        }
       }
     }
     handle=simple.handle();
  }
   Runnable successBody=mock(Runnable.class), failBody=mock(Runnable.class), successCatch=mock(Runnable.class), failCatch=mock(Runnable.class), successFinally=mock(Runnable.class), failFinally=mock(Runnable.class);
  RuntimeException theFailure=new RuntimeException();
  doThrow(theFailure).when(failBody).run();
  MethodHandle run=instanceMethod(handle.newInstance(),"run",Runnable.class,Runnable.class,Runnable.class);
  run.invoke(successBody,successCatch,successFinally);
  verify(successBody).run();
  verify(successCatch,never()).run();
  verify(successFinally).run();
  run.invoke(failBody,failCatch,failFinally);
  InOrder order=inOrder(failBody,failCatch,failFinally);
  order.verify(failBody).run();
  order.verify(failCatch).run();
  order.verify(failFinally).run();
}
