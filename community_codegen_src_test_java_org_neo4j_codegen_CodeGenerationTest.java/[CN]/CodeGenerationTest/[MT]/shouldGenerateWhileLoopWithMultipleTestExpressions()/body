{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock callEach=simple.generateMethod(void.class,"check",param(boolean.class,"a"),param(boolean.class,"b"),param(Runnable.class,"runner"))){
      try (CodeBlock loop=callEach.whileLoop(callEach.load("a"),callEach.load("b"))){
        loop.expression(invoke(loop.load("runner"),methodReference(Runnable.class,void.class,"run")));
        loop.returns();
      }
     }
     handle=simple.handle();
  }
   Runnable a=mock(Runnable.class);
  Runnable b=mock(Runnable.class);
  Runnable c=mock(Runnable.class);
  Runnable d=mock(Runnable.class);
  MethodHandle callEach=instanceMethod(handle.newInstance(),"check",boolean.class,boolean.class,Runnable.class);
  callEach.invoke(true,true,a);
  callEach.invoke(true,false,b);
  callEach.invoke(false,true,c);
  callEach.invoke(false,false,d);
  verify(a).run();
  verifyNoMoreInteractions(a);
  verifyZeroInteractions(b);
  verifyZeroInteractions(c);
  verifyZeroInteractions(d);
}
