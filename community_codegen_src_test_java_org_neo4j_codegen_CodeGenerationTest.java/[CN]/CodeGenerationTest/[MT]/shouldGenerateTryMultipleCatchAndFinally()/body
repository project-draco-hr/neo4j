{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock run=simple.generateMethod(void.class,"run",param(Runnable.class,"body"),param(Runnable.class,"catcher1"),param(Runnable.class,"catcher2"),param(Runnable.class,"finalize"))){
      try (TryBlock tryBlock=run.tryBlock()){
        tryBlock.expression(invoke(run.load("body"),RUN));
        try (CodeBlock catchBlock=tryBlock.catchBlock(param(MyFirstException.class,"E"))){
          catchBlock.expression(invoke(run.load("catcher1"),RUN));
        }
         try (CodeBlock catchBlock=tryBlock.catchBlock(param(MySecondException.class,"E"))){
          catchBlock.expression(invoke(run.load("catcher2"),RUN));
        }
         try (CodeBlock finallyBlock=tryBlock.finallyBlock()){
          finallyBlock.expression(invoke(run.load("finalize"),RUN));
        }
       }
     }
     handle=simple.handle();
  }
   Runnable body1=mock(Runnable.class), body2=mock(Runnable.class), catcher11=mock(Runnable.class), catcher12=mock(Runnable.class), finalize1=mock(Runnable.class), catcher21=mock(Runnable.class), catcher22=mock(Runnable.class), finalize2=mock(Runnable.class);
  doThrow(MyFirstException.class).when(body1).run();
  doThrow(MySecondException.class).when(body2).run();
  MethodHandle run=instanceMethod(handle.newInstance(),"run",Runnable.class,Runnable.class,Runnable.class,Runnable.class);
  run.invoke(body1,catcher11,catcher12,finalize1);
  verify(body1).run();
  verify(catcher11).run();
  verify(catcher12,never()).run();
  verify(finalize1).run();
  run.invoke(body2,catcher21,catcher22,finalize2);
  verify(body2).run();
  verify(catcher22).run();
  verify(catcher21,never()).run();
  verify(finalize2).run();
}
