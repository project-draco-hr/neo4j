{
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock ternaryBlock=simple.generateMethod(String.class,"ternary",param(boolean.class,"test"),param(TernaryChecker.class,"check"))){
      ternaryBlock.returns(ternary(ternaryBlock.load("test"),invoke(ternaryBlock.load("check"),methodReference(TernaryChecker.class,String.class,"onTrue")),invoke(ternaryBlock.load("check"),methodReference(TernaryChecker.class,String.class,"onFalse"))));
    }
     handle=simple.handle();
  }
   MethodHandle ternary=instanceMethod(handle.newInstance(),"ternary",boolean.class,TernaryChecker.class);
  TernaryChecker checker1=new TernaryChecker();
  assertThat(ternary.invoke(true,checker1),equalTo("on true"));
  assertTrue(checker1.ranOnTrue);
  assertFalse(checker1.ranOnFalse);
  TernaryChecker checker2=new TernaryChecker();
  assertThat(ternary.invoke(false,checker2),equalTo("on false"));
  assertFalse(checker2.ranOnTrue);
  assertTrue(checker2.ranOnFalse);
}
