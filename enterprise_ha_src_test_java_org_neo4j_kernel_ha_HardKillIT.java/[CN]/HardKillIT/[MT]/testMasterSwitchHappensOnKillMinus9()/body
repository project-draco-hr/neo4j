{
  Process proc=null;
  HighlyAvailableGraphDatabase dbWithId2=null, dbWithId3=null, oldMaster=null;
  try {
    proc=run("1");
    Thread.sleep(12000);
    dbWithId2=startDb(2);
    dbWithId3=startDb(3);
    assertTrue(!dbWithId2.isMaster());
    assertTrue(!dbWithId3.isMaster());
    final CountDownLatch newMasterAvailableLatch=new CountDownLatch(1);
    dbWithId2.getDependencyResolver().resolveDependency(ClusterClient.class).addAtomicBroadcastListener(new AtomicBroadcastListener(){
      @Override public void receive(      Payload value){
        try {
          Object event=new AtomicBroadcastSerializer().receive(value);
          if (event instanceof MemberIsAvailable) {
            if (HighAvailabilityEvents.MASTER.equals(((MemberIsAvailable)event).getRole())) {
              newMasterAvailableLatch.countDown();
            }
          }
        }
 catch (        Exception e) {
          fail(e.toString());
        }
      }
    }
);
    proc.destroy();
    proc=null;
    newMasterAvailableLatch.await(60,SECONDS);
    assertTrue(dbWithId2.isMaster());
    assertTrue(!dbWithId3.isMaster());
    oldMaster=startDb(1);
    long oldMasterNode=createNamedNode(oldMaster,"Old master");
    assertEquals(oldMasterNode,getNamedNode(dbWithId2,"Old master"));
  }
  finally {
    if (proc != null) {
      proc.destroy();
    }
    if (oldMaster != null) {
      oldMaster.shutdown();
    }
    dbWithId2.shutdown();
    dbWithId3.shutdown();
  }
}
