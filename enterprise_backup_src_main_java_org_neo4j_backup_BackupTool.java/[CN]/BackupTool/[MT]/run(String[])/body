{
  Args arguments=new Args(args);
  checkArguments(arguments);
  String from=arguments.get(FROM,null);
  String to=arguments.get(TO,null);
  boolean verify=arguments.getBoolean(VERIFY,true,true);
  Config tuningConfiguration=readTuningConfiguration(TO,arguments);
  if (!from.contains(":"))   from="single://" + from;
  URI backupURI=null;
  try {
    backupURI=new URI(from);
  }
 catch (  URISyntaxException e) {
    throw new ToolFailureException("Please properly specify a location to backup as a valid URI in the form " + "<scheme>://<host>[:port], where scheme is the target database's running mode, eg ha");
  }
  String module=backupURI.getScheme();
  BackupExtensionService service=null;
  if (module != null && !DEFAULT_SCHEME.equals(module)) {
    try {
      service=Service.load(BackupExtensionService.class,module);
    }
 catch (    NoSuchElementException e) {
      throw new ToolFailureException(String.format("%s was specified as a backup module but it was not found. " + "Please make sure that the implementing service is on the classpath.",module));
    }
  }
  if (service != null) {
    Logging logging;
    try {
      getClass().getClassLoader().loadClass("ch.qos.logback.classic.LoggerContext");
      LifeSupport life=new LifeSupport();
      LogbackService logbackService=life.add(new LogbackService(tuningConfiguration,(LoggerContext)getSingleton().getLoggerFactory(),"neo4j-backup-logback.xml"));
      life.start();
      logging=logbackService;
    }
 catch (    Throwable e) {
      logging=new SystemOutLogging();
    }
    try {
      backupURI=service.resolve(backupURI,arguments,logging);
    }
 catch (    Throwable e) {
      throw new ToolFailureException(e.getMessage());
    }
  }
  try {
    String str=backupURI.toASCIIString();
    if (str.contains("://"))     str=str.split("://")[1];
    systemOut.println("Performing backup from '" + str + "'");
    return doBackup(backupURI,to,verify,tuningConfiguration);
  }
 catch (  TransactionFailureException e) {
    if (e.getCause() instanceof UpgradeNotAllowedByConfigurationException) {
      try {
        systemOut.println("The database present in the target directory is of an older version. " + "Backing that up in target and performing a full backup from source");
        moveExistingDatabase(fs,to);
      }
 catch (      IOException e1) {
        throw new ToolFailureException("There was a problem moving the old database out of the way" + " - cannot continue, aborting.",e);
      }
      return doBackup(backupURI,to,verify,tuningConfiguration);
    }
 else {
      throw new ToolFailureException("TransactionFailureException from existing backup at '" + from + "'"+ ".",e);
    }
  }
}
