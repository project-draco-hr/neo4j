{
  long[] expectedStartTimestamps=new long[10];
  long[] expectedCommitTimestamps=new long[expectedStartTimestamps.length];
  for (int i=0; i < expectedStartTimestamps.length; i++) {
    Transaction tx=db.beginTx();
    expectedStartTimestamps[i]=System.currentTimeMillis();
    Node node=db.createNode();
    node.setProperty("name","Mattias " + i);
    tx.success();
    tx.finish();
    expectedCommitTimestamps[i]=System.currentTimeMillis();
  }
  db.getDependencyResolver().resolveDependency(XaDataSourceManager.class).getNeoStoreDataSource().rotateLogicalLog();
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 500);
  FileChannel channel=fileSystem.open(new File(db.getStoreDir(),NeoStoreXaDataSource.LOGICAL_LOG_DEFAULT_NAME + ".v0"),"r");
  try {
    XaCommandReader commandReader=new PhysicalLogNeoXaCommandReader(buffer);
    LogIoUtils.readLogHeader(buffer,channel,true);
    int foundTxCount=0;
    skipFirstTransaction(buffer,channel,commandReader);
    for (LogEntry entry; (entry=LogIoUtils.readEntry(buffer,channel,commandReader)) != null; ) {
      if (entry instanceof LogEntry.Start) {
        long diff=((LogEntry.Start)entry).getTimeWritten() - expectedStartTimestamps[foundTxCount];
        long exp=expectedCommitTimestamps[foundTxCount] - expectedStartTimestamps[foundTxCount];
        assertTrue(diff + " <= " + exp,diff <= exp);
      }
 else       if (entry instanceof LogEntry.Commit) {
        long diff=((LogEntry.Commit)entry).getTimeWritten() - expectedCommitTimestamps[foundTxCount];
        long exp=expectedCommitTimestamps[foundTxCount] - expectedStartTimestamps[foundTxCount];
        assertTrue(diff + " <= " + exp,diff <= exp);
        foundTxCount++;
      }
    }
    assertEquals(expectedCommitTimestamps.length,foundTxCount);
  }
  finally {
    channel.close();
  }
}
