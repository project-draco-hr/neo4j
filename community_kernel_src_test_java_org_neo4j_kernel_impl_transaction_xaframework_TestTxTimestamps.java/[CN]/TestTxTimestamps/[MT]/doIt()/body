{
  long[] expectedStartTimestamps=new long[10];
  long[] expectedCommitTimestamps=new long[expectedStartTimestamps.length];
  for (int i=0; i < expectedStartTimestamps.length; i++) {
    Transaction tx=db.beginTx();
    expectedStartTimestamps[i]=System.currentTimeMillis();
    Node node=db.createNode();
    node.setProperty("name","Mattias " + i);
    tx.success();
    tx.finish();
    expectedCommitTimestamps[i]=System.currentTimeMillis();
  }
  db.getDependencyResolver().resolveDependency(XaDataSourceManager.class).getNeoStoreDataSource().rotateLogicalLog();
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 500);
  FileChannel channel=fileSystem.open(new File(db.getStoreDir(),NeoStoreXaDataSource.LOGICAL_LOG_DEFAULT_NAME + ".v0"),"r");
  try {
    LogEntryReaderv1.readLogHeader(buffer,channel,true);
    AConsumer consumer=new AConsumer(expectedCommitTimestamps,expectedStartTimestamps);
    LogDeserializer deserializer=new LogDeserializer(new Monitors().newMonitor(ByteCounterMonitor.class),buffer,new PhysicalLogNeoXaCommandReader(buffer));
    try (Cursor<LogEntry,IOException> cursor=deserializer.cursor(channel)){
      while (cursor.next(consumer))       ;
    }
     assertEquals(expectedCommitTimestamps.length,consumer.getFoundTxCount());
  }
  finally {
    channel.close();
  }
}
