{
  AbstractGraphDatabase db=database.graph;
  Transaction tx=db.beginTx();
  try {
    List<Object> operations=input.readList(body);
    List<BatchOperationRepresentation> results=new ArrayList<BatchOperationRepresentation>(operations.size());
    String opBody, opMethod, opPath;
    Integer opId;
    Map<String,Object> op;
    for (    Object rawOperation : operations) {
      op=(Map<String,Object>)rawOperation;
      opMethod=(String)op.get(METHOD_KEY);
      opPath=(String)op.get(TO_KEY);
      opBody=op.containsKey(BODY_KEY) ? JsonHelper.createJsonFrom(op.get(BODY_KEY)) : "";
      opId=op.containsKey(ID_KEY) ? (Integer)op.get(ID_KEY) : null;
      if (!opPath.startsWith("/")) {
        opPath="/" + opPath;
      }
      final URI resolve=uriInfo.getBaseUri().resolve("." + opPath);
      InternalJettyServletRequest request=new InternalJettyServletRequest();
      request.setup(opMethod,new HttpURI(resolve.toString()),opBody,new Cookie[]{},"application/json","UTF-8");
      InternalJettyServletResponse response=new InternalJettyServletResponse();
      response.setup();
      webServer.invokeDirectly(resolve.getPath(),request,response);
      if (is2XXStatusCode(response.getStatus())) {
        results.add(new BatchOperationRepresentation(opId,opPath,response.getOutputStream().toString(),response.getHeaders()));
      }
 else {
        tx.failure();
        return output.badRequest(new RuntimeException(response.getReason()));
      }
    }
    tx.success();
    return output.ok(BatchOperationRepresentation.list(results));
  }
 catch (  Exception e) {
    tx.failure();
    return output.badRequest(e);
  }
 finally {
    tx.finish();
  }
}
