{
  AbstractGraphDatabase db=database.graph;
  Transaction tx=db.beginTx();
  try {
    List<Object> operations=input.readList(body);
    BatchOperationResults results=new BatchOperationResults(operations.size());
    InternalJettyServletRequest req=new InternalJettyServletRequest();
    InternalJettyServletResponse res=new InternalJettyServletResponse();
    String servletBaseUrl=uriInfo.getBaseUri().toString();
    String servletPath=uriInfo.getBaseUri().getPath();
    servletBaseUrl=servletBaseUrl.substring(0,servletBaseUrl.length() - 1);
    String opBody, opMethod, opPath;
    Integer opId;
    Map<String,Object> op;
    for (    Object rawOperation : operations) {
      op=(Map<String,Object>)rawOperation;
      opMethod=(String)op.get(METHOD_KEY);
      opPath=(String)op.get(TO_KEY);
      opBody=op.containsKey(BODY_KEY) ? JsonHelper.createJsonFrom(op.get(BODY_KEY)) : "";
      opId=op.containsKey(ID_KEY) ? (Integer)op.get(ID_KEY) : null;
      if (!opPath.startsWith("/")) {
        opPath="/" + opPath;
      }
      req.setup(opMethod,new HttpURI(servletBaseUrl + opPath),opBody,new Cookie[]{});
      res.setup();
      webServer.handle(servletPath + opPath,req,res);
      if (is2XXStatusCode(res.getStatus())) {
        results.addOperationResult(opPath,opId,res.getOutputStream().toString(),res.getHeader("Location"));
      }
 else {
        tx.failure();
        return output.badRequest(new RuntimeException(res.getReason()));
      }
    }
    tx.success();
    return Response.ok().entity(results.toJSON().getBytes("UTF-8")).header(HttpHeaders.CONTENT_ENCODING,"UTF-8").type(MediaType.APPLICATION_JSON).build();
  }
 catch (  Exception e) {
    tx.failure();
    return output.badRequest(e);
  }
 finally {
    tx.finish();
  }
}
