{
  instantiateNeoStore(1);
  NeoStoreTransaction tx=newWriteTransaction();
  int nodeId=(int)nextId(NODE), typeA=0, typeB=12, typeC=600;
  tx.nodeCreate(nodeId);
  tx.createRelationshipTypeToken(typeA,"A");
  long[] relationshipsCreatedAIncoming=createRelationships(tx,nodeId,typeA,INCOMING,1);
  long[] relationshipsCreatedAOutgoing=createRelationships(tx,nodeId,typeA,OUTGOING,1);
  tx.createRelationshipTypeToken(typeB,"B");
  long[] relationshipsCreatedBIncoming=createRelationships(tx,nodeId,typeB,INCOMING,1);
  long[] relationshipsCreatedBOutgoing=createRelationships(tx,nodeId,typeB,OUTGOING,1);
  tx.createRelationshipTypeToken(typeC,"C");
  long[] relationshipsCreatedCIncoming=createRelationships(tx,nodeId,typeC,INCOMING,1);
  long[] relationshipsCreatedCOutgoing=createRelationships(tx,nodeId,typeC,OUTGOING,1);
  deleteRelationship(tx,relationshipsCreatedAIncoming[0]);
  assertDenseRelationshipCounts(tx,nodeId,typeA,1,0);
  assertDenseRelationshipCounts(tx,nodeId,typeB,1,1);
  assertDenseRelationshipCounts(tx,nodeId,typeC,1,1);
  deleteRelationship(tx,relationshipsCreatedAOutgoing[0]);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeA);
  assertDenseRelationshipCounts(tx,nodeId,typeB,1,1);
  assertDenseRelationshipCounts(tx,nodeId,typeC,1,1);
  deleteRelationship(tx,relationshipsCreatedBIncoming[0]);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeA);
  assertDenseRelationshipCounts(tx,nodeId,typeB,1,0);
  assertDenseRelationshipCounts(tx,nodeId,typeC,1,1);
  deleteRelationship(tx,relationshipsCreatedBOutgoing[0]);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeA);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeB);
  assertDenseRelationshipCounts(tx,nodeId,typeC,1,1);
  deleteRelationship(tx,relationshipsCreatedCIncoming[0]);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeA);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeB);
  assertDenseRelationshipCounts(tx,nodeId,typeC,1,0);
  deleteRelationship(tx,relationshipsCreatedCOutgoing[0]);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeA);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeB);
  assertRelationshipGroupDoesNotExist(tx,nodeId,typeC);
}
