{
  long node1, foo, name;
{
    DataStatement statement=dataStatementInNewTransaction();
    Node node=db.createNode(label("Foo"));
    node1=node.getId();
    node.setProperty("name","foo");
    foo=statement.labelGetForName("Foo");
    name=statement.propertyKeyGetForName("name");
    commit();
  }
  SchemaStatement statement=schemaStatementInNewTransaction();
  statement.uniquenessConstraintCreate(foo,name);
  ExecutorService executor=Executors.newSingleThreadExecutor();
  long node2=executor.submit(new Callable<Long>(){
    @Override public Long call(){
      Transaction tx=db.beginTx();
      try {
        Node node=db.createNode(label("Foo"));
        node.setProperty("name","foo");
        tx.success();
        return node.getId();
      }
  finally {
        tx.finish();
      }
    }
  }
).get();
  executor.shutdown();
  try {
    commit();
    fail("expected exception");
  }
 catch (  TransactionFailureException ex) {
    Throwable cause=ex.getCause();
    assertThat(cause,instanceOf(ConstraintCreationException.class));
    CreateConstraintFailureException creationException=(CreateConstraintFailureException)cause.getCause();
    assertEquals(new UniquenessConstraint(foo,name),creationException.constraint());
    cause=creationException.getCause();
    assertThat(cause,instanceOf(ConstraintVerificationFailedKernelException.class));
    assertEquals(asSet(new ConstraintVerificationFailedKernelException.Evidence(new PreexistingIndexEntryConflictException("foo",node1,node2))),((ConstraintVerificationFailedKernelException)cause).evidence());
  }
}
