{
  long node1, node2, foo, name;
{
    DataStatement statement=dataStatementInNewTransaction();
    Node node=db.createNode(label("Foo"));
    node1=node.getId();
    node.setProperty("name","foo");
    node=db.createNode(label("Foo"));
    node2=node.getId();
    node.setProperty("name","foo");
    foo=statement.labelGetForName("Foo");
    name=statement.propertyKeyGetForName("name");
    commit();
  }
  try {
    SchemaStatement statement=schemaStatementInNewTransaction();
    statement.uniquenessConstraintCreate(foo,name);
    fail("expected exception");
  }
 catch (  CreateConstraintFailureException ex) {
    assertEquals(new UniquenessConstraint(foo,name),ex.constraint());
    Throwable cause=ex.getCause();
    assertThat(cause,instanceOf(ConstraintVerificationFailedKernelException.class));
    assertEquals(asSet(new ConstraintVerificationFailedKernelException.Evidence(new PreexistingIndexEntryConflictException("foo",node1,node2))),((ConstraintVerificationFailedKernelException)cause).evidence());
  }
}
