{
  gen.get().addTestSourceSnippets(this.getClass(),"get-admins","get-user-memberships","get-groups","get-members","read-traverser");
  System.out.println("All admins:");
  Node admins=getNodeByName("Admins");
  TraversalDescription traversalDescription=Traversal.description().breadthFirst().evaluator(Evaluators.excludeStartPosition()).relationships(RoleRels.PART_OF,Direction.INCOMING).relationships(RoleRels.MEMBER_OF,Direction.INCOMING);
  Traverser traverser=traversalDescription.traverse(admins);
  try (Transaction tx=graphdb().beginTx()){
    gen.get().addSnippet("o-get-admins",createOutputSnippet(traverserToString(traverser)));
    String query="start admins=node(" + admins.getId() + ") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name";
    gen.get().addSnippet("query-get-admins",createCypherSnippet(query));
    String result=engine.execute(query).dumpToString();
    assertTrue(result.contains("Engin"));
    gen.get().addSnippet("o-query-get-admins",createQueryResultSnippet(result));
    Node jale=getNodeByName("Jale");
    traversalDescription=Traversal.description().depthFirst().evaluator(Evaluators.excludeStartPosition()).relationships(RoleRels.MEMBER_OF,Direction.OUTGOING).relationships(RoleRels.PART_OF,Direction.OUTGOING);
    traverser=traversalDescription.traverse(jale);
    gen.get().addSnippet("o-get-user-memberships",createOutputSnippet(traverserToString(traverser)));
    query="start jale=node(" + jale.getId() + ") match jale-[:MEMBER_OF]->()-[:PART_OF*0..]->group return group.name";
    gen.get().addSnippet("query-get-user-memberships",createCypherSnippet(query));
    result=engine.execute(query).dumpToString();
    assertTrue(result.contains("Users"));
    gen.get().addSnippet("o-query-get-user-memberships",createQueryResultSnippet(result));
    Node referenceNode=getNodeByName("Reference_Node");
    traversalDescription=Traversal.description().breadthFirst().evaluator(Evaluators.excludeStartPosition()).relationships(RoleRels.ROOT,Direction.INCOMING).relationships(RoleRels.PART_OF,Direction.INCOMING);
    traverser=traversalDescription.traverse(referenceNode);
    gen.get().addSnippet("o-get-groups",createOutputSnippet(traverserToString(traverser)));
    query="start refNode=node(" + referenceNode.getId() + ") match refNode<-[:ROOT]->()<-[:PART_OF*0..]-group return group.name";
    gen.get().addSnippet("query-get-groups",createCypherSnippet(query));
    result=engine.execute(query).dumpToString();
    assertTrue(result.contains("Users"));
    gen.get().addSnippet("o-query-get-groups",createQueryResultSnippet(result));
    traversalDescription=Traversal.description().breadthFirst().evaluator(Evaluators.includeWhereLastRelationshipTypeIs(RoleRels.MEMBER_OF));
    traverser=traversalDescription.traverse(referenceNode);
    gen.get().addSnippet("o-get-members",createOutputSnippet(traverserToString(traverser)));
    query="start refNode=node(" + referenceNode.getId() + ") "+ "match refNode<-[:ROOT]->root, p=root<-[PART_OF*0..]-()<-[:MEMBER_OF]-user "+ "return user.name, min(length(p)) "+ "order by min(length(p)), user.name";
    gen.get().addSnippet("query-get-members",createCypherSnippet(query));
    result=engine.execute(query).dumpToString();
    assertTrue(result.contains("Engin"));
    gen.get().addSnippet("o-query-get-members",createQueryResultSnippet(result));
  }
 }
