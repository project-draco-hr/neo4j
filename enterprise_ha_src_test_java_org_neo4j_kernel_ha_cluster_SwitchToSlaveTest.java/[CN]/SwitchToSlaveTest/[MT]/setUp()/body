{
  ConsoleLogger console=mock(ConsoleLogger.class);
  Config config=new Config();
  DependencyResolver resolver=mock(DependencyResolver.class);
  HaIdGeneratorFactory idGeneratorFactory=mock(HaIdGeneratorFactory.class);
  Logging logging=new SystemOutLogging();
  DelegateInvocationHandler<Master> masterDelegateHandler=mock(DelegateInvocationHandler.class);
  ClusterMemberAvailability clusterMemberAvailability=mock(ClusterMemberAvailability.class);
  ClusterClient clusterClient=mock(ClusterClient.class);
  RequestContextFactory requestContextFactory=mock(RequestContextFactory.class);
  UpdateableSchemaState updateableSchemaState=mock(UpdateableSchemaState.class);
  Monitors monitors=mock(Monitors.class);
  Iterable<KernelExtensionFactory<?>> kernelExtensions=mock(Iterable.class);
  switchToSlave=new SwitchToSlave(console,config,resolver,idGeneratorFactory,logging,masterDelegateHandler,clusterMemberAvailability,clusterClient,requestContextFactory,updateableSchemaState,monitors,kernelExtensions){
    @Override void stopServicesAndHandleBranchedStore(    BranchedDataPolicy branchPolicy) throws Throwable {
      methodCalled=true;
      return;
    }
  }
;
  methodCalled=false;
}
