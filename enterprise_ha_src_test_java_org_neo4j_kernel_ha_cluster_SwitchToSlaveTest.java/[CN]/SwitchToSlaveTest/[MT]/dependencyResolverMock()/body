{
  DependencyResolver resolver=mock(DependencyResolver.class);
  when(resolver.resolveDependency(StoreLockerLifecycleAdapter.class)).thenReturn(mockWithLifecycle(StoreLockerLifecycleAdapter.class));
  when(resolver.resolveDependency(DataSourceManager.class)).thenReturn(mockWithLifecycle(DataSourceManager.class));
  when(resolver.resolveDependency(RequestContextFactory.class)).thenReturn(mockWithLifecycle(RequestContextFactory.class));
  when(resolver.resolveDependency(TransactionCommittingResponseUnpacker.class)).thenReturn(mockWithLifecycle(TransactionCommittingResponseUnpacker.class));
  when(resolver.resolveDependency(IndexConfigStore.class)).thenReturn(mockWithLifecycle(IndexConfigStore.class));
  when(resolver.resolveDependency(OnlineBackupKernelExtension.class)).thenReturn(mockWithLifecycle(OnlineBackupKernelExtension.class));
  when(resolver.resolveDependency(FileSystemAbstraction.class)).thenReturn(fs);
  when(resolver.resolveDependency(UpdatePuller.class)).thenReturn(updatePuller);
  TransactionIdStore transactionIdStore=mock(TransactionIdStore.class);
  when(transactionIdStore.getLastCommittedTransaction()).thenReturn(new long[]{42,42});
  when(transactionIdStore.getLastCommittedTransactionId()).thenReturn(TransactionIdStore.BASE_TX_ID);
  when(resolver.resolveDependency(TransactionIdStore.class)).thenReturn(transactionIdStore);
  ClusterMembers clusterMembers=mock(ClusterMembers.class);
  ClusterMember master=mock(ClusterMember.class);
  when(master.getStoreId()).thenReturn(storeId);
  when(master.getHARole()).thenReturn(HighAvailabilityModeSwitcher.MASTER);
  when(master.hasRole(eq(HighAvailabilityModeSwitcher.MASTER))).thenReturn(true);
  when(master.getInstanceId()).thenReturn(new InstanceId(1));
  when(clusterMembers.getMembers()).thenReturn(Collections.singleton(master));
  when(resolver.resolveDependency(ClusterMembers.class)).thenReturn(clusterMembers);
  return resolver;
}
