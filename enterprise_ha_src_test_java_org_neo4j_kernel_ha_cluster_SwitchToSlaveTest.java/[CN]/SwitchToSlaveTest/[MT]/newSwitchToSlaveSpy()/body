{
  ClusterMembers clusterMembers=mock(ClusterMembers.class);
  ClusterMember master=mock(ClusterMember.class);
  when(master.getStoreId()).thenReturn(new StoreId(42,42,42,42));
  when(master.getHARole()).thenReturn(HighAvailabilityModeSwitcher.MASTER);
  when(master.hasRole(eq(HighAvailabilityModeSwitcher.MASTER))).thenReturn(true);
  when(clusterMembers.getMembers()).thenReturn(asList(master));
  DependencyResolver resolver=mock(DependencyResolver.class);
  when(resolver.resolveDependency(any(Class.class))).thenReturn(mock(Lifecycle.class));
  NeoStoreDataSource dataSource=mock(NeoStoreDataSource.class);
  when(dataSource.getStoreId()).thenReturn(new StoreId(42,42,42,42));
  return spy(new SwitchToSlave(mock(File.class),NullLogService.getInstance(),mock(FileSystemAbstraction.class),clusterMembers,configMock(),resolver,mock(HaIdGeneratorFactory.class),mock(DelegateInvocationHandler.class),mock(ClusterMemberAvailability.class),mock(RequestContextFactory.class),Iterables.<KernelExtensionFactory<?>>empty(),mock(MasterClientResolver.class),mock(SwitchToSlave.Monitor.class),new StoreCopyClient.Monitor.Adapter(),Suppliers.singleton(dataSource),Suppliers.singleton(mock(TransactionIdStore.class)),new Factory<Slave>(){
    @Override public Slave newInstance(){
      return mock(Slave.class);
    }
  }
,new Function<Slave,SlaveServer>(){
    @Override public SlaveServer apply(    Slave slave) throws RuntimeException {
      return mock(SlaveServer.class);
    }
  }
,mock(UpdatePuller.class),mock(PageCache.class),mock(Monitors.class)));
}
