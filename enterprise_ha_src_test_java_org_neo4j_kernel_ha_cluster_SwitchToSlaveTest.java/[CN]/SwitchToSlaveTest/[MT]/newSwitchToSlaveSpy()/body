{
  ClusterMembers clusterMembers=mock(ClusterMembers.class);
  ClusterMember master=mock(ClusterMember.class);
  when(master.getStoreId()).thenReturn(new StoreId(42,42,42,42));
  when(master.getHARole()).thenReturn(HighAvailabilityModeSwitcher.MASTER);
  when(master.hasRole(eq(HighAvailabilityModeSwitcher.MASTER))).thenReturn(true);
  when(clusterMembers.getMembers()).thenReturn(asList(master));
  DependencyResolver resolver=mock(DependencyResolver.class);
  when(resolver.resolveDependency(any(Class.class))).thenReturn(mock(Lifecycle.class));
  when(resolver.resolveDependency(ClusterMembers.class)).thenReturn(clusterMembers);
  when(resolver.resolveDependency(TransactionObligationFulfiller.class)).thenReturn(mock(TransactionObligationFulfiller.class));
  NeoStoreDataSource dataSource=mock(NeoStoreDataSource.class);
  when(dataSource.getStoreId()).thenReturn(new StoreId(42,42,42,42));
  TransactionCounters transactionCounters=mock(TransactionCounters.class);
  when(transactionCounters.getNumberOfActiveTransactions()).thenReturn(0l);
  Response<HandshakeResult> response=mock(Response.class);
  when(response.response()).thenReturn(new HandshakeResult(42,2));
  when(masterClient.handshake(anyLong(),any(StoreId.class))).thenReturn(response);
  when(masterClient.getProtocolVersion()).thenReturn(MasterClient214.PROTOCOL_VERSION);
  PageCache pageCacheMock=mock(PageCache.class);
  PagedFile pagedFileMock=mock(PagedFile.class);
  when(pagedFileMock.getLastPageId()).thenReturn(1l);
  when(pageCacheMock.map(any(File.class),anyInt())).thenReturn(pagedFileMock);
  TransactionIdStore transactionIdStoreMock=mock(TransactionIdStore.class);
  when(transactionIdStoreMock.getLastCommittedTransaction()).thenReturn(new long[]{42,42});
  MasterClientResolver masterClientResolver=mock(MasterClientResolver.class);
  when(masterClientResolver.instantiate(anyString(),anyInt(),any(Monitors.class),any(StoreId.class),any(LifeSupport.class))).thenReturn(masterClient);
  return spy(new SwitchToSlave(new File(""),NullLogService.getInstance(),mock(FileSystemAbstraction.class),clusterMembers,configMock(),resolver,mock(HaIdGeneratorFactory.class),mock(DelegateInvocationHandler.class),mock(ClusterMemberAvailability.class),mock(RequestContextFactory.class),pullerFactory,Iterables.<KernelExtensionFactory<?>>empty(),masterClientResolver,mock(SwitchToSlave.Monitor.class),new StoreCopyClient.Monitor.Adapter(),Suppliers.singleton(dataSource),Suppliers.singleton(transactionIdStoreMock),new Function<Slave,SlaveServer>(){
    @Override public SlaveServer apply(    Slave slave) throws RuntimeException {
      return mock(SlaveServer.class);
    }
  }
,updatePuller,pageCacheMock,mock(Monitors.class),transactionCounters));
}
