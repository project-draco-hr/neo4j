{
  Node[] node={node(0,properties(property("name","node0"))),node(1,properties(property("name","node1"))),node(2,properties(property("name","node2")))};
  Relationship[] rel={relationship(0,node[0],"KNOWS",node[1],property("name","rel0")),relationship(1,node[2],"LOVES",node[1],property("name","rel1"))};
  Path path=GraphMock.path(node[0],link(rel[0],node[1]),link(rel[1],node[2]));
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ExecutionResultSerializer serializer=new ExecutionResultSerializer(output,URI.create("http://base.uri/"),DEV_NULL);
  serializer.statementResult(mockExecutionResult(map("node",node[0],"rel",rel[0],"path",path,"map",map("n1",node[1],"r1",rel[1]))),false,ResultDataContent.rest);
  serializer.finish();
  String result=output.toString("UTF-8");
  JsonNode json=jsonNode(result);
  Map<String,Integer> columns=new HashMap<>();
  int col=0;
  JsonNode results=json.get("results").get(0);
  for (  JsonNode column : results.get("columns")) {
    columns.put(column.getTextValue(),col++);
  }
  JsonNode row=results.get("data").get(0).get("rest");
  JsonNode jsonNode=row.get(columns.get("node"));
  JsonNode jsonRel=row.get(columns.get("rel"));
  JsonNode jsonPath=row.get(columns.get("path"));
  JsonNode jsonMap=row.get(columns.get("map"));
  assertEquals("http://base.uri/node/0",jsonNode.get("self").getTextValue());
  assertEquals("http://base.uri/relationship/0",jsonRel.get("self").getTextValue());
  assertEquals(2,jsonPath.get("length").getNumberValue());
  assertEquals("http://base.uri/node/0",jsonPath.get("start").getTextValue());
  assertEquals("http://base.uri/node/2",jsonPath.get("end").getTextValue());
  assertEquals("http://base.uri/node/1",jsonMap.get("n1").get("self").getTextValue());
  assertEquals("http://base.uri/relationship/1",jsonMap.get("r1").get("self").getTextValue());
}
