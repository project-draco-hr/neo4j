{
  ExecutionResult stmtResult=mock(ExecutionResult.class);
  List<String> expectedColumns=asList("Number","String","Boolean","PropContainer","Path");
  when(stmtResult.columns()).thenReturn(expectedColumns);
  int theNumber=1337;
  String theString="Stuff";
  boolean theBoolean=true;
  PropertyContainer thePropContainer=mockPropertyContainer();
  Path thePath=mockPath();
  when(stmtResult.iterator()).thenReturn(singletonIterator(map("Number",theNumber,"String",theString,"Boolean",theBoolean,"PropContainer",thePropContainer,"Path",thePath)));
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ExecutionResultSerializer serializer=new ExecutionResultSerializer(output,txUriScheme);
  serializer.prologue(1337l);
  serializer.visitStatementResult(stmtResult);
  serializer.epilogue(NO_ERRORS);
  Map<String,Object> result=deserialize(output);
  assertThat(result.keySet(),equalTo(asSet("results","errors","commit")));
  assertThat(((List)result.get("errors")).size(),equalTo(0));
  assertThat(((String)result.get("commit")),equalTo("transaction/1337/commit"));
  List<Map<String,Object>> results=listOfMaps(result.get("results"));
  assertThat(results.size(),equalTo(1));
  List<String> columns=listOfStrings(results.get(0).get("columns"));
  assertThat(asSet(columns),equalTo(asSet(expectedColumns)));
  List<List<Object>> data=listOfLists(results.get(0).get("data"));
  assertThat(data.size(),is(1));
  List<Object> row=data.get(0);
  assertThat((Integer)row.get(0),equalTo(theNumber));
  assertThat((String)row.get(1),equalTo(theString));
  assertThat((Boolean)row.get(2),equalTo(theBoolean));
  assertThat(mapOfStringToObject(row.get(3)),equalTo(map("a",12,"b",true,"c",asList(1,0,1,2),"d",asList(1,0,1,2),"e",asList("a","b","??????"))));
  assertThat(listOfMaps(row.get(4)),equalTo(asList(map(),map("a",12),map())));
}
