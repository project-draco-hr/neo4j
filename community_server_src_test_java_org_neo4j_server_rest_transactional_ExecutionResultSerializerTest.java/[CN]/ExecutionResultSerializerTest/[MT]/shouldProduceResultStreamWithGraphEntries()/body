{
  Node[] node={node(0,properties(property("name","node0")),"Node"),node(1,properties(property("name","node1"))),node(2,properties(property("name","node2")),"This","That"),node(3,properties(property("name","node3")),"Other")};
  Relationship[] rel={GraphMock.relationship(0,node[0],"KNOWS",node[1],property("name","rel0")),GraphMock.relationship(1,node[2],"LOVES",node[3],property("name","rel1"))};
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ExecutionResultSerializer serializer=new ExecutionResultSerializer(output,StringLogger.DEV_NULL);
  serializer.statementResult(mockExecutionResult(map("node",node[0],"rel",rel[0]),map("node",node[2],"rel",rel[1])),false,ResultDataContent.row,ResultDataContent.graph);
  serializer.finish();
  String result=output.toString("UTF-8");
  String node0="{\"id\":\"0\",\"labels\":[\"Node\"],\"properties\":{\"name\":\"node0\"}}";
  String node1="{\"id\":\"1\",\"labels\":[],\"properties\":{\"name\":\"node1\"}}";
  String node2="{\"id\":\"2\",\"labels\":[\"This\",\"That\"],\"properties\":{\"name\":\"node2\"}}";
  String node3="{\"id\":\"3\",\"labels\":[\"Other\"],\"properties\":{\"name\":\"node3\"}}";
  String rel0="\"relationships\":[{\"id\":\"0\",\"type\":\"KNOWS\",\"startNode\":\"0\",\"endNode\":\"1\",\"properties\":{\"name\":\"rel0\"}}]}";
  String rel1="\"relationships\":[{\"id\":\"1\",\"type\":\"LOVES\",\"startNode\":\"2\",\"endNode\":\"3\",\"properties\":{\"name\":\"rel1\"}}]}";
  String row0="{\"row\":[{\"name\":\"node0\"},{\"name\":\"rel0\"}],\"graph\":{\"nodes\":[";
  String row1="{\"row\":[{\"name\":\"node2\"},{\"name\":\"rel1\"}],\"graph\":{\"nodes\":[";
  int n0=result.indexOf(node0);
  int n1=result.indexOf(node1);
  int n2=result.indexOf(node2);
  int n3=result.indexOf(node3);
  int r0=result.indexOf(rel0);
  int r1=result.indexOf(rel1);
  int _0=result.indexOf(row0);
  int _1=result.indexOf(row1);
  assertTrue("result should contain row0",_0 > 0);
  assertTrue("result should contain row1 after row0",_1 > _0);
  assertTrue("result should contain node0 after row0",n0 > _0);
  assertTrue("result should contain node1 after row0",n1 > _0);
  assertTrue("result should contain node2 after row1",n2 > _1);
  assertTrue("result should contain node3 after row1",n3 > _1);
  assertTrue("result should contain rel0 after node0 and node1",r0 > n0 && r0 > n1);
  assertTrue("result should contain rel1 after node2 and node3",r1 > n2 && r1 > n3);
}
