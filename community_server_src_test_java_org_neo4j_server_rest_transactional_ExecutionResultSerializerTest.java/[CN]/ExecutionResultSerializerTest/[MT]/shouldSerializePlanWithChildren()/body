{
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ExecutionResultSerializer serializer=new ExecutionResultSerializer(output,URI.create("http://base.uri/"),NullLogProvider.getInstance());
  String leftId="leftId";
  String rightId="rightId";
  String parentId="parentId";
  ExecutionPlanDescription left=mockedPlanDescription("child",asSet(leftId),MapUtil.map("id",1),NO_PLANS);
  ExecutionPlanDescription right=mockedPlanDescription("child",asSet(rightId),MapUtil.map("id",2),NO_PLANS);
  ExecutionPlanDescription parent=mockedPlanDescription("parent",asSet(parentId),MapUtil.map("id",0),asList(left,right));
  serializer.statementResult(mockExecutionResult(parent),false,ResultDataContent.rest);
  serializer.finish();
  String result=output.toString("UTF-8");
  JsonNode root=assertIsPlanRoot(result);
  assertEquals("parent",root.get("operatorType").getTextValue());
  assertEquals(0,root.get("id").asLong());
  assertEquals(asSet(parentId),identifiersOf(root));
  Set<Integer> childIds=new HashSet<>();
  Set<Set<String>> identifiers=new HashSet<>();
  for (  JsonNode child : root.get("children")) {
    assertTrue("Expected object",child.isObject());
    assertEquals("child",child.get("operatorType").getTextValue());
    identifiers.add(identifiersOf(child));
    childIds.add(child.get("id").asInt());
  }
  assertEquals(asSet(1,2),childIds);
  assertEquals(asSet(asSet(leftId),asSet(rightId)),identifiers);
}
