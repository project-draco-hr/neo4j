{
  File storeDir=new File("target/var/free-id-once");
  deleteRecursively(storeDir);
  GraphDatabaseService db=new TestGraphDatabaseFactory().setFileSystem(fs).newImpermanentDatabase(storeDir);
  RelationshipType type=withName("SOME_TYPE");
  Set<Long> createdNodeIds=new HashSet<>();
  Set<Long> createdRelationshipIds=new HashSet<>();
  Transaction tx=db.beginTx();
  Node commonNode=db.createNode();
  for (int i=0; i < 20; i++) {
    Node otherNode=db.createNode();
    Relationship relationship=commonNode.createRelationshipTo(otherNode,type);
    if (i % 5 == 0) {
      otherNode.delete();
      relationship.delete();
    }
 else {
      createdNodeIds.add(otherNode.getId());
      createdRelationshipIds.add(relationship.getId());
    }
  }
  tx.success();
  tx.close();
  db.shutdown();
  db=new TestGraphDatabaseFactory().setFileSystem(fs).newImpermanentDatabase(storeDir);
  tx=db.beginTx();
  commonNode=db.getNodeById(commonNode.getId());
  for (int i=0; i < 100; i++) {
    Node otherNode=db.createNode();
    if (!createdNodeIds.add(otherNode.getId())) {
      fail("Managed to create a node with an id that was already in use");
    }
    Relationship relationship=commonNode.createRelationshipTo(otherNode,type);
    if (!createdRelationshipIds.add(relationship.getId())) {
      fail("Managed to create a relationship with an id that was already in use");
    }
  }
  tx.success();
  tx.close();
  tx=db.beginTx();
  for (  Node node : db.getAllNodes()) {
    lastOrNull(node.getRelationships());
  }
  tx.close();
  db.shutdown();
}
