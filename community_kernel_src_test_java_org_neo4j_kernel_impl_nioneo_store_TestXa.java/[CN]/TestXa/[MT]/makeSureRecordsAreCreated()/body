{
  Xid xid=new XidImpl(new byte[2],new byte[2]);
  XAResource xaRes=xaCon.getXaResource();
  xaRes.start(xid,XAResource.TMNOFLAGS);
  long node1=ds.nextId(Node.class);
  xaCon.getWriteTransaction().nodeCreate(node1);
  xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop1"),new long[]{1l << 63,1,1});
  xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop2"),new long[]{1l << 63,1,1});
  DefinedProperty toRead=xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop3"),new long[]{1l << 63,1,1});
  DefinedProperty toDelete=xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop4"),new long[]{1l << 63,1,1});
  xaRes.end(xid,XAResource.TMSUCCESS);
  xaRes.commit(xid,true);
  ds.rotateLogicalLog();
  copyClearRename();
  ds=newNeoStore();
  xaCon=ds.getXaConnection();
  xaRes=xaCon.getXaResource();
  xid=new XidImpl(new byte[2],new byte[2]);
  xaRes=xaCon.getXaResource();
  xaRes.start(xid,XAResource.TMNOFLAGS);
  xaCon.getWriteTransaction().nodeRemoveProperty(node1,toDelete.propertyKeyId());
  xaRes.end(xid,XAResource.TMSUCCESS);
  xaRes.commit(xid,true);
  ds.rotateLogicalLog();
  copyClearRename();
  ds=newNeoStore();
  xaCon=ds.getXaConnection();
  xaRes=xaCon.getXaResource();
  xid=new XidImpl(new byte[2],new byte[2]);
  xaRes=xaCon.getXaResource();
  xaRes.start(xid,XAResource.TMNOFLAGS);
  assertTrue(Arrays.equals((long[])toRead.value(),(long[])loadNodeProperty(xaCon.getWriteTransaction(),node1,toRead.propertyKeyId())));
  xaRes.end(xid,XAResource.TMSUCCESS);
  xaRes.prepare(xid);
  xaCon.clearAllTransactions();
  ds.stop();
  deleteLogicalLogIfExist();
}
