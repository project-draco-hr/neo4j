{
  final Config config=new Config(MapUtil.stringMap(InternalAbstractGraphDatabase.Configuration.store_dir.name(),path().getPath(),InternalAbstractGraphDatabase.Configuration.neo_store.name(),file("neo").getPath(),InternalAbstractGraphDatabase.Configuration.logical_log.name(),file(LOGICAL_LOG_DEFAULT_NAME).getPath()),GraphDatabaseSettings.class);
  StoreFactory sf=new StoreFactory(config,new DefaultIdGeneratorFactory(),new DefaultWindowPoolFactory(),fileSystem,StringLogger.DEV_NULL,null);
  for (  File file : fileSystem.listFiles(path())) {
    if (file.isFile() && file.getName().startsWith(LOGICAL_LOG_DEFAULT_NAME + ".v")) {
      fileSystem.deleteFile(file);
    }
  }
  NodeManager nodeManager=mock(NodeManager.class);
  @SuppressWarnings("rawtypes") List caches=Arrays.asList((Cache)mock(AutoLoadingCache.class),(Cache)mock(AutoLoadingCache.class));
  when(nodeManager.caches()).thenReturn(caches);
  KernelHealth kernelHealth=mock(KernelHealth.class);
  NeoStoreXaDataSource neoStoreXaDataSource=new NeoStoreXaDataSource(config,sf,StringLogger.DEV_NULL,null,new SingleLoggingService(DEV_NULL),new KernelSchemaStateStore(),mock(TokenNameLookup.class),dependencyResolverForNoIndexProvider(nodeManager),mock(PropertyKeyTokenHolder.class),mock(LabelTokenHolder.class),mock(RelationshipTypeTokenHolder.class),mock(Locks.class),mock(SchemaWriteGuard.class),mock(TransactionEventHandlers.class),IndexingService.NO_MONITOR,fileSystem,new Function<NeoStore,Function<List<LogEntry>,List<LogEntry>>>(){
    @Override public Function<List<LogEntry>,List<LogEntry>> apply(    NeoStore neoStore){
      return Functions.identity();
    }
  }
,mock(StoreUpgrader.class),mock(TransactionMonitor.class),kernelHealth,mock(TransactionAppender.class),mock(NeoTransactionStoreApplier.class),mock(RemoteTxHook.class),mock(TxIdGenerator.class),mock(TransactionHeaderInformation.class));
  neoStoreXaDataSource.init();
  neoStoreXaDataSource.start();
  return neoStoreXaDataSource;
}
