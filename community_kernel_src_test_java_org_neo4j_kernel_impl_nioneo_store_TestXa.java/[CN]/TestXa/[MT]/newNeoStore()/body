{
  final Config config=new Config(MapUtil.stringMap(InternalAbstractGraphDatabase.Configuration.store_dir.name(),path().getPath(),InternalAbstractGraphDatabase.Configuration.neo_store.name(),file("neo").getPath(),InternalAbstractGraphDatabase.Configuration.logical_log.name(),file(LOGICAL_LOG_DEFAULT_NAME).getPath()),GraphDatabaseSettings.class);
  StoreFactory sf=new StoreFactory(config,new DefaultIdGeneratorFactory(),new DefaultWindowPoolFactory(),fileSystem,StringLogger.DEV_NULL,null);
  PlaceboTm txManager=new PlaceboTm(null,TxIdGenerator.DEFAULT);
  LogBufferFactory logBufferFactory=new DefaultLogBufferFactory();
  for (  File file : fileSystem.listFiles(path())) {
    if (file.isFile() && file.getName().startsWith(LOGICAL_LOG_DEFAULT_NAME + ".v")) {
      fileSystem.deleteFile(file);
    }
  }
  NodeManager nodeManager=mock(NodeManager.class);
  @SuppressWarnings("rawtypes") List caches=Arrays.asList((Cache)mock(LockStripedCache.class),(Cache)mock(LockStripedCache.class));
  when(nodeManager.caches()).thenReturn(caches);
  NeoStoreXaDataSource neoStoreXaDataSource=new NeoStoreXaDataSource(config,sf,StringLogger.DEV_NULL,new XaFactory(config,TxIdGenerator.DEFAULT,txManager,logBufferFactory,fileSystem,new DevNullLoggingService(),RecoveryVerifier.ALWAYS_VALID,LogPruneStrategies.NO_PRUNING),TransactionStateFactory.noStateFactory(new DevNullLoggingService()),new TransactionInterceptorProviders(Collections.<TransactionInterceptorProvider>emptyList(),dependencyResolverForConfig(config)),null,new SingleLoggingService(DEV_NULL),new KernelSchemaStateStore(),nodeManager,mock(TokenNameLookup.class),dependencyResolverForNoIndexProvider(nodeManager));
  neoStoreXaDataSource.init();
  neoStoreXaDataSource.start();
  return neoStoreXaDataSource;
}
