{
  this.storeDir=storeDir;
  TxModule txModule=newTxModule(inputParams,finishHook);
  LockManager lockManager=lockManagerFactory.create(txModule);
  LockReleaser lockReleaser=new LockReleaser(lockManager,txModule.getTxManager());
  final Config config=new Config(graphDbService,storeDir,storeId,inputParams,kernelPanicEventGenerator,txModule,lockManager,lockReleaser,idGeneratorFactory,new SyncHookFactory(),relTypeCreator,txIdFactory.create(txModule.getTxManager()),lastCommittedTxIdSetter);
  graphDbInstance=new GraphDbInstance(storeDir,true,config);
  this.msgLog=StringLogger.getLogger(storeDir + "/messages.log");
  this.graphDbService=graphDbService;
  IndexStore indexStore=graphDbInstance.getConfig().getIndexStore();
  this.indexManager=new IndexManagerImpl(this,indexStore);
  extensions=new KernelData(){
    @Override public Version version(){
      return Version.getKernel();
    }
    @Override public Config getConfig(){
      return config;
    }
    @Override public Map<Object,Object> getConfigParams(){
      return config.getParams();
    }
    @Override public GraphDatabaseService graphDatabase(){
      return EmbeddedGraphDbImpl.this.graphDbService;
    }
  }
;
  boolean started=false;
  try {
    KernelExtensionLoader extensionLoader=new KernelExtensionLoader(){
      private Collection<KernelExtension<?>> loaded;
      public void configureKernelExtensions(){
        loaded=extensions.loadExtensionConfigurations(msgLog);
      }
      public void initializeIndexProviders(){
        extensions.loadIndexImplementations(indexManager,msgLog);
      }
      public void load(){
        extensions.loadExtensions(loaded,msgLog);
      }
    }
;
    graphDbInstance.start(graphDbService,extensionLoader);
    nodeManager=config.getGraphDbModule().getNodeManager();
    extensionLoader.load();
    started=true;
  }
 catch (  Error cause) {
    msgLog.logMessage("Startup failed",cause);
    throw cause;
  }
catch (  RuntimeException cause) {
    msgLog.logMessage("Startup failed",cause);
    throw cause;
  }
 finally {
    if (!started)     extensions.shutdown(msgLog);
  }
}
