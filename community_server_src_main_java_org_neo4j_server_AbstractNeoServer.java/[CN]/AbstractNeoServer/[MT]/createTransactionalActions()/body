{
  final int timeout=configurator.configuration().getInt(TRANSACTION_TIMEOUT,DEFAULT_TRANSACTION_TIMEOUT);
  final RealClock clock=new RealClock();
  transactionRegistry=new TimeoutEvictingTransactionRegistry(clock,logging.getLogger(TransactionRegistry.class));
  resolveDependency(JobScheduler.class).scheduleRecurring(new Runnable(){
    @Override public void run(){
      long maxAge=clock.currentTimeInMilliseconds() - (1000 * timeout);
      transactionRegistry.evictAllIdleSince(maxAge);
    }
  }
,round(timeout / 2.0),SECONDS);
  return new TransactionalActions(new TransitionalPeriodTransactionMessContainer(database.getGraph()),new ExecutionEngine(database.getGraph()),transactionRegistry,logging.getLogger(TransactionalActions.class));
}
