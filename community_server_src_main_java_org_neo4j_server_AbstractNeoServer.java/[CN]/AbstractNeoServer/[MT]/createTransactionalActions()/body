{
  final long timeoutMillis=getTransactionTimeoutMillis();
  final Clock clock=SYSTEM_CLOCK;
  transactionRegistry=new TransactionHandleRegistry(clock,timeoutMillis,dependencies.logging().getMessagesLog(TransactionRegistry.class));
  long runEvery=round(timeoutMillis / 2.0);
  resolveDependency(JobScheduler.class).scheduleRecurring(serverTransactionTimeout,new Runnable(){
    @Override public void run(){
      long maxAge=clock.currentTimeMillis() - timeoutMillis;
      transactionRegistry.rollbackSuspendedTransactionsIdleSince(maxAge);
    }
  }
,runEvery,MILLISECONDS);
  return new TransactionFacade(new TransitionalPeriodTransactionMessContainer(database.getGraph()),new ServerExecutionEngine(database.getGraph(),dependencies.logging().getMessagesLog(ExecutionEngine.class)),transactionRegistry,baseUri(),dependencies.logging().getMessagesLog(TransactionFacade.class));
}
