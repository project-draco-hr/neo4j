{
  final Barrier.Control barrier=new Barrier.Control();
  final Node node;
  try (Transaction tx=db.beginTx()){
    node=db.createNode();
    node.setProperty("key",true);
    tx.success();
  }
   Future<Void> future=t2.execute(new WorkerCommand<Void,Void>(){
    @Override public Void doWork(    Void state) throws Exception {
      try (Transaction tx=db.beginTx()){
        Object key=node.removeProperty("key");
        tx.success();
        barrier.reached();
      }
       return null;
    }
  }
);
  try (Transaction tx=db.beginTx()){
    barrier.await();
    node.setProperty("key",false);
    tx.success();
    barrier.release();
  }
   future.get();
  try (Transaction tx=db.beginTx()){
    assertFalse((Boolean)node.getProperty("key",false));
    tx.success();
  }
 }
