{
  if (started) {
    throw new IllegalStateException("Neo4j instance already started");
  }
  Map<Object,Object> params=config.getParams();
  boolean useMemoryMapped=Boolean.parseBoolean((String)config.getInputParams().get(Config.USE_MEMORY_MAPPED_BUFFERS));
  boolean dumpToConsole=Boolean.parseBoolean((String)config.getInputParams().get(Config.DUMP_CONFIGURATION));
  storeDir=FileUtils.fixSeparatorsInPath(storeDir);
  StringLogger logger=graphDb.getMessageLog();
  AutoConfigurator autoConfigurator=new AutoConfigurator(storeDir,useMemoryMapped,dumpToConsole);
  autoConfigurator.configure(subset(config.getInputParams(),Config.USE_MEMORY_MAPPED_BUFFERS));
  String separator=System.getProperty("file.separator");
  String store=storeDir + separator + NeoStore.DEFAULT_NAME;
  params.put("store_dir",storeDir);
  params.put("neo_store",store);
  params.put("create",String.valueOf(create));
  String logicalLog=storeDir + separator + NeoStoreXaDataSource.LOGICAL_LOG_DEFAULT_NAME;
  params.put("logical_log",logicalLog);
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  kernelExtensionLoader.configureKernelExtensions();
  config.getTxModule().registerDataSource(Config.DEFAULT_DATA_SOURCE_NAME,Config.NIO_NEO_DB_CLASS,NeoStoreXaDataSource.BRANCH_ID,params);
  if (!config.isReadOnly() || config.isBackupSlave()) {
    try {
      Class clazz=Class.forName(Config.LUCENE_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + File.separator + "lucene");
      byte luceneId[]=UTF8.encode("162373");
      registerLuceneDataSource("lucene",clazz.getName(),config.getTxModule(),storeDir + File.separator + "lucene",config.getLockManager(),luceneId,params);
    }
 catch (    ClassNotFoundException e) {
    }
catch (    NoClassDefFoundError err) {
    }
    try {
      Class clazz=Class.forName(Config.LUCENE_FULLTEXT_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + File.separator + "lucene-fulltext");
      byte[] luceneId=UTF8.encode("262374");
      registerLuceneDataSource("lucene-fulltext",clazz.getName(),config.getTxModule(),storeDir + File.separator + "lucene-fulltext",config.getLockManager(),luceneId,params);
    }
 catch (    ClassNotFoundException e) {
    }
catch (    NoClassDefFoundError err) {
    }
  }
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setPersistenceSource(Config.DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getGraphDbModule().init();
  kernelExtensionLoader.initializeIndexProviders();
  config.getTxModule().start();
  config.getPersistenceModule().start(config.getTxModule().getTxManager(),persistenceSource,config.getSyncHookFactory(),config.getLockReleaser());
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getGraphDbModule().start(config.getLockReleaser(),config.getPersistenceModule().getPersistenceManager(),config.getRelationshipTypeCreator(),params);
  started=true;
  KernelDiagnostics.register(config.getDiagnosticsManager(),graphDb,(NeoStoreXaDataSource)persistenceSource.getXaDataSource());
  config.getDiagnosticsManager().startup();
  return Collections.unmodifiableMap(params);
}
