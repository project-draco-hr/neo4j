{
  return new Configuration(){
    @Override public boolean clusterDiscoveryEnabled(){
      return config.get(ClusterSettings.cluster_discovery_enabled);
    }
    @Override public List<HostnamePort> getInitialHosts(){
      return config.get(ClusterSettings.initial_hosts);
    }
    @Override public String getDiscoveryUrl(){
      return config.get(ClusterSettings.cluster_discovery_url);
    }
    @Override public String getClusterName(){
      return config.get(ClusterSettings.cluster_name);
    }
    @Override public HostnamePort getAddress(){
      return config.get(ClusterSettings.cluster_server);
    }
    @Override public boolean isAllowedToCreateCluster(){
      return config.get(ClusterSettings.allow_init_cluster);
    }
    @Override public long defaultTimeout(){
      return config.get(ClusterSettings.default_timeout);
    }
    @Override public long heartbeatTimeout(){
      return config.get(ClusterSettings.heartbeat_timeout);
    }
    @Override public long heartbeatInterval(){
      return config.get(ClusterSettings.heartbeat_interval);
    }
    @Override public long joinTimeout(){
      return config.get(ClusterSettings.join_timeout);
    }
    @Override public long configurationTimeout(){
      return config.get(ClusterSettings.configuration_timeout);
    }
    @Override public long leaveTimeout(){
      return config.get(ClusterSettings.leave_timeout);
    }
    @Override public long electionTimeout(){
      return config.get(ClusterSettings.election_timeout);
    }
    @Override public long broadcastTimeout(){
      return config.get(ClusterSettings.broadcast_timeout);
    }
    @Override public long paxosTimeout(){
      return config.get(ClusterSettings.paxos_timeout);
    }
    @Override public long phase1Timeout(){
      return config.get(ClusterSettings.phase1_timeout);
    }
    @Override public long phase2Timeout(){
      return config.get(ClusterSettings.phase2_timeout);
    }
    @Override public long learnTimeout(){
      return config.get(ClusterSettings.learn_timeout);
    }
  }
;
}
