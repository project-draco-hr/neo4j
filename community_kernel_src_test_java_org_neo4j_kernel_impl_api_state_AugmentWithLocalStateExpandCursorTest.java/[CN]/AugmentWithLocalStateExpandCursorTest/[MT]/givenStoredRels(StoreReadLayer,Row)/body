{
  when(store.expand(any(Cursor.class),any(NeoRegister.Node.In.class),any(Register.Object.In.class),any(Register.Object.In.class),any(NeoRegister.Relationship.Out.class),any(NeoRegister.RelType.Out.class),any(Register.Object.Out.class),any(NeoRegister.Node.Out.class),any(NeoRegister.Node.Out.class))).thenAnswer(new Answer<Cursor>(){
    @Override public Cursor answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      final Cursor input=(Cursor)args[0];
      final NeoRegister.Relationship.Out relId=(NeoRegister.Relationship.Out)args[4];
      final NeoRegister.RelType.Out relType=(NeoRegister.RelType.Out)args[5];
      final Register.Object.Out<Direction> direction=(Register.Object.Out<Direction>)args[6];
      final NeoRegister.Node.Out startNodeId=(NeoRegister.Node.Out)args[7];
      final NeoRegister.Node.Out neighborNodeId=(NeoRegister.Node.Out)args[8];
      return new Cursor(){
        private Iterator<Row> rowIter=Iterators.empty();
        @Override public boolean next(){
          if (rowIter.hasNext()) {
            Row next=rowIter.next();
            relId.write(next.relId);
            relType.write(next.type);
            direction.write(next.direction);
            startNodeId.write(next.startId);
            neighborNodeId.write(next.neighborId);
            return true;
          }
 else {
            if (input.next()) {
              rowIter=asList(rows).iterator();
              return next();
            }
 else {
              return false;
            }
          }
        }
        @Override public void reset(){
          rowIter=Iterators.empty();
        }
        @Override public void close(){
        }
      }
;
    }
  }
);
}
