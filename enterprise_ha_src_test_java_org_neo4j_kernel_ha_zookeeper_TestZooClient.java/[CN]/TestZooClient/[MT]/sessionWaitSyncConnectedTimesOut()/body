{
  final long secondsForSessionToExpire=1;
  Map<String,String> stringConfig=new HashMap<String,String>();
  stringConfig.put(HaConfig.CONFIG_KEY_COORDINATORS,"localhost:2181");
  stringConfig.put(HaConfig.CONFIG_KEY_SERVER_ID,"1");
  stringConfig.put(HaConfig.CONFIG_KEY_ZK_SESSION_TIMEOUT,Long.toString(secondsForSessionToExpire));
  Config config=new Config(StringLogger.DEV_NULL,new DefaultFileSystemAbstraction(),stringConfig,Iterables.iterable(OnlineBackupSettings.class,GraphDatabaseSettings.class,HaSettings.class));
  ZooClient client=new ZooClient("",StringLogger.SYSTEM,null,config,null,DummyClusterReceiver);
  final Thread me=Thread.currentThread();
  final AtomicBoolean allOk=new AtomicBoolean(false);
  Thread wakeMeUp=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep((secondsForSessionToExpire * 1000) * 2);
        if (!allOk.get()) {
          me.interrupt();
        }
      }
 catch (      Exception e) {
        if (!allOk.get()) {
          throw new RuntimeException(e);
        }
        Thread.interrupted();
      }
    }
  }
);
  wakeMeUp.setDaemon(true);
  wakeMeUp.start();
  try {
    client.waitForSyncConnected();
    fail("There is no zookeeper here, it should time out within a session timeout");
  }
 catch (  ZooKeeperTimedOutException success) {
    allOk.set(true);
  }
  wakeMeUp.interrupt();
  wakeMeUp.join();
}
