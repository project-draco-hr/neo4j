{
  Xid xid=new XidImpl(new byte[1],new byte[1]);
  XAResource xaRes=xaCon.getXaResource();
  xaRes.start(xid,XAResource.TMNOFLAGS);
  int node1=ds.nextId(Node.class);
  xaCon.getNodeConsumer().createNode(node1);
  int node2=ds.nextId(Node.class);
  xaCon.getNodeConsumer().createNode(node2);
  int n1prop1=ds.nextId(PropertyStore.class);
  xaCon.getNodeConsumer().addProperty(node1,n1prop1,index("prop1"),"string1");
  xaCon.getNodeConsumer().getProperties(node1);
  int relType1=ds.nextId(RelationshipType.class);
  xaCon.getRelationshipTypeConsumer().addRelationshipType(relType1,"relationshiptype1");
  int rel1=ds.nextId(Relationship.class);
  xaCon.getRelationshipConsumer().createRelationship(rel1,node1,node2,relType1);
  int r1prop1=ds.nextId(PropertyStore.class);
  xaCon.getRelationshipConsumer().addProperty(rel1,r1prop1,index("prop1"),"string1");
  xaCon.getNodeConsumer().changeProperty(node1,n1prop1,"string2");
  xaCon.getRelationshipConsumer().changeProperty(rel1,r1prop1,"string2");
  xaCon.getNodeConsumer().removeProperty(node1,n1prop1);
  xaCon.getRelationshipConsumer().removeProperty(rel1,r1prop1);
  xaCon.getRelationshipConsumer().deleteRelationship(rel1);
  xaCon.getNodeConsumer().deleteNode(node1);
  xaCon.getNodeConsumer().deleteNode(node2);
  xaRes.end(xid,XAResource.TMSUCCESS);
  xaRes.commit(xid,true);
  copyLogicalLog();
  xaCon.clearAllTransactions();
  ds.close();
  deleteLogicalLogIfExist();
  renameCopiedLogicalLog();
  ds=new NeoStoreXaDataSource(file("neo"),file("nioneo_logical.log"),lockManager,lockReleaser);
  xaCon=(NeoStoreXaConnection)ds.getXaConnection();
  xaRes=xaCon.getXaResource();
  assertEquals(0,xaRes.recover(XAResource.TMNOFLAGS).length);
  xaCon.clearAllTransactions();
}
