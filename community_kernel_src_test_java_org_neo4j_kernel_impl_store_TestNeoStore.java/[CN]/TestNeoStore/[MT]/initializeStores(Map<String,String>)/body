{
  final Config config=new Config(MapUtil.stringMap(additionalConfig,InternalAbstractGraphDatabase.Configuration.store_dir.name(),path.getPath(),InternalAbstractGraphDatabase.Configuration.neo_store.name(),"neo"),GraphDatabaseSettings.class);
  EphemeralFileSystemAbstraction fs=this.fs.get();
  Monitors monitors=new Monitors();
  StoreFactory sf=new StoreFactory(config,new DefaultIdGeneratorFactory(),pageCache,fs,StringLogger.DEV_NULL,monitors);
  KernelHealth kernelHealth=mock(KernelHealth.class);
  Locks locks=mock(Locks.class);
  Locks.Client lockClient=mock(Locks.Client.class);
  TransactionHeaderInformation headerInformation=new TransactionHeaderInformation(-1,1,new byte[0]);
  when(locks.newClient()).thenReturn(lockClient);
  DefaultCaches caches=new DefaultCaches(StringLogger.DEV_NULL,new Monitors());
  caches.configure(new NoCacheProvider(),config);
  NodeManager nodeManager=new NodeManager(null,null,new ThreadToStatementContextBridge());
  ds=new NeoStoreDataSource(config,sf,StringLogger.DEV_NULL,null,DevNullLoggingService.DEV_NULL,new KernelSchemaStateStore(),mock(TokenNameLookup.class),dependencyResolverForNoIndexProvider(),mock(PropertyKeyTokenHolder.class),mock(LabelTokenHolder.class),mock(RelationshipTypeTokenHolder.class),locks,mock(SchemaWriteGuard.class),mock(TransactionEventHandlers.class),IndexingService.NO_MONITOR,fs,mock(StoreUpgrader.class),mock(TransactionMonitor.class),kernelHealth,TransactionHeaderInformationFactory.DEFAULT,new StartupStatisticsProvider(),caches,nodeManager,null,null,InternalAbstractGraphDatabase.defaultCommitProcessFactory);
  ds.init();
  ds.start();
  NeoStore neoStore=ds.evaluate();
  pStore=neoStore.getPropertyStore();
  rtStore=neoStore.getRelationshipTypeTokenStore();
  storeLayer=ds.getStoreLayer();
  relationshipLoader=new RelationshipChainLoader(neoStore);
  propertyLoader=new PropertyLoader(neoStore);
}
