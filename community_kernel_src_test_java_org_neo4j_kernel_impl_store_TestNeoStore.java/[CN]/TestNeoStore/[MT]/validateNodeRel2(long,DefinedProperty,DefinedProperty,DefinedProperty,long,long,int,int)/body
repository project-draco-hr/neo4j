{
  assertTrue(storeLayer.nodeExists(node));
  ArrayMap<Integer,Pair<DefinedProperty,Long>> props=new ArrayMap<>();
  propertyLoader.nodeLoadProperties(node,newPropertyReceiver(props));
  int count=0;
  for (  int keyId : props.keySet()) {
    long id=props.get(keyId).other();
    PropertyRecord record=pStore.getRecord(id);
    PropertyBlock block=record.getPropertyBlock(props.get(keyId).first().propertyKeyId());
    DefinedProperty data=block.newPropertyData(pStore);
    if (data.propertyKeyId() == prop1.propertyKeyId()) {
      assertEquals("prop1",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals("string2",data.value());
      transaction.nodeChangeProperty(node,prop1.propertyKeyId(),"-string2");
    }
 else     if (data.propertyKeyId() == prop2.propertyKeyId()) {
      assertEquals("prop2",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(2,data.value());
      transaction.nodeChangeProperty(node,prop2.propertyKeyId(),new Integer(-2));
    }
 else     if (data.propertyKeyId() == prop3.propertyKeyId()) {
      assertEquals("prop3",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(false,data.value());
      transaction.nodeChangeProperty(node,prop3.propertyKeyId(),true);
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  count=0;
  PrimitiveLongIterator relationships=storeLayer.nodeListRelationships(((KernelStatement)tx.acquireStatement()).getStoreStatement(),node,Direction.BOTH);
  while (relationships.hasNext()) {
    long rel=relationships.next();
    if (rel == rel1) {
      storeLayer.relationshipVisit(rel,new RelationshipVisitor<RuntimeException>(){
        @Override public void visit(        long relId,        int type,        long startNode,        long endNode) throws RuntimeException {
          assertEquals(node,endNode);
          assertEquals(relType1,type);
        }
      }
);
    }
 else     if (rel == rel2) {
      storeLayer.relationshipVisit(rel,new RelationshipVisitor<RuntimeException>(){
        @Override public void visit(        long relId,        int type,        long startNode,        long endNode) throws RuntimeException {
          assertEquals(node,startNode);
          assertEquals(relType2,type);
        }
      }
);
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(2,count);
}
