{
  final int MIN_SIZE=50;
  final int BELOW_MIN_SIZE=MIN_SIZE / 5;
  final int MAX_SIZE=200;
  StatefulMonitor stateMonitor=new StatefulMonitor();
  FakeClock clock=new FakeClock();
  final LinkedQueuePool<Object> pool=getLinkedQueuePool(stateMonitor,clock,MIN_SIZE);
  List<FlyweightHolder<Object>> holders=new LinkedList<>();
  buildAPeakOfAcquiredFlyweightsAndTriggerAlarmWithSideEffects(MAX_SIZE,clock,pool,holders);
  clock.forward(110,TimeUnit.MILLISECONDS);
  for (int i=0; i < 30; i++) {
    for (    FlyweightHolder holder : acquireFromPool(pool,BELOW_MIN_SIZE)) {
      holder.release();
    }
    clock.forward(110,TimeUnit.MILLISECONDS);
  }
  assertTrue("Expected " + stateMonitor.currentPeakSize.get() + " <= "+ BELOW_MIN_SIZE,stateMonitor.currentPeakSize.get() <= BELOW_MIN_SIZE);
  assertEquals(MIN_SIZE,stateMonitor.targetSize.get());
  assertEquals(MAX_SIZE - MIN_SIZE + 1,stateMonitor.disposed.get());
  stateMonitor.created.set(0);
  stateMonitor.disposed.set(0);
  holders.addAll(acquireFromPool(pool,MAX_SIZE));
  assertEquals(MAX_SIZE - MIN_SIZE,stateMonitor.created.get());
  assertEquals(0,stateMonitor.disposed.get());
}
