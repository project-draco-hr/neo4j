{
  BatchingPropertyRecordAccess propertyRecords=new BatchingPropertyRecordAccess();
  List<NodeRecord> nodeRecords=new ArrayList<>(batch.size());
  for (  InputNode batchNode : batch) {
    long nodeId=idGenerator.generate(batchNode.id());
    idMapper.put(batchNode.id(),nodeId);
    NodeRecord nodeRecord=new NodeRecord(nodeId,false,NO_NEXT_RELATIONSHIP.intValue(),NO_NEXT_PROPERTY.intValue());
    nodeRecord.setInUse(true);
    nodeRecords.add(nodeRecord);
    long nextProp;
    if (batchNode.hasFirstPropertyId()) {
      nextProp=batchNode.firstPropertyId();
    }
 else {
      nextProp=propertyCreator.createPropertyChain(nodeRecord,propertyKeysAndValues(batchNode.properties(),propertyKeyHolder,propertyCreator),propertyRecords);
    }
    nodeRecord.setNextProp(nextProp);
    if (batchNode.hasLabelField()) {
      nodeRecord.setLabelField(batchNode.labelField(),Collections.<DynamicRecord>emptyList());
    }
 else {
      long[] labels=Utils.labelNamesToIds(labelHolder,batchNode.labels());
      InlineNodeLabels.put(nodeRecord,labels,null,nodeStore.getDynamicLabelStore());
    }
  }
  return new RecordBatch<>(nodeRecords,propertyRecords.records());
}
