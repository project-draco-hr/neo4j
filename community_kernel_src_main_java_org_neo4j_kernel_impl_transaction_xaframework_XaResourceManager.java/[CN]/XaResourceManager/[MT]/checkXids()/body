{
  msgLog.logMessage("XaResourceManager[" + name + "] sorting "+ xidMap.size()+ " xids");
  Iterator<Xid> keyIterator=xidMap.keySet().iterator();
  LinkedList<Xid> xids=new LinkedList<>();
  while (keyIterator.hasNext()) {
    xids.add(keyIterator.next());
  }
  Collections.sort(xids,new Comparator<Xid>(){
    @Override public int compare(    Xid o1,    Xid o2){
      TransactionStatus a=xidMap.get(o1).txStatus;
      TransactionStatus b=xidMap.get(o2).txStatus;
      return a.compareTo(b);
    }
  }
);
  while (!xids.isEmpty()) {
    Xid xid=xids.removeFirst();
    XidStatus status=xidMap.get(xid);
    TransactionStatus txStatus=status.getTransactionStatus();
    XaTransaction xaTransaction=txStatus.getTransaction();
    int identifier=xaTransaction.getIdentifier();
    if (xaTransaction.isRecovered()) {
      if (txStatus.commitStarted()) {
        msgLog.debug("Marking 1PC [" + name + "] tx "+ identifier+ " as done");
        log.doneInternal(identifier);
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else       if (!txStatus.prepared()) {
        msgLog.debug("Rolling back non prepared tx [" + name + "]"+ "txIdent["+ identifier+ "]");
        log.doneInternal(xaTransaction.getIdentifier());
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else {
        msgLog.debug("2PC tx [" + name + "] "+ txStatus+ " txIdent["+ identifier+ "]");
      }
    }
  }
  checkIfRecoveryComplete();
}
