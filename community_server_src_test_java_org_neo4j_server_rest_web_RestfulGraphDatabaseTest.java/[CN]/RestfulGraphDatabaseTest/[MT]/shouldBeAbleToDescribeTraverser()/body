{
  long startNode=helper.createNode(MapUtil.map("name","Mattias"));
  long node1=helper.createNode(MapUtil.map("name","Emil"));
  long node2=helper.createNode(MapUtil.map("name","Johan"));
  long node3=helper.createNode(MapUtil.map("name","Tobias"));
  helper.createRelationship("knows",startNode,node1);
  helper.createRelationship("knows",startNode,node2);
  helper.createRelationship("knows",node1,node3);
  String description="{" + "\"prune_evaluator\":{\"language\":\"builtin\",\"name\":\"none\"}," + "\"return_filter\":{\"language\":\"javascript\",\"body\":\"position.endNode().getProperty('name')"+ ".toLowerCase().contains('t');\"},"+ "\"order\":\"depth_first\","+ "\"relationships\":{\"type\":\"knows\",\"direction\":\"all\"}"+ "}";
  Response response=service.traverse(startNode,TraverserReturnType.node,description);
  assertEquals(Status.OK.getStatusCode(),response.getStatus());
  String entity=entityAsString(response);
  assertTrue(entity.contains(NODE_SUBPATH + startNode));
  assertFalse(entity.contains(NODE_SUBPATH + node1));
  assertFalse(entity.contains(NODE_SUBPATH + node2));
  assertTrue(entity.contains(NODE_SUBPATH + node3));
}
