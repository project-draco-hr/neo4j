{
  File workingDirectory=directory.directory("working");
  File prepareDirectory=directory.directory("prepare");
  MigrationTestUtils.prepareSampleLegacyDatabase(version,fileSystem,workingDirectory,prepareDirectory);
  PageCache pageCache=pageCacheRule.getPageCache(fileSystem);
  UpgradableDatabase upgradableDatabase=new UpgradableDatabase(new StoreVersionCheck(pageCache));
  SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
  LogService logService=NullLogService.getInstance();
  final Config config=new Config();
  StoreMigrator failingStoreMigrator=new StoreMigrator(progressMonitor,fileSystem,pageCache,upgradableDatabase,config,logService){
    @Override public void migrate(    File sourceStoreDir,    File targetStoreDir,    SchemaIndexProvider schemaIndexProvider) throws IOException {
      super.migrate(sourceStoreDir,targetStoreDir,schemaIndexProvider);
      throw new RuntimeException("This upgrade is failing");
    }
  }
;
  assertTrue(allStoreFilesHaveVersion(fileSystem,workingDirectory,version));
  try {
    newUpgrader(failingStoreMigrator).migrateIfNeeded(workingDirectory,schemaIndexProvider);
    fail("Should throw exception");
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    assertEquals("This upgrade is failing",e.getMessage());
  }
  assertTrue(allStoreFilesHaveVersion(fileSystem,workingDirectory,version));
  upgradableDatabase=new UpgradableDatabase(new StoreVersionCheck(pageCache));
  progressMonitor=new SilentMigrationProgressMonitor();
  StoreMigrator migrator=new StoreMigrator(progressMonitor,fileSystem,pageCache,upgradableDatabase,config,logService);
  newUpgrader(migrator).migrateIfNeeded(workingDirectory,schemaIndexProvider);
  assertTrue(allStoreFilesHaveVersion(fileSystem,workingDirectory,ALL_STORES_VERSION));
  assertConsistentStore(workingDirectory);
}
