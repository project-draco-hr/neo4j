{
  File workingDirectory=directory.directory("working");
  File prepareDirectory=directory.directory("prepare");
  MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,workingDirectory,prepareDirectory);
  PageCache pageCache=pageCacheRule.getPageCache(fs);
  StoreVersionCheck check=new StoreVersionCheck(pageCache);
  UpgradableDatabase upgradableDatabase=new UpgradableDatabase(fs,check,new LegacyStoreVersionCheck(fs));
  SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
  LogService logService=NullLogService.getInstance();
  final Config config=Config.empty();
  StoreMigrator failingStoreMigrator=new StoreMigrator(fs,pageCache,config,logService,schemaIndexProvider){
    @Override public void moveMigratedFiles(    File migrationDir,    File storeDir,    String versionToUpgradeFrom) throws IOException {
      super.moveMigratedFiles(migrationDir,storeDir,versionToUpgradeFrom);
      throw new RuntimeException("This upgrade is failing");
    }
  }
;
  assertEquals(!Legacy23Store.LEGACY_VERSION.equals(version),allLegacyStoreFilesHaveVersion(fs,workingDirectory,version));
  try {
    newUpgrader(upgradableDatabase,progressMonitor,createIndexMigrator(),failingStoreMigrator).migrateIfNeeded(workingDirectory);
    fail("Should throw exception");
  }
 catch (  RuntimeException e) {
    assertEquals("This upgrade is failing",e.getMessage());
  }
  assertTrue(checkNeoStoreHasLatestVersion(check,workingDirectory));
  assertTrue(allStoreFilesHaveNoTrailer(fs,workingDirectory));
  assertConsistentStore(workingDirectory);
  progressMonitor=new SilentMigrationProgressMonitor();
  StoreMigrator migrator=new StoreMigrator(fs,pageCache,config,logService,schemaIndexProvider);
  newUpgrader(upgradableDatabase,progressMonitor,createIndexMigrator(),migrator).migrateIfNeeded(workingDirectory);
  assertTrue(checkNeoStoreHasLatestVersion(check,workingDirectory));
  assertTrue(allStoreFilesHaveNoTrailer(fs,workingDirectory));
  pageCache.close();
  assertConsistentStore(workingDirectory);
}
