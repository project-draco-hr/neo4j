{
  int iterations=3;
  ArrayList<Node> nodes=new ArrayList<>(nodeSet.size());
  for (  Node node : nodeSet) {
    nodes.add(node);
  }
  DoubleMatrix hMatrix=new DoubleMatrix();
  DoubleMatrix qMatrix=new DoubleMatrix();
  for (int i=0; i < nodes.size(); ++i) {
    qMatrix.set(0,i,values.get(nodes.get(i)));
  }
  int localIterations=1;
  while (true) {
    incrementTotalIterations();
    Map<Node,Double> newValues=processRelationships();
    for (int j=0; j < localIterations; ++j) {
      DoubleVector qj=qMatrix.getRow(j);
      double product=0;
      for (int i=0; i < nodes.size(); ++i) {
        Double d1=newValues.get(nodes.get(i));
        Double d2=qj.get(i);
        if (d1 != null && d2 != null) {
          product+=d1 * d2;
        }
      }
      hMatrix.set(j,localIterations - 1,product);
      if (product != 0.0) {
        for (int i=0; i < nodes.size(); ++i) {
          Node node=nodes.get(i);
          Double value=newValues.get(node);
          if (value == null) {
            value=0.0;
          }
          Double qValue=qj.get(i);
          if (qValue != null) {
            newValues.put(node,value - product * qValue);
          }
        }
      }
    }
    double normalizeFactor=normalize(newValues);
    values=newValues;
    DoubleVector qVector=new DoubleVector();
    for (int i=0; i < nodes.size(); ++i) {
      Node key=nodes.get(i);
      Double value=newValues.get(key);
      if (value != null) {
        qVector.set(i,value);
      }
    }
    qMatrix.setRow(localIterations,qVector);
    if (normalizeFactor == 0.0 || localIterations >= nodeSet.size() || localIterations >= iterations) {
      break;
    }
    hMatrix.set(localIterations,localIterations - 1,normalizeFactor);
    ++localIterations;
  }
  Random random=new Random(System.currentTimeMillis());
  DoubleVector vector=new DoubleVector();
  for (int i=0; i < nodeSet.size(); ++i) {
    vector.set(i,random.nextDouble());
  }
  MatrixUtil.normalize(vector);
  boolean powerDone=false;
  int its=0;
  double powerPrecision=0.1;
  while (!powerDone) {
    DoubleVector newVector=MatrixUtil.multiply(hMatrix,vector);
    MatrixUtil.normalize(newVector);
    powerDone=true;
    for (    Integer index : vector.getIndices()) {
      if (newVector.get(index) == null) {
        continue;
      }
      double factor=Math.abs(newVector.get(index) / vector.get(index));
      if (factor - powerPrecision > 1.0 || factor + powerPrecision < 1.0) {
        powerDone=false;
        break;
      }
    }
    vector=newVector;
    ++its;
    if (its > 100) {
      break;
    }
  }
  DoubleVector ritzVector=new DoubleVector();
  for (int r=0; r < nodeSet.size(); ++r) {
    for (int c=0; c < localIterations; ++c) {
      ritzVector.incrementValue(r,vector.get(c) * qMatrix.get(c,r));
    }
  }
  for (int i=0; i < nodeSet.size(); ++i) {
    values.put(nodes.get(i),ritzVector.get(i));
  }
  normalize(values);
  return localIterations;
}
