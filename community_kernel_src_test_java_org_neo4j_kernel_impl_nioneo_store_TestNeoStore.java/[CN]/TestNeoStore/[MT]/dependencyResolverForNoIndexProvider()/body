{
  return new DependencyResolver.Adapter(){
    private final LabelScanStoreProvider labelScanStoreProvider=new LabelScanStoreProvider(new InMemoryLabelScanStore(),10);
    @Override public <T>T resolveDependency(    Class<T> type,    SelectionStrategy selector) throws IllegalArgumentException {
      if (SchemaIndexProvider.class.isAssignableFrom(type)) {
        return type.cast(SchemaIndexProvider.NO_INDEX_PROVIDER);
      }
 else       if (LabelScanStoreProvider.class.isAssignableFrom(type)) {
        return type.cast(labelScanStoreProvider);
      }
      throw new IllegalArgumentException(type.toString());
    }
  }
;
}
