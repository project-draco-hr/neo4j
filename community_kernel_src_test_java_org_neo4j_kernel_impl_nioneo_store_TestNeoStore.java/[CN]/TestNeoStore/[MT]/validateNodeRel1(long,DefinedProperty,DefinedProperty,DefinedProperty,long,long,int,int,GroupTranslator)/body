{
  NodeRecord nodeRecord=xaCon.getTransaction().nodeLoadLight(node);
  assertTrue(nodeRecord != null);
  ArrayMap<Integer,Pair<DefinedProperty,Long>> props=new ArrayMap<>();
  PropertyReceiver receiver=newPropertyReceiver(props);
  xaCon.getTransaction().nodeLoadProperties(node,false,receiver);
  int count=0;
  for (  int keyId : props.keySet()) {
    long id=props.get(keyId).other();
    PropertyRecord record=pStore.getRecord(id);
    PropertyBlock block=record.getPropertyBlock(props.get(keyId).first().propertyKeyId());
    DefinedProperty data=block.newPropertyData(pStore);
    if (data.propertyKeyId() == prop1.propertyKeyId()) {
      assertEquals("prop1",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals("string1",data.value());
      xaCon.getTransaction().nodeChangeProperty(node,prop1.propertyKeyId(),"-string1");
    }
 else     if (data.propertyKeyId() == prop2.propertyKeyId()) {
      assertEquals("prop2",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(1,data.value());
      xaCon.getTransaction().nodeChangeProperty(node,prop2.propertyKeyId(),new Integer(-1));
    }
 else     if (data.propertyKeyId() == prop3.propertyKeyId()) {
      assertEquals("prop3",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(true,data.value());
      xaCon.getTransaction().nodeChangeProperty(node,prop3.propertyKeyId(),false);
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  count=0;
  MutableRelationshipLoadingPosition pos=getPosition(xaCon,node,groupTranslator);
  while (true) {
    Iterable<RelationshipRecord> relData=getMore(xaCon,node,pos);
    if (!relData.iterator().hasNext()) {
      break;
    }
    for (    RelationshipRecord rel : relData) {
      if (rel.getId() == rel1) {
        assertEquals(node,rel.getFirstNode());
        assertEquals(relType1,rel.getType());
      }
 else       if (rel.getId() == rel2) {
        assertEquals(node,rel.getSecondNode());
        assertEquals(relType2,rel.getType());
      }
 else {
        throw new IOException();
      }
      count++;
    }
  }
  assertEquals(2,count);
}
