{
  ArrayMap<Integer,Pair<DefinedProperty,Long>> props=new ArrayMap<>();
  xaCon.getWriteTransaction().relLoadProperties(rel,false,newPropertyReceiver(props));
  int count=0;
  for (  int keyId : props.keySet()) {
    long id=props.get(keyId).other();
    PropertyRecord record=pStore.getRecord(id);
    PropertyBlock block=record.getPropertyBlock(props.get(keyId).first().propertyKeyId());
    DefinedProperty data=block.newPropertyData(pStore);
    if (data.propertyKeyId() == prop1.propertyKeyId()) {
      assertEquals("prop1",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals("-string2",data.value());
    }
 else     if (data.propertyKeyId() == prop2.propertyKeyId()) {
      assertEquals("prop2",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(-2,data.value());
    }
 else     if (data.propertyKeyId() == prop3.propertyKeyId()) {
      assertEquals("prop3",MyPropertyKeyToken.getIndexFor(keyId).name());
      assertEquals(true,data.value());
      xaCon.getWriteTransaction().relRemoveProperty(rel,prop3.propertyKeyId());
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  CountingPropertyReceiver propertyCounter=new CountingPropertyReceiver();
  xaCon.getWriteTransaction().relLoadProperties(rel,false,propertyCounter);
  assertEquals(3,propertyCounter.count);
  RelationshipRecord relData=xaCon.getWriteTransaction().relLoadLight(rel);
  assertEquals(firstNode,relData.getFirstNode());
  assertEquals(secondNode,relData.getSecondNode());
  assertEquals(relType,relData.getType());
  xaCon.getWriteTransaction().relDelete(rel);
  AtomicLong firstPos=getPosition(xaCon,firstNode);
  Iterator<RelationshipRecord> first=getMore(xaCon,firstNode,firstPos).iterator();
  AtomicLong secondPos=getPosition(xaCon,secondNode);
  Iterator<RelationshipRecord> second=getMore(xaCon,secondNode,secondPos).iterator();
  assertTrue(first.hasNext());
  assertTrue(second.hasNext());
}
