{
  assertTrue(nStore.loadLightNode(node));
  ArrayMap<Integer,PropertyData> props=nStore.getProperties(node,false);
  int count=0;
  for (  int keyId : props.keySet()) {
    long id=props.get(keyId).getId();
    PropertyRecord record=pStore.getRecord(id);
    PropertyData data=new PropertyData(id,getValue(record));
    if (data.getId() == prop1) {
      assertEquals("prop1",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals("string2",data.getValue());
      nStore.changeProperty(node,prop1,"-string2");
    }
 else     if (data.getId() == prop2) {
      assertEquals("prop2",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals(new Integer(2),data.getValue());
      nStore.changeProperty(node,prop2,new Integer(-2));
    }
 else     if (data.getId() == prop3) {
      assertEquals("prop3",MyPropertyIndex.getIndexFor(keyId).getKey());
      assertEquals(new Boolean(false),data.getValue());
      nStore.changeProperty(node,prop3,new Boolean(true));
    }
 else {
      throw new IOException();
    }
    count++;
  }
  assertEquals(3,count);
  count=0;
  RelationshipChainPosition pos=rStore.getRelationshipChainPosition(node);
  while (true) {
    Iterable<RelationshipRecord> relData=both(rStore.getMoreRelationships(node,pos));
    if (!relData.iterator().hasNext()) {
      break;
    }
    for (    RelationshipRecord rel : relData) {
      if (rel.getId() == rel1) {
        assertEquals(node,rel.getSecondNode());
        assertEquals(relType1,rel.getType());
      }
 else       if (rel.getId() == rel2) {
        assertEquals(node,rel.getFirstNode());
        assertEquals(relType2,rel.getType());
      }
 else {
        throw new IOException();
      }
      count++;
    }
  }
  assertEquals(2,count);
}
