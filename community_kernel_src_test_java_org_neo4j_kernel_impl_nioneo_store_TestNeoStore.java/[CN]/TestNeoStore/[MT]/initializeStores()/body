{
  LockManager lockManager=new LockManagerImpl(new RagManager());
  final Config config=new Config(MapUtil.stringMap(InternalAbstractGraphDatabase.Configuration.store_dir.name(),path.getPath(),InternalAbstractGraphDatabase.Configuration.neo_store.name(),"neo",InternalAbstractGraphDatabase.Configuration.logical_log.name(),file("nioneo_logical.log").getPath()),GraphDatabaseSettings.class);
  EphemeralFileSystemAbstraction fs=this.fs.get();
  StoreFactory sf=new StoreFactory(config,new DefaultIdGeneratorFactory(),new DefaultWindowPoolFactory(),fs,StringLogger.DEV_NULL,null);
  NodeManager nodeManager=mock(NodeManager.class);
  @SuppressWarnings("rawtypes") List caches=Arrays.asList((Cache)mock(AutoLoadingCache.class),(Cache)mock(AutoLoadingCache.class));
  when(nodeManager.caches()).thenReturn(caches);
  Locks locks=mock(Locks.class);
  Locks.Client lockClient=mock(Locks.Client.class);
  when(locks.newClient()).thenReturn(lockClient);
  ds=new NeoStoreXaDataSource(config,sf,StringLogger.DEV_NULL,new XaFactory(config,TxIdGenerator.DEFAULT,new PlaceboTm(lockManager,TxIdGenerator.DEFAULT),fs,new Monitors(),new DevNullLoggingService(),RecoveryVerifier.ALWAYS_VALID,LogPruneStrategies.NO_PRUNING),new TransactionStateFactory(new DevNullLoggingService()),new TransactionInterceptorProviders(Collections.<TransactionInterceptorProvider>emptyList(),dependencyResolverForConfig(config)),null,new SingleLoggingService(DEV_NULL),new KernelSchemaStateStore(),mock(TokenNameLookup.class),dependencyResolverForNoIndexProvider(nodeManager),mock(AbstractTransactionManager.class),mock(PropertyKeyTokenHolder.class),mock(LabelTokenHolder.class),mock(RelationshipTypeTokenHolder.class),mock(PersistenceManager.class),locks,mock(SchemaWriteGuard.class),mock(TransactionEventHandlers.class),IndexingService.NO_MONITOR,fs,new Function<NeoStore,Function<List<LogEntry>,List<LogEntry>>>(){
    @Override public Function<List<LogEntry>,List<LogEntry>> apply(    NeoStore neoStore){
      return Functions.<List<LogEntry>>identity();
    }
  }
);
  ds.init();
  ds.start();
  xaCon=ds.getXaConnection();
  pStore=xaCon.getPropertyStore();
  rtStore=xaCon.getRelationshipTypeStore();
}
