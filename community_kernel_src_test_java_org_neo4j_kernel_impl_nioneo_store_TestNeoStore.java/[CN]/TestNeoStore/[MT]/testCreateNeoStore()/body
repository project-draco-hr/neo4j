{
  initializeStores();
  startTx();
  long node1=ds.nextId(Node.class);
  xaCon.getWriteTransaction().nodeCreate(node1);
  long node2=ds.nextId(Node.class);
  xaCon.getWriteTransaction().nodeCreate(node2);
  PropertyData n1prop1=xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop1"),"string1");
  PropertyData n1prop2=xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop2"),1);
  PropertyData n1prop3=xaCon.getWriteTransaction().nodeAddProperty(node1,index("prop3"),true);
  PropertyData n2prop1=xaCon.getWriteTransaction().nodeAddProperty(node2,index("prop1"),"string2");
  PropertyData n2prop2=xaCon.getWriteTransaction().nodeAddProperty(node2,index("prop2"),2);
  PropertyData n2prop3=xaCon.getWriteTransaction().nodeAddProperty(node2,index("prop3"),false);
  int relType1=(int)ds.nextId(RelationshipType.class);
  xaCon.getWriteTransaction().createRelationshipType(relType1,"relationshiptype1");
  int relType2=(int)ds.nextId(RelationshipType.class);
  xaCon.getWriteTransaction().createRelationshipType(relType2,"relationshiptype2");
  long rel1=ds.nextId(Relationship.class);
  xaCon.getWriteTransaction().relationshipCreate(rel1,relType1,node1,node2);
  long rel2=ds.nextId(Relationship.class);
  xaCon.getWriteTransaction().relationshipCreate(rel2,relType2,node2,node1);
  PropertyData r1prop1=xaCon.getWriteTransaction().relAddProperty(rel1,index("prop1"),"string1");
  PropertyData r1prop2=xaCon.getWriteTransaction().relAddProperty(rel1,index("prop2"),1);
  PropertyData r1prop3=xaCon.getWriteTransaction().relAddProperty(rel1,index("prop3"),true);
  PropertyData r2prop1=xaCon.getWriteTransaction().relAddProperty(rel2,index("prop1"),"string2");
  PropertyData r2prop2=xaCon.getWriteTransaction().relAddProperty(rel2,index("prop2"),2);
  PropertyData r2prop3=xaCon.getWriteTransaction().relAddProperty(rel2,index("prop3"),false);
  commitTx();
  ds.close();
  initializeStores();
  startTx();
  validateNodeRel1(node1,n1prop1,n1prop2,n1prop3,rel1,rel2,relType1,relType2);
  validateNodeRel2(node2,n2prop1,n2prop2,n2prop3,rel1,rel2,relType1,relType2);
  validateRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
  validateRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
  validateRelTypes(relType1,relType2);
  validateRelTypes(relType1,relType2);
  commitTx();
  ds.close();
  initializeStores();
  startTx();
  deleteRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
  deleteRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
  deleteNode1(node1,n1prop1,n1prop2,n1prop3);
  deleteNode2(node2,n2prop1,n2prop2,n2prop3);
  commitTx();
  ds.close();
  initializeStores();
  startTx();
  assertEquals(false,xaCon.getWriteTransaction().nodeLoadLight(node1));
  assertEquals(false,xaCon.getWriteTransaction().nodeLoadLight(node2));
  testGetRels(new long[]{rel1,rel2});
  long nodeIds[]=new long[10];
  for (int i=0; i < 3; i++) {
    nodeIds[i]=ds.nextId(Node.class);
    xaCon.getWriteTransaction().nodeCreate(nodeIds[i]);
    xaCon.getWriteTransaction().nodeAddProperty(nodeIds[i],index("nisse"),new Integer(10 - i));
  }
  for (int i=0; i < 2; i++) {
    long id=ds.nextId(Relationship.class);
    xaCon.getWriteTransaction().relationshipCreate(id,relType1,nodeIds[i],nodeIds[i + 1]);
    xaCon.getWriteTransaction().relDelete(id);
  }
  for (int i=0; i < 3; i++) {
    AtomicLong pos=getPosition(xaCon,nodeIds[i]);
    for (    RelationshipRecord rel : getMore(xaCon,nodeIds[i],pos)) {
      xaCon.getWriteTransaction().relDelete(rel.getId());
    }
    xaCon.getWriteTransaction().nodeDelete(nodeIds[i]);
  }
  commitTx();
  ds.close();
}
