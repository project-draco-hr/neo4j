{
  instantiateNeoStore(10);
  final long nodeId=neoStore.getNodeStore().nextId();
  NeoStoreTransaction writeTransaction=newWriteTransaction().first();
  writeTransaction.nodeCreate(nodeId);
  int typeA=0;
  writeTransaction.createRelationshipTypeToken(typeA,"A");
  createRelationships(writeTransaction,nodeId,typeA,INCOMING,20);
  prepareAndCommit(writeTransaction);
  int typeB=1;
  writeTransaction.createRelationshipTypeToken(typeB,"B");
  CommandCapturingVisitor commandCapture=new CommandCapturingVisitor();
  writeTransaction=newWriteTransaction(mockIndexing,commandCapture).first();
  long[] relationshipsOfTypeB=createRelationships(writeTransaction,nodeId,typeB,OUTGOING,5);
  for (  long relationshipToDelete : relationshipsOfTypeB) {
    deleteRelationship(writeTransaction,relationshipToDelete);
  }
  prepareAndCommit(writeTransaction);
  final AtomicBoolean foundRelationshipGroupInUse=new AtomicBoolean();
  commandCapture.visitCapturedCommands(new Visitor<XaCommand,RuntimeException>(){
    @Override public boolean visit(    XaCommand element) throws RuntimeException {
      if (element instanceof Command.RelationshipGroupCommand && ((Command.RelationshipGroupCommand)element).getAfter().inUse()) {
        if (!foundRelationshipGroupInUse.get()) {
          foundRelationshipGroupInUse.set(true);
        }
 else {
          fail();
        }
      }
      return true;
    }
  }
);
  assertTrue("Did not create relationship group command",foundRelationshipGroupInUse.get());
}
