{
  instantiateNeoStore(1);
  int type5=5, type10=10, type15=15;
{
    NeoStoreTransaction tx=newWriteTransaction().first();
    neoStore.getRelationshipTypeStore().setHighId(16);
    tx.createRelationshipTypeToken(type5,"5");
    tx.createRelationshipTypeToken(type10,"10");
    tx.createRelationshipTypeToken(type15,"15");
    prepareAndCommit(tx);
  }
  long nodeId=neoStore.getNodeStore().nextId();
{
    NeoStoreTransaction tx=newWriteTransaction().first();
    long otherNode1Id=neoStore.getNodeStore().nextId();
    long otherNode2Id=neoStore.getNodeStore().nextId();
    tx.nodeCreate(nodeId);
    tx.nodeCreate(otherNode1Id);
    tx.nodeCreate(otherNode2Id);
    tx.relationshipCreate(neoStore.getRelationshipStore().nextId(),type10,nodeId,otherNode1Id);
    tx.relationshipCreate(neoStore.getRelationshipStore().nextId(),type10,nodeId,otherNode2Id);
    prepareAndCommit(tx);
    assertRelationshipGroupsInOrder(nodeId,type10);
  }
{
    NeoStoreTransaction tx=newWriteTransaction().first();
    long otherNodeId=neoStore.getNodeStore().nextId();
    tx.nodeCreate(otherNodeId);
    tx.relationshipCreate(neoStore.getRelationshipStore().nextId(),type5,nodeId,otherNodeId);
    prepareAndCommit(tx);
  }
  assertRelationshipGroupsInOrder(nodeId,type5,type10);
{
    NeoStoreTransaction tx=newWriteTransaction().first();
    long otherNodeId=neoStore.getNodeStore().nextId();
    tx.nodeCreate(otherNodeId);
    tx.relationshipCreate(neoStore.getRelationshipStore().nextId(),type15,nodeId,otherNodeId);
    prepareAndCommit(tx);
  }
  assertRelationshipGroupsInOrder(nodeId,type5,type10,type15);
}
