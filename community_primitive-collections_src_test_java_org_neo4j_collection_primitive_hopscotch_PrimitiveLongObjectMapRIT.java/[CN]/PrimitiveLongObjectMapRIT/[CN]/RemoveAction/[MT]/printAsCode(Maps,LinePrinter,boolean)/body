{
  Integer existingValue=source.normalMap.get(key);
  String removal="map.remove( " + key + " );";
  if (includeChecks) {
    boolean existing=existingValue != null;
    out.println(format("boolean existedBefore = map.containsKey( %d );",key));
    out.println(format("Integer valueBefore = map.get( %d );",key));
    out.println(format("Integer removed = %s",removal));
    out.println(format("boolean existsAfter = map.containsKey( %d );",key));
    out.println(format("Integer valueAfter = map.get( %d );",key));
    out.println(format("assert%s( \"%s\", existedBefore );",capitilize(existing),key + " should " + (existing ? "" : "not ")+ "exist before putting here"));
    if (existing) {
      out.println(format("assertEquals( \"%s\", (Integer)%d, valueBefore );","value before should be " + existingValue,existingValue));
      out.println(format("assertEquals( \"%s\", (Integer)%d, removed );","value returned from put should be " + existingValue,existingValue));
    }
 else {
      out.println(format("assertNull( \"%s\", valueBefore );","value before putting should be null"));
      out.println(format("assertNull( \"%s\", removed );","value returned from putting should be null"));
    }
    out.println(format("assertFalse( \"%s\", existsAfter );",key + " should not exist"));
    out.println(format("assertNull( \"%s\", valueAfter );","value after removing should be null"));
  }
 else {
    out.println(removal);
  }
}
