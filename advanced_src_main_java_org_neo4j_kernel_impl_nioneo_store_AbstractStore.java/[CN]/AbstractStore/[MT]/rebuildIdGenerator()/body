{
  if (isReadOnly()) {
    throw new ReadOnlyDbException();
  }
  final byte RECORD_NOT_IN_USE=0;
  logger.fine("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  File file=new File(getStorageFileName() + ".id");
  if (file.exists()) {
    boolean success=file.delete();
    assert success;
  }
  IdGeneratorImpl.createGenerator(getStorageFileName() + ".id");
  openIdGenerator();
  FileChannel fileChannel=getFileChannel();
  long highId=1;
  long defraggedCount=0;
  try {
    long fileSize=fileChannel.size();
    int recordSize=getRecordSize();
    boolean fullRebuild=true;
    if (getConfig() != null) {
      String mode=(String)getConfig().get("rebuild_idgenerators_fast");
      if (mode != null && mode.toLowerCase().equals("true")) {
        fullRebuild=false;
        highId=findHighIdBackwards();
      }
    }
    ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[1]);
    LinkedList<Integer> freeIdList=new LinkedList<Integer>();
    if (fullRebuild) {
      for (long i=0; i * recordSize < fileSize && recordSize > 0; i++) {
        fileChannel.position(i * recordSize);
        fileChannel.read(byteBuffer);
        byteBuffer.flip();
        byte inUse=byteBuffer.get();
        byteBuffer.flip();
        nextId();
        if (inUse == RECORD_NOT_IN_USE) {
          freeIdList.add((int)i);
        }
 else {
          highId=i;
          while (!freeIdList.isEmpty()) {
            freeId(freeIdList.removeFirst());
            defraggedCount++;
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to rebuild id generator " + getStorageFileName(),e);
  }
  setHighId(highId + 1);
  logger.fine("[" + getStorageFileName() + "] high id="+ getHighId()+ " (defragged="+ defraggedCount+ ")");
  closeIdGenerator();
  openIdGenerator();
}
