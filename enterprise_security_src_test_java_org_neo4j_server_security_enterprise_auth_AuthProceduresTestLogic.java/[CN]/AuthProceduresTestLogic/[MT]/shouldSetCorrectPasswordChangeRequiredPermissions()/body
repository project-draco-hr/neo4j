{
  testFailRead(pwdSubject,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(pwdSubject,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(pwdSubject,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertCallEmpty(pwdSubject,"CALL dbms.changePassword( '321' )");
  assertCallEmpty(adminSubject,"CALL dbms.createUser('Henrik', 'bar', true)");
  assertCallEmpty(adminSubject,"CALL dbms.addUserToRole('Henrik', '" + ARCHITECT + "')");
  S henrik=neo.login("Henrik","bar");
  assertEquals(PASSWORD_CHANGE_REQUIRED,neo.authenticationResult(henrik));
  testFailRead(henrik,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(henrik,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(henrik,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertCallEmpty(henrik,"CALL dbms.changePassword( '321' )");
  assertCallEmpty(adminSubject,"CALL dbms.createUser('Olivia', 'bar', true)");
  assertCallEmpty(adminSubject,"CALL dbms.addUserToRole('Olivia', '" + ADMIN + "')");
  S olivia=neo.login("Olivia","bar");
  assertEquals(PASSWORD_CHANGE_REQUIRED,neo.authenticationResult(olivia));
  testFailRead(olivia,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(olivia,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(olivia,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertCallFail(olivia,"CALL dbms.createUser('OliviasFriend', 'bar', false)",CHANGE_PWD_ERR_MSG);
  assertCallEmpty(olivia,"CALL dbms.changePassword( '321' )");
}
