{
  testFailRead(pwdSubject,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(pwdSubject,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(pwdSubject,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertPasswordChangeWhenPasswordChangeRequired(pwdSubject,"321");
  assertEmpty(adminSubject,"CALL dbms.createUser('Henrik', 'bar', true)");
  assertEmpty(adminSubject,"CALL dbms.addRoleToUser('" + ARCHITECT + "', 'Henrik')");
  S henrik=neo.login("Henrik","bar");
  neo.assertPasswordChangeRequired(henrik);
  testFailRead(henrik,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(henrik,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(henrik,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertPasswordChangeWhenPasswordChangeRequired(henrik,"321");
  assertEmpty(adminSubject,"CALL dbms.createUser('Olivia', 'bar', true)");
  assertEmpty(adminSubject,"CALL dbms.addRoleToUser('" + ADMIN + "', 'Olivia')");
  S olivia=neo.login("Olivia","bar");
  neo.assertPasswordChangeRequired(olivia);
  testFailRead(olivia,3,pwdReqErrMsg(READ_OPS_NOT_ALLOWED));
  testFailWrite(olivia,pwdReqErrMsg(WRITE_OPS_NOT_ALLOWED));
  testFailSchema(olivia,pwdReqErrMsg(SCHEMA_OPS_NOT_ALLOWED));
  assertFail(olivia,"CALL dbms.createUser('OliviasFriend', 'bar', false)",CHANGE_PWD_ERR_MSG);
  assertPasswordChangeWhenPasswordChangeRequired(olivia,"321");
}
