{
  createNode(map(name,"Mattias"),FIRST);
  IndexPopulator populator=mock(IndexPopulator.class);
  FlippableIndexProxy index=mock(FlippableIndexProxy.class);
  IndexStoreView storeView=mock(IndexStoreView.class);
  ControlledStoreScan storeScan=new ControlledStoreScan();
  when(storeView.visitNodesWithPropertyAndLabel(any(IndexDescriptor.class),Matchers.<Visitor<NodePropertyUpdate,RuntimeException>>any())).thenReturn(storeScan);
  final IndexPopulationJob job=newIndexPopulationJob(FIRST,name,populator,index,storeView,StringLogger.DEV_NULL,false);
  OtherThreadExecutor<Void> populationJobRunner=cleanup.add(new OtherThreadExecutor<Void>("Population job test runner",null));
  Future<Void> runFuture=populationJobRunner.executeDontWait(new WorkerCommand<Void,Void>(){
    @Override public Void doWork(    Void state){
      job.run();
      return null;
    }
  }
);
  storeScan.latch.awaitStart();
  job.cancel().get();
  storeScan.latch.awaitFinish();
  runFuture.get();
  verify(populator,times(1)).close(false);
  verify(index,times(0)).flip(Matchers.<Callable<Void>>any(),Matchers.<FailedIndexProxyFactory>any());
  assertEquals(0,indexCount(FIRST,name));
  assertDoubleLongEquals(0,0,indexSample(FIRST,name));
}
