{
  if (nextFreeId == -1) {
    return;
  }
  if (releasedIdList.size() > 0) {
    writeIdBatch();
  }
  if (defragedIdList.size() > 0) {
    while (defragedIdList.size() > 0) {
      releasedIdList.add(defragedIdList.removeFirst());
    }
    writeIdBatch();
  }
  fileChannel.position(0);
  ByteBuffer buffer=ByteBuffer.allocate(HEADER_SIZE);
  buffer.put(STICKY_GENERATOR).putInt(nextFreeId);
  buffer.flip();
  fileChannel.write(buffer);
  if (totalBytesRead > HEADER_SIZE) {
    long writePosition=HEADER_SIZE;
    long readPosition=readBlocksTo;
    if (totalBytesRead < readBlocksTo) {
      readPosition=totalBytesRead;
    }
    int bytesRead=-1;
    do {
      writeBuffer.clear();
      fileChannel.position(readPosition);
      bytesRead=fileChannel.read(writeBuffer);
      readPosition+=bytesRead;
      writeBuffer.flip();
      fileChannel.position(writePosition);
      writePosition+=fileChannel.write(writeBuffer);
    }
 while (bytesRead > 0);
    fileChannel.truncate(writePosition);
  }
  fileChannel.force(false);
  buffer.clear();
  buffer.put(CLEAN_GENERATOR);
  buffer.limit(1);
  buffer.flip();
  fileChannel.position(0);
  fileChannel.write(buffer);
  fileChannel.force(false);
  fileChannel.close();
  fileChannel=null;
  nextFreeId=-1;
}
