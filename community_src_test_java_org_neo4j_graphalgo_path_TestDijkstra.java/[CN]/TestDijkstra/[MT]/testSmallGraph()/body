{
  graph.makeEdge("start","a","cost",(double)1);
  graph.makeEdge("a","x","cost",(double)9);
  graph.makeEdge("a","b","cost",(double)1);
  graph.makeEdge("b","x","cost",(double)7);
  graph.makeEdge("b","c","cost",(double)1);
  graph.makeEdge("c","x","cost",(double)5);
  Relationship shortCTOXRelationship=graph.makeEdge("c","x","cost",(double)3);
  graph.makeEdge("c","d","cost",(double)1);
  graph.makeEdge("d","x","cost",(double)3);
  graph.makeEdge("d","e","cost",(double)1);
  graph.makeEdge("e","x","cost",(double)1);
  graph.makeEdge("e","f","cost",(double)2);
  graph.makeEdge("x","y","cost",(double)2);
  PathFinder<WeightedPath> finder=GraphAlgoFactory.dijkstra(TraversalFactory.expanderForTypes(MyRelTypes.R1,Direction.OUTGOING),new DoubleEvaluator("cost"));
  assertPaths(finder.findAllPaths(graph.getNode("start"),graph.getNode("x")),"start,a,b,c,x","start,a,b,c,d,e,x");
  for (  WeightedPath path : finder.findAllPaths(graph.getNode("start"),graph.getNode("x"))) {
    if (getPathDef(path).equals("start,a,b,c,x")) {
      assertContainsRelationship(path,shortCTOXRelationship);
    }
  }
}
