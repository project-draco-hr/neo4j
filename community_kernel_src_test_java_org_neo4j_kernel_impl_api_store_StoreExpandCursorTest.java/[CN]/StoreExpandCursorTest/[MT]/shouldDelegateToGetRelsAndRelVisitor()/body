{
  PrimitiveLongIterator rels=PrimitiveLongCollections.iterator(1);
  CacheLayer cache=mock(CacheLayer.class);
  when(cache.nodeListRelationships(anyLong(),any(Direction.class),any(int[].class))).thenReturn(rels);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      RelationshipVisitor visitor=(RelationshipVisitor)invocation.getArguments()[1];
      visitor.visit((Long)invocation.getArguments()[0],1337,2,0);
      return null;
    }
  }
).when(cache).relationshipVisit(anyLong(),any(RelationshipVisitor.class));
  NeoRegister.RelationshipRegister relId=newRelationshipRegister();
  NeoRegister.NodeRegister startNodeId=newNodeRegister();
  NeoRegister.NodeRegister neighborNodeId=newNodeRegister();
  NeoRegister.RelTypeRegister relType=newRelTypeRegister();
  Register.ObjectRegister<Direction> direction=Registers.newObjectRegister();
  StoreExpandCursor cursor=new StoreExpandCursor(cache,Cursors.countDownCursor(1),newNodeRegister(1337l),newObjectRegister(new int[]{1,2,3}),newObjectRegister(Direction.BOTH),relId,relType,direction,startNodeId,neighborNodeId);
  cursor.next();
  verify(cache).nodeListRelationships(1337l,Direction.BOTH,new int[]{1,2,3});
  assertThat(relId.read(),equalTo(1l));
  assertThat(startNodeId.read(),equalTo(1337l));
  assertThat(neighborNodeId.read(),equalTo(2l));
  assertThat(relType.read(),equalTo(0));
  assertThat(direction.read(),equalTo(Direction.OUTGOING));
  assertFalse(cursor.next());
}
