{
  capSwitch.reset();
  return new StringLogger(){
    @Override protected void doDebug(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      if (capSwitch.accept(msg)) {
        delegate.doDebug(msg,cause,flush,logMarker);
        capSwitch.reset();
      }
    }
    @Override public void info(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      if (capSwitch.accept(msg)) {
        delegate.info(msg,cause,flush,logMarker);
        capSwitch.reset();
      }
    }
    @Override public void warn(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      if (capSwitch.accept(msg)) {
        delegate.warn(msg,cause,flush,logMarker);
        capSwitch.reset();
      }
    }
    @Override public void error(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      if (capSwitch.accept(msg)) {
        delegate.error(msg,cause,flush,logMarker);
        capSwitch.reset();
      }
    }
    @Override public void logLongMessage(    String msg,    Visitor<LineLogger,RuntimeException> source,    boolean flush){
      if (capSwitch.accept(msg)) {
        delegate.logLongMessage(msg,source,flush);
      }
    }
    @Override public void addRotationListener(    Runnable listener){
      delegate.addRotationListener(listener);
    }
    @Override public void flush(){
      delegate.flush();
    }
    @Override public void close(){
      delegate.close();
    }
    @Override protected void logLine(    String line){
      if (capSwitch.accept(line)) {
        delegate.logLine(line);
      }
    }
  }
;
}
