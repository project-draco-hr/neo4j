{
  final DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate=new DelegateInvocationHandler<>(TransactionCommitProcess.class);
  return new CommitProcessFactory(){
    @Override public TransactionCommitProcess create(    TransactionAppender appender,    KernelHealth kernelHealth,    NeoStores neoStores,    TransactionRepresentationStoreApplier storeApplier,    NeoStoreInjectedTransactionValidator txValidator,    IndexUpdatesValidator indexUpdatesValidator,    Config config){
      if (config.get(GraphDatabaseSettings.read_only)) {
        return new ReadOnlyTransactionCommitProcess();
      }
      removeOldCommitSwitcher();
      TransactionCommitProcess inner=new TransactionRepresentationCommitProcess(appender,storeApplier,indexUpdatesValidator);
      CommitProcessSwitcher commitProcessSwitcher=new CommitProcessSwitcher(transactionPropagator,master,commitProcessDelegate,requestContextFactory,highAvailabilityModeSwitcher,txValidator,inner);
      modeSwitchersLife.add(commitProcessSwitcher);
      return (TransactionCommitProcess)newProxyInstance(TransactionCommitProcess.class.getClassLoader(),new Class[]{TransactionCommitProcess.class},commitProcessDelegate);
    }
    private void removeOldCommitSwitcher(){
      for (      Lifecycle instance : modeSwitchersLife.getLifecycleInstances()) {
        if (instance instanceof CommitProcessSwitcher) {
          modeSwitchersLife.remove(instance);
        }
      }
    }
  }
;
}
