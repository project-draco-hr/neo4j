{
  memberStateMachine.addHighAvailabilityMemberListener(new HighAvailabilityMemberListener.Adapter(){
    @Override public void masterIsAvailable(    HighAvailabilityMemberChangeEvent event){
      if (event.getOldState().equals(HighAvailabilityMemberState.TO_MASTER) && event.getNewState().equals(HighAvailabilityMemberState.MASTER)) {
        doAfterRecoveryAndStartup(true);
      }
    }
    @Override public void slaveIsAvailable(    HighAvailabilityMemberChangeEvent event){
      if (event.getOldState().equals(HighAvailabilityMemberState.TO_SLAVE) && event.getNewState().equals(HighAvailabilityMemberState.SLAVE)) {
        doAfterRecoveryAndStartup(false);
      }
    }
    private void doAfterRecoveryAndStartup(    boolean isMaster){
      try {
        HighlyAvailableEditionModule.this.doAfterRecoveryAndStartup(editionName,dependencyResolver,isMaster);
      }
 catch (      Throwable throwable) {
        Log messagesLog=logging.getInternalLog(EnterpriseEditionModule.class);
        messagesLog.error("Post recovery error",throwable);
        try {
          memberStateMachine.stop();
        }
 catch (        Throwable throwable1) {
          messagesLog.warn("Could not stop",throwable1);
        }
        try {
          memberStateMachine.start();
        }
 catch (        Throwable throwable1) {
          messagesLog.warn("Could not start",throwable1);
        }
      }
    }
  }
);
}
