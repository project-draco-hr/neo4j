{
  intermediateStateMaps.add(new ConcurrentHashMap<>());
  this.maps=new Iterator<ConcurrentHashMap<CountsKey,long[]>>(){
    @Override public boolean hasNext(){
      return true;
    }
    @Override public ConcurrentHashMap<CountsKey,long[]> next(){
      ConcurrentHashMap<CountsKey,long[]> map=allOnesMap();
      ConcurrentHashMap<CountsKey,long[]> nextMap=copyOfMap(intermediateStateMaps.get(intermediateStateMaps.size() - 1));
      applyDiffToMap(nextMap,map);
      intermediateStateMaps.add(nextMap);
      return map;
    }
  }
;
}
