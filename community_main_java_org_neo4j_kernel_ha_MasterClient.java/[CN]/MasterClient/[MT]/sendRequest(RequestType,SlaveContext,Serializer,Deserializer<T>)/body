{
  Triplet<Channel,ChannelBuffer,ByteBuffer> channelContext=null;
  try {
    channelContext=getChannel();
    Channel channel=channelContext.first();
    ChannelBuffer buffer=channelContext.other();
    buffer.clear();
    buffer=new ChunkingChannelBuffer(buffer,channel,MAX_FRAME_LENGTH);
    buffer.writeByte(type.ordinal());
    if (type.includesSlaveContext()) {
      writeSlaveContext(buffer,slaveContext);
    }
    serializer.write(buffer,channelContext.third());
    if (buffer.writerIndex() > 0) {
      channel.write(buffer);
    }
    BlockingReadHandler<ChannelBuffer> reader=(BlockingReadHandler<ChannelBuffer>)channel.getPipeline().get("blockingHandler");
    ChannelBuffer message=null;
    while (true) {
      ChannelBuffer messagePart=reader.read(READ_RESPONSE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
      if (messagePart == null) {
        channelPool.dispose(channelContext);
        throw new HaCommunicationException("Channel has been closed");
      }
      byte continuation=messagePart.readByte();
      if (continuation == ChunkingChannelBuffer.CONTINUATION_MORE) {
        message=message != null ? message : ChannelBuffers.dynamicBuffer();
        message.writeBytes(messagePart);
      }
 else {
        if (message == null) {
          message=messagePart;
        }
 else {
          message.writeBytes(messagePart);
        }
        break;
      }
    }
    T response=deserializer.read(message);
    TransactionStream txStreams=type.includesSlaveContext() ? readTransactionStreams(message) : TransactionStream.EMPTY;
    return new Response<T>(response,txStreams);
  }
 catch (  ClosedChannelException e) {
    channelPool.dispose(channelContext);
    throw new HaCommunicationException(e);
  }
catch (  IOException e) {
    throw new HaCommunicationException(e);
  }
catch (  InterruptedException e) {
    throw new HaCommunicationException(e);
  }
catch (  Exception e) {
    throw new HaCommunicationException(e);
  }
}
