{
  Triplet<Channel,ChannelBuffer,ByteBuffer> channelContext=null;
  try {
    channelContext=getChannel();
    Channel channel=channelContext.first();
    ChannelBuffer buffer=channelContext.second();
    buffer.clear();
    buffer=new ChunkingChannelBuffer(buffer,channel,MAX_FRAME_LENGTH);
    buffer.writeByte(type.ordinal());
    if (type.includesSlaveContext()) {
      writeSlaveContext(buffer,slaveContext);
    }
    serializer.write(buffer,channelContext.third());
    if (buffer.writerIndex() > 0) {
      channel.write(buffer);
    }
    @SuppressWarnings("unchecked") BlockingReadHandler<ChannelBuffer> reader=(BlockingReadHandler<ChannelBuffer>)channel.getPipeline().get("blockingHandler");
    Pair<ChannelBuffer,Boolean> messageContext=readNextMessage(channelContext,reader);
    ChannelBuffer message=messageContext.first();
    T response=deserializer.read(message);
    String[] datasources=type.includesSlaveContext() ? readTransactionStreamHeader(message) : null;
    if (messageContext.other()) {
      message=createDynamicBufferFrom(message);
      boolean more=true;
      while (more) {
        Pair<ChannelBuffer,Boolean> followingMessage=readNextMessage(channelContext,reader);
        more=followingMessage.other();
        message.writeBytes(followingMessage.first());
        message=applyFullyAvailableTransactions(datasources,message);
      }
    }
    TransactionStream txStreams=type.includesSlaveContext() ? readTransactionStreams(datasources,message) : TransactionStream.EMPTY;
    return new Response<T>(response,txStreams);
  }
 catch (  ClosedChannelException e) {
    channelPool.dispose(channelContext);
    throw new HaCommunicationException(e);
  }
catch (  IOException e) {
    throw new HaCommunicationException(e);
  }
catch (  InterruptedException e) {
    throw new HaCommunicationException(e);
  }
catch (  Exception e) {
    throw new HaCommunicationException(e);
  }
}
