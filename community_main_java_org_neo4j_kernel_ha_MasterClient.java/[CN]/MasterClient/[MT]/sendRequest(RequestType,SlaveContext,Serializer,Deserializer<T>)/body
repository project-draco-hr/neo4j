{
  try {
    ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
    buffer.writeByte(type.ordinal());
    if (type.includesSlaveContext()) {
      writeSlaveContext(buffer,slaveContext);
    }
    serializer.write(buffer);
    Channel channel=getChannel();
    channel.write(buffer);
    BlockingReadHandler<ChannelBuffer> reader=(BlockingReadHandler<ChannelBuffer>)channel.getPipeline().get("blockingHandler");
    ChannelBuffer message=reader.read(20,TimeUnit.SECONDS);
    if (message == null) {
      throw new HaCommunicationException("Channel has been closed");
    }
    T response=deserializer.read(message);
    TransactionStreams txStreams=type.includesSlaveContext() ? readTransactionStreams(message) : TransactionStreams.EMPTY;
    return new Response<T>(response,txStreams);
  }
 catch (  IOException e) {
    throw new HaCommunicationException(e);
  }
catch (  InterruptedException e) {
    throw new HaCommunicationException(e);
  }
catch (  Exception e) {
    throw new HaCommunicationException(e);
  }
}
