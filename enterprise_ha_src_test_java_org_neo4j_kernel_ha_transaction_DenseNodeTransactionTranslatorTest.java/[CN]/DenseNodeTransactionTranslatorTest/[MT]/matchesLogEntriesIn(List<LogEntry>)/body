{
  return new BaseMatcher<List<LogEntry>>(){
    @Override public boolean matches(    Object item){
      if (!(item instanceof List)) {
        return false;
      }
      List<LogEntry> incoming=(List<LogEntry>)item;
      if (incoming.size() != transaction.size()) {
        return false;
      }
      boolean lastCompare=true;
      for (int i=0; i < incoming.size() && lastCompare; i++) {
        LogEntry incomingEntry=incoming.get(i);
        LogEntry realEntry=transaction.get(i);
        if (incomingEntry.getType() != realEntry.getType()) {
          return false;
        }
switch (incomingEntry.getType()) {
case LogEntry.TX_START:
          lastCompare=lastCompare && compareStartEntries((LogEntry.Start)incomingEntry,(LogEntry.Start)realEntry);
        break;
case LogEntry.COMMAND:
      lastCompare=lastCompare && compareCommandEntries((LogEntry.Command)incomingEntry,(LogEntry.Command)realEntry);
    break;
case LogEntry.TX_1P_COMMIT:
  lastCompare=lastCompare && compare1PCEntries((LogEntry.OnePhaseCommit)incomingEntry,(LogEntry.OnePhaseCommit)realEntry);
break;
case LogEntry.TX_2P_COMMIT:
lastCompare=lastCompare && compare2PCEntries((LogEntry.TwoPhaseCommit)incomingEntry,(LogEntry.TwoPhaseCommit)realEntry);
break;
case LogEntry.TX_PREPARE:
lastCompare=lastCompare && comparePrepareEntries((LogEntry.Prepare)incomingEntry,(LogEntry.Prepare)realEntry);
break;
case LogEntry.DONE:
lastCompare=lastCompare && compareDoneEntries((LogEntry.Done)incoming,(LogEntry.Done)realEntry);
break;
default :
throw new IllegalArgumentException("What am i supposed to do with command entry " + incomingEntry + " ?");
}
}
return lastCompare;
}
private boolean compareStartEntries(LogEntry.Start incomingEntry,LogEntry.Start realEntry){
if (!compareBaseEntries(incomingEntry,realEntry)) {
return false;
}
if (incomingEntry.getLastCommittedTxWhenTransactionStarted() != realEntry.getLastCommittedTxWhenTransactionStarted()) {
return false;
}
if (incomingEntry.getMasterId() != realEntry.getMasterId()) {
return false;
}
if (incomingEntry.getLocalId() != realEntry.getLocalId()) {
return false;
}
if (incomingEntry.getStartPosition() != realEntry.getStartPosition()) {
return false;
}
if (incomingEntry.getTimeWritten() != realEntry.getTimeWritten()) {
return false;
}
if (!incomingEntry.getXid().equals(realEntry.getXid())) {
return false;
}
return true;
}
private boolean compareCommandEntries(LogEntry.Command incomingEntry,LogEntry.Command realEntry){
if (!compareBaseEntries(incomingEntry,realEntry)) {
return false;
}
if (!incomingEntry.getXaCommand().equals(realEntry.getXaCommand())) {
return false;
}
return true;
}
private boolean compare1PCEntries(LogEntry.OnePhaseCommit incomingEntry,LogEntry.OnePhaseCommit realEntry){
if (!compareBaseEntries(incomingEntry,realEntry)) {
return false;
}
if (incomingEntry.getTimeWritten() != realEntry.getTimeWritten()) {
return false;
}
if (incomingEntry.getTxId() != realEntry.getTxId()) {
return false;
}
return true;
}
private boolean compare2PCEntries(LogEntry.TwoPhaseCommit incomingEntry,LogEntry.TwoPhaseCommit realEntry){
if (!compareBaseEntries(incomingEntry,realEntry)) {
return false;
}
if (incomingEntry.getTimeWritten() != realEntry.getTimeWritten()) {
return false;
}
if (incomingEntry.getTxId() != realEntry.getTxId()) {
return false;
}
return true;
}
private boolean comparePrepareEntries(LogEntry.Prepare incomingEntry,LogEntry.Prepare realEntry){
if (!compareBaseEntries(incomingEntry,realEntry)) {
return false;
}
if (incomingEntry.getTimeWritten() != realEntry.getTimeWritten()) {
return false;
}
return true;
}
private boolean compareDoneEntries(LogEntry.Done incomingEntry,LogEntry.Done realEntry){
return compareBaseEntries(incomingEntry,realEntry);
}
private boolean compareBaseEntries(LogEntry incoming,LogEntry real){
if (incoming.getIdentifier() != real.getIdentifier()) {
return false;
}
if (incoming.getType() != real.getType()) {
return false;
}
if (incoming.getVersion() != real.getVersion()) {
return false;
}
return true;
}
@Override public void describeTo(Description description){
}
}
;
}
