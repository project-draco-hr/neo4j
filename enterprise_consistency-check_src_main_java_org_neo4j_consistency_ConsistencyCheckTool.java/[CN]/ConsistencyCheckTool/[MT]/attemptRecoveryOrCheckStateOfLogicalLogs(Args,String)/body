{
  if (arguments.getBoolean(RECOVERY,false,true)) {
    new GraphDatabaseFactory().newEmbeddedDatabase(storeDir).shutdown();
  }
 else {
    StoreRecoverer recoveryChecker=new StoreRecoverer();
    try {
      if (recoveryChecker.recoveryNeededAt(new File(storeDir))) {
        systemError.print(lines("Active logical log detected, this might be a source of inconsistencies.","Consider allowing the database to recover before running the consistency check.","Consistency checking will continue, abort if you wish to perform recovery first.","To perform recovery before checking consistency, use the '--recovery' flag."));
      }
    }
 catch (    IOException e) {
      systemError.printf("Failure when checking for recovery state: '%s', continuing as normal.%n",e);
    }
  }
}
