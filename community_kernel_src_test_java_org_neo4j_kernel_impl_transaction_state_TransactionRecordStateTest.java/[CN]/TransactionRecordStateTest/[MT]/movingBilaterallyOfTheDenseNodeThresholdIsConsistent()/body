{
  NeoStores neoStores=neoStoresRule.open(GraphDatabaseSettings.dense_node_threshold.name(),"10");
  TransactionRecordState tx=recordState(neoStores,newContext(neoStores));
  long nodeId=neoStores.getNodeStore().nextId();
  tx.nodeCreate(nodeId);
  int typeA=(int)neoStores.getRelationshipTypeTokenStore().nextId();
  tx.createRelationshipTypeToken("A",typeA);
  createRelationships(neoStores,tx,nodeId,typeA,INCOMING,20);
  CommandHandler applier=new NeoStoreBatchTransactionApplier(neoStores,mock(CacheAccessBackDoor.class),LockService.NO_LOCK_SERVICE);
  apply(applier,transaction(tx));
  tx=recordState(neoStores,newContext(neoStores));
  int typeB=1;
  tx.createRelationshipTypeToken("B",typeB);
  long[] relationshipsOfTypeB=createRelationships(neoStores,tx,nodeId,typeB,OUTGOING,5);
  for (  long relationshipToDelete : relationshipsOfTypeB) {
    tx.relDelete(relationshipToDelete);
  }
  PhysicalTransactionRepresentation ptx=transactionRepresentationOf(tx);
  apply(applier,ptx);
  final AtomicBoolean foundRelationshipGroupInUse=new AtomicBoolean();
  ptx.accept(new CommandHandler.HandlerVisitor(new CommandHandler.Adapter(){
    @Override public boolean visitRelationshipGroupCommand(    Command.RelationshipGroupCommand command) throws IOException {
      if (command.getRecord().inUse()) {
        if (!foundRelationshipGroupInUse.get()) {
          foundRelationshipGroupInUse.set(true);
        }
 else {
          fail();
        }
      }
      return false;
    }
  }
));
  assertTrue("Did not create relationship group command",foundRelationshipGroupInUse.get());
}
