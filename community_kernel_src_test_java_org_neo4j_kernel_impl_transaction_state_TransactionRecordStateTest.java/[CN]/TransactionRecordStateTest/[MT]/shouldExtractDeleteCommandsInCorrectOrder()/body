{
  NeoStores neoStores=neoStoresRule.open(GraphDatabaseSettings.dense_node_threshold.name(),"1");
  TransactionRecordState recordState=new TransactionRecordState(neoStores,integrityValidator,newContext(neoStores));
  long nodeId1=0, nodeId2=1, relId1=1, relId2=2, relId4=10;
  recordState.nodeCreate(nodeId1);
  recordState.nodeCreate(nodeId2);
  recordState.relCreate(relId1,0,nodeId1,nodeId1);
  recordState.relCreate(relId2,0,nodeId1,nodeId1);
  recordState.relCreate(relId4,1,nodeId1,nodeId1);
  recordState.nodeAddProperty(nodeId1,0,101);
  CommandHandler applier=new NeoStoreBatchTransactionApplier(neoStores,mock(CacheAccessBackDoor.class),LockService.NO_LOCK_SERVICE);
  apply(applier,transaction(recordState));
  recordState=new TransactionRecordState(neoStores,mock(IntegrityValidator.class),newContext(neoStores));
  recordState.relDelete(relId4);
  recordState.nodeDelete(nodeId2);
  recordState.nodeRemoveProperty(nodeId1,0);
  Collection<Command> commands=new ArrayList<>();
  recordState.extractCommands(commands);
  Iterator<Command> commandIterator=commands.iterator();
  assertCommand(commandIterator.next(),Command.RelationshipGroupCommand.class);
  assertCommand(commandIterator.next(),NodeCommand.class);
  assertCommand(commandIterator.next(),PropertyCommand.class);
  assertCommand(commandIterator.next(),RelationshipCommand.class);
  assertCommand(commandIterator.next(),Command.RelationshipGroupCommand.class);
  assertCommand(commandIterator.next(),NodeCommand.class);
  assertFalse(commandIterator.hasNext());
}
