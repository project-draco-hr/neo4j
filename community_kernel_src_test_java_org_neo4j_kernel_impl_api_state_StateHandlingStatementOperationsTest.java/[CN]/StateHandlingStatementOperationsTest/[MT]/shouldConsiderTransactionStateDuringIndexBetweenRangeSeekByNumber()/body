{
  final int propertyKey=2;
  final int inRange=15;
  int lower=10;
  int upper=20;
  TransactionState txState=mock(TransactionState.class);
  KernelStatement statement=mock(KernelStatement.class);
  when(statement.hasTxStateWithChanges()).thenReturn(true);
  when(statement.txState()).thenReturn(txState);
  StorageStatement storageStatement=mock(StorageStatement.class);
  when(statement.getStoreStatement()).thenReturn(storageStatement);
  IndexDescriptor index=new IndexDescriptor(1,propertyKey);
  when(txState.indexUpdatesForRangeSeekByNumber(index,lower,true,upper,false)).thenReturn(new DiffSets<>(Collections.singleton(42L),Collections.singleton(44L)));
  when(txState.addedAndRemovedNodes()).thenReturn(new DiffSets<>(Collections.singleton(45L),Collections.singleton(46L)));
  when(txState.augmentSingleNodeCursor(any(Cursor.class),anyLong())).thenAnswer(new Answer<Cursor<NodeItem>>(){
    @Override public Cursor<NodeItem> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      long nodeId=(long)invocationOnMock.getArguments()[1];
      return asNodeCursor(nodeId,asPropertyCursor(intProperty(propertyKey,inRange)),Cursors.<LabelItem>empty());
    }
  }
);
  StoreReadLayer storeReadLayer=mock(StoreReadLayer.class);
  IndexReader indexReader=addMockedIndexReader(storageStatement);
  when(indexReader.rangeSeekByNumberInclusive(lower,upper)).thenReturn(PrimitiveLongCollections.resourceIterator(PrimitiveLongCollections.iterator(43L,44L,46L),null));
  when(storageStatement.acquireSingleNodeCursor(anyLong())).thenAnswer(new Answer<Cursor<NodeItem>>(){
    @Override public Cursor<NodeItem> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      long nodeId=(long)invocationOnMock.getArguments()[0];
      return asNodeCursor(nodeId,asPropertyCursor(intProperty(propertyKey,inRange)),Cursors.<LabelItem>empty());
    }
  }
);
  StateHandlingStatementOperations context=newTxStateOps(storeReadLayer);
  PrimitiveLongIterator results=context.nodesGetFromIndexRangeSeekByNumber(statement,index,lower,true,upper,false);
  assertEquals(asSet(42L,43L),PrimitiveLongCollections.toSet(results));
}
