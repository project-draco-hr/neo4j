{
  final File originalDir=new File(testDir.directory(),"original");
  final File copyDir=new File(testDir.directory(),"copy");
  Config config=new Config(stringMap(store_dir.name(),copyDir.getAbsolutePath()));
  final GraphDatabaseAPI original=(GraphDatabaseAPI)new GraphDatabaseFactory().newEmbeddedDatabase(originalDir.getAbsolutePath());
  final DependencyResolver resolver=original.getDependencyResolver();
  final FileSystemAbstraction fileSystem=resolver.resolveDependency(FileSystemAbstraction.class);
  Logging logging=new DevNullLoggingService();
  StoreCopyClient copier=new StoreCopyClient(config,loadKernelExtensions(),new ConsoleLogger(StringLogger.SYSTEM),logging,fs);
  StoreCopyClient.StoreCopyRequester requester=spy(new StoreCopyClient.StoreCopyRequester(){
    private Response<Object> response;
    @Override public Response<?> copyStore(    StoreWriter writer) throws IOException {
      try (Transaction tx=original.beginTx()){
        original.createNode(label("BeforeCopyBegins"));
        tx.success();
      }
       final TransactionIdStore transactionIdStore=resolver.resolveDependency(TransactionIdStore.class);
      final long transactionIdWhenStartingCopy=transactionIdStore.getLastCommittedTransactionId();
      NeoStoreXaDataSource dataSource=resolver.resolveDependency(DataSourceManager.class).getDataSource();
      dataSource.forceEverything();
      File baseDir=getMostCanonicalFile(originalDir);
      ByteBuffer temporaryBuffer=ByteBuffer.allocateDirect(1024 * 1024);
      try (ResourceIterator<File> files=dataSource.listStoreFiles()){
        while (files.hasNext()) {
          File file=files.next();
          try (StoreChannel fileChannel=fileSystem.open(file,"r")){
            writer.write(relativePath(baseDir,file),fileChannel,temporaryBuffer,file.length() > 0);
          }
         }
      }
       try (Transaction tx=original.beginTx()){
        original.createNode(label("AfterCopy"));
        tx.success();
      }
       TransactionStream transactions=new TransactionStream(){
        @Override public void accept(        Visitor<CommittedTransactionRepresentation,IOException> visitor) throws IOException {
          LogicalTransactionStore txStore=resolver.resolveDependency(LogicalTransactionStore.class);
          try (IOCursor<CommittedTransactionRepresentation> cursor=txStore.getTransactions(transactionIdWhenStartingCopy + 1)){
            while (cursor.next() && visitor.visit(cursor.get())) {
              ;
            }
          }
         }
      }
;
      return response=spy(new Response<>(null,original.storeId(),transactions,NO_OP));
    }
    @Override public void done(){
      assertNotNull(response);
      verify(response,times(1)).close();
    }
  }
);
  copier.copyStore(requester,CancellationRequest.NONE);
  GraphDatabaseService copy=new GraphDatabaseFactory().newEmbeddedDatabase(copyDir.getAbsolutePath());
  try (Transaction tx=copy.beginTx()){
    GlobalGraphOperations globalOps=GlobalGraphOperations.at(copy);
    assertThat(single(globalOps.getAllNodesWithLabel(label("BeforeCopyBegins"))).getId(),equalTo(0l));
    assertThat(single(globalOps.getAllNodesWithLabel(label("AfterCopy"))).getId(),equalTo(1l));
    tx.success();
  }
  finally {
    copy.shutdown();
    original.shutdown();
  }
  verify(requester,times(1)).done();
}
