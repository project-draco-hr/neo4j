{
  int nodeCount=100;
  int relationshipTypeCount=50;
  RecordStore<RelationshipGroupRecord> groupStore=stores.getTemporaryRelationshipGroupStore();
  RelationshipGroupRecord groupRecord=groupStore.newRecord();
  RecordStore<NodeRecord> nodeStore=stores.getNodeStore();
  NodeRecord nodeRecord=nodeStore.newRecord();
  long cursor=0;
  BitSet initializedNodes=new BitSet();
  for (int typeId=relationshipTypeCount - 1; typeId >= 0; typeId--) {
    for (int nodeId=0; nodeId < nodeCount; nodeId++, cursor++) {
      double comparison=typeId == 0 || initializedNodes.get(nodeId) ? 0.1 : 0.001;
      if (random.nextDouble() < comparison) {
        groupRecord.initialize(true,typeId,cursor,cursor + 1,cursor + 2,nodeId,4);
        groupRecord.setId(groupStore.nextId());
        groupStore.updateRecord(groupRecord);
        if (!initializedNodes.get(nodeId)) {
          nodeRecord.initialize(true,-1,true,groupRecord.getId(),0);
          nodeRecord.setId(nodeId);
          nodeStore.updateRecord(nodeRecord);
          nodeStore.setHighestPossibleIdInUse(nodeId);
          initializedNodes.set(nodeId);
        }
      }
    }
  }
  defrag(nodeCount,groupStore);
  verifyGroupsAreSequentiallyOrderedByNode();
}
