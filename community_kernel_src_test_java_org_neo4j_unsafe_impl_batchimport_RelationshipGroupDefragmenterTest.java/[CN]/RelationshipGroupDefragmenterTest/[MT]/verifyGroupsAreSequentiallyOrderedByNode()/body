{
  RecordStore<RelationshipGroupRecord> store=stores.getReplacementNeoStores().getRelationshipGroupStore();
  long firstId=store.getNumberOfReservedLowIds();
  long groupCount=store.getHighId() - firstId;
  RelationshipGroupRecord groupRecord=store.newRecord();
  RecordCursor<RelationshipGroupRecord> groupCursor=store.newRecordCursor(groupRecord).acquire(firstId,CHECK);
  long highGroupId=store.getHighId();
  long currentNodeId=-1;
  int currentTypeId=-1;
  int newGroupCount=0;
  int currentGroupLength=0;
  for (long id=firstId; id < highGroupId; id++, newGroupCount++) {
    if (!groupCursor.next(id)) {
      assertTrue(units > 1);
      assertTrue(currentGroupLength > 0);
      currentGroupLength--;
      continue;
    }
    long nodeId=groupRecord.getOwningNode();
    assertTrue("Expected a group for node >= " + currentNodeId + ", but was "+ nodeId+ " in "+ groupRecord,nodeId >= currentNodeId);
    if (nodeId != currentNodeId) {
      currentNodeId=nodeId;
      currentTypeId=-1;
      if (units > 1) {
        assertEquals(0,currentGroupLength);
      }
      currentGroupLength=0;
    }
    currentGroupLength++;
    assertTrue("Expected this group to have a next of current + " + units + " OR NULL, "+ "but was "+ groupRecord.toString(),groupRecord.getNext() == groupRecord.getId() + 1 || groupRecord.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue());
    assertTrue("Expected " + groupRecord + " to have type > "+ currentTypeId,groupRecord.getType() > currentTypeId);
    currentTypeId=groupRecord.getType();
  }
  assertEquals(groupCount,newGroupCount);
}
