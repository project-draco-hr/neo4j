{
  int nodeCount=100;
  int relationshipTypeCount=50;
  RecordStore<RelationshipGroupRecord> groupStore=stores.getTemporaryRelationshipGroupStore();
  RelationshipGroupRecord groupRecord=groupStore.newRecord();
  RecordStore<NodeRecord> nodeStore=stores.getNodeStore();
  NodeRecord nodeRecord=nodeStore.newRecord();
  long cursor=0;
  for (int typeId=relationshipTypeCount - 1; typeId >= 0; typeId--) {
    for (long nodeId=0; nodeId < nodeCount; nodeId++, cursor++) {
      groupRecord.initialize(true,typeId,cursor,cursor + 1,cursor + 2,nodeId,4);
      groupRecord.setId(groupStore.nextId());
      groupStore.updateRecord(groupRecord);
      if (typeId == 0) {
        nodeRecord.initialize(true,-1,true,groupRecord.getId(),0);
        nodeRecord.setId(nodeId);
        nodeStore.updateRecord(nodeRecord);
        nodeStore.setHighestPossibleIdInUse(nodeId);
      }
    }
  }
  defrag(nodeCount,groupStore);
  verifyGroupsAreSequentiallyOrderedByNode();
}
