{
  final Node lockNode=createNode();
  final List<List<Node>> results=new ArrayList<List<Node>>();
  final List<Thread> threads=new ArrayList<Thread>();
  final AtomicReference<RuntimeException> failure=new AtomicReference<RuntimeException>();
  for (int i=0; i < Runtime.getRuntime().availableProcessors() * 2; i++) {
    threads.add(new Thread(GetOrCreateIT.class.getSimpleName() + " thread " + i){
      @Override public void run(){
        try {
          List<Node> subresult=new ArrayList<Node>();
          for (int j=0; j < NUM_USERS; j++) {
            subresult.add(impl.getOrCreateUser(getUsername(j),graphdb(),lockNode));
          }
          results.add(subresult);
        }
 catch (        RuntimeException e) {
          failure.compareAndSet(null,e);
          throw e;
        }
      }
    }
);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    try {
      thread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (failure.get() != null)   throw failure.get();
  List<Node> first=results.remove(0);
  for (  List<Node> subresult : results) {
    assertEquals(first,subresult);
  }
  for (int i=0; i < NUM_USERS; i++) {
    final String username=getUsername(i);
    impl.getOrCreateUser(username,graphdb(),lockNode);
    assertUserExistsUniquely(username);
  }
}
