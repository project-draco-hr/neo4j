{
  ConsistencySummaryStatistics summary=new ConsistencySummaryStatistics();
  InconsistencyReport report=new InconsistencyReport(new InconsistencyMessageLogger(log),summary);
  OwnerCheck ownerCheck=new OwnerCheck(checkPropertyOwners);
  CountsBuilderDecorator countsBuilder=new CountsBuilderDecorator(stores.nativeStores().getRawNeoStores().getNodeStore());
  PropertyExistenceChecker mpc=new PropertyExistenceChecker(stores.nativeStores().getSchemaStore());
  CheckDecorator decorator=new CheckDecorator.ChainCheckDecorator(ownerCheck,countsBuilder,mpc);
  DiffRecordAccess records=recordAccess(stores.nativeStores());
  execute(stores,decorator,records,report);
  ownerCheck.scanForOrphanChains(progressFactory);
  if (checkGraph) {
    CountsAccessor counts=stores.nativeStores().getCounts();
    if (counts instanceof CountsTracker) {
      CountsTracker tracker=(CountsTracker)counts;
      try {
        tracker.start();
      }
 catch (      Exception e) {
      }
    }
    countsBuilder.checkCounts(counts,new ConsistencyReporter(records,report),progressFactory);
  }
  if (!summary.isConsistent()) {
    log.warn("Inconsistencies found: " + summary);
  }
  return summary;
}
