{
  int testTxsOnMaster=42;
  ClusterManager.ManagedCluster cluster=clusterRule.withSharedSetting(HaSettings.pull_interval,"0s").withSharedSetting(HaSettings.tx_push_factor,"0").withSharedSetting(KernelTransactions.tx_termination_aware_locks,Settings.TRUE).startCluster();
  HighlyAvailableGraphDatabase master=cluster.getMaster();
  final HighlyAvailableGraphDatabase slave=cluster.getAnySlave();
  createNodeOn(master);
  cluster.sync();
  long lastClosedTxIdOnMaster=lastClosedTxIdOn(master);
  long lastClosedTxIdOnSlave=lastClosedTxIdOn(slave);
  final CountDownLatch slaveTxStarted=new CountDownLatch(1);
  final CountDownLatch slaveShouldCommit=new CountDownLatch(1);
  final AtomicReference<Transaction> slaveTx=new AtomicReference<>();
  Future<?> slaveCommit=Executors.newSingleThreadExecutor().submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=slave.beginTx()){
        slaveTx.set(tx);
        slaveTxStarted.countDown();
        await(slaveShouldCommit);
        tx.success();
      }
     }
  }
);
  await(slaveTxStarted);
  createNodesOn(master,testTxsOnMaster);
  assertNotNull(slaveTx.get());
  slaveTx.get().terminate();
  slaveShouldCommit.countDown();
  try {
    slaveCommit.get();
    fail("Exception expected");
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(ExecutionException.class));
    assertThat(e.getCause(),instanceOf(TransientTransactionFailureException.class));
  }
  assertEquals(lastClosedTxIdOnMaster + testTxsOnMaster,lastClosedTxIdOn(master));
  assertEquals(lastClosedTxIdOnSlave,lastClosedTxIdOn(slave));
}
