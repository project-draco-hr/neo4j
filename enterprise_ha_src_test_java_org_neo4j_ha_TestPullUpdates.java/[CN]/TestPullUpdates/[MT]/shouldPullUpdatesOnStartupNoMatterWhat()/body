{
  GraphDatabaseService slave=null;
  GraphDatabaseService master=null;
  try {
    File testRootDir=TargetDirectory.forTest(getClass()).directory("shouldPullUpdatesOnStartupNoMatterWhat",true);
    File masterDir=new File(testRootDir,"master");
    master=new HighlyAvailableGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(masterDir.getAbsolutePath()).setConfig(ClusterSettings.server_id,"1").setConfig(ClusterSettings.initial_hosts,":5001").newGraphDatabase();
    File slaveDir=new File(testRootDir,"slave");
    slave=new HighlyAvailableGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(slaveDir.getAbsolutePath()).setConfig(ClusterSettings.server_id,"2").setConfig(ClusterSettings.initial_hosts,":5001").newGraphDatabase();
    final CountDownLatch slaveLeftLatch=new CountDownLatch(1);
    final ClusterClient masterClusterClient=((HighlyAvailableGraphDatabase)master).getDependencyResolver().resolveDependency(ClusterClient.class);
    masterClusterClient.addClusterListener(new ClusterListener.Adapter(){
      @Override public void leftCluster(      InstanceId instanceId,      URI member){
        slaveLeftLatch.countDown();
        masterClusterClient.removeClusterListener(this);
      }
    }
);
    master.isAvailable(60);
    slave.isAvailable(60);
    ((GraphDatabaseAPI)master).getDependencyResolver().resolveDependency(StringLogger.class).info("SHUTTING DOWN SLAVE");
    slave.shutdown();
    if (!slaveLeftLatch.await(60,TimeUnit.SECONDS))     throw new IllegalStateException("Timeout waiting for slave to leave");
    long nodeId=-1;
    Transaction tx=master.beginTx();
    Node node=master.createNode();
    node.setProperty("from","master");
    nodeId=node.getId();
    tx.success();
    tx.finish();
    slave=new HighlyAvailableGraphDatabaseFactory().newHighlyAvailableDatabaseBuilder(slaveDir.getAbsolutePath()).setConfig(ClusterSettings.server_id,"2").setConfig(ClusterSettings.initial_hosts,":5001").setConfig(HaSettings.pull_interval,"0").newGraphDatabase();
    slave.beginTx().finish();
    assertEquals("master",slave.getNodeById(nodeId).getProperty("from"));
  }
  finally {
    if (slave != null) {
      slave.shutdown();
    }
    if (master != null) {
      master.shutdown();
    }
  }
}
