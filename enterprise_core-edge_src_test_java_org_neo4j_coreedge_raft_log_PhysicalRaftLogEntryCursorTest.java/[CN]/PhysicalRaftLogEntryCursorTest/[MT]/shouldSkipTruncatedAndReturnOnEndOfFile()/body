{
  RaftLogEntry payloadTruncated=new RaftLogEntry(0,ReplicatedInteger.valueOf(4));
  RaftLogEntry payload5=new RaftLogEntry(5,ReplicatedInteger.valueOf(5));
  RaftLogEntry payload6=new RaftLogEntry(6,ReplicatedInteger.valueOf(6));
  RaftLogEntry payload7=new RaftLogEntry(7,ReplicatedInteger.valueOf(7));
  RaftRecordCursor recordCursor=mock(RaftRecordCursor.class);
  when(recordCursor.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(false);
  when(recordCursor.get()).thenReturn(new RaftLogAppendRecord(5,payload5)).thenReturn(new RaftLogAppendRecord(6,payloadTruncated)).thenReturn(new RaftLogAppendRecord(7,payloadTruncated)).thenReturn(new RaftLogTruncateRecord(6)).thenReturn(new RaftLogAppendRecord(6,payload6)).thenReturn(new RaftLogAppendRecord(7,payload7)).thenReturn(null);
  PhysicalRaftLogEntryCursor entryCursor=new PhysicalRaftLogEntryCursor(recordCursor);
  assertTrue(entryCursor.next());
  assertEquals(payload5,entryCursor.get().getLogEntry());
  assertTrue(entryCursor.next());
  assertEquals(payload6,entryCursor.get().getLogEntry());
  assertTrue(entryCursor.next());
  assertEquals(payload7,entryCursor.get().getLogEntry());
  assertFalse(entryCursor.next());
}
