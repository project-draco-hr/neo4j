{
  try {
synchronized (this) {
      if (sessionTracker.validateAndTrackOperation(replicatedTransaction.globalSession(),replicatedTransaction.localOperationId())) {
        TransactionRepresentation tx=ReplicatedTransactionFactory.extractTransactionRepresentation(replicatedTransaction);
        boolean shouldReject=false;
        if (tx.getLatestCommittedTxWhenStarted() < lastTxIdForPreviousAssignment) {
          shouldReject=true;
        }
        long txId=-1;
        if (!shouldReject) {
          try (LockGroup lockGroup=new LockGroup()){
            txId=localCommitProcess.commit(tx,lockGroup,CommitEvent.NULL,TransactionApplicationMode.EXTERNAL);
            lastCommittedTxId=txId;
          }
         }
        if (replicatedTransaction.globalSession().equals(myGlobalSession)) {
          CompletableFuture<Long> future=outstanding.remove(replicatedTransaction.localOperationId());
          if (future != null) {
            if (shouldReject) {
              future.completeExceptionally(new TransientTransactionFailureException("Attempt to commit transaction that was started on a different leader term. " + "Please retry the transaction."));
            }
 else {
              future.complete(txId);
            }
          }
        }
      }
    }
  }
 catch (  TransactionFailureException|IOException e) {
    throw new IllegalStateException("Failed to locally commit a transaction that has already been " + "committed to the RAFT log. This server cannot process later transactions and needs to be " + "restarted once the underlying cause has been addressed.",e);
  }
}
