{
  return new Optional<TYPE>(){
    @Override public TYPE get(){
      return obj;
    }
    @Override public boolean isPresent(){
      return true;
    }
    @Override public Optional<TYPE> or(    Optional<TYPE> secondChoice){
      return this;
    }
    @Override public Optional<TYPE> or(    TYPE secondChoice){
      return this;
    }
    @Override public <To>Optional<To> map(    Function<TYPE,? extends To> conversion){
      return some(conversion.apply(obj));
    }
  }
;
}
