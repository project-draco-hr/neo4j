{
  List<Node> nodes=new ArrayList<Node>();
  Transaction tx=db.beginTx();
  int numberOfNodes=SIZE_PER_JUMP * 3;
  String stringValue="a longer string than short";
  byte[] arrayValue=new byte[]{3,7};
  for (int i=0; i < numberOfNodes; i++) {
    Node node=db.createNode();
    node.setProperty("number",i);
    node.setProperty("string",stringValue);
    node.setProperty("array",arrayValue);
    nodes.add(node);
  }
  for (int i=0; i < numberOfNodes - 100; i++) {
    Node node1=nodes.get(i / 100);
    Node node2=nodes.get(i + 1);
    node1.createRelationshipTo(node2,TYPE);
  }
  tx.success();
  tx.finish();
  for (int t=0; t < 2; t++) {
    int nodeCount=0;
    for (    Node node : nodes) {
      node=db.getNodeById(node.getId());
      assertProperties(map("number",nodeCount++,"string",stringValue,"array",arrayValue),node);
      for (      Relationship rel : node.getRelationships(Direction.OUTGOING)) {
      }
    }
    ((AbstractGraphDatabase)db).getConfig().getGraphDbModule().getNodeManager().clearCache();
  }
  tx=db.beginTx();
  for (int i=0; i < nodes.size(); i++) {
    Node node=nodes.get(i);
switch (i % 6) {
case 0:
      node.removeProperty("number");
    break;
case 1:
  node.removeProperty("string");
break;
case 2:
node.removeProperty("array");
break;
case 3:
node.removeProperty("number");
node.removeProperty("string");
node.removeProperty("array");
break;
case 4:
node.setProperty("new",34);
case 5:
Object oldValue=node.getProperty("string",null);
if (oldValue != null) {
node.setProperty("string","asjdkasdjkasjdkasjdkasdjkasdj");
node.setProperty("string",stringValue);
}
default :
}
if (count(node.getRelationships()) > 50) {
if (i % 2 == 0) {
Relationship firstRel=firstOrNull(node.getRelationships());
if (firstRel != null) {
firstRel.delete();
}
Relationship lastRel=lastOrNull(node.getRelationships());
if (lastRel != null) {
lastRel.delete();
}
}
 else {
int relCount=0;
for (Relationship rel : node.getRelationships()) {
if (relCount++ % 2 == 0) {
rel.delete();
}
}
}
for (Relationship rel : node.getRelationships(Direction.OUTGOING)) {
rel.setProperty("relprop","rel value");
}
}
 else if (i % 20 == 0) {
Node otherNode=nodes.get(nodes.size() - i - 1);
Relationship rel=node.createRelationshipTo(otherNode,TYPE2);
rel.setProperty("other relprop",1010);
}
}
tx.success();
tx.finish();
for (int t=0; t < 2; t++) {
int nodeCount=0;
for (Node node : nodes) {
node=db.getNodeById(node.getId());
switch (nodeCount % 6) {
case 0:
assertProperties(map("string",stringValue,"array",arrayValue),node);
break;
case 1:
assertProperties(map("number",nodeCount,"array",arrayValue),node);
break;
case 2:
assertProperties(map("number",nodeCount,"string",stringValue),node);
break;
case 3:
assertEquals(0,count(node.getPropertyKeys()));
break;
case 4:
assertProperties(map("number",nodeCount,"string",stringValue,"array",arrayValue,"new",34),node);
break;
case 5:
assertProperties(map("number",nodeCount,"string",stringValue,"array",arrayValue),node);
break;
default :
}
for (Relationship rel : node.getRelationships(Direction.OUTGOING)) {
if (rel.isType(TYPE)) {
assertProperties(map("relprop","rel value"),rel);
}
 else if (rel.isType(TYPE2)) {
assertProperties(map("other relprop",1010),rel);
}
 else {
fail("Invalid type");
}
}
nodeCount++;
}
((AbstractGraphDatabase)db).getConfig().getGraphDbModule().getNodeManager().clearCache();
}
}
