{
  long startingTime=clock.currentTimeMillis();
  when(legacyIndexState.hasChanges()).thenReturn(true);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      Collection<StorageCommand> commands=invocation.getArgumentAt(0,Collection.class);
      commands.add(mock(Command.class));
      return null;
    }
  }
).when(storageEngine).createCommands(any(Collection.class),any(TransactionState.class),any(ResourceLocker.class),anyLong());
  try (KernelTransactionImplementation transaction=newTransaction(5)){
    clock.forward(5,MILLISECONDS);
    when(metaDataStore.getLastCommittedTransactionId()).thenReturn(7L);
    transaction.success();
  }
   assertEquals(5L,commitProcess.transaction.getLatestCommittedTxWhenStarted());
  assertEquals(startingTime,commitProcess.transaction.getTimeStarted());
  assertEquals(startingTime + 5,commitProcess.transaction.getTimeCommitted());
}
