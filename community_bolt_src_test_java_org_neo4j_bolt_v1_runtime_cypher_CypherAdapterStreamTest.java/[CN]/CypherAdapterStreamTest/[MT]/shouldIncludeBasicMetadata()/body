{
  QueryStatistics queryStatistics=mock(QueryStatistics.class);
  when(queryStatistics.containsUpdates()).thenReturn(true);
  when(queryStatistics.getNodesCreated()).thenReturn(1);
  when(queryStatistics.getNodesDeleted()).thenReturn(2);
  when(queryStatistics.getRelationshipsCreated()).thenReturn(3);
  when(queryStatistics.getRelationshipsDeleted()).thenReturn(4);
  when(queryStatistics.getPropertiesSet()).thenReturn(5);
  when(queryStatistics.getIndexesAdded()).thenReturn(6);
  when(queryStatistics.getIndexesRemoved()).thenReturn(7);
  when(queryStatistics.getConstraintsAdded()).thenReturn(8);
  when(queryStatistics.getConstraintsRemoved()).thenReturn(9);
  when(queryStatistics.getLabelsAdded()).thenReturn(10);
  when(queryStatistics.getLabelsRemoved()).thenReturn(11);
  Result result=mock(Result.class);
  when(result.getQueryExecutionType()).thenReturn(query(READ_WRITE));
  when(result.getQueryStatistics()).thenReturn(queryStatistics);
  when(result.getNotifications()).thenReturn(Collections.emptyList());
  Clock clock=mock(Clock.class);
  when(clock.millis()).thenReturn(0L,1337L);
  TransactionalContext tc=mock(TransactionalContext.class);
  CypherAdapterStream stream=new CypherAdapterStream(result,clock);
  Map<String,Object> meta=metadataOf(stream);
  assertThat(meta.get("type").toString(),equalTo("rw"));
  assertThat(meta.get("stats"),equalTo(map("nodes-created",1,"nodes-deleted",2,"relationships-created",3,"relationships-deleted",4,"properties-set",5,"indexes-added",6,"indexes-removed",7,"constraints-added",8,"constraints-removed",9,"labels-added",10,"labels-removed",11)));
  assertThat(meta.get("result_consumed_after"),equalTo(1337L));
}
