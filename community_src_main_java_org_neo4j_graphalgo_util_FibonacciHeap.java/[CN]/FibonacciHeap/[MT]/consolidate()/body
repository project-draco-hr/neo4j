{
  int arraySize=nrNodes + 1;
  ArrayList<FibonacciHeapNode> A=new ArrayList<FibonacciHeapNode>(arraySize);
  for (int i=0; i < arraySize; ++i) {
    A.add(null);
  }
  List<FibonacciHeapNode> rootNodes=new LinkedList<FibonacciHeapNode>();
  rootNodes.add(minimum);
  for (FibonacciHeapNode n=minimum.right; !n.equals(minimum); n=n.right) {
    rootNodes.add(n);
  }
  for (  FibonacciHeapNode node : rootNodes) {
    if (node.parent != null) {
      continue;
    }
    int d=node.degree;
    while (A.get(d) != null) {
      FibonacciHeapNode y=A.get(d);
      if (keyComparator.compare(node.key,y.key) > 0) {
        FibonacciHeapNode tmp=node;
        node=y;
        y=tmp;
      }
      link(y,node);
      A.set(d,null);
      ++d;
    }
    A.set(d,node);
  }
  minimum=null;
  for (  FibonacciHeapNode node : A) {
    if (node != null) {
      insertInRootList(node);
    }
  }
}
