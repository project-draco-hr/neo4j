{
  long low=0;
  long high=highestSetIndex;
  long x=encode(inputId);
  int rIndex=radixOf(x);
  for (int k=0; k < sortBuckets.length; k++) {
    if (rIndex <= sortBuckets[k][0]) {
      low=sortBuckets[k][1];
      high=(k == sortBuckets.length - 1) ? highestSetIndex : sortBuckets[k + 1][1];
      break;
    }
  }
  long returnVal=binarySearch(x,inputId,low,high,groupId);
  if (returnVal == ID_NOT_FOUND) {
    low=0;
    high=highestSetIndex;
    returnVal=binarySearch(x,inputId,low,high,groupId);
  }
  return returnVal;
}
