{
  Map<String,ClusterTestPermutation> platforms=new HashMap<String,ClusterTestPermutation>();
  VMFactory vmf=new VMFactory();
  VirtualMachine win1=vmf.vm(Neo4jVM.WIN_1);
  VirtualMachine win2=vmf.vm(Neo4jVM.WIN_2);
  VirtualMachine win3=vmf.vm(Neo4jVM.WIN_3);
  VirtualMachine ubuntu1=vmf.vm(Neo4jVM.UBUNTU_1);
  VirtualMachine ubuntu2=vmf.vm(Neo4jVM.UBUNTU_2);
  VirtualMachine ubuntu3=vmf.vm(Neo4jVM.UBUNTU_3);
  platforms.put(Platforms.WINDOWS,new ClusterTestPermutation(WindowsEnterpriseDriver.class.getSimpleName(),new DefaultMachineClusterModel(new DefaultMachineModelImpl(new WindowsEnterpriseDriver(win1)),new DefaultMachineModelImpl(new WindowsEnterpriseDriver(win2)),new DefaultMachineModelImpl(new WindowsEnterpriseDriver(win3)))));
  platforms.put(Platforms.UBUNTU_DEB,new ClusterTestPermutation(UbuntuDebEnterpriseDriver.class.getSimpleName(),new DefaultMachineClusterModel(new DefaultMachineModelImpl(new UbuntuDebEnterpriseDriver(ubuntu1)),new DefaultMachineModelImpl(new UbuntuDebEnterpriseDriver(ubuntu2)),new DefaultMachineModelImpl(new UbuntuDebEnterpriseDriver(ubuntu3)))));
  platforms.put(Platforms.UBUNTU_TAR_GZ,new ClusterTestPermutation(UbuntuTarGzEnterpriseDriver.class.getSimpleName(),new DefaultMachineClusterModel(new DefaultMachineModelImpl(new UbuntuTarGzEnterpriseDriver(ubuntu1)),new DefaultMachineModelImpl(new UbuntuTarGzEnterpriseDriver(ubuntu2)),new DefaultMachineModelImpl(new UbuntuTarGzEnterpriseDriver(ubuntu3)))));
  List<ClusterTestPermutation> permutations=new ArrayList<ClusterTestPermutation>();
  for (  String platformKey : Platforms.selectedPlatforms()) {
    if (platforms.containsKey(platformKey)) {
      permutations.add(platforms.get(platformKey));
    }
  }
  return permutations;
}
