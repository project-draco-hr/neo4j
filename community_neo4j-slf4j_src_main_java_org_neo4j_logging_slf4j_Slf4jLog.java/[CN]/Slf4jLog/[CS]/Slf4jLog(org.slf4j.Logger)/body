{
  this.lock=this;
  this.slf4jLogger=slf4jLogger;
  this.debugLogger=new Logger(){
    @Override public void log(    String message){
synchronized (lock) {
        slf4jLogger.debug(message);
      }
    }
    @Override public void log(    String message,    Throwable throwable){
synchronized (lock) {
        slf4jLogger.debug(message,throwable);
      }
    }
    @Override public void log(    String format,    Object... arguments){
synchronized (lock) {
        slf4jLogger.debug(format,arguments);
      }
    }
    @Override public void bulk(    Consumer<Logger> consumer){
synchronized (lock) {
        consumer.accept(this);
      }
    }
  }
;
  this.infoLogger=new Logger(){
    @Override public void log(    String message){
synchronized (lock) {
        slf4jLogger.info(message);
      }
    }
    @Override public void log(    String message,    Throwable throwable){
synchronized (lock) {
        slf4jLogger.info(message,throwable);
      }
    }
    @Override public void log(    String format,    Object... arguments){
synchronized (lock) {
        slf4jLogger.info(format,arguments);
      }
    }
    @Override public void bulk(    Consumer<Logger> consumer){
synchronized (lock) {
        consumer.accept(this);
      }
    }
  }
;
  this.warnLogger=new Logger(){
    @Override public void log(    String message){
synchronized (lock) {
        slf4jLogger.warn(message);
      }
    }
    @Override public void log(    String message,    Throwable throwable){
synchronized (lock) {
        slf4jLogger.warn(message,throwable);
      }
    }
    @Override public void log(    String format,    Object... arguments){
synchronized (lock) {
        slf4jLogger.warn(format,arguments);
      }
    }
    @Override public void bulk(    Consumer<Logger> consumer){
synchronized (lock) {
        consumer.accept(this);
      }
    }
  }
;
  this.errorLogger=new Logger(){
    @Override public void log(    String message){
synchronized (lock) {
        slf4jLogger.error(message);
      }
    }
    @Override public void log(    String message,    Throwable throwable){
synchronized (lock) {
        slf4jLogger.error(message,throwable);
      }
    }
    @Override public void log(    String format,    Object... arguments){
synchronized (lock) {
        slf4jLogger.error(format,arguments);
      }
    }
    @Override public void bulk(    Consumer<Logger> consumer){
synchronized (lock) {
        consumer.accept(this);
      }
    }
  }
;
}
