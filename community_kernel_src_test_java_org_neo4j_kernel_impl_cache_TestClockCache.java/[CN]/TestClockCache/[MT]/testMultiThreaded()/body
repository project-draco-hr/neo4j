{
  final int cacheSize=10;
  Map<String,Long> theControl=new ConcurrentHashMap<String,Long>();
  for (int i=0; i < 100; i++) {
    theControl.put("" + i,System.currentTimeMillis());
  }
  ExecutorService executor=Executors.newFixedThreadPool(20);
  ClockCache<String,String> theCache=new ClockCache<String,String>("under test",10);
  Random r=new Random();
  for (int i=0; i < 1000000; i++) {
    executor.execute(new ClockCacheWorker(theCache,theControl,r.nextInt(100)));
  }
  executor.shutdown();
  while (!executor.awaitTermination(5,TimeUnit.SECONDS)) {
    System.out.println("waiting more");
  }
  assertEquals(cacheSize,theCache.size());
  long now=System.currentTimeMillis();
  int entryCounter=0;
  for (  Map.Entry<String,String> entry : theCache.entrySet()) {
    System.out.println("Entry " + entry.getKey() + " is in cache, last messed with "+ (now - theControl.get(entry.getKey()))+ " ms");
    assertNotNull("null for key " + entry.getKey(),entry.getValue());
    assertEquals("wrong value for key " + entry.getKey(),entry.getKey() + "-value",entry.getValue());
    entryCounter++;
  }
  assertEquals("Entry counting was wrong",theCache.size(),entryCounter);
}
