{
  long inUseByte=buffer.get();
  boolean inUse=(inUseByte & 0x1) == Record.IN_USE.intValue();
  if (inUse) {
    long firstNode=Legacy20Store.getUnsignedInt(buffer);
    long firstNodeMod=(inUseByte & 0xEL) << 31;
    long secondNode=Legacy20Store.getUnsignedInt(buffer);
    long typeInt=buffer.getInt();
    long secondNodeMod=(typeInt & 0x70000000L) << 4;
    int type=(int)(typeInt & 0xFFFF);
    firstNode=Legacy20Store.longFromIntAndMod(firstNode,firstNodeMod);
    secondNode=Legacy20Store.longFromIntAndMod(secondNode,secondNodeMod);
    long firstPrevRel=Legacy20Store.getUnsignedInt(buffer);
    long firstPrevRelMod=(typeInt & 0xE000000L) << 7;
    firstPrevRel=Legacy20Store.longFromIntAndMod(firstPrevRel,firstPrevRelMod);
    long firstNextRel=Legacy20Store.getUnsignedInt(buffer);
    long firstNextRelMod=(typeInt & 0x1C00000L) << 10;
    firstNextRel=Legacy20Store.longFromIntAndMod(firstNextRel,firstNextRelMod);
    long secondPrevRel=Legacy20Store.getUnsignedInt(buffer);
    long secondPrevRelMod=(typeInt & 0x380000L) << 13;
    secondPrevRel=Legacy20Store.longFromIntAndMod(secondPrevRel,secondPrevRelMod);
    long secondNextRel=Legacy20Store.getUnsignedInt(buffer);
    long secondNextRelMod=(typeInt & 0x70000L) << 16;
    secondNextRel=Legacy20Store.longFromIntAndMod(secondNextRel,secondNextRelMod);
    long nextProp=Legacy20Store.getUnsignedInt(buffer);
    long nextPropMod=(inUseByte & 0xF0L) << 28;
    nextProp=Legacy20Store.longFromIntAndMod(nextProp,nextPropMod);
    rel.reset(id,true,firstNode,secondNode,type,firstPrevRel,firstNextRel,secondNextRel,secondPrevRel,nextProp);
  }
 else {
    rel.reset(id,false,-1,-1,-1,-1,-1,-1,-1,-1);
  }
}
