{
  setup(1000);
  nodeManager.clearCache();
  timer.schedule(this,10,10);
  Worker[] threads={new Worker("writer",error){
    @Override void perform(){
      setup(100);
      if (assertions())       System.out.println("created 100");
    }
  }
,new Worker("reader",error){
    @Override void perform(){
      try {
        int count=0;
        for (        @SuppressWarnings("unused") Relationship rel : graphdb.getReferenceNode().getRelationships()) {
          count++;
        }
        if (count % 100 != 0)         throw new IllegalStateException("Not atomic!");
        if (assertions())         System.out.println("counted relationships");
      }
 catch (      InvalidRecordException ire) {
        if (assertions())         ire.printStackTrace();
 else         System.err.println(ire);
      }
    }
  }
};
  try {
    throw error.exchange(new Error("this should never see the light of day"));
  }
  finally {
    cancel();
    for (    Worker worker : threads)     worker.done();
  }
}
