{
  TypeReference[] typeReference=new TypeReference[]{null};
  expression.accept(new BaseExpressionVisitor(){
    @Override public void load(    LocalVariable variable){
      typeReference[0]=variable.type();
    }
    @Override public void constant(    Object value){
      if (value == null) {
        throw new IllegalStateException("The type of null is none of your business");
      }
 else       if (value instanceof Integer) {
        typeReference[0]=TypeReference.typeReference(int.class);
      }
 else       if (value instanceof Byte) {
        typeReference[0]=TypeReference.typeReference(byte.class);
      }
 else       if (value instanceof Short) {
        typeReference[0]=TypeReference.typeReference(short.class);
      }
 else       if (value instanceof Long) {
        typeReference[0]=TypeReference.typeReference(long.class);
      }
 else       if (value instanceof Double) {
        typeReference[0]=TypeReference.typeReference(double.class);
      }
 else       if (value instanceof Float) {
        typeReference[0]=TypeReference.typeReference(float.class);
      }
 else       if (value instanceof Boolean) {
        typeReference[0]=TypeReference.typeReference(boolean.class);
      }
 else {
        typeReference[0]=TypeReference.typeReference(value.getClass());
      }
    }
  }
);
  if (typeReference[0] == null) {
    throw new IllegalStateException("Did never load an expression to the stack");
  }
  return typeReference[0];
}
