def snippet(source=None, component=None, classifier='test-sources', tag=None, tablength='4', **other):
    for key in other:
        sys.stderr.write(("WARNING: unknown config key: '%s'\n" % key))
    if (not tag):
        raise ValueError("'tag' must be specified")
    if (not source):
        raise ValueError("'source' must be specified")
    if (not component):
        raise ValueError("'component' must be specified")
    if (not classifier):
        raise ValueError("'classifier' must be specified")
    try:
        tablength = (' ' * int(tablength))
    except:
        raise ValueError("'tablength' must be specified as an integer")
    START = ('START SNIPPET: %s' % tag)
    END = ('END SNIPPET: %s' % tag)
    sourceFile = open((PATH_PATTERN % locals()))
    try:
        buff = []
        mindent = (1 << 32)
        emit = False
        for line in sourceFile:
            if (END in line):
                emit = False
            if emit:
                line = line.replace(']]>', ']]>]]&gt;<![CDATA[')
                meat = line.lstrip()
                if meat:
                    indent = line[:(- len(meat))].replace('\t', tablength)
                    mindent = min(mindent, len(indent))
                    buff.append((indent + meat))
                else:
                    buff.append('')
            if (START in line):
                emit = True
    finally:
        sourceFile.close()
    if (not buff):
        raise ValueError((((((((('Missing snippet for tag "' + tag) + '" in file "') + source) + '" in component "') + component) + '" with classifier "') + classifier) + '".'))
    for line in buff:
        if line:
            yield line[mindent:]
        else:
            yield '\n'
