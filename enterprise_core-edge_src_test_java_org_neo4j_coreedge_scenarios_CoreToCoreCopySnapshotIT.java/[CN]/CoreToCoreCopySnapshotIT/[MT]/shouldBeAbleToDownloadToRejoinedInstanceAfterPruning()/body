{
  Map<String,String> coreParams=stringMap();
  coreParams.put(raft_log_rotation_size.name(),"1K");
  coreParams.put(raft_log_pruning_strategy.name(),"keep_none");
  coreParams.put(raft_log_pruning_frequency.name(),"100ms");
  int numberOfTransactions=100;
  Timeout timeout=new Timeout(Clocks.systemClock(),60,SECONDS);
  Cluster cluster=clusterRule.withSharedCoreParams(coreParams).startCluster();
  int firstServerLogFileCount;
  CoreClusterMember firstServer;
  do {
    timeout.assertNotTimedOut();
    firstServer=doSomeTransactions(cluster,numberOfTransactions);
    firstServerLogFileCount=getMostRecentLogIdOn(firstServer);
  }
 while (firstServerLogFileCount < 5);
  firstServer.shutdown();
  int oldestLogOnSecondServer;
  CoreClusterMember secondServer;
  do {
    timeout.assertNotTimedOut();
    secondServer=doSomeTransactions(cluster,numberOfTransactions);
    oldestLogOnSecondServer=getOldestLogIdOn(secondServer);
  }
 while (oldestLogOnSecondServer < firstServerLogFileCount + 5);
  firstServer.start();
  dataMatchesEventually(firstServer,cluster.coreMembers());
}
