{
  long[] nodes=createMoreComplexGraph();
  List<PathRepresentation> result=actions.findPaths(nodes[0],nodes[1],false,MapUtil.map("max depth",2,"algorithm","shortestPath","relationships",MapUtil.map("type","to","direction","out")));
  assertPaths(2,nodes,2,result);
  result=actions.findPaths(nodes[0],nodes[1],false,MapUtil.map("max depth",2,"algorithm","shortestPath","relationships",MapUtil.map("type","to","direction","out"),"single",true));
  assertPaths(1,nodes,2,result);
  result=actions.findPaths(nodes[0],nodes[1],true,MapUtil.map("max depth",2,"algorithm","shortestPath","relationships",MapUtil.map("type","to","direction","out")));
  assertPaths(1,nodes,2,result);
  result=actions.findPaths(nodes[0],nodes[1],true,MapUtil.map("max depth",2,"algorithm","shortestPath","relationships",MapUtil.map("type","to","direction","out"),"single",false));
  assertPaths(1,nodes,2,result);
  result=actions.findPaths(nodes[0],nodes[1],true,MapUtil.map("max depth",2,"algorithm","shortestPath","relationships",MapUtil.map("type","to","direction","in"),"single",false));
  assertTrue(result.isEmpty());
}
