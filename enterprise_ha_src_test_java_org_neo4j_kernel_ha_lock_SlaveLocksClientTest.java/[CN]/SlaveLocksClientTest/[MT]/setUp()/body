{
  when(local.tryExclusiveLock(any(Locks.ResourceType.class),any(long.class))).thenReturn(true);
  when(local.trySharedLock(any(Locks.ResourceType.class),any(long.class))).thenReturn(true);
  when(lockManager.newClient()).thenReturn(local);
  when(master.acquireSharedLock(any(RequestContext.class),any(Locks.ResourceType.class),Matchers.<long[]>anyVararg())).thenReturn(new TransactionStreamResponse<>(new LockResult(LockStatus.OK_LOCKED),null,TransactionStream.EMPTY,ResourceReleaser.NO_OP));
  when(master.acquireExclusiveLock(any(RequestContext.class),any(Locks.ResourceType.class),Matchers.<long[]>anyVararg())).thenReturn(new TransactionStreamResponse<>(new LockResult(LockStatus.OK_LOCKED),null,TransactionStream.EMPTY,ResourceReleaser.NO_OP));
  availabilityGuard=new AvailabilityGuard(Clock.SYSTEM_CLOCK,NullLog.getInstance());
  client=new SlaveLocksClient(master,local,lockManager,requestContextFactory,availabilityGuard);
}
