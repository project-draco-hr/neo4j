{
  Locks localLockManager=mock(Locks.class);
  master=mock(Master.class);
  local=mock(Locks.Client.class);
  when(local.tryExclusiveLock(any(Locks.ResourceType.class),any(long.class))).thenReturn(true);
  when(local.trySharedLock(any(Locks.ResourceType.class),any(long.class))).thenReturn(true);
  when(localLockManager.newClient()).thenReturn(local);
  RequestContextFactory requestContextFactory=mock(RequestContextFactory.class);
  xaDsm=mock(HaXaDataSourceManager.class);
  when(xaDsm.applyTransactions((org.neo4j.com.Response<LockResult>)anyObject())).thenReturn(new LockResult(LockStatus.OK_LOCKED));
  AbstractTransactionManager txManager=mock(TxManager.class);
  RemoteTxHook txHook=mock(RemoteTxHook.class);
  AvailabilityGuard availabilityGuard=mock(AvailabilityGuard.class);
  when(availabilityGuard.isAvailable(anyLong())).thenReturn(true);
  SlaveLockManager.Configuration config=mock(SlaveLockManager.Configuration.class);
  client=new SlaveLocksClient(master,local,localLockManager,requestContextFactory,xaDsm,txManager,txHook,availabilityGuard,config);
}
