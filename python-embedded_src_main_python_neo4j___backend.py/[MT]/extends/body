def extends(CLASS):


    class MetaClass(type):

        def __new__(Class, name, bases, body):
            if (bases == ()):
                return type.__new__(Class, name, (object,), body)
            else:
                for (key, value) in body.items():
                    if (key not in ('__module__', '__new__')):
                        if hasattr(CLASS, key):
                            setattr(CLASS, ('_super__%s' % key), getattr(CLASS, key))
                        setattr(CLASS, key, value)
                return type(name, (object,), body)
    return MetaClass(getattr(CLASS, '__name__', 'Class'), (), {})
