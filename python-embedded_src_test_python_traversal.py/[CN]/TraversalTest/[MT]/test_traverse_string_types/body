def test_traverse_string_types(self):
    self.create_data()
    db = self.graphdb
    start_node = self.source
    traverser = db.traversal().relationships('related_to').traverse(start_node)
    for node in traverser.nodes:
        pass
    self.assertEqual(len(list(traverser.nodes)), 2)
    from neo4j import OUTGOING, INCOMING, ANY
    traverser = db.traversal().relationships('related_to', OUTGOING).traverse(start_node)
    self.assertEqual(len(list(traverser.nodes)), 2)
    from neo4j import OUTGOING, INCOMING, ANY
    traverser = db.traversal().relationships('related_to', INCOMING).relationships('likes').traverse(start_node)
    self.assertEqual(len(list(traverser.nodes)), 2)
    traverser = db.traversal().relationships('related_to').traverse(start_node)
    for path in traverser:
        pass
    for node in traverser.nodes:
        pass
    for relationship in traverser.relationships:
        pass
