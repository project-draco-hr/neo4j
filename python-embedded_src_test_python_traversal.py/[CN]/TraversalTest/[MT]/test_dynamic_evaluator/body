def test_dynamic_evaluator(self):
    self.create_data()
    db = self.graphdb
    start_node = self.source
    from neo4j import Evaluation
    Evaluation.INCLUDE_AND_CONTINUE
    Evaluation.INCLUDE_AND_PRUNE
    Evaluation.EXCLUDE_AND_CONTINUE
    Evaluation.EXCLUDE_AND_PRUNE

    def my_evaluator(path):
        if (path.end['message'] == 'world'):
            return Evaluation.INCLUDE_AND_CONTINUE
        if (path.last_relationship.type.name() == 'related_to'):
            return Evaluation.INCLUDE_AND_PRUNE
        return Evaluation.EXCLUDE_AND_CONTINUE
    traverser = db.traversal().evaluator(my_evaluator).traverse(start_node)

    def exclude_all(path):
        return Evaluation.EXCLUDE_AND_CONTINUE

    def include_all(path):
        return Evaluation.INCLUDE_AND_CONTINUE
    t = self.graphdb.traversal().depthFirst().evaluator(include_all).traverse(self.source)
    res = list(t.nodes)
    self.assertEqual(len(res), 2)
    t = self.graphdb.traversal().depthFirst().evaluator(exclude_all).traverse(self.source)
    res = list(t.nodes)
    self.assertEqual(len(res), 0)
