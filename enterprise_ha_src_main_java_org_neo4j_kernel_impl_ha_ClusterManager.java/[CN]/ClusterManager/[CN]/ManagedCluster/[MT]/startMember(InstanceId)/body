{
  Clusters.Member member=spec.getMembers().get(serverId.toIntegerIndex() - 1);
  StringBuilder initialHosts=new StringBuilder(spec.getMembers().get(0).getHost());
  for (int i=1; i < spec.getMembers().size(); i++) {
    initialHosts.append(",").append(spec.getMembers().get(i).getHost());
  }
  File parent=new File(root,name);
  URI clusterUri=new URI("cluster://" + member.getHost());
  if (member.isFullHaMember()) {
    int clusterPort=clusterUri.getPort();
    int haPort=clusterUri.getPort() + 3000;
    File storeDir=new File(parent,"server" + serverId);
    if (storeDirInitializer != null) {
      storeDirInitializer.initializeStoreDir(serverId.toIntegerIndex(),storeDir);
    }
    GraphDatabaseBuilder builder=dbFactory.newHighlyAvailableDatabaseBuilder(storeDir.getAbsolutePath());
    builder.setConfig(ClusterSettings.cluster_name,name);
    builder.setConfig(ClusterSettings.initial_hosts,initialHosts.toString());
    builder.setConfig(ClusterSettings.server_id,serverId + "");
    builder.setConfig(ClusterSettings.cluster_server,"0.0.0.0:" + clusterPort);
    builder.setConfig(HaSettings.ha_server,":" + haPort);
    builder.setConfig(OnlineBackupSettings.online_backup_enabled,Settings.FALSE);
    builder.setConfig(commonConfig);
    if (instanceConfig.containsKey(serverId.toIntegerIndex())) {
      builder.setConfig(instanceConfig.get(serverId.toIntegerIndex()));
    }
    config(builder,name,serverId);
    final HighlyAvailableGraphDatabaseProxy graphDatabase=new HighlyAvailableGraphDatabaseProxy(builder);
    members.put(serverId,graphDatabase);
    life.add(new LifecycleAdapter(){
      @Override public void stop() throws Throwable {
        graphDatabase.get().shutdown();
      }
    }
);
  }
 else {
    Map<String,String> config=MapUtil.stringMap(ClusterSettings.cluster_name.name(),name,ClusterSettings.initial_hosts.name(),initialHosts.toString(),ClusterSettings.server_id.name(),serverId + "",ClusterSettings.cluster_server.name(),"0.0.0.0:" + clusterUri.getPort());
    Config config1=new Config(config,GraphDatabaseFacadeFactory.Configuration.class,GraphDatabaseSettings.class);
    LifeSupport clusterClientLife=new LifeSupport();
    NullLogService logService=NullLogService.getInstance();
    ClusterClientModule clusterClientModule=new ClusterClientModule(clusterClientLife,new Dependencies(),new Monitors(),config1,logService,new NotElectableElectionCredentialsProvider());
    arbiters.add(new ObservedClusterMembers(logService.getInternalLogProvider(),clusterClientModule.clusterClient,clusterClientModule.clusterClient,new ClusterMemberEvents(){
      @Override public void addClusterMemberListener(      ClusterMemberListener listener){
      }
      @Override public void removeClusterMemberListener(      ClusterMemberListener listener){
      }
    }
,clusterClientModule.clusterClient.getServerId()));
    life.add(new FutureLifecycleAdapter<>(clusterClientLife));
  }
}
