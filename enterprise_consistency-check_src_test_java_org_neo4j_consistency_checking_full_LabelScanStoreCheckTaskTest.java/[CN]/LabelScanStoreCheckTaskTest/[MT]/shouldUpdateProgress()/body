{
  ProgressMonitorFactory.MultiPartBuilder progressBuilder=mock(ProgressMonitorFactory.MultiPartBuilder.class);
  ProgressListener progressListener=mock(ProgressListener.class);
  when(progressBuilder.progressForPart(anyString(),anyLong())).thenReturn(progressListener);
  LabelScanStore labelScanStore=mock(LabelScanStore.class);
  when(labelScanStore.newAllEntriesReader()).thenReturn(new AllEntriesLabelScanReader(){
    @Override public long getHighRangeId() throws IOException {
      return 2;
    }
    @Override public void close() throws IOException {
    }
    @Override public Iterator<NodeLabelRange> iterator(){
      ArrayList<NodeLabelRange> ranges=new ArrayList<NodeLabelRange>(){
{
          add(new StubNodeLabelRange(0));
          add(new StubNodeLabelRange(1));
          add(new StubNodeLabelRange(2));
        }
      }
;
      return ranges.iterator();
    }
  }
);
  LabelScanStoreCheckTask task=new LabelScanStoreCheckTask(labelScanStore,progressBuilder,new NullReporter(),null);
  task.run();
  verify(progressListener).set(0);
  verify(progressListener).set(1);
  verify(progressListener).set(2);
  verify(progressListener).done();
}
