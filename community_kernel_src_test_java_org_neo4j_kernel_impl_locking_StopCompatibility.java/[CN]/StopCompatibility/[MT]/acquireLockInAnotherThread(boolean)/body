{
  final LockAcquisition lockAcquisition=new LockAcquisition();
  Future<Void> future=threadA.execute(new WorkerCommand<Void,Void>(){
    @Override public Void doWork(    Void state) throws Exception {
      Locks.Client client=newLockClient(lockAcquisition);
      if (shared) {
        client.acquireShared(RESOURCE_TYPE,RESOURCE_ID);
      }
 else {
        client.acquireExclusive(RESOURCE_TYPE,RESOURCE_ID);
      }
      return null;
    }
  }
);
  lockAcquisition.setFuture(future,threadA.get());
  return lockAcquisition;
}
