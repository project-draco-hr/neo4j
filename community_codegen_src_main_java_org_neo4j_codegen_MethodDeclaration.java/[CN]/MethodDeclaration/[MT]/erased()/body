{
  Map<String,TypeReference> table=new HashMap<>();
  for (  TypeParameter parameter : typeParameters) {
    table.put(parameter.name(),parameter.extendsBound());
  }
  TypeReference newReturnType=erase(returnType(),table);
  Parameter[] newParameters=new Parameter[this.parameters.length];
  for (int i=0; i < parameters.length; i++) {
    Parameter parameter=parameters[i];
    TypeReference erasedType=erase(parameter.type(),table);
    newParameters[i]=param(erasedType,parameter.name());
  }
  TypeReference[] newExceptions=new TypeReference[exceptions.length];
  for (int i=0; i < exceptions.length; i++) {
    newExceptions[i]=erase(exceptions[i],table);
  }
  String newName=name();
  boolean newIsConstrucor=isConstructor();
  return new MethodDeclaration(owner,newParameters,newExceptions,typeParameters){
    @Override public boolean isConstructor(){
      return newIsConstrucor;
    }
    @Override public TypeReference returnType(){
      return newReturnType;
    }
    @Override public String name(){
      return newName;
    }
  }
;
}
