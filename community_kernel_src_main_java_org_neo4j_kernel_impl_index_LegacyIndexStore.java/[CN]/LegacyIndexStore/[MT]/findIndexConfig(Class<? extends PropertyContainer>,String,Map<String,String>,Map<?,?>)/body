{
  Map<String,String> storedConfig=indexStore.get(cls,indexName);
  if (storedConfig != null && suppliedConfig == null) {
    Map<String,String> newConfig=injectDefaultProviderIfMissing(indexName,dbConfig,storedConfig);
    if (newConfig != storedConfig) {
      indexStore.set(cls,indexName,newConfig);
    }
    return newConfig;
  }
  Map<String,String> configToUse=suppliedConfig;
  String provider;
  IndexImplementation indexProvider;
  if (configToUse == null) {
    provider=getDefaultProvider(indexName,dbConfig);
    configToUse=MapUtil.stringMap(PROVIDER,provider);
  }
 else {
    provider=configToUse.get(PROVIDER);
    provider=provider == null ? getDefaultProvider(indexName,dbConfig) : provider;
  }
  indexProvider=indexProviders.apply(provider);
  configToUse=indexProvider.fillInDefaults(configToUse);
  configToUse=injectDefaultProviderIfMissing(indexName,dbConfig,configToUse);
  if (storedConfig != null) {
    assertConfigMatches(indexProvider,indexName,storedConfig,suppliedConfig);
    Map<String,String> newConfig=injectDefaultProviderIfMissing(indexName,dbConfig,storedConfig);
    if (newConfig != storedConfig) {
      indexStore.set(cls,indexName,newConfig);
    }
    configToUse=newConfig;
  }
  return Collections.unmodifiableMap(configToUse);
}
