{
  sqldb=DriverManager.getConnection("jdbc:hsqldb:mem:cyphersqltests;shutdown=true");
  sqldb.setAutoCommit(true);
  identifierQuoteString=sqldb.getMetaData().getIdentifierQuoteString();
  createPersons();
  createGroups();
  createEmail();
  queries=new ArrayList<TestData>(){
{
      add(new TestData("Start","SELECT * FROM `Person` WHERE name = 'Anakin'".replace("`",identifierQuoteString),"START person=node:Person(name = 'Anakin') RETURN person","Anakin","20","1 row"));
      add(new TestData("Match","SELECT `Email`.* FROM `Person` JOIN `Email` ON `Person`.id = `Email`.person_id WHERE `Person`.name = 'Anakin'".replace("`",identifierQuoteString),"START person=node:Person(name = 'Anakin') MATCH person-[:email]->email RETURN email","anakin@example.com","anakin@example.org","2 rows"));
      add(new TestData("JoinEntity","SELECT `Group`.*, `Person_Group`.* FROM `Person` JOIN `Person_Group` ON `Person`.id = `Person_Group`.person_id JOIN `Group` ON `Person_Group`.Group_id=`Group`.id WHERE `Person`.name = 'Bridget'".replace("`",identifierQuoteString),"START person=node:Person(name = 'Bridget') MATCH person-[r:belongs_to]->group RETURN group, r","Admin","1 row"));
      add(new TestData("LeftJoin","SELECT `Person`.name, `Email`.address FROM `Person` LEFT JOIN `Email` ON `Person`.id = `Email`.person_id".replace("`",identifierQuoteString),"START person=node:Person('name: *') MATCH person-[?:email]->email RETURN person.name, email.address?","Anakin","anakin@example.org","Bridget","<null>","3 rows"));
      add(new TestData("RecursiveJoin",null,"START person=node:Person('name: Bridget') " + "MATCH person-[:belongs_to*]->group RETURN person.name, group.name","Bridget","Admin","Technichian","User","3 rows"));
      add(new TestData("Where","SELECT * FROM `Person` WHERE `Person`.age > 35 AND `Person`.hair = 'blonde'".replace("`",identifierQuoteString),"START person=node:Person('name: *') WHERE person.age > 35 AND person.hair = 'blonde' RETURN person","Bridget","blonde","1 row"));
      add(new TestData("Return","SELECT `Person`.name, count(*) FROM `Person` GROUP BY `Person`.name ORDER BY `Person`.name".replace("`",identifierQuoteString),"START person=node:Person('name: *') RETURN person.name, count(*) ORDER BY person.name","Bridget","Anakin","2 rows"));
    }
  }
;
}
