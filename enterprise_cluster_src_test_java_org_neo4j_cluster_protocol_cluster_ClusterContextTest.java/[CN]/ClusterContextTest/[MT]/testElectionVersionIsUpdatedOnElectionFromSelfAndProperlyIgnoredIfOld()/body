{
  final String coordinatorRole="coordinator";
  final InstanceId me=new InstanceId(1);
  final InstanceId winner=new InstanceId(2);
  HeartbeatContext heartbeatContext=mock(HeartbeatContext.class);
  when(heartbeatContext.getFailed()).thenReturn(Collections.<InstanceId>emptySet());
  Logging logging=Mockito.mock(Logging.class);
  when(logging.getMessagesLog(Matchers.<Class>any())).thenReturn(mock(StringLogger.class));
  MultiPaxosContext multiPaxosContext=new MultiPaxosContext(me,Iterables.<ElectionRole,ElectionRole>iterable(new ElectionRole(coordinatorRole)),mock(ClusterConfiguration.class),new Executor(){
    @Override public void execute(    Runnable command){
      command.run();
    }
  }
,logging,Mockito.mock(ObjectInputStreamFactory.class),Mockito.mock(ObjectOutputStreamFactory.class),Mockito.mock(AcceptorInstanceStore.class),Mockito.mock(Timeouts.class));
  ClusterContext context=multiPaxosContext.getClusterContext();
  ElectionContext electionContext=multiPaxosContext.getElectionContext();
  ClusterListener listener=mock(ClusterListener.class);
  context.addClusterListener(listener);
  electionContext.forgetElection(coordinatorRole);
  long expectedVersion=electionContext.newConfigurationStateChange().getVersion();
  context.elected(coordinatorRole,winner,me,expectedVersion);
  assertEquals(1,expectedVersion);
  verify(listener,times(1)).elected(coordinatorRole,winner,null);
  electionContext.forgetElection(coordinatorRole);
  expectedVersion=electionContext.newConfigurationStateChange().getVersion();
  context.elected(coordinatorRole,winner,me,expectedVersion);
  assertEquals(2,expectedVersion);
  verify(listener,times(2)).elected(coordinatorRole,winner,null);
  context.elected(coordinatorRole,winner,me,expectedVersion - 1);
  verifyNoMoreInteractions(listener);
}
