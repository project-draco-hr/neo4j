{
  URI uri1=new URI("neo4j://server1");
  URI uri2=new URI("neo4j://server2");
  URI uri3=new URI("neo4j://server3");
  URI uri4=new URI("neo4j://server4");
  Map<URI,View> finalViews=new HashMap<URI,View>();
  finalViews.put(uri1,new View(new State(new EpochNumber(1),3),false));
  finalViews.put(uri2,new View(new State(new EpochNumber(2),3),false));
  finalViews.put(uri3,new View(new State(new EpochNumber(0),5),false));
  Map<URI,State> registryFrom1=new HashMap<URI,State>();
  registryFrom1.put(uri1,new State(new EpochNumber(1),3));
  registryFrom1.put(uri2,new State(new EpochNumber(2),3));
  registryFrom1.put(uri3,new State(new EpochNumber(0),5));
  Map<URI,State> registryFrom2=new HashMap<URI,State>();
  registryFrom2.put(uri1,new State(new EpochNumber(1),3));
  registryFrom2.put(uri2,new State(new EpochNumber(1),3));
  registryFrom2.put(uri3,new State(new EpochNumber(0),4));
  OmegaContext context=new OmegaContext(Mockito.mock(ClusterContext.class));
  int collectionRound=context.startCollectionRound();
  context.responseReceivedForRound(collectionRound,uri1,registryFrom1);
  checkConsolidatedViews(context.getViews(),registryFrom1);
  context.responseReceivedForRound(collectionRound,uri2,registryFrom2);
  checkConsolidatedViews(context.getViews(),registryFrom2);
  context.collectionRoundDone(collectionRound);
  checkUpdatedViews(context.getPreviousViewForCollectionRound(collectionRound),context.getViews());
  assertEquals(finalViews,context.getViews());
  finalViews.put(uri1,new View(new State(new EpochNumber(1),3)));
  finalViews.put(uri2,new View(new State(new EpochNumber(2),3)));
  finalViews.put(uri3,new View(new State(new EpochNumber(4),10),false));
  finalViews.put(uri4,new View(new State(new EpochNumber(1),2),false));
  registryFrom1.put(uri1,new State(new EpochNumber(1),3));
  registryFrom1.put(uri2,new State(new EpochNumber(1),3));
  registryFrom1.put(uri3,new State(new EpochNumber(4),10));
  registryFrom2.put(uri1,new State(new EpochNumber(1),3));
  registryFrom2.put(uri2,new State(new EpochNumber(1),3));
  registryFrom2.put(uri3,new State(new EpochNumber(3),9));
  registryFrom2.put(uri4,new State(new EpochNumber(1),2));
  collectionRound=context.startCollectionRound();
  context.responseReceivedForRound(collectionRound,uri1,registryFrom1);
  checkConsolidatedViews(context.getViews(),registryFrom1);
  context.responseReceivedForRound(collectionRound,uri2,registryFrom2);
  checkConsolidatedViews(context.getViews(),registryFrom2);
  context.collectionRoundDone(collectionRound);
  checkUpdatedViews(context.getPreviousViewForCollectionRound(collectionRound),context.getViews());
  assertEquals(finalViews,context.getViews());
}
