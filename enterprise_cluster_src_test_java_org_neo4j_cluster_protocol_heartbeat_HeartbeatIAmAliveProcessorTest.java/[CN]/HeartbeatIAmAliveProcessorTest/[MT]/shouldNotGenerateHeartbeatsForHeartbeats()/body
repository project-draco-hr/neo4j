{
  URI to=URI.create("ha://1");
  MessageHolder outgoing=mock(MessageHolder.class);
  ClusterContext mockContext=mock(ClusterContext.class);
  ClusterConfiguration mockConfiguration=mock(ClusterConfiguration.class);
  when(mockConfiguration.getMembers()).thenReturn(new HashMap<InstanceId,URI>(){
{
      put(new InstanceId(1),URI.create("ha://1"));
      put(new InstanceId(2),URI.create("ha://2"));
    }
  }
);
  when(mockContext.getConfiguration()).thenReturn(mockConfiguration);
  HeartbeatIAmAliveProcessor processor=new HeartbeatIAmAliveProcessor(outgoing,mockContext);
  Message incoming=Message.to(HeartbeatMessage.i_am_alive,to).setHeader(Message.FROM,to.toASCIIString()).setHeader(Message.INSTANCE_ID,"1");
  assertEquals(HeartbeatMessage.i_am_alive,incoming.getMessageType());
  processor.process(incoming);
  verifyZeroInteractions(outgoing);
}
