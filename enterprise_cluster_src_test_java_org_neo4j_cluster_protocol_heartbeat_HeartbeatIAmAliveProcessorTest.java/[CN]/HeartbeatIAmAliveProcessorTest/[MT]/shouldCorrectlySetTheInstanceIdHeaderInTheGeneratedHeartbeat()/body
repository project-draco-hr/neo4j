{
  final List<Message> sentOut=new LinkedList<Message>();
  MessageHolder holder=mock(MessageHolder.class);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      sentOut.add((Message)invocation.getArguments()[0]);
      return null;
    }
  }
).when(holder).offer(Matchers.<Message<MessageType>>any());
  ClusterContext mockContext=mock(ClusterContext.class);
  ClusterConfiguration mockConfiguration=mock(ClusterConfiguration.class);
  when(mockConfiguration.getMembers()).thenReturn(new HashMap<InstanceId,URI>(){
{
      put(new InstanceId(1),URI.create("ha://1"));
      put(new InstanceId(2),URI.create("ha://2"));
    }
  }
);
  when(mockContext.getConfiguration()).thenReturn(mockConfiguration);
  HeartbeatIAmAliveProcessor processor=new HeartbeatIAmAliveProcessor(holder,mockContext);
  Message incoming=Message.to(mock(MessageType.class),URI.create("ha://someAwesomeInstanceInJapan")).setHeader(Message.INSTANCE_ID,"2").setHeader(Message.FROM,"ha://2");
  processor.process(incoming);
  assertEquals(1,sentOut.size());
  assertEquals(HeartbeatMessage.i_am_alive,sentOut.get(0).getMessageType());
  assertEquals(new InstanceId(2),((HeartbeatMessage.IAmAliveState)sentOut.get(0).getPayload()).getServer());
}
