{
  int nodeId1=1;
  int nodeId2=65;
  StubIndexPartition partition=newStubIndexPartition();
  LuceneLabelScanIndex index=mock(LuceneLabelScanIndex.class);
  when(index.getFirstPartition(anyList())).thenReturn(partition);
  when(index.getPartitions()).thenReturn(Arrays.asList(partition));
  long node1Range=format.bitmapFormat().rangeOf(nodeId1);
  long node2Range=format.bitmapFormat().rangeOf(nodeId2);
  assertNotEquals(node1Range,node2Range);
  PartitionedLuceneLabelScanWriter writer=createWriter(index);
  writer.write(NodeLabelUpdate.labelChanges(nodeId2,new long[]{},new long[]{}));
  try {
    writer.write(NodeLabelUpdate.labelChanges(nodeId1,new long[]{},new long[]{}));
    fail("Should have thrown exception");
  }
 catch (  IllegalArgumentException e) {
  }
}
