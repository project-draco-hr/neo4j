{
  ExecutionMonitor processorAssigner=eagerRandomSaturation(config.maxNumberOfProcessors());
  final BatchImporter inserter=new ParallelBatchImporter(directory.graphDbDir(),new DefaultFileSystemAbstraction(),config,NullLogService.getInstance(),processorAssigner,EMPTY,new Config(MapUtil.stringMap(GraphDatabaseSettings.record_format.name(),getFormatName())));
  boolean successful=false;
  IdGroupDistribution groups=new IdGroupDistribution(NODE_COUNT,5,random.random());
  long nodeRandomSeed=random.nextLong(), relationshipRandomSeed=random.nextLong();
  try {
    inserter.doImport(Inputs.input(nodes(nodeRandomSeed,NODE_COUNT,inputIdGenerator,groups),relationships(relationshipRandomSeed,RELATIONSHIP_COUNT,inputIdGenerator,groups),idMapper,idGenerator,silentBadCollector(RELATIONSHIP_COUNT)));
    GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(directory.graphDbDir()).newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      inputIdGenerator.reset();
      verifyData(NODE_COUNT,RELATIONSHIP_COUNT,db,groups,nodeRandomSeed,relationshipRandomSeed);
      tx.success();
    }
  finally {
      db.shutdown();
    }
    assertConsistent(directory.graphDbDir());
    successful=true;
  }
  finally {
    if (!successful) {
      File failureFile=directory.file("input");
      try (PrintStream out=new PrintStream(failureFile)){
        out.println("Seed used in this failing run: " + random.seed());
        out.println(inputIdGenerator);
        inputIdGenerator.reset();
        for (        InputNode node : nodes(nodeRandomSeed,NODE_COUNT,inputIdGenerator,groups)) {
          out.println(node);
        }
        for (        InputRelationship relationship : relationships(relationshipRandomSeed,RELATIONSHIP_COUNT,inputIdGenerator,groups)) {
          out.println(relationship);
        }
        out.println();
        out.println("Processor assignments");
        out.println(processorAssigner.toString());
      }
       System.err.println("Additional debug information stored in " + failureFile);
    }
  }
}
