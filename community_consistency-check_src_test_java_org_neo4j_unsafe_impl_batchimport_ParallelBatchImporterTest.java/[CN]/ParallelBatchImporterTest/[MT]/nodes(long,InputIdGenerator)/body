{
  return new InputIterable<InputNode>(){
    @Override public InputIterator<InputNode> iterator(){
      return new SimpleInputIterator<InputNode>("test nodes"){
        private int cursor;
        @Override protected InputNode fetchNextOrNull(){
          if (cursor < count) {
            Object[] properties=new Object[]{"name","Nisse " + cursor,"age",10,"long-string","OK here goes... a long string that will certainly end up in a dynamic " + "record1234567890!@#$%^&*()_|","array",new long[]{1234567890123L,987654321987L,123456789123L,987654321987L}};
            try {
              return new InputNode(sourceDescription,itemNumber,itemNumber,inputIdGenerator.nextNodeId(),properties,null,LABELS,null);
            }
  finally {
              cursor++;
            }
          }
          return null;
        }
      }
;
    }
  }
;
}
