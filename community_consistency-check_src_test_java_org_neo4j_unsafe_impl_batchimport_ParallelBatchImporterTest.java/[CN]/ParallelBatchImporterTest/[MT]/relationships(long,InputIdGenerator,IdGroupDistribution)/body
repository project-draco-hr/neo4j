{
  return new InputIterable<InputRelationship>(){
    private int calls;
    @Override public InputIterator<InputRelationship> iterator(){
      calls++;
      assertTrue("Unexpected use of input iterator " + multiPassIterators + ", "+ calls,multiPassIterators || (!multiPassIterators && calls == 1));
      random.reset();
      return new SimpleInputIterator<InputRelationship>("test relationships"){
        private int cursor;
        private final Register.LongRegister nodeIndex=Registers.newLongRegister();
        @Override protected InputRelationship fetchNextOrNull(){
          if (cursor < count) {
            Object[] properties=new Object[]{"name","Nisse " + cursor,"age",10,"long-string","OK here goes... a long string that will certainly end up in a dynamic " + "record1234567890!@#$%^&*()_|","array",new long[]{1234567890123L,987654321987L,123456789123L,987654321987L}};
            try {
              Object startNode=idGenerator.randomExisting(nodeIndex);
              Group startNodeGroup=groups.groupOf(nodeIndex.read());
              Object endNode=idGenerator.randomExisting(nodeIndex);
              Group endNodeGroup=groups.groupOf(nodeIndex.read());
              return new InputRelationship(sourceDescription,itemNumber,itemNumber,properties,null,startNodeGroup,startNode,endNodeGroup,endNode,idGenerator.randomType(),null);
            }
  finally {
              cursor++;
            }
          }
          return null;
        }
      }
;
    }
    @Override public boolean supportsMultiplePasses(){
      return multiPassIterators;
    }
  }
;
}
