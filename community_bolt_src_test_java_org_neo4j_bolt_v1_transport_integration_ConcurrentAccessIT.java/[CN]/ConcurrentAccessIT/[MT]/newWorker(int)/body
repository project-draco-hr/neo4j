{
  return new Callable<Void>(){
    private final byte[] init=chunk(InitMessage.init("TestClient",emptyMap()));
    private final byte[] createAndRollback=chunk(run("BEGIN"),pullAll(),run("CREATE (n)"),pullAll(),run("ROLLBACK"),pullAll());
    private final byte[] matchAll=chunk(run("MATCH (n) RETURN n"),pullAll());
    @Override public Void call() throws Exception {
      TransportConnection client=cf.newInstance();
      client.connect(address).send(acceptedVersions(1,0,0,0));
      assertThat(client,eventuallyReceives(new byte[]{0,0,0,1}));
      init(client);
      for (int i=0; i < iterationsToRun; i++) {
        creaeteAndRollback(client);
      }
      return null;
    }
    private void init(    TransportConnection client) throws Exception {
      client.send(init);
      assertThat(client,eventuallyReceives(msgSuccess()));
    }
    private void creaeteAndRollback(    TransportConnection client) throws Exception {
      client.send(createAndRollback);
      assertThat(client,eventuallyReceives(msgSuccess(map("fields",asList())),msgSuccess(),msgSuccess(map("fields",asList())),msgSuccess(),msgSuccess(map("fields",asList())),msgSuccess()));
      client.send(matchAll);
      assertThat(client,eventuallyReceives(msgSuccess(map("fields",asList("n"))),msgSuccess()));
    }
  }
;
}
