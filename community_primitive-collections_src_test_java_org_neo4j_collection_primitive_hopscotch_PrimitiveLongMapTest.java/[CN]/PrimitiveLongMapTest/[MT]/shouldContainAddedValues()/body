{
  Map<Long,Integer> expectedEntries=new HashMap<>();
  expectedEntries.put(1994703545L,59);
  expectedEntries.put(1583732120L,98);
  expectedEntries.put(756530774L,56);
  expectedEntries.put(1433091763L,22);
  PrimitiveLongObjectMap<Integer> map=Primitive.longObjectMap();
  for (  Map.Entry<Long,Integer> entry : expectedEntries.entrySet()) {
    map.put(entry.getKey(),entry.getValue());
  }
  boolean existedBefore=map.containsKey(1433091763);
  Integer valueBefore=map.get(1433091763);
  Integer previous=map.put(1433091763,35);
  boolean existsAfter=map.containsKey(1433091763);
  Integer valueAfter=map.get(1433091763);
  assertTrue("1433091763 should exist before putting here",existedBefore);
  assertEquals((Integer)22,valueBefore);
  assertEquals((Integer)22,previous);
  assertTrue("(1433091763, 35) should exist",existsAfter);
  assertEquals((Integer)35,valueAfter);
  expectedEntries.put(1433091763L,35);
  final Map<Long,Integer> visitedEntries=new HashMap<>();
  map.visitEntries(new PrimitiveLongObjectVisitor<Integer,RuntimeException>(){
    @Override public boolean visited(    long key,    Integer value){
      visitedEntries.put(key,value);
      return false;
    }
  }
);
  assertEquals(expectedEntries,visitedEntries);
}
