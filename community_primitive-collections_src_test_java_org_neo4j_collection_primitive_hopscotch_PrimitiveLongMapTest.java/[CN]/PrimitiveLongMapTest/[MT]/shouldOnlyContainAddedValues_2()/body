{
  PrimitiveLongIntMap map=new PrimitiveLongIntHashMap(27,DEFAULT_HASHING,new DebugMonitor(new int[]{63},new long[]{947430652}));
  map.put(913910231,25);
  map.put(102310782,40);
  map.put(634960377,32);
  map.put(947168147,96);
  map.put(947430652,26);
  map.put(1391472521,72);
  map.put(7905512,10);
  map.put(7905512,2);
  map.put(1391472521,66);
  map.put(824376092,79);
  map.remove(750639810);
  map.put(947168147,61);
  map.put(831409018,57);
  map.put(241941283,76);
  map.put(824376092,45);
  map.remove(2125994926);
  map.put(824376092,47);
  map.put(1477982280,1);
  map.remove(2129508263);
  map.put(1477982280,41);
  map.put(642178985,69);
  map.put(1447441709,85);
  map.put(642178985,27);
  map.put(875840384,72);
  map.put(1967716733,55);
  map.put(1965379174,5);
  map.put(913910231,40);
  boolean existedBefore=map.containsKey(947430652);
  int valueBefore=map.get(947430652);
  int removed=map.remove(947430652);
  boolean existsAfter=map.containsKey(947430652);
  int valueAfter=map.get(947430652);
  assertTrue("947430652 should exist before removing here",existedBefore);
  assertEquals("value before should be 26",26,valueBefore);
  assertEquals("value returned from remove should be 26",26,removed);
  assertFalse("947430652 should not exist",existsAfter);
  assertEquals("value after removing should be -1",-1,valueAfter);
}
