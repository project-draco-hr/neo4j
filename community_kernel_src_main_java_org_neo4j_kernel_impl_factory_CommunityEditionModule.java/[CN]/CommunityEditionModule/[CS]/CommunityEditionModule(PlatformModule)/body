{
  org.neo4j.kernel.impl.util.Dependencies dependencies=platformModule.dependencies;
  Config config=platformModule.config;
  LogService logging=platformModule.logging;
  FileSystemAbstraction fileSystem=platformModule.fileSystem;
  PageCache pageCache=platformModule.pageCache;
  File storeDir=platformModule.storeDir;
  DataSourceManager dataSourceManager=platformModule.dataSourceManager;
  LifeSupport life=platformModule.life;
  life.add(platformModule.dataSourceManager);
  GraphDatabaseFacade graphDatabaseFacade=platformModule.graphDatabaseFacade;
  lockManager=dependencies.satisfyDependency(createLockManager(config,logging));
  statementLocksFactory=createStatementLocksFactory(lockManager,config,logging);
  idTypeConfigurationProvider=createIdTypeConfigurationProvider(config);
  idGeneratorFactory=dependencies.satisfyDependency(createIdGeneratorFactory(fileSystem,idTypeConfigurationProvider));
  propertyKeyTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingPropertyKeyTokenHolder(createPropertyKeyCreator(config,dataSourceManager,idGeneratorFactory))));
  labelTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingLabelTokenHolder(createLabelIdCreator(config,dataSourceManager,idGeneratorFactory))));
  relationshipTypeTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingRelationshipTypeTokenHolder(createRelationshipTypeCreator(config,dataSourceManager,idGeneratorFactory))));
  dependencies.satisfyDependency(createKernelData(fileSystem,pageCache,storeDir,config,graphDatabaseFacade,life));
  createAuthManagerLog(config,logging,platformModule.fileSystem,platformModule.jobScheduler);
  life.add(dependencies.satisfyDependency(createAuthManager(config,logging,platformModule.fileSystem,platformModule.jobScheduler)));
  commitProcessFactory=new CommunityCommitProcessFactory();
  headerInformationFactory=createHeaderInformationFactory();
  schemaWriteGuard=createSchemaWriteGuard();
  transactionStartTimeout=config.get(GraphDatabaseSettings.transaction_start_timeout);
  constraintSemantics=createSchemaRuleVerifier();
  coreAPIAvailabilityGuard=new CoreAPIAvailabilityGuard(platformModule.availabilityGuard,transactionStartTimeout);
  ioLimiter=IOLimiter.unlimited();
  eligibleForIdReuse=IdReuseEligibility.ALWAYS;
  registerRecovery(platformModule.databaseInfo,life,dependencies);
  publishEditionInfo(dependencies.resolveDependency(UsageData.class),platformModule.databaseInfo,config);
  dependencies.satisfyDependency(createSessionTracker());
}
