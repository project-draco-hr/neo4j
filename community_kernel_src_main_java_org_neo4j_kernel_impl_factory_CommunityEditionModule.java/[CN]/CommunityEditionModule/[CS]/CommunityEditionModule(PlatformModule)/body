{
  org.neo4j.kernel.impl.util.Dependencies dependencies=platformModule.dependencies;
  Config config=platformModule.config;
  LogService logging=platformModule.logging;
  FileSystemAbstraction fileSystem=platformModule.fileSystem;
  PageCache pageCache=platformModule.pageCache;
  File storeDir=platformModule.storeDir;
  DataSourceManager dataSourceManager=platformModule.dataSourceManager;
  LifeSupport life=platformModule.life;
  GraphDatabaseFacade graphDatabaseFacade=platformModule.graphDatabaseFacade;
  lockManager=dependencies.satisfyDependency(createLockManager(config,logging));
  idGeneratorFactory=dependencies.satisfyDependency(createIdGeneratorFactory(fileSystem));
  propertyKeyTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingPropertyKeyTokenHolder(createPropertyKeyCreator(config,dataSourceManager,idGeneratorFactory))));
  labelTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingLabelTokenHolder(createLabelIdCreator(config,dataSourceManager,idGeneratorFactory))));
  relationshipTypeTokenHolder=life.add(dependencies.satisfyDependency(new DelegatingRelationshipTypeTokenHolder(createRelationshipTypeCreator(config,dataSourceManager,idGeneratorFactory))));
  dependencies.satisfyDependency(createKernelData(fileSystem,pageCache,storeDir,config,graphDatabaseFacade,life));
  commitProcessFactory=new CommunityCommitProcessFactory();
  headerInformationFactory=createHeaderInformationFactory();
  schemaWriteGuard=createSchemaWriteGuard();
  transactionStartTimeout=config.get(GraphDatabaseSettings.transaction_start_timeout);
  upgradeConfiguration=new ConfigMapUpgradeConfiguration(config);
  constraintSemantics=createSchemaRuleVerifier();
  registerRecovery(config.get(GraphDatabaseFacadeFactory.Configuration.editionName),life,dependencies);
  publishEditionInfo(dependencies.resolveDependency(UsageData.class));
}
