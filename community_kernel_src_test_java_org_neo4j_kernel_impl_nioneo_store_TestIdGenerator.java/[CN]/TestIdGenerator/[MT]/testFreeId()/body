{
  try {
    IdGeneratorImpl.createGenerator(fs,idGeneratorFile());
    IdGenerator idGenerator=new IdGeneratorImpl(fs,idGeneratorFile(),3,1000,false);
    for (long i=0; i < 7; i++) {
      assertEquals(i,idGenerator.nextId());
    }
    try {
      idGenerator.freeId(-1);
      fail("Negative id should throw exception");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      idGenerator.freeId(7);
      fail("Greater id than ever returned should throw exception");
    }
 catch (    IllegalArgumentException e) {
    }
    for (int i=0; i < 7; i++) {
      idGenerator.freeId(i);
    }
    closeIdGenerator(idGenerator);
    idGenerator=new IdGeneratorImpl(fs,idGeneratorFile(),2,1000,false);
    assertEquals(0l,idGenerator.nextId());
    assertEquals(1l,idGenerator.nextId());
    assertEquals(2l,idGenerator.nextId());
    closeIdGenerator(idGenerator);
    idGenerator=new IdGeneratorImpl(fs,idGeneratorFile(),30,1000,false);
    assertEquals(4l,idGenerator.nextId());
    assertEquals(5l,idGenerator.nextId());
    assertEquals(6l,idGenerator.nextId());
    assertEquals(3l,idGenerator.nextId());
    closeIdGenerator(idGenerator);
  }
  finally {
    File file=idGeneratorFile();
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
}
