{
  final Config config=platformModule.config;
  final LogService logging=platformModule.logging;
  final FileSystemAbstraction fileSystem=platformModule.fileSystem;
  final LifeSupport life=platformModule.life;
  LogProvider logProvider=logging.getInternalLogProvider();
  final CoreReplicatedContentMarshal marshal=new CoreReplicatedContentMarshal();
  RaftLog underlyingLog=createRaftLog(config,life,fileSystem,clusterStateDirectory,marshal,logProvider,platformModule.jobScheduler);
  raftLog=new MonitoredRaftLog(underlyingLog,platformModule.monitors);
  StateStorage<TermState> termState;
  StateStorage<VoteState> voteState;
  StateStorage<RaftMembershipState> raftMembershipStorage;
  try {
    StateStorage<TermState> durableTermState=life.add(new DurableStateStorage<>(fileSystem,clusterStateDirectory,RAFT_TERM_NAME,new TermState.Marshal(),config.get(CoreEdgeClusterSettings.term_state_size),logProvider));
    termState=new MonitoredTermStateStorage(durableTermState,platformModule.monitors);
    voteState=life.add(new DurableStateStorage<>(fileSystem,clusterStateDirectory,RAFT_VOTE_NAME,new VoteState.Marshal(new MemberId.Marshal()),config.get(CoreEdgeClusterSettings.vote_state_size),logProvider));
    raftMembershipStorage=life.add(new DurableStateStorage<>(fileSystem,clusterStateDirectory,RAFT_MEMBERSHIP_NAME,new RaftMembershipState.Marshal(),config.get(CoreEdgeClusterSettings.raft_membership_state_size),logProvider));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  long electionTimeout=config.get(CoreEdgeClusterSettings.leader_election_timeout);
  long heartbeatInterval=electionTimeout / 3;
  Integer expectedClusterSize=config.get(CoreEdgeClusterSettings.expected_core_cluster_size);
  MemberIdSetBuilder memberSetBuilder=new MemberIdSetBuilder();
  SendToMyself leaderOnlyReplicator=new SendToMyself(myself,outbound);
  raftMembershipManager=new RaftMembershipManager(leaderOnlyReplicator,memberSetBuilder,raftLog,logProvider,expectedClusterSize,electionTimeout,Clocks.systemClock(),config.get(join_catch_up_timeout),raftMembershipStorage);
  life.add(raftMembershipManager);
  RaftLogShippingManager logShipping=new RaftLogShippingManager(outbound,logProvider,raftLog,Clocks.systemClock(),myself,raftMembershipManager,electionTimeout,config.get(catchup_batch_size),config.get(log_shipping_max_lag),inFlightMap);
  raftTimeoutService=new DelayedRenewableTimeoutService(Clocks.systemClock(),logProvider);
  raftMachine=new RaftMachine(myself,termState,voteState,raftLog,electionTimeout,heartbeatInterval,raftTimeoutService,outbound,logProvider,raftMembershipManager,logShipping,inFlightMap,platformModule.monitors);
  life.add(new RaftDiscoveryServiceConnector(discoveryService,raftMachine));
  life.add(logShipping);
}
