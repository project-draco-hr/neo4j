{
  Map<Class<?>,AtomicInteger> readLockCounterMap=new HashMap<>();
  Map<Class<?>,AtomicInteger> writeLockCounterMap=new HashMap<>();
  for (  LockReleaseCallback lock : locks) {
    Map<Class<?>,AtomicInteger> map=lock.lockType == LockType.READ ? readLockCounterMap : writeLockCounterMap;
    AtomicInteger counter=map.get(lock.lock.getClass());
    if (counter == null) {
      counter=new AtomicInteger();
      map.put(lock.lock.getClass(),counter);
    }
    counter.incrementAndGet();
  }
  StringBuilder sb=new StringBuilder("[");
  for (  Map.Entry<Class<?>,AtomicInteger> readEntry : readLockCounterMap.entrySet()) {
    sb.append("READ ").append(readEntry.getKey().getSimpleName()).append("s: ");
    sb.append(readEntry.getValue().get()).append(", ");
  }
  for (  Map.Entry<Class<?>,AtomicInteger> writeEntry : writeLockCounterMap.entrySet()) {
    sb.append("WRITE ").append(writeEntry.getKey().getSimpleName()).append("s: ");
    sb.append(writeEntry.getValue().get()).append(", ");
  }
  if (sb.length() > 1) {
    sb.setLength(sb.length() - 2);
  }
  return sb.append(']').toString();
}
