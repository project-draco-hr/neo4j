{
  return new SlavePriority(){
    final AtomicInteger index=new AtomicInteger();
    @Override public Iterator<Slave> prioritize(    final Slave[] slaves){
      final List<Slave> slaveList=sortSlaves(slaves,true);
      return new PrefetchingIterator<Slave>(){
        private int start=index.getAndIncrement() % slaves.length;
        private int count;
        @Override protected Slave fetchNextOrNull(){
          int id=count++;
          return id <= slaves.length ? slaveList.get((start + id) % slaves.length) : null;
        }
      }
;
    }
  }
;
}
