{
  JMXServiceURL url=null;
  Log log=kernel.graphDatabase().getDependencyResolver().resolveDependency(LogService.class).getInternalLog(HotspotManagementSupport.class);
  try {
    Class<?> cal=Class.forName("sun.management.ConnectorAddressLink");
    try {
      Method importRemoteFrom=cal.getMethod("importRemoteFrom",int.class);
      @SuppressWarnings("unchecked") Map<String,String> remote=(Map<String,String>)importRemoteFrom.invoke(null,0);
      url=getUrlFrom(remote);
    }
 catch (    NoSuchMethodException ex) {
    }
    if (url == null) {
      Method importFrom=cal.getMethod("importFrom",int.class);
      url=getUrlFrom((String)importFrom.invoke(null,0));
    }
  }
 catch (  InvocationTargetException e) {
    log.warn("Failed to load local JMX connection URL.",e.getTargetException());
  }
catch (  LinkageError e) {
    log.warn("Failed to load local JMX connection URL.",e);
  }
catch (  Exception e) {
    log.warn("Failed to load local JMX connection URL.",e);
  }
  if (url == null) {
    int port=0;
    try {
      port=Integer.parseInt(kernel.getConfig().getParams().get("jmx.port"));
    }
 catch (    NumberFormatException ok) {
    }
    if (port > 0) {
      boolean useSSL=Boolean.parseBoolean(kernel.getConfig().getParams().get("jmx.use_ssl"));
      log.debug("Creating new MBean server on port %s%s",port,useSSL ? " using ssl" : "");
      JMXConnectorServer server=createServer(port,useSSL,log);
      if (server != null) {
        try {
          server.start();
        }
 catch (        IOException e) {
          log.warn("Failed to start MBean server",e);
          server=null;
        }
        if (server != null) {
          try {
            server.getMBeanServer().registerMBean(server,KernelProxy.createObjectName(kernel.instanceId(),"JMX Server"));
          }
 catch (          Exception e) {
            log.warn("Failed to register MBean server as JMX bean",e);
          }
          url=server.getAddress();
        }
      }
    }
  }
  return url;
}
