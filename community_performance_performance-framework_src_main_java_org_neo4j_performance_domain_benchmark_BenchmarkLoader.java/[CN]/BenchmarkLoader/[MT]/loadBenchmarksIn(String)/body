{
  Reflections reflections=new Reflections(rootPackageName);
  Set<Class<? extends Benchmark>> caseClasses=reflections.getSubTypesOf(Benchmark.class);
  Collection<Benchmark> cases=new ArrayList<Benchmark>();
  for (  Class<? extends Benchmark> caseClass : caseClasses) {
    try {
      if (!Modifier.isAbstract(caseClass.getModifiers()) && Modifier.isPublic(caseClass.getModifiers())) {
        cases.add(caseClass.newInstance());
      }
    }
 catch (    Throwable e) {
      System.out.println("WARN: Unable to instantiate benchmark: " + caseClass.getName() + " ("+ e+ ")");
    }
  }
  return cases;
}
