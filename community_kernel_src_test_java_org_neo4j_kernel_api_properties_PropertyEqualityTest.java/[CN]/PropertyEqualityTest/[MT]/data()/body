{
  return asIterable(shouldMatch(true,true),shouldMatch(false,false),shouldNotMatch(true,false),shouldNotMatch(false,true),shouldNotMatch(true,0),shouldNotMatch(false,0),shouldNotMatch(true,1),shouldNotMatch(false,1),shouldNotMatch(false,"false"),shouldNotMatch(true,"true"),shouldMatch((byte)42,(byte)42),shouldMatch((byte)42,(short)42),shouldNotMatch((byte)42,42 + 256),shouldMatch((byte)43,(int)43),shouldMatch((byte)43,(long)43),shouldMatch((byte)23,23.0d),shouldMatch((byte)23,23.0f),shouldNotMatch((byte)23,23.5),shouldNotMatch((byte)23,23.5f),shouldMatch((short)11,(byte)11),shouldMatch((short)42,(short)42),shouldNotMatch((short)42,42 + 65536),shouldMatch((short)43,(int)43),shouldMatch((short)43,(long)43),shouldMatch((short)23,23.0f),shouldMatch((short)23,23.0d),shouldNotMatch((short)23,23.5),shouldNotMatch((short)23,23.5f),shouldMatch(11,(byte)11),shouldMatch(42,(short)42),shouldNotMatch(42,42 + 4294967296L),shouldMatch(43,43),shouldMatch(Integer.MAX_VALUE,Integer.MAX_VALUE),shouldMatch(43,(long)43),shouldMatch(23,23.0),shouldNotMatch(23,23.5),shouldNotMatch(23,23.5f),shouldMatch(11L,(byte)11),shouldMatch(42L,(short)42),shouldMatch(43L,(int)43),shouldMatch(43L,(long)43),shouldMatch(87L,(long)87),shouldMatch(Long.MAX_VALUE,Long.MAX_VALUE),shouldMatch(23L,23.0),shouldNotMatch(23L,23.5),shouldNotMatch(23L,23.5f),shouldMatch(9007199254740992L,9007199254740992D),shouldMatch(11f,(byte)11),shouldMatch(42f,(short)42),shouldMatch(43f,(int)43),shouldMatch(43f,(long)43),shouldMatch(23f,23.0),shouldNotMatch(23f,23.5),shouldNotMatch(23f,23.5f),shouldMatch(3.14f,3.14f),shouldNotMatch(3.14f,3.14d),shouldMatch(11d,(byte)11),shouldMatch(42d,(short)42),shouldMatch(43d,(int)43),shouldMatch(43d,(long)43),shouldMatch(23d,23.0),shouldNotMatch(23d,23.5),shouldNotMatch(23d,23.5f),shouldNotMatch(3.14d,3.14f),shouldMatch(3.14d,3.14d),shouldMatch("A","A"),shouldMatch('A','A'),shouldMatch('A',"A"),shouldMatch("A",'A'),shouldNotMatch("AA",'A'),shouldNotMatch("a","A"),shouldNotMatch("A","a"),shouldNotMatch("0",0),shouldNotMatch('0',0),shouldMatch(new int[]{1,2,3},new int[]{1,2,3}),shouldMatch(new int[]{1,2,3},new long[]{1,2,3}),shouldMatch(new int[]{1,2,3},new double[]{1.0,2.0,3.0}),shouldMatch(new String[]{"A","B","C"},new String[]{"A","B","C"}),shouldMatch(new String[]{"A","B","C"},new char[]{'A','B','C'}),shouldMatch(new char[]{'A','B','C'},new String[]{"A","B","C"}));
}
