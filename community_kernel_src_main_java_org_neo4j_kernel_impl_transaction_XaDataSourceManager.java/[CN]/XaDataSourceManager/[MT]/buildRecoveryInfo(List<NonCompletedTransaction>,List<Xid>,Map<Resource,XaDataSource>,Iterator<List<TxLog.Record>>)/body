{
  while (danglingRecordList.hasNext()) {
    Iterator<TxLog.Record> dListItr=danglingRecordList.next().iterator();
    TxLog.Record startRecord=dListItr.next();
    if (startRecord.getType() != TxLog.TX_START) {
      throw logAndReturn("TM error building recovery info",new TransactionFailureException("First record not a start record, type=" + startRecord.getType()));
    }
    HashSet<Resource> branchSet=new HashSet<Resource>();
    int markedCommit=-1;
    while (dListItr.hasNext()) {
      TxLog.Record record=dListItr.next();
      if (record.getType() == TxLog.BRANCH_ADD) {
        if (markedCommit != -1) {
          throw logAndReturn("TM error building recovery info",new TransactionFailureException("Already marked commit " + startRecord));
        }
        branchSet.add(new Resource(record.getBranchId()));
      }
 else       if (record.getType() == TxLog.MARK_COMMIT) {
        if (markedCommit != -1) {
          throw logAndReturn("TM error building recovery info",new TransactionFailureException("Already marked commit " + startRecord));
        }
        markedCommit=record.getSequenceNumber();
      }
 else {
        throw logAndReturn("TM error building recovery info",new TransactionFailureException("Illegal record type[" + record.getType() + "]"));
      }
    }
    Iterator<Resource> resourceItr=branchSet.iterator();
    List<Xid> xids=new LinkedList<Xid>();
    while (resourceItr.hasNext()) {
      Resource resource=resourceItr.next();
      if (!resourceMap.containsKey(resource)) {
        resourceMap.put(resource,getDataSource(resource.getResourceId()));
      }
      xids.add(new XidImpl(startRecord.getGlobalId(),resource.getResourceId()));
    }
    if (markedCommit != -1) {
      commitList.add(new NonCompletedTransaction(markedCommit,xids));
    }
 else {
      rollbackList.addAll(xids);
    }
  }
}
