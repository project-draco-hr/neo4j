{
  client.connect(address).send(TransportTestUtil.acceptedVersions(1,0,0,0)).send(TransportTestUtil.chunk(init("TestClient/1.1",map("principal","neo4j","credentials","neo4j","scheme","basic"))));
  assertThat(client,eventuallyRecieves(new byte[]{0,0,0,1}));
  assertThat(client,eventuallyRecieves(msgSuccess(Collections.singletonMap("credentials_expired",true))));
  client.send(TransportTestUtil.chunk(run("CALL dbms.changePassword",Collections.singletonMap("password","secret")),pullAll()));
  assertThat(client,eventuallyRecieves(msgSuccess()));
  reconnect();
  client.connect(address).send(TransportTestUtil.acceptedVersions(1,0,0,0)).send(TransportTestUtil.chunk(init("TestClient/1.1",map("principal","neo4j","credentials","secret","scheme","basic"))));
  assertThat(client,eventuallyRecieves(new byte[]{0,0,0,1}));
  assertThat(client,eventuallyRecieves(msgSuccess()));
  client.send(TransportTestUtil.chunk(run("CALL dbms.createUser( 'neo', 'invalid', false ) CALL dbms.addUserToRole( 'neo', 'reader' ) RETURN 0"),pullAll()));
  assertThat(client,eventuallyRecieves(msgSuccess()));
  reconnect();
  client.connect(address).send(TransportTestUtil.acceptedVersions(1,0,0,0)).send(TransportTestUtil.chunk(init("TestClient/1.1",map("principal","neo","credentials","abc123","scheme","basic"))));
  assertThat(client,eventuallyRecieves(new byte[]{0,0,0,1}));
  assertThat(client,eventuallyRecieves(msgSuccess()));
  client.send(TransportTestUtil.chunk(run("MATCH (n) RETURN n"),pullAll()));
  assertThat(client,eventuallyRecieves(msgSuccess(),msgSuccess()));
  client.send(TransportTestUtil.chunk(run("CREATE ()"),pullAll()));
  assertThat(client,eventuallyRecieves(msgFailure(Status.Security.Forbidden,String.format("Write operations are not allowed for `neo` transactions."))));
}
