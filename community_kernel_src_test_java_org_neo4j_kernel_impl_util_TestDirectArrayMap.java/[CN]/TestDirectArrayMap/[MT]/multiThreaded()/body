{
  final int size=15;
  final int count=10000000;
{
    final Map<Integer,String> map=new ConcurrentHashMap<Integer,String>();
    for (int i=0; i < 3; i++)     map.put(i,"yo " + i);
    List<Thread> threads=new ArrayList<Thread>();
    long t=currentTimeMillis();
    for (int i=0; i < 3; i++) {
      Thread thread=new Thread(){
        @Override public void run(){
          for (int i=0; i < count; i++) {
            map.get(i % size);
            if (count % 100000 == 0 && i > 0) {
              int key=(int)(currentTimeMillis() % size);
              map.put(key,"yo " + key);
            }
          }
        }
      }
;
      thread.start();
      threads.add(thread);
    }
    for (    Thread thread : threads) {
      thread.join();
    }
    System.out.println("map " + (currentTimeMillis() - t));
  }
{
    final DirectArrayMap<String> map=new DirectArrayMap<String>(size);
    for (int i=0; i < 3; i++)     map.put(i,"yo " + i);
    List<Thread> threads=new ArrayList<Thread>();
    long t=currentTimeMillis();
    for (int i=0; i < 3; i++) {
      Thread thread=new Thread(){
        @Override public void run(){
          for (int i=0; i < count; i++) {
            map.get(i % size);
            if (count % 100000 == 0 && i > 0) {
              int key=(int)(currentTimeMillis() % size);
              map.put(key,"yo " + key);
            }
          }
        }
      }
;
      thread.start();
      threads.add(thread);
    }
    for (    Thread thread : threads) {
      thread.join();
    }
    System.out.println("dmap " + (currentTimeMillis() - t));
  }
}
