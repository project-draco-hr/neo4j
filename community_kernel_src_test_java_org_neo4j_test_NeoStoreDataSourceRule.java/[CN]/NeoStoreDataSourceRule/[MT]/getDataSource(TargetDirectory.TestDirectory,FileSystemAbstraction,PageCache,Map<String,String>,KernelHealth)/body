{
  if (theDs != null) {
    theDs.stop();
    theDs.shutdown();
  }
  final Config config=new Config(stringMap(additionalConfig,InternalAbstractGraphDatabase.Configuration.store_dir.name(),dir.directory("dir").getPath(),InternalAbstractGraphDatabase.Configuration.neo_store.name(),"neo"),GraphDatabaseSettings.class);
  StoreFactory sf=new StoreFactory(config,new DefaultIdGeneratorFactory(),pageCache,fs,StringLogger.DEV_NULL,new Monitors());
  Locks locks=mock(Locks.class);
  when(locks.newClient()).thenReturn(mock(Locks.Client.class));
  Caches caches=new DefaultCaches(StringLogger.DEV_NULL,new Monitors());
  caches.configure(new NoCacheProvider(),config);
  theDs=new NeoStoreDataSource(config,sf,StringLogger.DEV_NULL,mock(JobScheduler.class),DevNullLoggingService.DEV_NULL,mock(TokenNameLookup.class),dependencyResolverForNoIndexProvider(),mock(PropertyKeyTokenHolder.class),mock(LabelTokenHolder.class),mock(RelationshipTypeTokenHolder.class),locks,mock(SchemaWriteGuard.class),mock(TransactionEventHandlers.class),IndexingService.NO_MONITOR,fs,mock(StoreUpgrader.class),mock(TransactionMonitor.class),kernelHealth,mock(PhysicalLogFile.Monitor.class),TransactionHeaderInformationFactory.DEFAULT,new StartupStatisticsProvider(),caches,mock(NodeManager.class),null,null,InternalAbstractGraphDatabase.defaultCommitProcessFactory,mock(PageCache.class),mock(Monitors.class),new Tracers("null",StringLogger.DEV_NULL));
  return theDs;
}
