{
  LinkedList<byte[]> byteArrayList=new LinkedList<byte[]>();
  PersistenceWindow window=acquireWindow(blockId,OperationType.READ);
  try {
    Buffer buffer=window.getOffsettedBuffer(blockId);
    byte inUse=buffer.get();
    if (inUse != Record.IN_USE.byteValue()) {
      throw new StoreFailureException("Not in use [" + inUse + "] blockId["+ blockId+ "]");
    }
    int prevBlock=buffer.getInt();
    if (prevBlock != Record.NO_PREV_BLOCK.intValue()) {
      throw new StoreFailureException("Start block has previous block set");
    }
    int nextBlock=blockId;
    int dataSize=getBlockSize() - BLOCK_HEADER_SIZE;
    do {
      int nrOfBytes=buffer.getInt();
      prevBlock=nextBlock;
      nextBlock=buffer.getInt();
      if (nextBlock != Record.NO_NEXT_BLOCK.intValue() && nrOfBytes < dataSize || nrOfBytes > dataSize) {
        throw new StoreFailureException("Next block set[" + nextBlock + "] current block illegal size["+ nrOfBytes+ "/"+ dataSize+ "]");
      }
      byte byteArrayElement[]=new byte[nrOfBytes];
      buffer.get(byteArrayElement);
      byteArrayList.add(byteArrayElement);
      if (nextBlock != Record.NO_NEXT_BLOCK.intValue()) {
        releaseWindow(window);
        window=acquireWindow(nextBlock,OperationType.READ);
        buffer=window.getOffsettedBuffer(nextBlock);
        inUse=buffer.get();
        if (inUse != Record.IN_USE.byteValue()) {
          throw new StoreFailureException("Next block[" + nextBlock + "] not in use ["+ inUse+ "]");
        }
        if (buffer.getInt() != prevBlock) {
          throw new StoreFailureException("Previous block don't match");
        }
      }
    }
 while (nextBlock != Record.NO_NEXT_BLOCK.intValue());
  }
  finally {
    releaseWindow(window);
  }
  int totalSize=0;
  Iterator<byte[]> itr=byteArrayList.iterator();
  while (itr.hasNext()) {
    totalSize+=itr.next().length;
  }
  byte allBytes[]=new byte[totalSize];
  itr=byteArrayList.iterator();
  int index=0;
  while (itr.hasNext()) {
    byte currentArray[]=itr.next();
    System.arraycopy(currentArray,0,allBytes,index,currentArray.length);
    index+=currentArray.length;
  }
  return allBytes;
}
