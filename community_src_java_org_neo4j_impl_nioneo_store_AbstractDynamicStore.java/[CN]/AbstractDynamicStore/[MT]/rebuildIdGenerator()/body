{
  logger.info("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  File file=new File(getStorageFileName() + ".id");
  if (file.exists()) {
    file.delete();
  }
  IdGenerator.createGenerator(getStorageFileName() + ".id");
  openIdGenerator();
  nextBlockId();
  FileChannel fileChannel=getFileChannel();
  long fileSize=fileChannel.size();
  long defragedCount=0;
  ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[1]);
  LinkedList<Integer> freeIdList=new LinkedList<Integer>();
  int highId=0;
  for (int i=1; i * getBlockSize() < fileSize; i++) {
    fileChannel.position(i * getBlockSize());
    fileChannel.read(byteBuffer);
    byteBuffer.flip();
    byte inUse=byteBuffer.get();
    byteBuffer.flip();
    nextBlockId();
    if (inUse == Record.NOT_IN_USE.byteValue()) {
      freeIdList.add(i);
    }
 else {
      highId=i;
      while (!freeIdList.isEmpty()) {
        freeBlockId(freeIdList.removeFirst());
        defragedCount++;
      }
    }
  }
  setHighId(highId + 1);
  logger.info("[" + getStorageFileName() + "] high id="+ getHighId()+ " (defraged="+ defragedCount+ ")");
  closeIdGenerator();
  openIdGenerator();
}
