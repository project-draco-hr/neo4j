{
  return new PrefetchingIterator<SchemaRule>(){
    private final long highestId=getHighestPossibleIdInUse();
    private long currentId=1;
    private final byte[] scratchData=newRecordBuffer();
    @Override protected SchemaRule fetchNextOrNull(){
      while (currentId <= highestId) {
        long id=currentId++;
        DynamicRecord record=forceGetRecord(id);
        if (record.inUse() && record.isStartRecord()) {
          try {
            return forceGetSchemaRule(id,scratchData);
          }
 catch (          MalformedSchemaRuleException e) {
            throw launderedException(e);
          }
        }
      }
      return null;
    }
  }
;
}
