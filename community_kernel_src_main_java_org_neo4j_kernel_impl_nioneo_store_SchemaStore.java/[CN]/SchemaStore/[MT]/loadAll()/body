{
  return new Iterable<SchemaRule>(){
    @Override public Iterator<SchemaRule> iterator(){
      return new PrefetchingIterator<SchemaRule>(){
        private final long highestId=getHighestPossibleIdInUse();
        private long currentId=1;
        private byte[] scratchData=new byte[getRecordSize() * 4];
        @Override protected SchemaRule fetchNextOrNull(){
          while (currentId <= highestId) {
            long id=currentId++;
            DynamicRecord record=forceGetRecord(id);
            if (!record.inUse() || !record.isStartRecord())             continue;
            Collection<DynamicRecord> records=getRecords(id);
            ByteBuffer scratchBuffer=concatData(records,scratchData);
            scratchData=scratchBuffer.array();
            SchemaRule schemaRule=deserialize(id,scratchBuffer);
            return schemaRule;
          }
          return null;
        }
      }
;
    }
  }
;
}
