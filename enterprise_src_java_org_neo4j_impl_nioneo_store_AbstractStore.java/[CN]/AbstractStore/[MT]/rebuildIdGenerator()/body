{
  final byte RECORD_NOT_IN_USE=0;
  logger.fine("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  File file=new File(getStorageFileName() + ".id");
  if (file.exists()) {
    file.delete();
  }
  IdGenerator.createGenerator(getStorageFileName() + ".id");
  openIdGenerator();
  FileChannel fileChannel=getFileChannel();
  long fileSize=fileChannel.size();
  int recordSize=getRecordSize();
  long defraggedCount=0;
  ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[1]);
  LinkedList<Integer> freeIdList=new LinkedList<Integer>();
  int highId=-1;
  for (long i=0; i * recordSize < fileSize && recordSize > 0; i++) {
    fileChannel.position(i * recordSize);
    fileChannel.read(byteBuffer);
    byteBuffer.flip();
    byte inUse=byteBuffer.get();
    byteBuffer.flip();
    nextId();
    if (inUse == RECORD_NOT_IN_USE) {
      freeIdList.add((int)i);
    }
 else {
      highId=(int)i;
      while (!freeIdList.isEmpty()) {
        freeId(freeIdList.removeFirst());
        defraggedCount++;
      }
    }
  }
  setHighId(highId + 1);
  logger.fine("[" + getStorageFileName() + "] high id="+ getHighId()+ " (defragged="+ defraggedCount+ ")");
  closeIdGenerator();
  openIdGenerator();
}
