{
  String storeDir=configuration.get(store_dir);
  FileUtils.deleteRecursively(new File(storeDir));
  DataGenerator generator=new DataGenerator(configuration);
  BatchInserter batchInserter=BatchInserters.inserter(storeDir,batchInserterConfig(configuration));
  try {
    generator.generateData(batchInserter);
  }
  finally {
    batchInserter.shutdown();
  }
  Neo4jJobScheduler jobScheduler=new Neo4jJobScheduler();
  jobScheduler.init();
  PageSwapperFactory swapperFactory=new SingleFilePageSwapperFactory(new DefaultFileSystemAbstraction());
  LifecycledPageCache pageCache=new LifecycledPageCache(swapperFactory,jobScheduler,new Config(),PageCacheMonitor.NULL);
  pageCache.start();
  StoreAccess stores=new StoreAccess(pageCache,storeDir);
  try {
    printCount(stores.getNodeStore());
    printCount(stores.getRelationshipStore());
    printCount(stores.getPropertyStore());
    printCount(stores.getStringStore());
    printCount(stores.getArrayStore());
    if (configuration.get(report_stats)) {
      PropertyStats stats=new PropertyStats();
      stats.applyFiltered(stores.getPropertyStore(),RecordStore.IN_USE);
      System.out.println(stats);
    }
  }
  finally {
    stores.close();
    pageCache.flush();
    pageCache.close();
    pageCache.stop();
    jobScheduler.shutdown();
  }
}
