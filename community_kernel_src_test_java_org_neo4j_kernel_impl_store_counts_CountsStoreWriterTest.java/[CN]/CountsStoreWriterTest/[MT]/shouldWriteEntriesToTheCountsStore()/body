{
  final CountsStoreWriter writer=new CountsStoreWriter(fs,pageCache,emptyHeader,file,lastTxId);
  DoubleLongRegister valueRegister=Registers.newDoubleLongRegister();
  valueRegister.write(0,42);
  writer.visit(nodeKey(0),valueRegister);
  valueRegister.write(0,24);
  writer.visit(relationshipKey(1,2,3),valueRegister);
  valueRegister.write(9,11);
  writer.visit(indexCountsKey(4,5),valueRegister);
  valueRegister.write(24,84);
  writer.visit(indexSampleKey(4,5),valueRegister);
  writer.close();
  try {
    final SortedKeyValueStore counts=writer.openForReading();
    assertEquals(lastTxId,counts.lastTxId());
    assertEquals(4,counts.totalRecordsStored());
    assertEquals(file,counts.file());
    counts.accept(new KeyValueRecordVisitor<CountsKey,DoubleLongRegister>(){
      @Override public void visit(      CountsKey key,      DoubleLongRegister valueRegister){
        key.accept(new CountsVisitor(){
          @Override public void visitNodeCount(          int labelId,          long count){
            assertEquals(0,labelId);
            assertEquals(42,count);
          }
          @Override public void visitRelationshipCount(          int startLabelId,          int typeId,          int endLabelId,          long count){
            assertEquals(1,startLabelId);
            assertEquals(2,typeId);
            assertEquals(3,endLabelId);
            assertEquals(24,count);
          }
          @Override public void visitIndexCounts(          int labelId,          int propertyKeyId,          long updates,          long size){
            assertEquals(4,labelId);
            assertEquals(5,propertyKeyId);
            assertEquals(9,updates);
            assertEquals(11,size);
          }
          @Override public void visitIndexSample(          int labelId,          int propertyKeyId,          long unique,          long size){
            assertEquals(4,labelId);
            assertEquals(5,propertyKeyId);
            assertEquals(24,unique);
            assertEquals(84,size);
          }
        }
,valueRegister.readFirst(),valueRegister.readSecond());
      }
    }
,Registers.newDoubleLongRegister());
  }
  finally {
    pageCache.unmap(file);
  }
}
