{
  GraphDatabaseService db=databaseRule.getGraphDatabaseAPI();
  Node source;
  Node sink;
  try (Transaction tx=db.beginTx()){
    source=db.createNode();
    sink=db.createNode();
    createRelationshipsBetweenNodes(source,sink,40);
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    createRelationshipsBetweenNodes(source,sink,60);
    assertEquals(100,source.getDegree());
    assertEquals(100,source.getDegree(Direction.OUTGOING));
    assertEquals(0,source.getDegree(Direction.INCOMING));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type0")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type1")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type2")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type3")));
    assertEquals(100,sink.getDegree());
    assertEquals(0,sink.getDegree(Direction.OUTGOING));
    assertEquals(100,sink.getDegree(Direction.INCOMING));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type0")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type1")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type2")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type3")));
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    assertEquals(100,source.getDegree());
    assertEquals(100,source.getDegree(Direction.OUTGOING));
    assertEquals(0,source.getDegree(Direction.INCOMING));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type0")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type1")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type2")));
    assertEquals(25,source.getDegree(RelationshipType.withName("Type3")));
    assertEquals(100,sink.getDegree());
    assertEquals(0,sink.getDegree(Direction.OUTGOING));
    assertEquals(100,sink.getDegree(Direction.INCOMING));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type0")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type1")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type2")));
    assertEquals(25,sink.getDegree(RelationshipType.withName("Type3")));
    tx.success();
  }
 }
