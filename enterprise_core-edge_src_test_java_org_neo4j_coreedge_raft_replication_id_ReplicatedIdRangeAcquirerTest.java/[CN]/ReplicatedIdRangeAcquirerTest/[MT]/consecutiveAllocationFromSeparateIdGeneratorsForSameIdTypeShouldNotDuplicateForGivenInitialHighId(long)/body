{
  Set<Long> idAllocations=new HashSet<>();
  int idRangeLength=8;
  ReplicatedIdGenerator generatorOne=createForMemberWithInitialIdAndRangeLength(one,initialHighId,idRangeLength);
  ReplicatedIdGenerator generatorTwo=createForMemberWithInitialIdAndRangeLength(two,initialHighId,idRangeLength);
  long newId=generatorOne.nextId();
  idAllocations.add(newId);
  for (int i=1; i < idRangeLength - initialHighId; i++) {
    newId=generatorOne.nextId();
    boolean wasNew=idAllocations.add(newId);
    assertTrue("Id " + newId + " has already been returned",wasNew);
    assertTrue("Detected gap in id generation, missing " + (newId - 1),idAllocations.contains(newId - 1));
  }
  for (int i=0; i < idRangeLength; i++) {
    newId=generatorTwo.nextId();
    boolean wasNew=idAllocations.add(newId);
    assertTrue("Id " + newId + " has already been returned",wasNew);
    assertTrue("Detected gap in id generation, missing " + (newId - 1),idAllocations.contains(newId - 1));
  }
}
