{
  InstanceId me=new InstanceId(1);
  HighAvailabilityMemberContext context=new SimpleHighAvailabilityMemberContext(me,false);
  AvailabilityGuard guard=mock(AvailabilityGuard.class);
  ClusterMembers members=mock(ClusterMembers.class);
  ClusterMemberEvents events=mock(ClusterMemberEvents.class);
  final Set<ClusterMemberListener> listener=new HashSet<>();
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      listener.add((ClusterMemberListener)invocation.getArguments()[0]);
      return null;
    }
  }
).when(events).addClusterMemberListener(Matchers.<ClusterMemberListener>any());
  Election election=mock(Election.class);
  HighAvailabilityMemberStateMachine toTest=new HighAvailabilityMemberStateMachine(context,guard,members,events,election,NullLogProvider.getInstance());
  toTest.init();
  ClusterMemberListener theListener=listener.iterator().next();
  theListener.coordinatorIsElected(me);
  assertThat(listener.size(),equalTo(1));
  assertThat(toTest.getCurrentState(),equalTo(HighAvailabilityMemberState.TO_MASTER));
}
