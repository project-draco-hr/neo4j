{
  InstanceId me=new InstanceId(1);
  InstanceId other=new InstanceId(2);
  HighAvailabilityMemberContext context=new SimpleHighAvailabilityMemberContext(me,false);
  AvailabilityGuard guard=mock(AvailabilityGuard.class);
  ObservedClusterMembers members=mockClusterMembers(me,other);
  ClusterMemberEvents events=mock(ClusterMemberEvents.class);
  ClusterMemberListenerContainer memberListenerContainer=mockAddClusterMemberListener(events);
  HighAvailabilityMemberStateMachine stateMachine=buildMockedStateMachine(context,events,members,guard);
  stateMachine.init();
  ClusterMemberListener memberListener=memberListenerContainer.get();
  HAStateChangeListener probe=new HAStateChangeListener();
  stateMachine.addHighAvailabilityMemberListener(probe);
  memberListener.coordinatorIsElected(me);
  memberListener.memberIsAvailable(MASTER,me,URI.create("ha://whatever"),StoreId.DEFAULT);
  assertThat(stateMachine.getCurrentState(),equalTo(HighAvailabilityMemberState.MASTER));
  memberListener.memberIsFailed(new InstanceId(2));
  assertThat(stateMachine.getCurrentState(),equalTo(HighAvailabilityMemberState.PENDING));
  assertThat(probe.instanceStops,is(true));
  verify(guard,times(2)).deny(any(AvailabilityGuard.AvailabilityRequirement.class));
}
