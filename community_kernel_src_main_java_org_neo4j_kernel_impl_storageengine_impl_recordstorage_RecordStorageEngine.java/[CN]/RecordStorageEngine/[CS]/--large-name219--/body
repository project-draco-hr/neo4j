{
  this.propertyKeyTokenHolder=propertyKeyTokenHolder;
  this.relationshipTypeTokenHolder=relationshipTypeTokens;
  this.labelTokenHolder=labelTokens;
  this.kernelHealth=kernelHealth;
  this.indexConfigStore=indexConfigStore;
  final StoreFactory storeFactory=new StoreFactory(storeDir,config,idGeneratorFactory,pageCache,fs,logProvider);
  neoStores=storeFactory.openAllNeoStores(true);
  try {
    schemaCache=new SchemaCache(constraintSemantics,Collections.<SchemaRule>emptyList());
    SchemaStorage schemaStorage=new SchemaStorage(neoStores.getSchemaStore());
    providerMap=new DefaultSchemaIndexProviderMap(indexProvider);
    indexingService=IndexingService.create(new IndexSamplingConfig(config),scheduler,providerMap,new NeoStoreIndexStoreView(lockService,neoStores),tokenNameLookup,toList(new SchemaStorage(neoStores.getSchemaStore()).allIndexRules()),logProvider,indexingServiceMonitor,schemaStateChangeCallback);
    integrityValidator=new IntegrityValidator(neoStores,indexingService);
    indexUpdatesValidator=new OnlineIndexUpdatesValidator(neoStores,kernelHealth,new PropertyLoader(neoStores),indexingService,IndexUpdateMode.ONLINE);
    cacheAccess=new BridgingCacheAccess(schemaCache,schemaStateChangeCallback,propertyKeyTokenHolder,relationshipTypeTokens,labelTokens);
    DiskLayer diskLayer=new DiskLayer(propertyKeyTokenHolder,labelTokens,relationshipTypeTokens,schemaStorage,neoStores,indexingService,storeStatementFactory(neoStores,config,lockService));
    procedureCache=new ProcedureCache();
    storeLayer=new CacheLayer(diskLayer,schemaCache,procedureCache);
    this.labelScanStore=labelScanStoreProvider.getLabelScanStore();
    legacyIndexApplierLookup=new LegacyIndexApplierLookup.Direct(legacyIndexProviderLookup);
  }
 catch (  Throwable failure) {
    neoStores.close();
    throw failure;
  }
}
