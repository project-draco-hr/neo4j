{
  ReturnFilter filter=new ReturnFilter(){
    public boolean shouldReturn(    Position position){
      return position.node().equals(end);
    }
  }
;
  final Traverser traverser=traversalDescription.sourceSelector(new SelectorFactory(end)).filter(filter).traverse(start);
  return new Iterable<WeightedPath>(){
    public Iterator<WeightedPath> iterator(){
      return new StopAfterWeightIterator(traverser.paths().iterator(),costEvaluator);
    }
  }
;
}
