{
  Relationship r1=graph.makeEdge("start","b");
  Relationship r2=graph.makeEdge("c","b");
  Relationship r3=graph.makeEdge("c","d");
  Relationship r4=graph.makeEdge("e","d");
  Relationship r5=graph.makeEdge("e","f");
  Relationship r6=graph.makeEdge("g","f");
  Relationship r7=graph.makeEdge("g","end");
  HashMap<Relationship,Direction> dirs=new HashMap<Relationship,Direction>();
  Dijkstra<Double> dijkstra=new Dijkstra<Double>((double)0,graph.getNode("start"),graph.getNode("end"),new directionSavingCostEvaluator(dirs),new org.neo4j.graphalgo.impl.util.DoubleAdder(),new org.neo4j.graphalgo.impl.util.DoubleComparator(),Direction.BOTH,MyRelTypes.R1);
  dijkstra.getCost();
  assertEquals(Direction.OUTGOING,dirs.get(r1));
  assertEquals(Direction.INCOMING,dirs.get(r2));
  assertEquals(Direction.OUTGOING,dirs.get(r3));
  assertEquals(Direction.INCOMING,dirs.get(r4));
  assertEquals(Direction.OUTGOING,dirs.get(r5));
  assertEquals(Direction.INCOMING,dirs.get(r6));
  assertEquals(Direction.OUTGOING,dirs.get(r7));
}
