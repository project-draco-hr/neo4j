{
  this.logger=logger;
  this.graphDbService=graphDb;
  this.transactionManager=transactionManager;
  this.propertyKeyTokenHolder=propertyKeyTokenHolder;
  this.persistenceManager=persistenceManager;
  this.idGenerator=idGenerator;
  this.labelTokenHolder=labelTokenHolder;
  this.nodeLookup=nodeLookup;
  this.relationshipLookups=relationshipLookups;
  this.relTypeHolder=relationshipTypeTokenHolder;
  this.cacheProvider=cacheProvider;
  this.statementCtxProvider=statementCtxProvider;
  this.nodeCache=new LockStripedCache<NodeImpl>(nodeCache,LOCK_STRIPE_COUNT,nodeLoader);
  this.relCache=new LockStripedCache<RelationshipImpl>(relCache,LOCK_STRIPE_COUNT,relLoader);
  this.xaDsm=xaDsm;
  for (int i=0; i < loadLocks.length; i++) {
    loadLocks[i]=new ReentrantLock();
  }
  nodePropertyTrackers=new LinkedList<PropertyTracker<Node>>();
  relationshipPropertyTrackers=new LinkedList<PropertyTracker<Relationship>>();
  this.graphProperties=instantiateGraphProperties();
}
