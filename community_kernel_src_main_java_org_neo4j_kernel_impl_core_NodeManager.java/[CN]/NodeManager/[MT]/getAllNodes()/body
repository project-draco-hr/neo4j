{
  Iterator<Node> committedNodes=new PrefetchingIterator<Node>(){
    private long highId=idGeneratorFactory.get(IdType.NODE).getHighestPossibleIdInUse();
    private long currentId;
    @Override protected Node fetchNextOrNull(){
      while (true) {
        while (currentId <= highId) {
          try {
            Node node=getNodeByIdOrNull(currentId);
            if (node != null) {
              return node;
            }
          }
  finally {
            currentId++;
          }
        }
        long newHighId=idGeneratorFactory.get(IdType.NODE).getHighestPossibleIdInUse();
        if (newHighId > highId) {
          highId=newHighId;
        }
 else {
          break;
        }
      }
      return null;
    }
  }
;
  final TransactionState txState=getTransactionState();
  if (!txState.hasChanges()) {
    return committedNodes;
  }
  final Set<Long> createdNodes=new HashSet<>(txState.getCreatedNodes());
  if (!createdNodes.isEmpty()) {
    committedNodes=new FilteringIterator<>(committedNodes,new Predicate<Node>(){
      @Override public boolean accept(      Node node){
        return !createdNodes.contains(node.getId());
      }
    }
);
  }
  Iterator<Node> filteredRemovedNodes=new FilteringIterator<>(committedNodes,new Predicate<Node>(){
    @Override public boolean accept(    Node node){
      return !txState.nodeIsDeleted(node.getId());
    }
  }
);
  return new CombiningIterator<>(asList(filteredRemovedNodes,new IteratorWrapper<Node,Long>(createdNodes.iterator()){
    @Override protected Node underlyingObjectToObject(    Long id){
      return getNodeById(id);
    }
  }
));
}
