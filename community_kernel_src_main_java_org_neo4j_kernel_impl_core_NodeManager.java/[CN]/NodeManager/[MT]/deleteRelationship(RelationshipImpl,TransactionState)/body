{
  NodeImpl startNode;
  NodeImpl endNode;
  boolean success=false;
  try {
    long startNodeId=rel.getStartNodeId();
    startNode=getLightNode(startNodeId);
    if (startNode != null) {
      tx.locks().acquireExclusive(ResourceTypes.NODE,startNodeId);
    }
    long endNodeId=rel.getEndNodeId();
    endNode=getLightNode(endNodeId);
    if (endNode != null) {
      tx.locks().acquireExclusive(ResourceTypes.NODE,endNodeId);
    }
    tx.locks().acquireExclusive(ResourceTypes.RELATIONSHIP,rel.getId());
    ArrayMap<Integer,DefinedProperty> skipMap=tx.getOrCreateCowPropertyRemoveMap(rel);
    tx.deleteRelationship(rel.getId());
    ArrayMap<Integer,DefinedProperty> removedProps=persistenceManager.relDelete(rel.getId());
    if (removedProps.size() > 0) {
      for (      int index : removedProps.keySet()) {
        skipMap.put(index,removedProps.get(index));
      }
    }
    int typeId=rel.getTypeId();
    long id=rel.getId();
    boolean loop=startNodeId == endNodeId;
    if (startNode != null) {
      tx.getOrCreateCowRelationshipRemoveMap(startNode,typeId).add(id,loop ? Direction.BOTH : Direction.OUTGOING);
    }
    if (endNode != null && !loop) {
      tx.getOrCreateCowRelationshipRemoveMap(endNode,typeId).add(id,Direction.INCOMING);
    }
    success=true;
    return removedProps;
  }
  finally {
    if (!success) {
      setRollbackOnly();
    }
  }
}
