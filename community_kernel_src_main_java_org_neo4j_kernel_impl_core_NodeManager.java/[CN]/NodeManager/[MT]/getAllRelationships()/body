{
  Iterator<Relationship> committedRelationships=new PrefetchingIterator<Relationship>(){
    private long highId=getHighestPossibleIdInUse(Relationship.class);
    private long currentId;
    @Override protected Relationship fetchNextOrNull(){
      while (true) {
        while (currentId <= highId) {
          try {
            Relationship relationship=getRelationshipByIdOrNull(currentId);
            if (relationship != null) {
              return relationship;
            }
          }
  finally {
            currentId++;
          }
        }
        long newHighId=getHighestPossibleIdInUse(Node.class);
        if (newHighId > highId)         highId=newHighId;
 else         break;
      }
      return null;
    }
  }
;
  final TransactionState txState=getTransactionState();
  if (!txState.hasChanges())   return committedRelationships;
  final Set<Long> createdRelationships=new HashSet<Long>(txState.getCreatedRelationships());
  if (!createdRelationships.isEmpty()) {
    committedRelationships=new FilteringIterator<Relationship>(committedRelationships,new Predicate<Relationship>(){
      @Override public boolean accept(      Relationship relationship){
        return !createdRelationships.contains(relationship.getId());
      }
    }
);
  }
  Iterator<Relationship> filteredRemovedRelationships=new FilteringIterator<Relationship>(committedRelationships,new Predicate<Relationship>(){
    @Override public boolean accept(    Relationship relationship){
      return !txState.relationshipIsDeleted(relationship.getId());
    }
  }
);
  return new CombiningIterator<Relationship>(asList(filteredRemovedRelationships,new IteratorWrapper<Relationship,Long>(createdRelationships.iterator()){
    @Override protected Relationship underlyingObjectToObject(    Long id){
      return getRelationshipById(id);
    }
  }
));
}
