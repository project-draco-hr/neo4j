{
  log.info("Import starting");
  NodeRelationshipCache nodeRelationshipCache=null;
  NodeLabelsCache nodeLabelsCache=null;
  long startTime=currentTimeMillis();
  boolean hasBadEntries=false;
  File badFile=new File(storeDir,Configuration.BAD_FILE_NAME);
  CountingStoreUpdateMonitor storeUpdateMonitor=new CountingStoreUpdateMonitor();
  RecordFormats recordFormats=RecordFormatSelector.selectForConfig(dbConfig,NullLogProvider.getInstance());
  try (BatchingNeoStores neoStore=new BatchingNeoStores(fileSystem,storeDir,recordFormats,config,logService,additionalInitialIds,dbConfig);CountsAccessor.Updater countsUpdater=neoStore.getCountsStore().reset(neoStore.getLastCommittedTransactionId());InputCache inputCache=new InputCache(fileSystem,storeDir,recordFormats)){
    Collector badCollector=input.badCollector();
    IoMonitor writeMonitor=new IoMonitor(neoStore.getIoTracer());
    IdMapper idMapper=input.idMapper();
    IdGenerator idGenerator=input.idGenerator();
    nodeRelationshipCache=new NodeRelationshipCache(AUTO,config.denseNodeThreshold());
    StatsProvider memoryUsageStats=new MemoryUsageStatsProvider(nodeRelationshipCache,idMapper);
    InputIterable<InputNode> nodes=input.nodes();
    InputIterable<InputRelationship> relationships=input.relationships();
    InputIterable<InputNode> cachedNodes=cachedForSure(nodes,inputCache.nodes(MAIN,true));
    InputIterable<InputRelationship> cachedRelationships=cachedForSure(relationships,inputCache.relationships(MAIN,true));
    RelationshipStore relationshipStore=neoStore.getRelationshipStore();
    NodeStage nodeStage=new NodeStage(config,writeMonitor,nodes,idMapper,idGenerator,neoStore,inputCache,neoStore.getLabelScanStore(),storeUpdateMonitor,memoryUsageStats);
    CalculateDenseNodesStage calculateDenseNodesStage=new CalculateDenseNodesStage(config,relationships,nodeRelationshipCache,idMapper,badCollector,inputCache,neoStore);
    if (idMapper.needsPreparation()) {
      executeStages(nodeStage);
      executeStages(new IdMapperPreparationStage(config,idMapper,cachedNodes,badCollector,memoryUsageStats));
      PrimitiveLongIterator duplicateNodeIds=badCollector.leftOverDuplicateNodesIds();
      if (duplicateNodeIds.hasNext()) {
        executeStages(new DeleteDuplicateNodesStage(config,duplicateNodeIds,neoStore));
      }
      executeStages(calculateDenseNodesStage);
    }
 else {
      executeStages(nodeStage,calculateDenseNodesStage);
    }
    importRelationships(nodeRelationshipCache,storeUpdateMonitor,neoStore,writeMonitor,idMapper,cachedRelationships,inputCache,calculateDenseNodesStage.getRelationshipTypes(Long.MAX_VALUE),calculateDenseNodesStage.getRelationshipTypes(config.batchSize()));
    nodeRelationshipCache.close();
    nodeRelationshipCache=null;
    nodeLabelsCache=new NodeLabelsCache(AUTO,neoStore.getLabelRepository().getHighId());
    memoryUsageStats=new MemoryUsageStatsProvider(nodeLabelsCache);
    executeStages(new NodeCountsStage(config,nodeLabelsCache,neoStore.getNodeStore(),neoStore.getLabelRepository().getHighId(),countsUpdater,memoryUsageStats));
    executeStages(new RelationshipCountsStage(config,nodeLabelsCache,relationshipStore,neoStore.getLabelRepository().getHighId(),neoStore.getRelationshipTypeRepository().getHighId(),countsUpdater,AUTO));
    long totalTimeMillis=currentTimeMillis() - startTime;
    executionMonitor.done(totalTimeMillis,storeUpdateMonitor.toString());
    log.info("Import completed, took " + Format.duration(totalTimeMillis) + ". "+ storeUpdateMonitor);
    hasBadEntries=badCollector.badEntries() > 0;
    if (hasBadEntries) {
      log.warn("There were " + badCollector.badEntries() + " bad entries which were skipped "+ "and logged into "+ badFile.getAbsolutePath());
    }
  }
 catch (  Throwable t) {
    log.error("Error during import",t);
    throw Exceptions.launderedException(IOException.class,t);
  }
 finally {
    if (nodeRelationshipCache != null) {
      nodeRelationshipCache.close();
    }
    if (nodeLabelsCache != null) {
      nodeLabelsCache.close();
    }
    if (!hasBadEntries) {
      fileSystem.deleteFile(badFile);
    }
  }
}
