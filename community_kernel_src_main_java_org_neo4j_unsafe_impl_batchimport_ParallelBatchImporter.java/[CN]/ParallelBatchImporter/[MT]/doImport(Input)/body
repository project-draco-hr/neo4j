{
  logger.info("Import starting");
  NodeRelationshipCache nodeRelationshipCache=null;
  NodeLabelsCache nodeLabelsCache=null;
  long startTime=currentTimeMillis();
  boolean hasBadEntries=false;
  File badFile=new File(storeDir,Configuration.BAD_FILE_NAME);
  CountingStoreUpdateMonitor storeUpdateMonitor=new CountingStoreUpdateMonitor();
  try (BatchingNeoStore neoStore=new BatchingNeoStore(fileSystem,storeDir,config,writeMonitor,logging,monitors,writerFactory,additionalInitialIds);CountsAccessor.Updater countsUpdater=neoStore.getCountsStore().reset(neoStore.getLastCommittedTransactionId());InputCache inputCache=new InputCache(fileSystem,storeDir)){
    Collector badCollector=input.badCollector();
    IdMapper idMapper=input.idMapper();
    IdGenerator idGenerator=input.idGenerator();
    nodeRelationshipCache=new NodeRelationshipCache(AUTO,config.denseNodeThreshold());
    StatsProvider memoryUsageStats=new MemoryUsageStatsProvider(nodeRelationshipCache,idMapper);
    InputIterable<InputNode> nodes=input.nodes();
    InputIterable<InputRelationship> relationships=input.relationships();
    NodeStage nodeStage=new NodeStage(config,writeMonitor,writerFactory,nodes,idMapper,idGenerator,neoStore,inputCache,neoStore.getLabelScanStore(),storeUpdateMonitor,memoryUsageStats);
    CalculateDenseNodesStage calculateDenseNodesStage=new CalculateDenseNodesStage(config,relationships,nodeRelationshipCache,idMapper,badCollector,inputCache);
    if (idMapper.needsPreparation()) {
      executeStages(nodeStage);
      executeStages(new IdMapperPreparationStage(config,idMapper,nodes,inputCache,badCollector,memoryUsageStats));
      executeStages(calculateDenseNodesStage);
    }
 else {
      executeStages(nodeStage,calculateDenseNodesStage);
    }
    nodeRelationshipCache.fixateNodes();
    final RelationshipStage relationshipStage=new RelationshipStage(config,writeMonitor,writerFactory,relationships.supportsMultiplePasses() ? relationships : inputCache.relationships(),idMapper,neoStore,nodeRelationshipCache,input.specificRelationshipIds(),storeUpdateMonitor);
    executeStages(relationshipStage);
    nodeRelationshipCache.fixateGroups();
    neoStore.flush();
    writerFactory.awaitEverythingWritten();
    executeStages(new NodeFirstRelationshipStage(config,neoStore.getNodeStore(),neoStore.getRelationshipGroupStore(),nodeRelationshipCache,badCollector,neoStore.getLabelScanStore()));
    nodeRelationshipCache.clearRelationships();
    executeStages(new RelationshipLinkbackStage(config,neoStore.getRelationshipStore(),nodeRelationshipCache));
    nodeRelationshipCache.close();
    nodeRelationshipCache=null;
    nodeLabelsCache=new NodeLabelsCache(AUTO,neoStore.getLabelRepository().getHighId());
    memoryUsageStats=new MemoryUsageStatsProvider(nodeLabelsCache);
    executeStages(new NodeCountsStage(config,nodeLabelsCache,neoStore.getNodeStore(),neoStore.getLabelRepository().getHighId(),countsUpdater,memoryUsageStats));
    executeStages(new RelationshipCountsStage(config,nodeLabelsCache,neoStore.getRelationshipStore(),neoStore.getLabelRepository().getHighId(),neoStore.getRelationshipTypeRepository().getHighId(),countsUpdater,AUTO));
    writerFactory.awaitEverythingWritten();
    long totalTimeMillis=currentTimeMillis() - startTime;
    executionMonitor.done(totalTimeMillis,storeUpdateMonitor.toString());
    logger.info("IMPORT DONE in " + Format.duration(totalTimeMillis) + ". "+ storeUpdateMonitor);
    hasBadEntries=badCollector.badEntries() > 0;
    if (hasBadEntries) {
      logger.warn("There were " + badCollector.badEntries() + " bad entries which were skipped "+ "and logged into "+ badFile.getAbsolutePath());
    }
  }
 catch (  Throwable t) {
    logger.error("Error during import",t);
    throw Exceptions.launderedException(IOException.class,t);
  }
 finally {
    writerFactory.shutdown();
    if (nodeRelationshipCache != null) {
      nodeRelationshipCache.close();
    }
    if (nodeLabelsCache != null) {
      nodeLabelsCache.close();
    }
    if (!hasBadEntries) {
      fileSystem.deleteFile(badFile);
    }
  }
}
