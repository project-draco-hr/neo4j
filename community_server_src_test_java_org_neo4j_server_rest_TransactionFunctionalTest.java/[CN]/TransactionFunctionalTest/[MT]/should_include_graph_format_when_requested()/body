{
  http.POST("/db/data/transaction/commit",singleStatement("CREATE (n:Foo:Bar)"));
  Response response=http.POST("/db/data/transaction/commit",quotedJson("{ 'statements': [ { 'statement': 'MATCH (n:Foo) RETURN n', 'resultDataContents':['row','graph'] } ] }"));
  assertThat(response.status(),equalTo(200));
  JsonNode data=response.get("results").get(0).get("data");
  assertTrue("data is a list",data.isArray());
  assertEquals("one entry",1,data.size());
  JsonNode entry=data.get(0);
  assertTrue("entry has row",entry.has("row"));
  assertTrue("entry has graph",entry.has("graph"));
  JsonNode nodes=entry.get("graph").get("nodes"), rels=entry.get("graph").get("relationships");
  assertTrue("nodes is a list",nodes.isArray());
  assertTrue("relationships is a list",rels.isArray());
  assertEquals("one node",1,nodes.size());
  assertEquals("no relationships",0,rels.size());
  Set<String> labels=new HashSet<>();
  for (  JsonNode node : nodes.get(0).get("labels")) {
    labels.add(node.getTextValue());
  }
  assertEquals("labels",asSet("Foo","Bar"),labels);
}
