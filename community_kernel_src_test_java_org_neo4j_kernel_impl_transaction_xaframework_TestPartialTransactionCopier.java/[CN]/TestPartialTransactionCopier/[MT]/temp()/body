{
  int masterId=-1;
  int meId=-1;
  File newLogFile=new File(testDir.directory(),NEW_LOG_FILENAME);
  Pair<File,Integer> broken=createBrokenLogFile();
  File brokenLogFile=broken.first();
  Integer brokenTxIdentifier=broken.other();
  FileChannel brokenLog=new RandomAccessFile(brokenLogFile,"rw").getChannel();
  LogIoUtils.readLogHeader(ByteBuffer.allocate(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10),brokenLog,true);
  PartialTransactionCopier copier=new PartialTransactionCopier(ByteBuffer.allocate(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10),new CommandFactory(),StringLogger.DEV_NULL,new LogExtractor.LogPositionCache(),null,createXidMapWithOneStartEntry(masterId,brokenTxIdentifier));
  copier.copy(brokenLog,createNewLogWithHeader(newLogFile),1);
  assertThat(logEntries(newLogFile),containsExactly(startEntry(brokenTxIdentifier,masterId,meId),nodeCommandEntry(brokenTxIdentifier,2),onePhaseCommitEntry(brokenTxIdentifier,brokenTxIdentifier),startEntry(4,masterId,meId),nodeCommandEntry(4,3),onePhaseCommitEntry(4,4),doneEntry(4),startEntry(5,masterId,meId),nodeCommandEntry(5,4),onePhaseCommitEntry(5,5),doneEntry(5)));
}
