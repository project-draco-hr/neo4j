{
  int masterId=-1;
  int meId=-1;
  String storeDir="dir";
  Pair<File,Integer> broken=createBrokenLogFile(storeDir);
  File brokenLogFile=broken.first();
  Integer brokenTxIdentifier=broken.other();
  FileChannel brokenLog=fs.get().open(brokenLogFile,"rw");
  ByteBuffer buffer=allocate(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10);
  readLogHeader(buffer,brokenLog,true);
  LogEntryWriterv1 logEntryWriter=new LogEntryWriterv1();
  logEntryWriter.setCommandWriter(new PhysicalLogNeoXaCommandWriter());
  PartialTransactionCopier copier=new PartialTransactionCopier(buffer,new XaCommandReaderFactory(){
    @Override public XaCommandReader newInstance(    ByteBuffer scratch){
      return new PhysicalLogNeoXaCommandReader(scratch);
    }
  }
,new XaCommandWriterFactory(){
    @Override public XaCommandWriter newInstance(){
      return new PhysicalLogNeoXaCommandWriter();
    }
  }
,StringLogger.DEV_NULL,new LogExtractor.LogPositionCache(),null,logEntryWriter,createXidMapWithOneStartEntry(masterId,brokenTxIdentifier),new Monitors().newMonitor(ByteCounterMonitor.class));
  File newLogFile=new File("new.log");
  copier.copy(brokenLog,createNewLogWithHeader(newLogFile),1);
  assertThat(logEntries(fs.get(),newLogFile),containsExactly(startEntry(brokenTxIdentifier,masterId,meId),nodeCommandEntry(brokenTxIdentifier,1),onePhaseCommitEntry(brokenTxIdentifier,3),startEntry(5,masterId,meId),nodeCommandEntry(5,2),onePhaseCommitEntry(5,4),doneEntry(5),startEntry(6,masterId,meId),nodeCommandEntry(6,3),onePhaseCommitEntry(6,5),doneEntry(6)));
}
