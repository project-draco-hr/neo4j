{
  boolean verbose=parser.options().containsKey("v");
  boolean displayValues=verbose || !parser.options().containsKey("q");
  boolean displayProperties=parser.options().containsKey("p");
  boolean displayRelationships=parser.options().containsKey("r");
  boolean caseSensitiveFilters=parser.options().containsKey("s");
  boolean exactFilterMatch=parser.options().containsKey("x");
  String keyFilter=parser.options().get("f");
  String valueFilter=parser.options().get("g");
  if (!displayProperties && !displayRelationships) {
    displayProperties=true;
    displayRelationships=true;
  }
  Node node=null;
  if (parser.arguments().isEmpty()) {
    node=this.getCurrentNode(session);
  }
 else {
    node=this.getNodeById(Long.parseLong(parser.arguments().get(0)));
  }
  NodeOrRelationship thing=getNodeOrRelationship(node,parser);
  if (displayProperties) {
    this.displayProperties(thing,out,displayValues,verbose,keyFilter,valueFilter,caseSensitiveFilters,exactFilterMatch);
  }
  if (displayRelationships) {
    this.displayRelationships(parser,thing,out,verbose,keyFilter,caseSensitiveFilters,exactFilterMatch);
  }
  return null;
}
