'\na2x - A toolchain manager for AsciiDoc (converts Asciidoc text files to other\n      file formats)\n\nCopyright: Stuart Rackham (c) 2009\nLicense:   MIT\nEmail:     srackham@gmail.com\n\n'
import os
import fnmatch
import HTMLParser
import re
import shutil
import subprocess
import sys
import traceback
import urlparse
import zipfile
import xml.dom.minidom
import mimetypes
PROG = os.path.basename(os.path.splitext(__file__)[0])
VERSION = '8.6.6'
CONF_DIR = '/etc/asciidoc'
ENV = None
ASCIIDOC = 'asciidoc'
XSLTPROC = 'xsltproc'
DBLATEX = 'dblatex'
FOP = 'fop'
W3M = 'w3m'
LYNX = 'lynx'
XMLLINT = 'xmllint'
EPUBCHECK = 'epubcheck'
ASCIIDOC_OPTS = ''
DBLATEX_OPTS = ''
FOP_OPTS = ''
XSLTPROC_OPTS = ''
OPTIONS = None
if (__name__ == '__main__'):
    description = 'A toolchain manager for AsciiDoc (converts Asciidoc text files to other file formats)'
    from optparse import OptionParser
    parser = OptionParser(usage='usage: %prog [OPTIONS] SOURCE_FILE', version=('%s %s' % (PROG, VERSION)), description=description)
    parser.add_option('-a', '--attribute', action='append', dest='attributes', default=[], metavar='ATTRIBUTE', help='set asciidoc attribute value')
    parser.add_option('--asciidoc-opts', action='append', dest='asciidoc_opts', default=[], metavar='ASCIIDOC_OPTS', help='asciidoc options')
    parser.add_option('--copy', action='store_true', dest='copy', default=False, help='DEPRECATED: does nothing')
    parser.add_option('--conf-file', dest='conf_file', default=None, metavar='CONF_FILE', help='configuration file')
    parser.add_option('-D', '--destination-dir', action='store', dest='destination_dir', default=None, metavar='PATH', help='output directory (defaults to SOURCE_FILE directory)')
    parser.add_option('-d', '--doctype', action='store', dest='doctype', metavar='DOCTYPE', choices=('article', 'manpage', 'book'), help='article, manpage, book')
    parser.add_option('--epubcheck', action='store_true', dest='epubcheck', default=False, help='check EPUB output with epubcheck')
    parser.add_option('-f', '--format', action='store', dest='format', metavar='FORMAT', default='pdf', choices=('chunked', 'epub', 'htmlhelp', 'manpage', 'pdf', 'text', 'xhtml', 'dvi', 'ps', 'tex', 'docbook'), help='chunked, epub, htmlhelp, manpage, pdf, text, xhtml, dvi, ps, tex, docbook')
    parser.add_option('--icons', action='store_true', dest='icons', default=False, help='use admonition, callout and navigation icons')
    parser.add_option('--icons-dir', action='store', dest='icons_dir', default=None, metavar='PATH', help='admonition and navigation icon directory')
    parser.add_option('-k', '--keep-artifacts', action='store_true', dest='keep_artifacts', default=False, help='do not delete temporary build files')
    parser.add_option('--lynx', action='store_true', dest='lynx', default=False, help='use lynx to generate text files')
    parser.add_option('-L', '--no-xmllint', action='store_true', dest='no_xmllint', default=False, help='do not check asciidoc output with xmllint')
    parser.add_option('-n', '--dry-run', action='store_true', dest='dry_run', default=False, help='just print the commands that would have been executed')
    parser.add_option('-r', '--resource', action='append', dest='resources', default=[], metavar='PATH', help='resource file or directory containing resource files')
    parser.add_option('-m', '--resource-manifest', action='store', dest='resource_manifest', default=None, metavar='FILE', help='read resources from FILE')
    parser.add_option('--resource-dir', action='append', dest='resources', default=[], metavar='PATH', help='DEPRECATED: use --resource')
    parser.add_option('-s', '--skip-asciidoc', action='store_true', dest='skip_asciidoc', default=False, help='DEPRECATED: redundant')
    parser.add_option('--stylesheet', action='store', dest='stylesheet', default=None, metavar='STYLESHEET', help='HTML CSS stylesheet file name')
    parser.add_option('--safe', action='store_true', dest='safe', default=False, help='DEPRECATED: does nothing')
    parser.add_option('--dblatex-opts', action='append', dest='dblatex_opts', default=[], metavar='DBLATEX_OPTS', help='dblatex options')
    parser.add_option('--fop', action='store_true', dest='fop', default=False, help='use FOP to generate PDF files')
    parser.add_option('--fop-opts', action='append', dest='fop_opts', default=[], metavar='FOP_OPTS', help='options for FOP pdf generation')
    parser.add_option('--xsltproc-opts', action='append', dest='xsltproc_opts', default=[], metavar='XSLTPROC_OPTS', help='xsltproc options for XSL stylesheets')
    parser.add_option('--xsl-file', action='store', dest='xsl_file', metavar='XSL_FILE', help='custom XSL stylesheet')
    parser.add_option('-v', '--verbose', action='count', dest='verbose', default=0, help='increase verbosity')
    if (len(sys.argv) == 1):
        parser.parse_args(['--help'])
    source_options = get_source_options(sys.argv[(-1)])
    argv = (source_options + sys.argv[1:])
    (opts, args) = parser.parse_args(argv)
    if (len(args) != 1):
        parser.error('incorrect number of arguments')
    opts.asciidoc_opts = ' '.join(opts.asciidoc_opts)
    opts.dblatex_opts = ' '.join(opts.dblatex_opts)
    opts.fop_opts = ' '.join(opts.fop_opts)
    opts.xsltproc_opts = ' '.join(opts.xsltproc_opts)
    opts = eval(str(opts))
    a2x = A2X(opts)
    OPTIONS = a2x
    verbose(('args: %r' % argv))
    a2x.asciidoc_file = args[0]
    try:
        a2x.load_conf()
        a2x.execute()
    except KeyboardInterrupt:
        exit(1)
