{
  final D dependency=createDependency();
  final List<GetOrCreateTask<D>> threads=new ArrayList<>();
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < numThreads; i++) {
    String threadName=format("%s thread %d",GetOrCreateDocIT.class.getSimpleName(),i);
    threads.add(new GetOrCreateTask<>(db,NUM_USERS,impl,threadName,dependency,base));
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  RuntimeException failure=null;
  List<List<Node>> results=new ArrayList<>();
  for (  GetOrCreateTask<D> thread : threads) {
    try {
      thread.join();
      if (failure == null) {
        failure=thread.failure;
      }
      results.add(thread.result);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (failure != null) {
    throw failure;
  }
  assertEquals(numThreads,results.size());
  List<Node> firstResult=results.remove(0);
  for (  List<Node> subresult : results) {
    assertEquals(firstResult,subresult);
  }
  for (int i=0; i < NUM_USERS; i++) {
    final String username=getUsername(base,i);
    GraphDatabaseService graphdb=graphdb();
    impl.getOrCreateUser(username,graphdb,dependency);
    try (Transaction tx=graphdb.beginTx()){
      impl.assertUserExistsUniquely(graphdb,tx,username);
    }
 catch (    NoSuchElementException e) {
      throw new RuntimeException(format("User '%s' not created uniquely.",username),e);
    }
  }
}
