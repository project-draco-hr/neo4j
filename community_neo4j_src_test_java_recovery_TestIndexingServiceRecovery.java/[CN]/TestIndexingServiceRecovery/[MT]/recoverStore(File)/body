{
  final Collection<Long> affectedNodeIds=new HashSet<>();
  final Collection<NodePropertyUpdate> allUpdates=new HashSet<>();
  final IndexingService.Monitor recoveryMonitor=new IndexingService.MonitorAdapter(){
    @Override public void applyingRecoveredData(    Collection<Long> nodeIds){
      affectedNodeIds.addAll(nodeIds);
    }
    @Override public void appliedRecoveredData(    Iterable<NodePropertyUpdate> updates){
      for (      NodePropertyUpdate update : updates) {
        allUpdates.add(update);
      }
    }
  }
;
  GraphDatabaseService db=new GraphDatabaseFactory(){
    @SuppressWarnings("deprecation") @Override public GraphDatabaseService newEmbeddedDatabase(    String path){
      GraphDatabaseFactoryState state=getStateCopy();
      return new EmbeddedGraphDatabase(path,new HashMap<String,String>(),state.getKernelExtension(),state.getCacheProviders(),state.getTransactionInterceptorProviders()){
        @Override protected void createNeoDataSource(){
          neoDataSource=new NeoStoreXaDataSource(config,storeFactory,logging.getMessagesLog(NeoStoreXaDataSource.class),xaFactory,stateFactory,transactionInterceptorProviders,jobScheduler,logging,updateableSchemaState,new NonTransactionalTokenNameLookup(labelTokenHolder,propertyKeyTokenHolder),dependencyResolver,txManager,propertyKeyTokenHolder,labelTokenHolder,relationshipTypeTokenHolder,persistenceManager,lockManager,this,recoveryMonitor);
          xaDataSourceManager.registerDataSource(neoDataSource);
        }
      }
;
    }
  }
.newEmbeddedDatabase(storeDir.getAbsolutePath());
  db.shutdown();
  return Pair.of(affectedNodeIds,allUpdates);
}
