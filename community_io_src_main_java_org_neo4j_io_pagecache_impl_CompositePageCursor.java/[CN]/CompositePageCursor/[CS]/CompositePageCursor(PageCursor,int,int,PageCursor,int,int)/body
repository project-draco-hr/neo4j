{
  this.first=first;
  this.firstBaseOffset=firstBaseOffset;
  this.firstLength=firstLength;
  this.second=second;
  this.secondBaseOffset=secondBaseOffset;
  this.secondLength=secondLength;
  byteAccessCursor=new DelegatingPageCursor(this){
    private int offset;
    @Override public int getInt(){
      int a=getByte(offset) & 0xFF;
      int b=getByte(offset + 1) & 0xFF;
      int c=getByte(offset + 2) & 0xFF;
      int d=getByte(offset + 3) & 0xFF;
      int v=(a << 24) | (b << 16) | (c << 8)| d;
      return v;
    }
    @Override public int getInt(    int offset){
      this.offset=offset;
      return getInt();
    }
    @Override public short getShort(){
      int a=getByte(offset) & 0xFF;
      int b=getByte(offset + 1) & 0xFF;
      int v=(a << 8) | b;
      return (short)v;
    }
    @Override public short getShort(    int offset){
      this.offset=offset;
      return getShort();
    }
    @Override public long getLong(){
      long a=getByte(offset) & 0xFF;
      long b=getByte(offset + 1) & 0xFF;
      long c=getByte(offset + 2) & 0xFF;
      long d=getByte(offset + 3) & 0xFF;
      long e=getByte(offset + 4) & 0xFF;
      long f=getByte(offset + 5) & 0xFF;
      long g=getByte(offset + 6) & 0xFF;
      long h=getByte(offset + 7) & 0xFF;
      long v=(a << 56) | (b << 48) | (c << 40)| (d << 32)| (e << 24)| (f << 16)| (g << 8)| h;
      return v;
    }
    @Override public long getLong(    int offset){
      this.offset=offset;
      return getLong();
    }
    @Override public void getBytes(    byte[] data){
      for (int i=0; i < data.length; i++) {
        data[i]=getByte(offset + i);
      }
    }
    @Override public void putInt(    int value){
      putByte(offset,(byte)(value >> 24));
      putByte(offset + 1,(byte)((value >> 16) & 0xFF));
      putByte(offset + 2,(byte)((value >> 8) & 0xFF));
      putByte(offset + 3,(byte)((value) & 0xFF));
    }
    @Override public void putInt(    int offset,    int value){
      this.offset=offset;
      putInt(value);
    }
    @Override public void putShort(    short value){
      putByte(offset,(byte)(value >> 8));
      putByte(offset + 1,(byte)((value) & 0xFF));
    }
    @Override public void putShort(    int offset,    short value){
      this.offset=offset;
      putShort(value);
    }
    @Override public void putLong(    long value){
      putByte(offset,(byte)(value >> 56));
      putByte(offset + 1,(byte)((value >> 48) & 0xFF));
      putByte(offset + 2,(byte)((value >> 40) & 0xFF));
      putByte(offset + 3,(byte)((value >> 32) & 0xFF));
      putByte(offset + 4,(byte)((value >> 24) & 0xFF));
      putByte(offset + 5,(byte)((value >> 16) & 0xFF));
      putByte(offset + 6,(byte)((value >> 8) & 0xFF));
      putByte(offset + 7,(byte)((value) & 0xFF));
    }
    @Override public void putLong(    int offset,    long value){
      this.offset=offset;
      putLong(value);
    }
    @Override public void putBytes(    byte[] data){
      for (int i=0; i < data.length; i++) {
        putByte(offset + i,data[i]);
      }
    }
    @Override public void setOffset(    int offset){
      this.offset=offset;
    }
  }
;
}
