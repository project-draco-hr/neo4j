{
  if (!shouldDoVerificationAfterTests()) {
    return;
  }
  for (  GraphDatabaseService otherDb : dbs) {
    int vNodeCount=0;
    int vRelCount=0;
    int vNodePropCount=0;
    int vRelPropCount=0;
    int vNodeIndexServicePropCount=0;
    int vNodeIndexProviderPropCount=0;
    Set<Long> others=IteratorUtil.addToCollection(new IterableWrapper<Long,Node>(GlobalGraphOperations.at(otherDb).getAllNodes()){
      @Override protected Long underlyingObjectToObject(      Node node){
        return node.getId();
      }
    }
,new HashSet<Long>());
    for (    Node node : GlobalGraphOperations.at(refDb).getAllNodes()) {
      Node otherNode=otherDb.getNodeById(node.getId());
      int[] counts=verifyNode(node,otherNode,refDb,otherDb);
      vRelCount+=counts[0];
      vNodePropCount+=counts[1];
      vRelPropCount+=counts[2];
      vNodeIndexServicePropCount+=counts[3];
      vNodeIndexProviderPropCount+=counts[4];
      others.remove(otherNode.getId());
      vNodeCount++;
    }
    assertTrue(others.isEmpty());
    if (expectsResults) {
      assertEquals(nodeCount,vNodeCount);
      assertEquals(relCount,vRelCount);
      assertEquals(nodePropCount,vNodePropCount);
      assertEquals(relPropCount,vRelPropCount);
      assertEquals(nodeIndexProviderPropCount,vNodeIndexProviderPropCount);
    }
  }
}
