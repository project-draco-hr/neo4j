{
  CountDownReaper countDownReaper=new CountDownReaper();
  final TimedRepository<Object,Long> timedRepository=new TimedRepository<>(provider,countDownReaper,1,clock);
  ExecutorService singleThreadExecutor=Executors.newSingleThreadExecutor();
  NonStoppableCleaner cleaner=new NonStoppableCleaner(timedRepository);
  try {
    singleThreadExecutor.submit(cleaner);
    long entryKey=1L;
    long iterations=100000L;
    while (entryKey++ < iterations) {
      timedRepository.begin(entryKey);
      timedRepository.acquire(entryKey);
      clock.forward(10,TimeUnit.MILLISECONDS);
      timedRepository.release(entryKey);
      timedRepository.end(entryKey);
      countDownReaper.await("Reaper should consume entry from cleaner thread or from our 'end' call. " + "If it was not consumed it mean cleaner and worker thread where not able to" + " figure out who removes entry, and block will ends up in the repo forever.",10,SECONDS);
      countDownReaper.reset();
    }
  }
  finally {
    cleaner.stop();
    singleThreadExecutor.shutdownNow();
  }
}
