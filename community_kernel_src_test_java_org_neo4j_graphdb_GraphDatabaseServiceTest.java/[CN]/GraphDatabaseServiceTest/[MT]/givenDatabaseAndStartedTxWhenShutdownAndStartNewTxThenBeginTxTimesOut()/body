{
  final GraphDatabaseService db=new TestGraphDatabaseFactory().newImpermanentDatabase();
  final CountDownLatch shutdown=new CountDownLatch(1);
  final AtomicReference result=new AtomicReference();
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    @Override public void run(){
      try (Transaction tx=db.beginTx()){
        shutdown.countDown();
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
        db.createNode();
        tx.success();
        Executors.newSingleThreadExecutor().submit(new Runnable(){
          @Override public void run(){
            try {
              db.beginTx();
              result.set(Boolean.TRUE);
            }
 catch (            Exception e) {
              result.set(e);
            }
synchronized (result) {
              result.notifyAll();
            }
          }
        }
);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
);
  shutdown.await();
  db.shutdown();
  while (result.get() == null) {
synchronized (result) {
      result.wait(100);
    }
  }
  Assert.assertThat(result.get().getClass(),CoreMatchers.<Object>equalTo(TransactionFailureException.class));
}
