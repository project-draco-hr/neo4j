{
  final RelationshipType types[]=deduplicate(initialTypes);
  ensureRelationshipMapNotNull(nodeManager);
  final NodeImpl nodeImpl=this;
  return new Iterable<Relationship>(){
    public Iterator<Relationship> iterator(){
      final boolean hasMore=hasMoreRelationshipsToLoad();
      final RelIdIterator[] relIdIterators=new RelIdIterator[types.length];
      TransactionState tx=nodeManager.getTransactionState();
      ArrayMap<Integer,RelIdArray> addMap=null;
      ArrayMap<Integer,Collection<Long>> skipMap=null;
      if (tx.hasChanges()) {
        addMap=tx.getCowRelationshipAddMap(nodeImpl);
        skipMap=tx.getCowRelationshipRemoveMap(nodeImpl);
      }
      int actualLength=0;
      for (      RelationshipType type : types) {
        int typeId=nodeManager.getRelationshipTypeIdFor(type);
        if (typeId == TokenHolder.NO_ID) {
          continue;
        }
        relIdIterators[actualLength++]=getRelationshipsIterator(direction,addMap != null ? addMap.get(typeId) : null,skipMap != null ? skipMap.get(typeId) : null,typeId);
      }
      final RelIdIterator[] result;
      if (actualLength < relIdIterators.length) {
        RelIdIterator[] compacted=new RelIdIterator[actualLength];
        arraycopy(relIdIterators,0,compacted,0,actualLength);
        result=compacted;
      }
 else {
        result=relIdIterators;
      }
      if (result.length == 0) {
        return Collections.emptyIterator();
      }
      return new RelationshipIterator(result,nodeImpl,direction,nodeManager,hasMore,false);
    }
  }
;
}
