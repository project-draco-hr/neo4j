{
  ensureRelationshipMapNotNull(nodeManager,direction,NO_RELATIONSHIP_TYPES);
  boolean hasMore=hasMoreRelationshipsToLoad(direction,NO_RELATIONSHIP_TYPES);
  RelIdArray[] localRelationships=relationships;
  RelIdIterator[] result=new RelIdIterator[localRelationships.length];
  TransactionState tx=nodeManager.getTransactionState();
  ArrayMap<Integer,RelIdArray> addMap=null;
  ArrayMap<Integer,SetAndDirectionCounter> skipMap=null;
  if (tx.hasChanges()) {
    addMap=tx.getCowRelationshipAddMap(this);
    skipMap=tx.getCowRelationshipRemoveMap(this);
  }
  for (int i=0; i < localRelationships.length; i++) {
    RelIdArray src=localRelationships[i];
    int type=src.getType();
    RelIdIterator iterator;
    if (addMap != null || skipMap != null) {
      SetAndDirectionCounter remove=skipMap != null ? skipMap.get(type) : null;
      iterator=new CombinedRelIdIterator(type,direction,src,addMap != null ? addMap.get(type) : null,remove != null ? remove.set : null);
    }
 else {
      iterator=src.iterator(direction);
    }
    result[i]=iterator;
  }
  if (addMap != null) {
    RelIdIterator[] additional=new RelIdIterator[addMap.size()];
    int additionalSize=0;
    for (    int type : addMap.keySet()) {
      if (getRelIdArray(type) == null) {
        RelIdArray add=addMap.get(type);
        SetAndDirectionCounter remove=skipMap != null ? skipMap.get(type) : null;
        additional[additionalSize++]=new CombinedRelIdIterator(type,direction,null,add,remove != null ? remove.set : null);
      }
    }
    RelIdIterator[] newResult=new RelIdIterator[result.length + additionalSize];
    arraycopy(result,0,newResult,0,result.length);
    arraycopy(additional,0,newResult,result.length,additionalSize);
    result=newResult;
  }
  if (result.length == 0) {
    return Collections.emptyList();
  }
  return new RelationshipIterator(result,this,direction,NO_RELATIONSHIP_TYPES,nodeManager,hasMore,true);
}
