{
  graph.makeEdge("s","e");
  Dijkstra<Double> dijkstra=new Dijkstra<Double>((double)0,graph.getNode("s"),graph.getNode("e"),new CostEvaluator<Double>(){
    public Double getCost(    Relationship relationship,    boolean backwards){
      assertFalse(backwards);
      return 1.0;
    }
  }
,new org.neo4j.graphalgo.util.DoubleAdder(),new org.neo4j.graphalgo.util.DoubleComparator(),Direction.OUTGOING,MyRelTypes.R1);
  dijkstra.getCost();
  dijkstra=new Dijkstra<Double>((double)0,graph.getNode("s"),graph.getNode("e"),new CostEvaluator<Double>(){
    public Double getCost(    Relationship relationship,    boolean backwards){
      assertTrue(backwards);
      return 1.0;
    }
  }
,new org.neo4j.graphalgo.util.DoubleAdder(),new org.neo4j.graphalgo.util.DoubleComparator(),Direction.INCOMING,MyRelTypes.R1);
  dijkstra.getCost();
}
