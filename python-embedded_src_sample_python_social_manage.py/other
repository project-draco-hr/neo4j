':"\n# If Neo4j Python bindings are installed: use the installed ones\nif ! python -c "import neo4j" &> /dev/null; then\n    # Otherwise: set up PYTHONPATH to use the checked out source\n    SRC=$0\n    for (( c=4; c>0; c-- )); do\n        while [ -L "$SRC" ]; do\n            SRC=$(readlink $SRC)\n        done\n        SRC=$(cd $(dirname $SRC); pwd)\n    done\n\n    if [ -z "$PYTHONPATH" ]; then\n        PYTHONPATH="$SRC/main/python"\n    else\n        PYTHONPATH="$PYTHONPATH:$SRC/main/python"\n    fi\n    export PYTHONPATH\n    \n    CLASSPATH=$($SRC/bin/classpath)\n    if [ $? -ne 0 ]; then exit -1; fi\n    export CLASSPATH\nfi\n\npython $0 "$@"\nexit $?\n":'
try:
    from django.core.management import execute_manager
except ImportError:
    import sys
    sys.stderr.write('Error: Django is not available. Django must be installed to run this sample.')
    sys.exit(1)
try:
    import settings
except ImportError:
    import sys
    sys.stderr.write(("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__))
    sys.exit(1)
if (__name__ == '__main__'):
    execute_manager(settings)
