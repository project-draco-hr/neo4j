{
  return new FileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      return predicate.test(dir) ? wrapped.preVisitDirectory(dir,attrs) : FileVisitResult.SKIP_SUBTREE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      return predicate.test(file) ? wrapped.visitFile(file,attrs) : FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException e) throws IOException {
      return predicate.test(file) ? wrapped.visitFileFailed(file,e) : FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException e) throws IOException {
      return predicate.test(dir) ? wrapped.postVisitDirectory(dir,e) : FileVisitResult.CONTINUE;
    }
  }
;
}
