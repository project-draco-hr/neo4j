{
  PageCache pageCache=pageCacheRule.getPageCache(fileSystemAbstraction);
  Config config=new Config(singletonMap(PropertyStore.Configuration.rebuild_idgenerators_fast.name(),"true"));
  DynamicStringStore stringPropertyStore=mock(DynamicStringStore.class);
  final PropertyStore store=new PropertyStore(path,config,new JumpingIdGeneratorFactory(1),pageCache,NullLogProvider.getInstance(),stringPropertyStore,mock(PropertyKeyTokenStore.class),mock(DynamicArrayStore.class),select(config,LowLimitV3_0.RECORD_FORMATS,NullLogService.getInstance()));
  store.initialise(true);
  try {
    store.makeStoreOk();
    final long propertyRecordId=store.nextId();
    PropertyRecord record=new PropertyRecord(propertyRecordId);
    record.setInUse(true);
    DynamicRecord dynamicRecord=dynamicRecord();
    PropertyBlock propertyBlock=propertyBlockWith(dynamicRecord);
    record.setPropertyBlock(propertyBlock);
    doAnswer(new Answer(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        PropertyRecord recordBeforeWrite=store.getRecord(propertyRecordId,store.newRecord(),FORCE);
        assertFalse(recordBeforeWrite.inUse());
        return null;
      }
    }
).when(stringPropertyStore).updateRecord(dynamicRecord);
    store.updateRecord(record);
    verify(stringPropertyStore).updateRecord(dynamicRecord);
  }
  finally {
    store.close();
  }
}
