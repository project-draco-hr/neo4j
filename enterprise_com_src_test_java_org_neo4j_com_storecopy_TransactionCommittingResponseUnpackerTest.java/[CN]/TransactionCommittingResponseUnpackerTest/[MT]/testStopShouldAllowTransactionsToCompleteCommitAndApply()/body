{
  DependencyResolver dependencyResolver=mock(DependencyResolver.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  when(dependencyResolver.resolveDependency(TransactionIdStore.class)).thenReturn(txIdStore);
  TransactionAppender appender=mock(TransactionAppender.class);
  LogicalTransactionStore logicalTransactionStore=mock(LogicalTransactionStore.class);
  when(logicalTransactionStore.getAppender()).thenReturn(appender);
  when(dependencyResolver.resolveDependency(LogicalTransactionStore.class)).thenReturn(logicalTransactionStore);
  when(dependencyResolver.resolveDependency(TransactionRepresentationStoreApplier.class)).thenReturn(mock(TransactionRepresentationStoreApplier.class));
  LogFile logFile=mock(LogFile.class);
  when(dependencyResolver.resolveDependency(LogFile.class)).thenReturn(logFile);
  LogRotation logRotation=mock(LogRotation.class);
  when(dependencyResolver.resolveDependency(LogRotation.class)).thenReturn(logRotation);
  StoppingTxHandler stoppingTxHandler=new StoppingTxHandler();
  int maxBatchSize=10;
  TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(dependencyResolver,maxBatchSize);
  stoppingTxHandler.setUnpacker(unpacker);
  unpacker.start();
  long committingTransactionId=TransactionIdStore.BASE_TX_ID + 1;
  DummyTransactionResponse response=new DummyTransactionResponse(committingTransactionId,1,appender,maxBatchSize);
  unpacker.unpackResponse(response,stoppingTxHandler);
  verify(txIdStore,times(1)).transactionCommitted(committingTransactionId,0);
  verify(txIdStore,times(1)).transactionClosed(committingTransactionId);
  verify(appender,times(1)).append(any(TransactionRepresentation.class),anyLong());
  verify(appender,times(1)).force();
  verify(logRotation,times(1)).rotateLogIfNeeded();
  try {
    unpacker.unpackResponse(mock(Response.class),stoppingTxHandler);
    fail("A stopped transaction unpacker should not allow transactions to be applied");
  }
 catch (  IllegalStateException e) {
  }
  verifyNoMoreInteractions(txIdStore);
  verifyNoMoreInteractions(appender);
}
