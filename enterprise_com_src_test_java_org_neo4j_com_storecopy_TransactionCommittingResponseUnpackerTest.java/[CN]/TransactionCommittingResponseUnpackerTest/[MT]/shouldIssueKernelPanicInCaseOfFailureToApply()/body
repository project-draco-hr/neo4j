{
  DependencyResolver dependencyResolver=mock(DependencyResolver.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  when(dependencyResolver.resolveDependency(TransactionIdStore.class)).thenReturn(txIdStore);
  TransactionAppender appender=mock(TransactionAppender.class);
  when(appender.append(any(TransactionRepresentation.class),anyLong())).thenReturn(new Commitment(){
    @Override public void publishAsCommitted(){
    }
    @Override public boolean markedAsCommitted(){
      return true;
    }
  }
);
  LogicalTransactionStore logicalTransactionStore=mock(LogicalTransactionStore.class);
  when(logicalTransactionStore.getAppender()).thenReturn(appender);
  when(dependencyResolver.resolveDependency(LogicalTransactionStore.class)).thenReturn(logicalTransactionStore);
  addMockedNeoStore(dependencyResolver);
  when(dependencyResolver.resolveDependency(TransactionRepresentationStoreApplier.class)).thenReturn(mock(TransactionRepresentationStoreApplier.class));
  TransactionObligationFulfiller obligationFulfiller=mock(TransactionObligationFulfiller.class);
  when(dependencyResolver.resolveDependency(TransactionObligationFulfiller.class)).thenReturn(obligationFulfiller);
  LogFile logFile=mock(LogFile.class);
  when(dependencyResolver.resolveDependency(LogFile.class)).thenReturn(logFile);
  KernelHealth kernelHealth=mock(KernelHealth.class);
  when(dependencyResolver.resolveDependency(KernelHealth.class)).thenReturn(kernelHealth);
  LogRotation logRotation=mock(LogRotation.class);
  when(dependencyResolver.resolveDependency(LogRotation.class)).thenReturn(logRotation);
  Function<DependencyResolver,IndexUpdatesValidator> indexUpdatesValidatorFunction=Functions.constant(mock(IndexUpdatesValidator.class));
  BatchingTransactionRepresentationStoreApplier applier=mock(BatchingTransactionRepresentationStoreApplier.class);
  Function<DependencyResolver,BatchingTransactionRepresentationStoreApplier> transactionStoreApplierFunction=Functions.constant(applier);
  final TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(dependencyResolver,100,indexUpdatesValidatorFunction,transactionStoreApplierFunction);
  unpacker.start();
  UnderlyingStorageException failure=new UnderlyingStorageException("Expected failure");
  doThrow(failure).when(applier).apply(any(TransactionRepresentation.class),any(ValidatedIndexUpdates.class),any(LockGroup.class),anyLong(),any(TransactionApplicationMode.class));
  try {
    unpacker.unpackResponse(new DummyTransactionResponse(BASE_TX_ID + 1,1,appender,10),NO_OP_TX_HANDLER);
    fail("Should have failed");
  }
 catch (  UnderlyingStorageException e) {
    assertThat(e.getMessage(),containsString(failure.getMessage()));
    verify(kernelHealth).panic(failure);
  }
}
