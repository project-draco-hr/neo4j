{
  final TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  final TransactionAppender appender=mock(TransactionAppender.class);
  final TransactionRepresentationStoreApplier applier=mock(TransactionRepresentationStoreApplier.class);
  final TransactionObligationFulfiller obligationFulfiller=mock(TransactionObligationFulfiller.class);
  final LogFile logFile=mock(LogFile.class);
  final LogRotation logRotation=mock(LogRotation.class);
  TransactionCommittingResponseUnpacker.Dependencies deps=buildDependencies(txIdStore,logFile,logRotation,mock(IndexUpdatesValidator.class),applier,appender,obligationFulfiller);
  final TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(deps);
  unpacker.start();
  IOException failure=new IOException("Expected failure");
  doThrow(failure).when(appender).append(any(TransactionRepresentation.class),anyLong());
  try {
    unpacker.unpackResponse(new DummyTransactionResponse(BASE_TX_ID + 1,1,appender,10),NO_OP_TX_HANDLER);
    fail("Should have failed");
  }
 catch (  IOException e) {
    assertThat(e.getMessage(),containsString(failure.getMessage()));
  }
}
