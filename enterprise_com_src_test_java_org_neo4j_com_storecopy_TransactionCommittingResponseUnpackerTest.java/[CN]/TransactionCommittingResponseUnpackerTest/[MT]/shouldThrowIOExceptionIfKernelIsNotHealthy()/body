{
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  TransactionAppender appender=mock(TransactionAppender.class);
  when(appender.append(any(TransactionRepresentation.class),anyLong())).thenReturn(new FakeCommitment(BASE_TX_ID + 1,txIdStore));
  LogicalTransactionStore logicalTransactionStore=mock(LogicalTransactionStore.class);
  TransactionObligationFulfiller obligationFulfiller=mock(TransactionObligationFulfiller.class);
  LogFile logFile=mock(LogFile.class);
  KernelHealth kernelHealth=mock(KernelHealth.class);
  when(kernelHealth.isHealthy()).thenReturn(false);
  Throwable causeOfPanic=new Throwable("BOOM!");
  when(kernelHealth.getCauseOfPanic()).thenReturn(causeOfPanic);
  LogRotation logRotation=mock(LogRotation.class);
  Function<DependencyResolver,IndexUpdatesValidator> indexUpdatesValidatorFunction=Functions.constant(mock(IndexUpdatesValidator.class));
  BatchingTransactionRepresentationStoreApplier applier=mock(BatchingTransactionRepresentationStoreApplier.class);
  Function<DependencyResolver,BatchingTransactionRepresentationStoreApplier> transactionStoreApplierFunction=Functions.constant(applier);
  final TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(buildDependencies(logFile,logRotation,mock(IndexUpdatesValidator.class),applier,appender,obligationFulfiller,kernelHealth));
  unpacker.start();
  try {
    unpacker.unpackResponse(new DummyTransactionResponse(BASE_TX_ID + 1,1,appender,10),NO_OP_TX_HANDLER);
    fail("should have thrown");
  }
 catch (  IOException e) {
    assertEquals(TransactionCommittingResponseUnpacker.msg,e.getMessage());
    assertEquals(causeOfPanic,e.getCause());
    ((AssertableLogProvider)logging.getInternalLogProvider()).assertContainsMessageContaining(TransactionCommittingResponseUnpacker.msg + " Original kernel panic cause was:\n" + causeOfPanic.getMessage());
  }
}
