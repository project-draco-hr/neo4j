{
  DependencyResolver dependencyResolver=mock(DependencyResolver.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  when(dependencyResolver.resolveDependency(TransactionIdStore.class)).thenReturn(txIdStore);
  TransactionAppender appender=mock(TransactionAppender.class);
  when(appender.append(any(TransactionRepresentation.class))).thenReturn(2L,3L,4L,5L,6L);
  LogicalTransactionStore logicalTransactionStore=mock(LogicalTransactionStore.class);
  when(logicalTransactionStore.getAppender()).thenReturn(appender);
  when(dependencyResolver.resolveDependency(LogicalTransactionStore.class)).thenReturn(logicalTransactionStore);
  when(dependencyResolver.resolveDependency(TransactionRepresentationStoreApplier.class)).thenReturn(mock(TransactionRepresentationStoreApplier.class));
  LogFile logFile=mock(LogFile.class);
  when(dependencyResolver.resolveDependency(LogFile.class)).thenReturn(logFile);
  int maxBatchSize=3;
  TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(dependencyResolver,maxBatchSize);
  unpacker.start();
  int txCount=maxBatchSize * 2 - 1;
  unpacker.unpackResponse(new DummyTransactionResponse(2,txCount,appender,maxBatchSize),NO_OP_TX_HANDLER);
  verify(appender,times(txCount)).append(any(TransactionRepresentation.class),anyLong());
  verify(appender,times(2)).force();
  verify(logFile,times(2)).checkRotation();
}
