{
  DependencyResolver dependencyResolver=mock(DependencyResolver.class);
  TransactionIdStore txIdStore=mock(TransactionIdStore.class);
  when(dependencyResolver.resolveDependency(TransactionIdStore.class)).thenReturn(txIdStore);
  TransactionAppender appender=mockedTransactionAppender();
  LogicalTransactionStore logicalTransactionStore=mock(LogicalTransactionStore.class);
  when(logicalTransactionStore.getAppender()).thenReturn(appender);
  when(dependencyResolver.resolveDependency(LogicalTransactionStore.class)).thenReturn(logicalTransactionStore);
  addMockedNeoStore(dependencyResolver);
  IndexUpdatesValidator validator=setUpIndexUpdatesValidatorMocking(dependencyResolver);
  LogFile logFile=mock(LogFile.class);
  when(dependencyResolver.resolveDependency(LogFile.class)).thenReturn(logFile);
  KernelHealth kernelHealth=mock(KernelHealth.class);
  when(kernelHealth.isHealthy()).thenReturn(true);
  when(dependencyResolver.resolveDependency(KernelHealth.class)).thenReturn(kernelHealth);
  LogRotation logRotation=mock(LogRotation.class);
  when(dependencyResolver.resolveDependency(LogRotation.class)).thenReturn(logRotation);
  when(dependencyResolver.resolveDependency(IndexingService.class)).thenReturn(mock(IndexingService.class));
  when(dependencyResolver.resolveDependency(Logging.class)).thenReturn(logging);
  int maxBatchSize=3;
  TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(dependencyResolver,maxBatchSize,customValidator(validator),customApplier(mock(BatchingTransactionRepresentationStoreApplier.class)));
  unpacker.start();
  int txCount=maxBatchSize * 2 - 1;
  unpacker.unpackResponse(new DummyTransactionResponse(2,txCount,appender,maxBatchSize),NO_OP_TX_HANDLER);
  verify(appender,times(txCount)).append(any(TransactionRepresentation.class),anyLong());
  verify(appender,times(2)).force();
  verify(logRotation,times(2)).rotateLogIfNeeded(logAppendEvent);
}
