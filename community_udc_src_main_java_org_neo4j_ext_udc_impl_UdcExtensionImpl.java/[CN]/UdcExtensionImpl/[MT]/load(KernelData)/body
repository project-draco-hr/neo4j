{
  MyConfig configuration=new MyConfig(kernel.getConfig(),loadSystemProperties());
  try {
    if (configuration.getBool(UDC_DISABLE_KEY,"false"))     return null;
  }
 catch (  Exception e) {
  }
  int firstDelay=DEFAULT_DELAY;
  int interval=DEFAULT_INTERVAL;
  String hostAddress=DEFAULT_HOST;
  String source=null;
  String registration=DEFAULT_REGISTRATION;
  try {
    firstDelay=configuration.getInt(FIRST_DELAY_CONFIG_KEY,Integer.toString(firstDelay));
  }
 catch (  Exception e) {
  }
  try {
    interval=configuration.getInt(INTERVAL_CONFIG_KEY,Integer.toString(interval));
  }
 catch (  Exception e) {
  }
  try {
    hostAddress=configuration.getString(UDC_HOST_ADDRESS_KEY,hostAddress);
  }
 catch (  Exception e) {
  }
  try {
    source=configuration.getString(UDC_SOURCE_KEY,source);
  }
 catch (  Exception e) {
  }
  try {
    registration=configuration.getString(UDC_REGISTRATION_KEY,registration);
  }
 catch (  Exception e) {
  }
  NeoStoreXaDataSource ds=(NeoStoreXaDataSource)kernel.getConfig().getTxModule().getXaDataSourceManager().getXaDataSource(Config.DEFAULT_DATA_SOURCE_NAME);
  boolean crashPing=ds.getXaContainer().getLogicalLog().wasNonClean();
  String storeId=Long.toHexString(ds.getRandomIdentifier());
  String version=kernel.version().getRevision();
  if (version.equals(""))   version=kernel.version().getVersion();
  UdcTimerTask task=new UdcTimerTask(hostAddress,version,storeId,source,crashPing,registration,formattedMacAddy());
  timer.scheduleAtFixedRate(task,firstDelay,interval);
  return task;
}
