{
  File dir=MigrationTestUtils.find21FormatStoreDirectoryWithDuplicateProperties(storeDir.directory());
  GraphDatabaseBuilder builder=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(dir).setConfig(GraphDatabaseSettings.allow_store_upgrade,"true").setConfig(GraphDatabaseSettings.record_format,StandardV3_0.NAME);
  GraphDatabaseService database=builder.newGraphDatabase();
  database.shutdown();
  ConsistencyCheckService service=new ConsistencyCheckService();
  ConsistencyCheckService.Result result=service.runFullConsistencyCheck(dir.getAbsoluteFile(),Config.defaults().with(MapUtil.stringMap(GraphDatabaseSettings.record_format.name(),StandardV3_0.NAME)),ProgressMonitorFactory.NONE,NullLogProvider.getInstance(),false);
  assertTrue(result.isSuccessful());
  database=builder.newGraphDatabase();
  DependencyResolver dependencyResolver=((GraphDatabaseAPI)database).getDependencyResolver();
  try (Transaction ignore=database.beginTx()){
    verifyProperties(database.getNodeById(0),Pair.of("keyA",new Object[]{"actual","phony!","phony!"}));
    verifyProperties(database.getNodeById(1),Pair.of("keyA",new Object[]{"actual","actual","actual"}));
    verifyProperties(database.getNodeById(2),Pair.of("keyA",new Object[]{"real1","phony","phony"}),Pair.of("keyD",new Object[]{"real2","phony","phony"}));
    verifyProperties(database.getNodeById(3),Pair.of("keyA",new Object[]{"real1","real1","real1"}),Pair.of("keyD",new Object[]{"real2","real2","real2"}));
    verifyProperties(database.getNodeById(4),Pair.of("keyA",new Object[]{"actual"}),Pair.of("keyB",new Object[]{"actual"}),Pair.of("keyC",new Object[]{"actual"}));
    verifyProperties(database.getRelationshipById(0),Pair.of("keyA",new Object[]{"actual","actual","actual"}));
    verifyProperties(database.getRelationshipById(1),Pair.of("keyA",new Object[]{"real1","real1","real1"}),Pair.of("keyD",new Object[]{"real2","real2","real2"}));
    verifyProperties(database.getRelationshipById(2),Pair.of("keyA",new Object[]{"actual"}),Pair.of("keyB",new Object[]{"actual"}),Pair.of("keyC",new Object[]{"actual"}));
  }
   KernelAPI kernel=dependencyResolver.resolveDependency(KernelAPI.class);
  try (KernelTransaction tx=kernel.newTransaction(KernelTransaction.Type.implicit,AccessMode.Static.READ);Statement statement=tx.acquireStatement()){
    Iterators.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(0));
    Iterators.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(1));
    Iterators.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(2));
    Iterators.asUniqueSet(statement.readOperations().relationshipGetPropertyKeys(0));
    Iterators.asUniqueSet(statement.readOperations().relationshipGetPropertyKeys(1));
  }
   database.shutdown();
}
