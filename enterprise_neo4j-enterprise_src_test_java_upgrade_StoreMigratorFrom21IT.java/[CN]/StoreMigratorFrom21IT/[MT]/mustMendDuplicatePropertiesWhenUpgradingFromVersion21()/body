{
  File dir=MigrationTestUtils.find21FormatStoreDirectoryWithDuplicateProperties(storeDir.directory());
  GraphDatabaseBuilder builder=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(dir.getAbsolutePath()).setConfig(GraphDatabaseSettings.allow_store_upgrade,"true");
  GraphDatabaseService database=builder.newGraphDatabase();
  database.shutdown();
  ConsistencyCheckService service=new ConsistencyCheckService();
  ConsistencyCheckService.Result result=service.runFullConsistencyCheck(dir.getAbsoluteFile(),Config.defaults(),ProgressMonitorFactory.NONE,NullLogProvider.getInstance(),false);
  assertTrue(result.isSuccessful());
  database=builder.newGraphDatabase();
  DependencyResolver dependencyResolver=((GraphDatabaseAPI)database).getDependencyResolver();
  try (Transaction ignore=database.beginTx()){
    verifyPropertiesEqual(database.getNodeById(0),Pair.of("keyA","actual"),Pair.of("__DUPLICATE_keyA_1","phony!"),Pair.of("__DUPLICATE_keyA_2","phony!"));
    verifyPropertiesEqual(database.getNodeById(1),Pair.of("keyA","actual"),Pair.of("__DUPLICATE_keyA_1","actual"),Pair.of("__DUPLICATE_keyA_2","actual"));
    verifyPropertiesEqual(database.getNodeById(2),Pair.of("keyA","real1"),Pair.of("keyD","real2"),Pair.of("__DUPLICATE_keyD_2","phony"),Pair.of("__DUPLICATE_keyD_1","phony"),Pair.of("__DUPLICATE_keyA_1","phony"),Pair.of("__DUPLICATE_keyA_2","phony"));
    verifyPropertiesEqual(database.getNodeById(3),Pair.of("keyA","real1"),Pair.of("__DUPLICATE_keyA_1","real1"),Pair.of("__DUPLICATE_keyA_2","real1"),Pair.of("keyD","real2"),Pair.of("__DUPLICATE_keyD_1","real2"),Pair.of("__DUPLICATE_keyD_2","real2"));
    verifyPropertiesEqual(database.getNodeById(4),Pair.of("keyA","actual"),Pair.of("keyB","actual"),Pair.of("keyC","actual"));
    verifyPropertiesEqual(database.getRelationshipById(0),Pair.of("keyA","actual"),Pair.of("__DUPLICATE_keyA_1","actual"),Pair.of("__DUPLICATE_keyA_2","actual"));
    verifyPropertiesEqual(database.getRelationshipById(1),Pair.of("keyA","real1"),Pair.of("__DUPLICATE_keyA_1","real1"),Pair.of("__DUPLICATE_keyA_2","real1"),Pair.of("keyD","real2"),Pair.of("__DUPLICATE_keyD_1","real2"),Pair.of("__DUPLICATE_keyD_2","real2"));
    verifyPropertiesEqual(database.getRelationshipById(2),Pair.of("keyA","actual"),Pair.of("keyB","actual"),Pair.of("keyC","actual"));
  }
   KernelAPI kernel=dependencyResolver.resolveDependency(KernelAPI.class);
  try (KernelTransaction tx=kernel.newTransaction(KernelTransaction.Type.implicit,AccessMode.READ);Statement statement=tx.acquireStatement()){
    IteratorUtil.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(0));
    IteratorUtil.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(1));
    IteratorUtil.asUniqueSet(statement.readOperations().nodeGetPropertyKeys(2));
    IteratorUtil.asUniqueSet(statement.readOperations().relationshipGetPropertyKeys(0));
    IteratorUtil.asUniqueSet(statement.readOperations().relationshipGetPropertyKeys(1));
  }
   database.shutdown();
}
