{
  long durationInMinutes=parseLong(fromEnv("CHECK_POINT_LOG_ROTATION_STRESS_DURATION",DEFAULT_DURATION_IN_MINUTES));
  File storeDir=ensureExists(fromEnv("CHECK_POINT_LOG_ROTATION_STORE_DIRECTORY",DEFAULT_STORE_DIR));
  long nodeCount=parseLong(fromEnv("CHECK_POINT_LOG_ROTATION_NODE_COUNT",DEFAULT_NODE_COUNT));
  int threads=parseInt(fromEnv("CHECK_POINT_LOG_ROTATION_WORKER_THREADS",DEFAULT_WORKER_THREADS));
  String pageCacheMemory=fromEnv("CHECK_POINT_LOG_ROTATION_PAGE_CACHE_MEMORY",DEFAULT_PAGE_CACHE_MEMORY);
  String pageSize=fromEnv("CHECK_POINT_LOG_ROTATION_PAGE_SIZE",DEFAULT_PAGE_SIZE);
  if (storeDir.exists()) {
    FileUtils.deleteRecursively(storeDir);
  }
  System.out.println("1/6\tBuilding initial store...");
  new ParallelBatchImporter(storeDir,DEFAULT,NullLogService.getInstance(),ExecutionMonitors.defaultVisible(),new Config()).doImport(new NodeCountInputs(nodeCount));
  System.out.println("2/6\tStarting database...");
  GraphDatabaseService db=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(GraphDatabaseSettings.pagecache_memory,pageCacheMemory).setConfig(GraphDatabaseSettings.mapped_memory_page_size,pageSize).setConfig(GraphDatabaseSettings.check_point_interval_time,"1m").setConfig(GraphDatabaseFacadeFactory.Configuration.tracer,"timer").newGraphDatabase();
  System.out.println("3/6\tWarm up db...");
  try (Workload workload=new Workload(db,defaultRandomMutation(nodeCount,db),threads)){
    workload.run(TimeUnit.SECONDS.toMillis(30),Workload.TransactionThroughput.NONE);
  }
   System.out.println("4/6\tStarting workload...");
  TransactionThroughputChecker throughput=new TransactionThroughputChecker();
  try (Workload workload=new Workload(db,defaultRandomMutation(nodeCount,db),threads)){
    workload.run(TimeUnit.MINUTES.toMillis(durationInMinutes),throughput);
  }
   System.out.println("5/6\tShutting down...");
  db.shutdown();
  try {
    System.out.println("6/6\tPrinting stats and recorded timings...");
    TimerTransactionTracer.printStats(System.out);
    throughput.assertThroughput(System.out);
  }
  finally {
    System.out.println("Done.");
  }
}
