{
  if (types.length == 0) {
    return start.getRelationships();
  }
  if (types.length == 1) {
    RelationshipType type=types[0];
    Direction direction=directions.get(type.name());
    return start.getRelationships(type,reversedDirection ? direction.reverse() : direction);
  }
  return new FilteringIterable<Relationship>(start.getRelationships(types)){
    @Override protected boolean passes(    Relationship item){
switch (directions.get(item.getType().name())) {
case INCOMING:
        return reversedDirection ? item.getStartNode().equals(start) : item.getEndNode().equals(start);
case OUTGOING:
      return reversedDirection ? item.getEndNode().equals(start) : item.getStartNode().equals(start);
default :
    return true;
}
}
}
;
}
