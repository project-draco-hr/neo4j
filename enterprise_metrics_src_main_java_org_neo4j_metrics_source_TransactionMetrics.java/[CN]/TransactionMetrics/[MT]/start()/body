{
  if (config.get(MetricsSettings.neoTxEnabled)) {
    registry.register(TX_STARTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfStartedTransactions();
      }
    }
);
    registry.register(TX_PEAK_CONCURRENT,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getPeakConcurrentNumberOfTransactions();
      }
    }
);
    registry.register(TX_ACTIVE,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfActiveTransactions();
      }
    }
);
    registry.register(READ_TX_ACTIVE,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfActiveReadTransactions();
      }
    }
);
    registry.register(WRITE_TX_ACTIVE,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfActiveWriteTransactions();
      }
    }
);
    registry.register(TX_COMMITTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfCommittedTransactions();
      }
    }
);
    registry.register(READ_TX_COMMITTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfCommittedReadTransactions();
      }
    }
);
    registry.register(WRITE_TX_COMMITTED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfCommittedWriteTransactions();
      }
    }
);
    registry.register(TX_ROLLBACKS,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfRolledBackTransactions();
      }
    }
);
    registry.register(READ_TX_ROLLBACKS,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfRolledBackReadTransactions();
      }
    }
);
    registry.register(WRITE_TX_ROLLBACKS,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfRolledBackWriteTransactions();
      }
    }
);
    registry.register(TX_TERMINATED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfTerminatedTransactions();
      }
    }
);
    registry.register(READ_TX_TERMINATED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfTerminatedReadTransactions();
      }
    }
);
    registry.register(WRITE_TX_TERMINATED,new Gauge<Long>(){
      @Override public Long getValue(){
        return transactionCounters.getNumberOfTerminatedWriteTransactions();
      }
    }
);
    registry.register(LAST_COMMITTED_TX_ID,new Gauge<Long>(){
      @Override public Long getValue(){
        return dataSourceManager.getDataSource().getNeoStores().getMetaDataStore().getLastCommittedTransactionId();
      }
    }
);
    registry.register(LAST_CLOSED_TX_ID,new Gauge<Long>(){
      @Override public Long getValue(){
        return dataSourceManager.getDataSource().getNeoStores().getMetaDataStore().getLastClosedTransactionId();
      }
    }
);
  }
}
