{
  final URI masterUri=availableMasterId;
  if (getServerId(masterUri).equals(instanceId)) {
    msgLog.error("I (" + me + ") tried to switch to slave for myself as master ("+ masterUri+ ")");
    return;
  }
  final AtomicLong wait=new AtomicLong();
  final CancellationHandle cancellationHandle=new CancellationHandle();
  startModeSwitching(new Runnable(){
    @Override public void run(){
      if (currentTargetState != HighAvailabilityMemberState.TO_SLAVE) {
        return;
      }
      try {
        haCommunicationLife.shutdown();
        haCommunicationLife=new LifeSupport();
        URI resultingSlaveHaURI=switchToSlave.switchToSlave(haCommunicationLife,me,masterUri,cancellationHandle);
        if (resultingSlaveHaURI == null) {
          msgLog.info("Switch to slave is effectively cancelled");
        }
 else {
          slaveHaURI=resultingSlaveHaURI;
          canAskForElections.set(true);
        }
      }
 catch (      UnableToCopyStoreFromOldMasterException|InconsistentlyUpgradedClusterException|UnavailableMembersException e) {
        consoleLog.error("UNABLE TO START UP AS SLAVE: " + e.getMessage());
        msgLog.error("Unable to start up as slave",e);
        clusterMemberAvailability.memberIsUnavailable(SLAVE);
        ClusterClient clusterClient=dependencyResolver.resolveDependency(ClusterClient.class);
        try {
          clusterClient.leave();
          clusterClient.stop();
          haCommunicationLife.shutdown();
        }
 catch (        Throwable t) {
          msgLog.error("Unable to stop cluster client",t);
        }
        modeSwitcherExecutor.schedule(this,5,TimeUnit.SECONDS);
        throw e;
      }
catch (      MismatchingStoreIdException|NoSuchLogVersionException e) {
        run();
      }
catch (      Throwable t) {
        msgLog.logMessage("Error while trying to switch to slave",t);
        wait.set((1 + wait.get() * 2));
        wait.set(Math.min(wait.get(),5 * 60));
        modeSwitcherFuture=modeSwitcherExecutor.schedule(this,wait.get(),TimeUnit.SECONDS);
        msgLog.logMessage("Attempting to switch to slave in " + wait.get() + "s");
      }
    }
  }
,cancellationHandle);
}
