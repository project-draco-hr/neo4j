{
  startModeSwitching(new Runnable(){
    @Override public void run(){
      if (currentTargetState != HighAvailabilityMemberState.TO_MASTER) {
        return;
      }
      msgLog.logMessage("I am " + config.get(ClusterSettings.server_id) + ", moving to master");
      try {
        DependencyResolver resolver=graphDb.getDependencyResolver();
        HaXaDataSourceManager xaDataSourceManager=resolver.resolveDependency(HaXaDataSourceManager.class);
synchronized (xaDataSourceManager) {
          final TransactionManager txManager=graphDb.getDependencyResolver().resolveDependency(TransactionManager.class);
          idGeneratorFactory.switchToMaster();
          Monitors monitors=graphDb.getDependencyResolver().resolveDependency(Monitors.class);
          MasterImpl.SPI spi=new DefaultMasterImplSPI(graphDb,logging,txManager,monitors);
          MasterImpl masterImpl=new MasterImpl(spi,monitors.newMonitor(MasterImpl.Monitor.class),logging,config);
          MasterServer masterServer=new MasterServer(masterImpl,logging,serverConfig(),new BranchDetectingTxVerifier(graphDb),monitors);
          haCommunicationLife.add(masterImpl);
          haCommunicationLife.add(masterServer);
          assignMaster(masterImpl);
          haCommunicationLife.start();
          masterHaURI=URI.create("ha://" + (ServerUtil.getHostString(masterServer.getSocketAddress()).contains("0.0.0.0") ? me.getHost() : ServerUtil.getHostString(masterServer.getSocketAddress())) + ":"+ masterServer.getSocketAddress().getPort()+ "?serverId="+ config.get(ClusterSettings.server_id));
          clusterMemberAvailability.memberIsAvailable(MASTER,masterHaURI);
          msgLog.logMessage("I am " + config.get(ClusterSettings.server_id) + ", successfully moved to master");
        }
      }
 catch (      Throwable e) {
        msgLog.logMessage("Failed to switch to master",e);
        election.demote(new InstanceId(getServerId(me)));
        return;
      }
    }
  }
);
}
