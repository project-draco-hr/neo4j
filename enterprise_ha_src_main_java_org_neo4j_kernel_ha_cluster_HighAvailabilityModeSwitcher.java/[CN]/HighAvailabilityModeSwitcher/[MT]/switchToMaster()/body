{
  msgLog.logMessage("I am " + config.get(HaSettings.server_id) + ", moving to master");
  try {
    MasterImpl masterImpl=new MasterImpl(graphDb,graphDb.getMessageLog(),config);
    MasterServer masterServer=new MasterServer(masterImpl,msgLog,serverConfig(),new BranchDetectingTxVerifier(graphDb));
    life.add(masterImpl);
    life.add(masterServer);
    delegateHandler.setDelegate(masterImpl);
    DependencyResolver resolver=graphDb.getDependencyResolver();
    HaXaDataSourceManager xaDsm=resolver.resolveDependency(HaXaDataSourceManager.class);
    idGeneratorFactory.switchToMaster();
synchronized (xaDsm) {
      ensureDataSourceStarted(xaDsm,resolver);
    }
    life.start();
    URI haUri=URI.create("ha://" + masterServer.getSocketAddress().getHostName() + ":"+ masterServer.getSocketAddress().getPort()+ "?serverId="+ config.get(HaSettings.server_id));
    clusterMemberAvailability.memberIsAvailable(MASTER,haUri);
  }
 catch (  Throwable e) {
    msgLog.logMessage("Failed to switch to master",e);
    return;
  }
}
