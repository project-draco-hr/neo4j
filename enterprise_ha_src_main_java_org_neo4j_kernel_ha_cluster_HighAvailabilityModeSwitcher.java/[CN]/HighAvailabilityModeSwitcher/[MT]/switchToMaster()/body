{
  msgLog.logMessage("I am " + config.get(HaSettings.server_id) + ", moving to master");
  try {
    MasterImpl masterImpl=new MasterImpl(graphDb,graphDb.getMessageLog(),config);
    Server.Configuration serverConfig=new Server.Configuration(){
      @Override public long getOldChannelThreshold(){
        return config.get(HaSettings.lock_read_timeout);
      }
      @Override public int getMaxConcurrentTransactions(){
        return config.get(HaSettings.max_concurrent_channels_per_slave);
      }
      @Override public int getChunkSize(){
        return config.get(HaSettings.com_chunk_size).intValue();
      }
      @Override public HostnamePort getServerAddress(){
        return config.get(HaSettings.ha_server);
      }
    }
;
    MasterServer masterServer=new MasterServer(masterImpl,msgLog,serverConfig,new BranchDetectingTxVerifier(graphDb));
    life.add(masterImpl);
    life.add(masterServer);
    delegateHandler.setDelegate(masterImpl);
    DependencyResolver resolver=graphDb.getDependencyResolver();
    HaXaDataSourceManager xaDsm=resolver.resolveDependency(HaXaDataSourceManager.class);
    idGeneratorFactory.switchToMaster();
synchronized (xaDsm) {
      XaDataSource nioneoDataSource=xaDsm.getXaDataSource(Config.DEFAULT_DATA_SOURCE_NAME);
      if (nioneoDataSource == null) {
        try {
          nioneoDataSource=new NeoStoreXaDataSource(config,resolver.resolveDependency(StoreFactory.class),resolver.resolveDependency(LockManager.class),resolver.resolveDependency(StringLogger.class),resolver.resolveDependency(XaFactory.class),resolver.resolveDependency(TransactionStateFactory.class),resolver.resolveDependency(TransactionInterceptorProviders.class),resolver);
          xaDsm.registerDataSource(nioneoDataSource);
        }
 catch (        IOException e) {
          msgLog.logMessage("Failed while trying to create datasource",e);
          return;
        }
      }
    }
    life.start();
    URI haUri=URI.create("ha://" + masterServer.getSocketAddress().getHostName() + ":"+ masterServer.getSocketAddress().getPort()+ "?serverId="+ config.get(HaSettings.server_id));
    clusterMemberAvailability.memberIsAvailable(MASTER,haUri);
  }
 catch (  Throwable e) {
    msgLog.logMessage("Failed to switch to master",e);
    return;
  }
}
