{
  availableMasterId=event.getServerHaUri();
  if (event.getNewState() == event.getOldState()) {
    return;
  }
  currentTargetState=event.getNewState();
switch (event.getNewState()) {
case TO_MASTER:
    if (event.getOldState().equals(HighAvailabilityMemberState.SLAVE)) {
      clusterMemberAvailability.memberIsUnavailable(SLAVE);
    }
  switchToMaster();
break;
case TO_SLAVE:
switchToSlave();
break;
case PENDING:
if (event.getOldState().equals(HighAvailabilityMemberState.SLAVE)) {
clusterMemberAvailability.memberIsUnavailable(SLAVE);
}
 else if (event.getOldState().equals(HighAvailabilityMemberState.MASTER)) {
clusterMemberAvailability.memberIsUnavailable(MASTER);
}
startModeSwitching(new Runnable(){
@Override public void run(){
haCommunicationLife.shutdown();
haCommunicationLife=new LifeSupport();
}
}
,new CancellationHandle());
try {
modeSwitcherFuture.get(10,TimeUnit.SECONDS);
}
 catch (Exception e) {
}
break;
default :
}
}
