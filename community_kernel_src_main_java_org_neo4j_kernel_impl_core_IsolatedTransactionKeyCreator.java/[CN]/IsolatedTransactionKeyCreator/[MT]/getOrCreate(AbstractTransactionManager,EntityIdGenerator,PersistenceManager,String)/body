{
  final AtomicInteger result=new AtomicInteger(-1);
  Thread isolatedCreator=new Thread(){
    @Override public void run(){
      try {
        txManager.begin(ForceMode.unforced);
        int id=createKey(idGenerator,persistence,name);
        txManager.commit();
        result.set(id);
      }
 catch (      Throwable t) {
        logger.error("Unable to create key '" + name + "'",t);
        try {
          txManager.rollback();
        }
 catch (        Throwable tt) {
          logger.error("Unable to rollback after failure to create key '" + name + "'",t);
        }
      }
    }
  }
;
  isolatedCreator.start();
  while (true) {
    try {
      isolatedCreator.join();
      break;
    }
 catch (    InterruptedException e) {
      logger.debug("Got interrupted awaiting key creator for '" + name + "'");
    }
  }
  int id=result.get();
  if (id == -1)   throw new TransactionFailureException("Unable to create key '" + name + "'");
  return id;
}
