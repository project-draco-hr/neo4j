{
  OmegaContext context=Mockito.mock(OmegaContext.class);
  Message<OmegaMessage> message=Mockito.mock(Message.class);
  MessageProcessor outgoing=Mockito.mock(MessageProcessor.class);
  URI fromUri=new URI(fromString);
  Map<URI,State> thePayloadContents=new HashMap<URI,State>();
  thePayloadContents.put(fromUri,new State(new EpochNumber(1,1),1));
  CollectResponsePayload thePayload=CollectResponsePayload.fromRegistry(thePayloadContents,3);
  Mockito.when(message.getHeader(Message.FROM)).thenReturn(fromString);
  Mockito.when(message.getPayload()).thenReturn(thePayload);
  Mockito.when(message.getMessageType()).thenReturn(OmegaMessage.status);
  Mockito.when(context.getViews()).thenReturn(new HashMap<URI,View>());
  Mockito.when(context.getStatusResponsesForRound(3)).thenReturn(done ? 3 : 1);
  Mockito.when(context.getClusterNodeCount()).thenReturn(5);
  OmegaState.omega.handle(context,message,outgoing);
  Mockito.verify(context).responseReceivedForRound(3,fromUri,thePayloadContents);
  Mockito.verify(context).getStatusResponsesForRound(3);
  Mockito.verify(context).getClusterNodeCount();
  if (done) {
    Mockito.verify(context).collectionRoundDone(3);
  }
  Mockito.verifyNoMoreInteractions(context);
  Mockito.verifyZeroInteractions(outgoing);
}
