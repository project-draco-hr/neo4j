{
  OmegaContext context=Mockito.mock(OmegaContext.class);
  Message<OmegaMessage> message=Mockito.mock(Message.class);
  MessageHolder outgoing=Mockito.mock(MessageHolder.class);
  RefreshPayload payload=new RefreshPayload(1,1,1,1);
  Mockito.when(message.getHeader(Message.FROM)).thenReturn(fromString);
  Mockito.when(message.getPayload()).thenReturn(payload);
  Mockito.when(message.getMessageType()).thenReturn(OmegaMessage.refresh);
  URI fromURI=new URI(fromString);
  Map<URI,State> registry=Mockito.mock(Map.class);
  State fromState=Mockito.mock(State.class);
  Mockito.when(registry.get(fromURI)).thenReturn(fromState);
  Mockito.when(context.getRegistry()).thenReturn(registry);
  if (newer) {
    Mockito.when(fromState.compareTo(Matchers.any(State.class))).thenReturn(-1);
  }
 else {
    Mockito.when(fromState.compareTo(Matchers.any(State.class))).thenReturn(1);
  }
  OmegaState.omega.handle(context,message,outgoing);
  Mockito.verify(context,Mockito.atLeastOnce()).getRegistry();
  Mockito.verify(registry).get(fromURI);
  Mockito.verify(fromState).compareTo(Matchers.isA(State.class));
  if (newer) {
    Mockito.verify(registry).put(Matchers.eq(fromURI),Matchers.isA(State.class));
  }
 else {
    Mockito.verify(registry,Mockito.never()).put(Matchers.eq(fromURI),Matchers.isA(State.class));
  }
  Mockito.verify(outgoing).process(Matchers.argThat(new MessageArgumentMatcher<OmegaMessage>().to(fromURI).onMessageType(OmegaMessage.refresh_ack)));
}
