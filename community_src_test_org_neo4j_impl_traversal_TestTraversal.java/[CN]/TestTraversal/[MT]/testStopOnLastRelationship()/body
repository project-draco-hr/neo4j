{
  Node root=this.buildIseTreePopulation();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST,MyRelTypes.TEST_TRAVERSAL};
  StopEvaluator stopEvaluator=new StopEvaluator(){
    public boolean isStopNode(    TraversalPosition position){
      Relationship rel=position.lastRelationshipTraversed();
      return rel != null && rel.getType() == MyRelTypes.TEST_TRAVERSAL;
    }
  }
;
  Traverser traverser=root.traverse(BREADTH_FIRST,stopEvaluator,ReturnableEvaluator.ALL,traversableRels[0],Direction.BOTH,traversableRels[1],Direction.BOTH);
  try {
    this.assertNextNodeId(traverser,"1");
    this.assertNextNodeId(traverser,"2");
    this.assertNextNodeId(traverser,"3");
    this.assertNextNodeId(traverser,"4");
    this.assertNextNodeId(traverser,"5");
    this.assertNextNodeId(traverser,"6");
    this.assertNextNodeId(traverser,"7");
    this.assertNextNodeId(traverser,"8");
    this.assertNextNodeId(traverser,"9");
    this.assertNextNodeId(traverser,"10");
    this.assertNextNodeId(traverser,"11");
    this.assertNextNodeId(traverser,"12");
    this.assertNextNodeId(traverser,"13");
    assertTrue("Too many nodes returned from traversal",traverser.iterator().hasNext() == false);
  }
 catch (  java.util.NoSuchElementException nsee) {
    fail("Too few nodes returned from traversal");
  }
 finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
