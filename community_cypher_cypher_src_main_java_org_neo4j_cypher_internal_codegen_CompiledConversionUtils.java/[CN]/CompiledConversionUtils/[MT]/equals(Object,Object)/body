{
  if (lhs == null || rhs == null) {
    return null;
  }
  if ((lhs instanceof NodeIdWrapper && !(rhs instanceof NodeIdWrapper)) || (rhs instanceof NodeIdWrapper && !(lhs instanceof NodeIdWrapper)) || (lhs instanceof RelationshipIdWrapper && !(rhs instanceof RelationshipIdWrapper))|| (rhs instanceof RelationshipIdWrapper && !(lhs instanceof RelationshipIdWrapper))) {
    throw new IncomparableValuesException(lhs.getClass().getSimpleName(),rhs.getClass().getSimpleName());
  }
  if (lhs instanceof Number && rhs instanceof Number) {
    if ((lhs instanceof Double || lhs instanceof Float) && (rhs instanceof Double || rhs instanceof Float)) {
      double left=((Number)lhs).doubleValue();
      double right=((Number)rhs).doubleValue();
      return left == right;
    }
 else     if ((lhs instanceof Double || lhs instanceof Float)) {
      double left=((Number)lhs).doubleValue();
      long right=((Number)rhs).longValue();
      return MathUtil.numbersEqual(left,right);
    }
 else     if ((rhs instanceof Double || rhs instanceof Float)) {
      long left=((Number)lhs).longValue();
      double right=((Number)rhs).doubleValue();
      return MathUtil.numbersEqual(right,left);
    }
    long left=((Number)lhs).longValue();
    long right=((Number)rhs).longValue();
    return left == right;
  }
 else   if (lhs.getClass().isArray() && rhs.getClass().isArray()) {
    int length=Array.getLength(lhs);
    if (length != Array.getLength(rhs)) {
      return false;
    }
    for (int i=0; i < length; i++) {
      if (!equals(Array.get(lhs,i),Array.get(rhs,i))) {
        return false;
      }
    }
    return true;
  }
 else   if (lhs.getClass().isArray() && rhs instanceof List<?>) {
    return compareArrayAndList(lhs,(List<?>)rhs);
  }
 else   if (lhs instanceof List<?> && rhs.getClass().isArray()) {
    return compareArrayAndList(rhs,(List<?>)lhs);
  }
 else   if (lhs instanceof List<?> && rhs instanceof List<?>) {
    List<?> lhsList=(List<?>)lhs;
    List<?> rhsList=(List<?>)rhs;
    if (lhsList.size() != rhsList.size()) {
      return false;
    }
    Iterator<?> lhsIterator=lhsList.iterator();
    Iterator<?> rhsIterator=rhsList.iterator();
    while (lhsIterator.hasNext()) {
      if (!equals(lhsIterator.next(),rhsIterator.next())) {
        return false;
      }
    }
    return true;
  }
  return lhs.equals(rhs);
}
