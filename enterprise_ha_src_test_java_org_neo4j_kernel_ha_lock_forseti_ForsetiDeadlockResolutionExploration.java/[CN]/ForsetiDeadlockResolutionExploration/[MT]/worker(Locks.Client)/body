{
  return new Callable<Long>(){
    private final Random rand=new Random();
    @Override public Long call() throws Exception {
      long deadlocks=0;
      for (int i=0; i < ITERATIONS; i++) {
        try {
          for (int j=0; j < 3; j++) {
            int todo=rand.nextInt(8);
            if (todo <= 3) {
              client.acquireExclusive(ResourceTypes.NODE,todo);
            }
 else {
              client.acquireShared(ResourceTypes.NODE,todo - 4);
            }
          }
        }
 catch (        DeadlockDetectedException e) {
          deadlocks++;
        }
 finally {
          client.releaseAll();
        }
      }
      return deadlocks;
    }
  }
;
}
