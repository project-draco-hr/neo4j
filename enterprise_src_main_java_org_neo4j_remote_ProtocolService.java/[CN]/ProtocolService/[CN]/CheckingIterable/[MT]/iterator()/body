{
  try {
    final Iterator<?> iterator=provideIterator();
    return new Iterator<Transport>(){
      Transport cached=null;
      public boolean hasNext(){
        if (cached != null) {
          return true;
        }
 else         while (iterator.hasNext()) {
          try {
            cached=(Transport)iterator.next();
            return true;
          }
 catch (          Throwable ex) {
            cached=null;
          }
        }
        return false;
      }
      public Transport next(){
        if (hasNext()) {
          try {
            return cached;
          }
  finally {
            cached=null;
          }
        }
 else {
          throw new IllegalStateException();
        }
      }
      public void remove(){
        throw new UnsupportedOperationException();
      }
    }
;
  }
 catch (  Exception ex) {
    return Arrays.asList(new Transport[0]).iterator();
  }
}
