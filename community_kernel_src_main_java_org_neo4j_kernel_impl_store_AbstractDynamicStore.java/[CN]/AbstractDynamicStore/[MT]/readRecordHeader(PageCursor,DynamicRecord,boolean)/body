{
  long firstInteger=cursor.getUnsignedInt();
  boolean isStartRecord=(firstInteger & 0x80000000) == 0;
  long maskedInteger=firstInteger & ~0x80000000;
  int highNibbleInMaskedInteger=(int)((maskedInteger) >> 28);
  boolean inUse=highNibbleInMaskedInteger == Record.IN_USE.intValue();
  if (!inUse && !force) {
    return notInUseSignal;
  }
  int dataSize=getBlockSize() - AbstractDynamicStore.BLOCK_HEADER_SIZE;
  int nrOfBytes=(int)(firstInteger & 0xFFFFFF);
  long nextBlock=cursor.getUnsignedInt();
  long nextModifier=(firstInteger & 0xF000000L) << 8;
  long longNextBlock=CommonAbstractStore.longFromIntAndMod(nextBlock,nextModifier);
  boolean hasDataToRead=true;
  record.setInUse(inUse);
  record.setStartRecord(isStartRecord);
  record.setLength(nrOfBytes);
  record.setNextBlock(longNextBlock);
  if (longNextBlock != Record.NO_NEXT_BLOCK.intValue() && nrOfBytes < dataSize || nrOfBytes > dataSize) {
    hasDataToRead=false;
    if (!force) {
      return illegalSizeSignal;
    }
  }
  return hasDataToRead ? hasDataSignal : hasNoDataSignal;
}
