{
  assertFalse("Should not have role publisher",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PUBLISHER));
  assertFalse("Should not have role architect",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(ARCHITECT));
  testCallEmpty(adminSubject,"CALL dbms.addUserToRole('readSubject', '" + PUBLISHER + "')");
  testCallEmpty(adminSubject,"CALL dbms.addUserToRole('readSubject', '" + ARCHITECT + "')");
  assertTrue("Should have role publisher",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PUBLISHER));
  assertTrue("Should have role architect",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(ARCHITECT));
  testCallEmpty(adminSubject,"CALL dbms.removeUserFromRole('readSubject', '" + PUBLISHER + "')");
  testCallEmpty(adminSubject,"CALL dbms.removeUserFromRole('readSubject', '" + ARCHITECT + "')");
  assertFalse("Should not have role publisher",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PUBLISHER));
  assertFalse("Should not have role architect",ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(ARCHITECT));
}
