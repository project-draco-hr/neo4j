{
  String key="key", value="value";
  HighlyAvailableGraphDatabase master=cluster.getMaster();
  long nodeId=createNode(master,key,value,true);
  cluster.sync();
  Map<HighlyAvailableGraphDatabase,IndexManager> indexManagers=new HashMap<>();
  Map<HighlyAvailableGraphDatabase,Index<Node>> indexes=new HashMap<>();
  for (  HighlyAvailableGraphDatabase db : cluster.getAllMembers()) {
    try (Transaction transaction=db.beginTx()){
      indexManagers.put(db,db.index());
      indexes.put(db,db.index().forNodes(key));
      transaction.success();
    }
   }
  RepairKit repair=cluster.shutdown(master);
  indexManagers.remove(master);
  indexes.remove(master);
  cluster.await(ClusterManager.masterAvailable(master));
  cluster.await(ClusterManager.masterSeesSlavesAsAvailable(1));
  for (  Map.Entry<HighlyAvailableGraphDatabase,IndexManager> entry : indexManagers.entrySet()) {
    HighlyAvailableGraphDatabase db=entry.getKey();
    try (Transaction transaction=db.beginTx()){
      IndexManager indexManager=entry.getValue();
      assertTrue(indexManager.existsForNodes(key));
      assertEquals(nodeId,indexManager.forNodes(key).get(key,value).getSingle().getId());
    }
   }
  for (  Map.Entry<HighlyAvailableGraphDatabase,Index<Node>> entry : indexes.entrySet()) {
    HighlyAvailableGraphDatabase db=entry.getKey();
    try (Transaction transaction=db.beginTx()){
      Index<Node> index=entry.getValue();
      assertEquals(nodeId,index.get(key,value).getSingle().getId());
    }
   }
  repair.repair();
}
