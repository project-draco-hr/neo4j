{
  final Node lockNode=createLockNode();
  final UniqueFactory<Node> uniqueFactory=createUniqueFactory();
  final List<GetOrCreateTask> threads=new ArrayList<>();
  int numThreads=Runtime.getRuntime().availableProcessors() * 2;
  for (int i=0; i < numThreads; i++) {
    threads.add(new GetOrCreateTask(db,lockNode,NUM_USERS,impl,GetOrCreateDocIT.class.getSimpleName() + " thread " + i,uniqueFactory));
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  RuntimeException failure=null;
  List<List<Node>> results=new ArrayList<>();
  for (  GetOrCreateTask thread : threads) {
    try {
      thread.join();
      if (failure == null) {
        failure=thread.failure;
      }
      results.add(thread.result);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (failure != null) {
    throw failure;
  }
  assertEquals(numThreads,results.size());
  List<Node> firstResult=results.remove(0);
  for (  List<Node> subresult : results) {
    assertEquals(firstResult,subresult);
  }
  for (int i=0; i < NUM_USERS; i++) {
    final String username=getUsername(i);
    impl.getOrCreateUser(username,graphdb(),lockNode,uniqueFactory);
    assertUserExistsUniquely(username);
  }
}
