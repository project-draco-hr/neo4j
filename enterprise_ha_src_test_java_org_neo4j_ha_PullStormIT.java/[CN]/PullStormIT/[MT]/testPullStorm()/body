{
  ClusterManager clusterManager=new ClusterManager(ClusterManager.clusterWithAdditionalArbiters(2,1),testDirectory.directory(),stringMap(HaSettings.pull_interval.name(),"0",HaSettings.tx_push_factor.name(),"1"));
  clusterManager.start();
  try {
    ClusterManager.ManagedCluster cluster=clusterManager.getDefaultCluster();
    cluster.await(ClusterManager.masterAvailable());
    cluster.await(ClusterManager.masterSeesSlavesAsAvailable(1));
    final HighlyAvailableGraphDatabase master=cluster.getMaster();
{
      System.out.println("Creating data");
      Transaction tx=master.beginTx();
      for (int i=0; i < 1000; i++) {
        master.createNode().setProperty("foo","bar");
      }
      tx.success();
      tx.finish();
    }
    HighlyAvailableGraphDatabase slave=cluster.getAnySlave();
    System.out.println("Slave failed");
    ClusterManager.RepairKit repairKit=cluster.fail(slave);
    System.out.println("Creating more data");
    for (int i=0; i < 1000; i++) {
{
        Transaction tx=master.beginTx();
        for (int j=0; j < 1000; j++) {
          master.createNode().setProperty("foo","bar");
          master.createNode().setProperty("foo","bar");
        }
        tx.success();
        tx.finish();
      }
    }
    System.out.println("Slave comes up");
    repairKit.repair();
    cluster.await(ClusterManager.masterSeesSlavesAsAvailable(1));
    System.out.println("Pull storm");
    ExecutorService executor=Executors.newFixedThreadPool(20);
    List<Future<?>> result=new ArrayList<Future<?>>();
    for (int i=0; i < 20; i++) {
      result.add(executor.submit(new Runnable(){
        @Override public void run(){
          Transaction tx=master.beginTx();
          master.createNode().setProperty("foo","bar");
          tx.success();
          tx.finish();
        }
      }
));
    }
    for (    Future<?> future : result) {
      future.get();
    }
    executor.shutdown();
    System.out.println("Pull storm done");
    for (    HighlyAvailableGraphDatabase highlyAvailableGraphDatabase : cluster.getAllMembers()) {
      long txId=((NeoStoreXaDataSource)highlyAvailableGraphDatabase.getDependencyResolver().resolveDependency(XaDataSourceManager.class).getXaDataSource(NeoStoreXaDataSource.DEFAULT_DATA_SOURCE_NAME)).getNeoStore().getLastCommittedTx();
      System.out.println(highlyAvailableGraphDatabase.getConfig().get(ClusterSettings.server_id) + "=" + txId);
    }
  }
  finally {
    System.err.println("Shutting down");
    clusterManager.shutdown();
    System.err.println("Shut down");
  }
}
