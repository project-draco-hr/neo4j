{
  dependencies=new org.neo4j.kernel.impl.util.Dependencies(new Supplier<DependencyResolver>(){
    @Override public DependencyResolver get(){
      return dataSourceManager.getDataSource().getDependencyResolver();
    }
  }
);
  life=dependencies.satisfyDependency(createLife());
  this.graphDatabaseFacade=dependencies.satisfyDependency(graphDatabaseFacade);
  config=dependencies.satisfyDependency(new Config(params,getSettingsClasses(externalDependencies.settingsClasses(),externalDependencies.kernelExtensions())));
  this.storeDir=storeDir.getAbsoluteFile();
  fileSystem=life.add(dependencies.satisfyDependency(createFileSystemAbstraction()));
  monitors=externalDependencies.monitors() == null ? new Monitors() : externalDependencies.monitors();
  dependencies.satisfyDependency(monitors);
  jobScheduler=life.add(dependencies.satisfyDependency(createJobScheduler()));
  logging=life.add(dependencies.satisfyDependency(createLogService(externalDependencies.userLogProvider())));
  config.setLogger(logging.getInternalLog(Config.class));
  life.add(dependencies.satisfyDependency(new StoreLockerLifecycleAdapter(new StoreLocker(fileSystem),storeDir)));
  new JvmChecker(logging.getInternalLog(JvmChecker.class),new JvmMetadataRepository()).checkJvmCompatibilityAndIssueWarning();
  String desiredImplementationName=config.get(GraphDatabaseFacadeFactory.Configuration.tracer);
  tracers=dependencies.satisfyDependency(new Tracers(desiredImplementationName,logging.getInternalLog(Tracers.class)));
  dependencies.satisfyDependency(tracers.pageCacheTracer);
  pageCache=dependencies.satisfyDependency(createPageCache(fileSystem,config,logging,tracers));
  life.add(new PageCacheLifecycle(pageCache));
  diagnosticsManager=life.add(dependencies.satisfyDependency(new DiagnosticsManager(logging.getInternalLog(DiagnosticsManager.class))));
  dataSourceManager=life.add(dependencies.satisfyDependency(new DataSourceManager()));
  availabilityGuard=new AvailabilityGuard(Clock.SYSTEM_CLOCK);
  transactionMonitor=dependencies.satisfyDependency(createTransactionCounters());
  KernelContext kernelContext=new KernelContext(){
    @Override public FileSystemAbstraction fileSystem(){
      return PlatformModule.this.fileSystem;
    }
    @Override public File storeDir(){
      return PlatformModule.this.storeDir;
    }
  }
;
  kernelExtensions=dependencies.satisfyDependency(new KernelExtensions(kernelContext,externalDependencies.kernelExtensions(),dependencies,UnsatisfiedDependencyStrategies.fail()));
}
