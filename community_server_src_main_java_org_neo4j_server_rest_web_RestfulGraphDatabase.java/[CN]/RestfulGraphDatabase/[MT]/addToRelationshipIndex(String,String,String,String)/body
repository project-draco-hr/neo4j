{
  try {
    Map<String,Object> entityBody;
    Pair<IndexedEntityRepresentation,Boolean> result;
switch (unique(unique,uniqueness)) {
case GetOrCreate:
      entityBody=input.readMap(postBody,"key","value");
    result=actions.getOrCreateIndexedRelationship(indexName,String.valueOf(entityBody.get("key")),String.valueOf(entityBody.get("value")),extractRelationshipIdOrNull(getStringOrNull(entityBody,"uri")),extractNodeIdOrNull(getStringOrNull(entityBody,"start")),getStringOrNull(entityBody,"type"),extractNodeIdOrNull(getStringOrNull(entityBody,"end")),getMapOrNull(entityBody,"properties"));
  return result.other() ? output.created(result.first()) : output.ok(result.first());
case CreateOrFail:
entityBody=input.readMap(postBody,"key","value");
result=actions.getOrCreateIndexedRelationship(indexName,String.valueOf(entityBody.get("key")),String.valueOf(entityBody.get("value")),extractRelationshipIdOrNull(getStringOrNull(entityBody,"uri")),extractNodeIdOrNull(getStringOrNull(entityBody,"start")),getStringOrNull(entityBody,"type"),extractNodeIdOrNull(getStringOrNull(entityBody,"end")),getMapOrNull(entityBody,"properties"));
if (result.other()) {
return output.created(result.first());
}
String uri=getStringOrNull(entityBody,"uri");
if (uri == null) {
return output.conflict(result.first());
}
long idOfRelationshipToBeIndexed=extractRelationshipId(uri);
long idOfRelationshipAlreadyInIndex=extractRelationshipId(result.first().getIdentity());
if (idOfRelationshipToBeIndexed == idOfRelationshipAlreadyInIndex) {
return output.created(result.first());
}
return output.conflict(result.first());
default :
entityBody=input.readMap(postBody,"key","value","uri");
return output.created(actions.addToRelationshipIndex(indexName,String.valueOf(entityBody.get("key")),String.valueOf(entityBody.get("value")),extractRelationshipId(entityBody.get("uri").toString())));
}
}
 catch (UnsupportedOperationException e) {
return output.methodNotAllowed(e);
}
catch (IllegalArgumentException e) {
return output.badRequest(e);
}
catch (BadInputException e) {
return output.badRequest(e);
}
catch (Exception e) {
return output.serverError(e);
}
}
