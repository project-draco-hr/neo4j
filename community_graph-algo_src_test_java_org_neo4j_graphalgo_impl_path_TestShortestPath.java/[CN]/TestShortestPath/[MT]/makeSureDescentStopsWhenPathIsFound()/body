{
  graph.makeEdgeChain("a,b,c,d,e");
  graph.makeEdgeChain("a,b,c,d,e");
  graph.makeEdgeChain("a,f,g,h,i");
  final Node a=graph.getNode("a");
  final Node b=graph.getNode("b");
  final Node c=graph.getNode("c");
  final Set<Node> allowedNodes=new HashSet<>(Arrays.asList(a,b,c));
  final PathFinder<Path> finder=new ShortestPath(100,Traversal.expanderForAllTypes(Direction.OUTGOING)){
    @Override protected Node filterNextLevelNodes(    Node nextNode){
      if (!allowedNodes.contains(nextNode)) {
        return null;
      }
      return nextNode;
    }
  }
;
  Iterator<Path> paths=finder.findAllPaths(a,c).iterator();
  for (int i=0; i < 4; i++) {
    Path aToBToC=paths.next();
    assertPath(aToBToC,a,b,c);
  }
  assertFalse("should only have contained four paths",paths.hasNext());
}
