{
  try {
    TO_SLAVE.masterIsAvailable(context,myId,SampleUri);
    fail("TO_SLAVE to MASTER is not allowed");
  }
 catch (  RuntimeException e) {
  }
  InstanceId currentMaster=new InstanceId(2);
  when(context.getElectedMasterId()).thenReturn(currentMaster);
  HighAvailabilityMemberState newState=TO_SLAVE.masterIsAvailable(context,currentMaster,SampleUri);
  assertEquals(TO_SLAVE,newState);
  try {
    TO_SLAVE.masterIsAvailable(context,new InstanceId(3),SampleUri);
    fail("Should have gotten an election result first");
  }
 catch (  RuntimeException e) {
  }
}
