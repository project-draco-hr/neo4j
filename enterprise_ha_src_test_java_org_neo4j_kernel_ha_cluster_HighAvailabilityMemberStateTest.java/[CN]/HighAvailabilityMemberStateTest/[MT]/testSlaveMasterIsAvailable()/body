{
  try {
    SLAVE.masterIsAvailable(context,myId,SampleUri);
    fail("Should have gotten an election result first");
  }
 catch (  RuntimeException e) {
  }
  InstanceId masterInstanceId=new InstanceId(2);
  when(context.getElectedMasterId()).thenReturn(masterInstanceId);
  try {
    SLAVE.masterIsAvailable(context,new InstanceId(3),SampleUri);
    fail("Should have gotten an election result first");
  }
 catch (  RuntimeException e) {
  }
  HighAvailabilityMemberState newState=SLAVE.masterIsAvailable(context,masterInstanceId,SampleUri);
  assertEquals(SLAVE,newState);
}
