{
  ClientResponse response=Client.create().resource(FunctionalTestUtil.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"KNOWS")).accept(MediaType.TEXT_HTML_TYPE).get(ClientResponse.class);
  assertEquals(Status.OK.getStatusCode(),response.getStatus());
  String entity=response.getEntity(String.class);
  assertTrue(entity.contains("KNOWS"));
  assertFalse(entity.contains("LOVES"));
  assertValidHtml(entity);
  response=Client.create().resource(FunctionalTestUtil.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"LOVES")).accept(MediaType.TEXT_HTML_TYPE).get(ClientResponse.class);
  entity=response.getEntity(String.class);
  assertFalse(entity.contains("KNOWS"));
  assertTrue(entity.contains("LOVES"));
  assertValidHtml(entity);
  response=Client.create().resource(FunctionalTestUtil.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"LOVES","KNOWS")).accept(MediaType.TEXT_HTML_TYPE).get(ClientResponse.class);
  entity=response.getEntity(String.class);
  assertTrue(entity.contains("KNOWS"));
  assertTrue(entity.contains("LOVES"));
  assertValidHtml(entity);
}
