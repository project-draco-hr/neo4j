{
  Node root=this.buildIseTreePopulation();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST};
  StopEvaluator stopEvaluator=new StopEvaluator(){
    @Override public boolean isStopNode(    TraversalPosition position){
      return position.returnedNodesCount() >= 5;
    }
  }
;
  ReturnableEvaluator returnEvaluator=new ReturnableEvaluator(){
    @Override public boolean isReturnableNode(    TraversalPosition position){
      return position.returnedNodesCount() < 5;
    }
  }
;
  Traverser traverser=root.traverse(BREADTH_FIRST,stopEvaluator,returnEvaluator,traversableRels[0],Direction.BOTH);
  try {
    this.assertLevelsOfNodes(traverser,new String[][]{new String[]{"1"},new String[]{"2","3","4"},new String[]{"5"}});
    assertTrue("Too many nodes returned from traversal",traverser.iterator().hasNext() == false);
  }
 catch (  java.util.NoSuchElementException nsee) {
    fail("Too few nodes returned from traversal");
  }
 finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
