{
  Node root=this.buildIseTreePopulation();
  RelationshipType[] traversableRels=new RelationshipType[]{MyRelTypes.TEST};
  StopEvaluator stopEvaluator=new StopEvaluator(){
    @Override public boolean isStopNode(    TraversalPosition position){
      return position.depth() >= 2;
    }
  }
;
  Traverser traverser=root.traverse(BREADTH_FIRST,stopEvaluator,ReturnableEvaluator.ALL,traversableRels[0],Direction.BOTH);
  try {
    assertNextNodeId(traverser,"1");
    assertNextNodeId(traverser,"2");
    assertNextNodeId(traverser,"3");
    assertNextNodeId(traverser,"4");
    assertNextNodeId(traverser,"5");
    assertNextNodeId(traverser,"6");
    assertNextNodeId(traverser,"7");
    assertTrue("Too many nodes returned from traversal",!traverser.iterator().hasNext());
  }
  finally {
    this.deleteNodeTreeRecursively(root,0);
  }
}
