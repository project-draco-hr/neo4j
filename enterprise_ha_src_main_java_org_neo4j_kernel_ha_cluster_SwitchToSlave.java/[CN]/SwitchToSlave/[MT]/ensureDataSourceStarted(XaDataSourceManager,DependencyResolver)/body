{
  NeoStoreXaDataSource nioneoDataSource=(NeoStoreXaDataSource)xaDataSourceManager.getXaDataSource(NeoStoreXaDataSource.DEFAULT_DATA_SOURCE_NAME);
  if (nioneoDataSource == null) {
    Function<NeoStore,Function<List<LogEntry>,List<LogEntry>>> transactionTranslatorFactory=new Function<NeoStore,Function<List<LogEntry>,List<LogEntry>>>(){
      @Override public Function<List<LogEntry>,List<LogEntry>> apply(      NeoStore neoStore){
        return new DenseNodeTransactionTranslator(neoStore);
      }
    }
;
    nioneoDataSource=new NeoStoreXaDataSource(config,resolver.resolveDependency(StoreFactory.class),resolver.resolveDependency(StringLogger.class),resolver.resolveDependency(XaFactory.class),resolver.resolveDependency(TransactionStateFactory.class),resolver.resolveDependency(TransactionInterceptorProviders.class),resolver.resolveDependency(JobScheduler.class),logging,updateableSchemaState,new NonTransactionalTokenNameLookup(resolver.resolveDependency(LabelTokenHolder.class),resolver.resolveDependency(PropertyKeyTokenHolder.class)),resolver,resolver.resolveDependency(AbstractTransactionManager.class),resolver.resolveDependency(PropertyKeyTokenHolder.class),resolver.resolveDependency(LabelTokenHolder.class),resolver.resolveDependency(RelationshipTypeTokenHolder.class),resolver.resolveDependency(PersistenceManager.class),resolver.resolveDependency(Locks.class),resolver.resolveDependency(SchemaWriteGuard.class),resolver.resolveDependency(TransactionEventHandlers.class),monitors.newMonitor(IndexingService.Monitor.class),resolver.resolveDependency(FileSystemAbstraction.class),transactionTranslatorFactory,resolver.resolveDependency(StoreUpgrader.class));
    xaDataSourceManager.registerDataSource(nioneoDataSource);
    resolver.resolveDependency(NodeManager.class).start();
  }
  return nioneoDataSource;
}
