{
  String name="log";
  File file=new File(directory.directory(),name + ".1");
  final int logVersion=1;
  writeSomeData(file,new Visitor<ByteBuffer,IOException>(){
    @Override public boolean visit(    ByteBuffer buffer) throws IOException {
      writeLogHeader(buffer,logVersion,3);
      buffer.clear();
      buffer.position(LOG_HEADER_SIZE);
      buffer.put((byte)2);
      buffer.putInt(23324);
      return true;
    }
  }
);
  LogRotationControl logRotationControl=mock(LogRotationControl.class);
  LifeSupport life=new LifeSupport();
  PhysicalLogFiles logFiles=new PhysicalLogFiles(directory.directory(),name,fs);
  Monitor monitor=mock(Monitor.class);
  life.add(new PhysicalLogFile(fs,logFiles,50,LogPruneStrategyFactory.NO_PRUNING,transactionIdStore,logVersionRepository,monitor,logRotationControl,new TransactionMetadataCache(10,100),new Visitor<ReadableVersionableLogChannel,IOException>(){
    @Override public boolean visit(    ReadableVersionableLogChannel element) throws IOException {
      assertEquals((byte)2,element.get());
      assertEquals(23324,element.getInt());
      try {
        element.get();
        fail("There should be no more");
      }
 catch (      ReadPastEndException e) {
      }
      return true;
    }
  }
));
  try {
    life.start();
    InOrder order=inOrder(monitor);
    order.verify(monitor,times(1)).recoveryRequired(logVersion);
    order.verify(monitor,times(1)).recoveryCompleted();
  }
  finally {
    life.shutdown();
  }
}
