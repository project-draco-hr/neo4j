{
  String name="log";
  LogRotationControl logRotationControl=mock(LogRotationControl.class);
  LifeSupport life=new LifeSupport();
  PhysicalLogFiles logFiles=new PhysicalLogFiles(directory.directory(),name,fs);
  LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,50,LogPruneStrategies.NO_PRUNING,transactionIdStore,logVersionRepository,mock(Monitor.class),logRotationControl,new TransactionMetadataCache(10,100),NO_RECOVERY_EXPECTED));
  life.start();
  try {
    WritableLogChannel writer=logFile.getWriter();
    LogPosition position1=writer.getCurrentPosition();
    int intValue=45;
    long longValue=4854587;
    byte[] someBytes=someBytes(40);
    writer.putInt(intValue);
    writer.putLong(longValue);
    writer.put(someBytes,someBytes.length);
    writer.force();
    LogPosition position2=writer.getCurrentPosition();
    long longValue2=123456789L;
    writer.putLong(longValue2);
    writer.put(someBytes,someBytes.length);
    writer.force();
    try (ReadableLogChannel reader=logFile.getReader(position1)){
      assertEquals(intValue,reader.getInt());
      assertEquals(longValue,reader.getLong());
      assertArrayEquals(someBytes,readBytes(reader,40));
    }
     try (ReadableLogChannel reader=logFile.getReader(position2)){
      assertEquals(longValue2,reader.getLong());
      assertArrayEquals(someBytes,readBytes(reader,40));
    }
   }
  finally {
    life.shutdown();
  }
}
