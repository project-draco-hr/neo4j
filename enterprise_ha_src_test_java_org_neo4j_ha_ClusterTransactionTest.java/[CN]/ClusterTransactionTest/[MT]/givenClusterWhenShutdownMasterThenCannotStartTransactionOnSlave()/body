{
  ClusterManager clusterManager=new ClusterManager(fromXml(getClass().getResource("/threeinstances.xml").toURI()),TargetDirectory.forTest(getClass()).cleanDirectory("testCluster"),MapUtil.stringMap(HaSettings.ha_server.name(),":6001-6005",HaSettings.tx_push_factor.name(),"2"));
  try {
    clusterManager.start();
    clusterManager.getDefaultCluster().await(ClusterManager.allSeesAllAsAvailable());
    GraphDatabaseAPI master=clusterManager.getDefaultCluster().getMaster();
    final GraphDatabaseAPI slave=clusterManager.getDefaultCluster().getAnySlave();
    final FutureTask<Boolean> result=new FutureTask<Boolean>(new Callable(){
      @Override public Boolean call() throws Exception {
        try (Transaction tx=slave.beginTx()){
          tx.acquireWriteLock(slave.getNodeById(0));
          return false;
        }
 catch (        Exception e) {
          return true;
        }
      }
    }
);
    master.getDependencyResolver().resolveDependency(LifeSupport.class).addLifecycleListener(new LifecycleListener(){
      @Override public void notifyStatusChanged(      Object instance,      LifecycleStatus from,      LifecycleStatus to){
        if (instance.getClass().getName().contains("DatabaseAvailability") && to == LifecycleStatus.STOPPED) {
          result.run();
        }
      }
    }
);
    master.shutdown();
    Assert.assertThat(result.get(),CoreMatchers.equalTo(true));
  }
  finally {
    clusterManager.stop();
  }
}
