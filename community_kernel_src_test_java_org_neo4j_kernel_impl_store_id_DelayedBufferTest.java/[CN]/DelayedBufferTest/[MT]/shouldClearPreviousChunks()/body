{
  Consumer<long[]> consumer=mock(Consumer.class);
  final AtomicBoolean safeThreshold=new AtomicBoolean(false);
  DelayedBuffer<Long> buffer=new DelayedBuffer<>(singleton(0L),new Predicate<Long>(){
    @Override public boolean test(    Long t){
      return safeThreshold.get();
    }
  }
,10,consumer);
  buffer.offer(0);
  buffer.maintenance();
  buffer.offer(1);
  buffer.maintenance();
  buffer.offer(2);
  buffer.maintenance();
  safeThreshold.set(true);
  buffer.clear();
  buffer.maintenance();
  verifyNoMoreInteractions(consumer);
}
