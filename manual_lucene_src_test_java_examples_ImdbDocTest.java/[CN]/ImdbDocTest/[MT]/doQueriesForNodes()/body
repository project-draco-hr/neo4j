{
  IndexManager index=graphDb.index();
  Index<Node> actors=index.forNodes("actors");
  Index<Node> movies=index.forNodes("movies");
  Set<String> found=new HashSet<>();
  Set<String> expectedActors=new HashSet<String>(){
{
      add("Monica Bellucci");
      add("Keanu Reeves");
    }
  }
;
  Set<String> expectedMovies=new HashSet<String>(){
{
      add("The Matrix");
    }
  }
;
  for (  Node actor : actors.query("name","*e*")) {
    found.add((String)actor.getProperty("name"));
  }
  assertEquals(expectedActors,found);
  found.clear();
  for (  Node movie : movies.query("title:*Matrix* AND year:1999")) {
    found.add((String)movie.getProperty("title"));
  }
  assertEquals(expectedMovies,found);
  Node matrix=movies.query("title:*Matrix* AND year:2003").getSingle();
  assertEquals("The Matrix Reloaded",matrix.getProperty("title"));
  IndexHits<Node> hits=movies.query("title","The*");
  for (  Node movie : hits) {
    System.out.println(movie.getProperty("title") + " " + hits.currentScore());
    assertTrue(((String)movie.getProperty("title")).startsWith("The"));
  }
  assertEquals(2,hits.size());
  hits=movies.query("title",new QueryContext("The*").sortByScore());
  float previous=Float.MAX_VALUE;
  for (  Node movie : hits) {
    assertTrue(hits.currentScore() <= previous);
    previous=hits.currentScore();
  }
  assertEquals(2,hits.size());
  Node actor=actors.query(new TermQuery(new Term("name","Keanu Reeves"))).getSingle();
  assertEquals("Keanu Reeves",actor.getProperty("name"));
  Node theMatrix=movies.get("title","The Matrix").getSingle();
  Node theMatrixReloaded=movies.get("title","The Matrix Reloaded").getSingle();
  Node malena=movies.get("title","Mal??na").getSingle();
  hits=movies.query(new WildcardQuery(new Term("title","The Matrix*")));
  for (  Node movie : hits) {
    System.out.println(movie.getProperty("title"));
    assertTrue(((String)movie.getProperty("title")).startsWith("The Matrix"));
  }
  assertEquals(2,hits.size());
  movies.add(theMatrix,"year-numeric",new ValueContext(1999).indexNumeric());
  movies.add(theMatrixReloaded,"year-numeric",new ValueContext(2003).indexNumeric());
  movies.add(malena,"year-numeric",new ValueContext(2000).indexNumeric());
  int from=1997;
  int to=1999;
  hits=movies.query(QueryContext.numericRange("year-numeric",from,to));
  assertEquals(theMatrix,hits.getSingle());
  hits=movies.query(QueryContext.numericRange("year-numeric",from,null).sortNumeric("year-numeric",false));
  List<String> sortedMovies=new ArrayList<>();
  List<String> expectedSortedMovies=new ArrayList<String>(){
{
      add("The Matrix");
      add("Mal??na");
      add("The Matrix Reloaded");
    }
  }
;
  for (  Node hit : hits) {
    sortedMovies.add((String)hit.getProperty("title"));
  }
  assertEquals(expectedSortedMovies,sortedMovies);
  movies.add(theMatrix,"score",new ValueContext(8.7).indexNumeric());
  movies.add(theMatrixReloaded,"score",new ValueContext(7.1).indexNumeric());
  movies.add(malena,"score",new ValueContext(7.4).indexNumeric());
  hits=movies.query(QueryContext.numericRange("score",8.0,9.0,true,false));
  found.clear();
  for (  Node hit : hits) {
    found.add((String)hit.getProperty("title"));
  }
  assertEquals(expectedMovies,found);
  hits=movies.query("title:*Matrix* AND year:1999");
  assertEquals(theMatrix,hits.getSingle());
  QueryContext query=new QueryContext("title:*Matrix* year:1999").defaultOperator(Operator.AND);
  hits=movies.query(query);
  assertEquals(1,hits.size());
  hits=movies.query("title",new QueryContext("*").sort("title"));
  for (  Node hit : hits) {
  }
  assertEquals(3,hits.size());
  hits=movies.query(new QueryContext("title:*").sort("year","title"));
  for (  Node hit : hits) {
  }
  assertEquals(3,hits.size());
}
