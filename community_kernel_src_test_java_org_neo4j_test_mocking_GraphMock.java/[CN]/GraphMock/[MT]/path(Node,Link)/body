{
  List<Node> nodes=new ArrayList<>(links.length + 1);
  List<Relationship> relationships=new ArrayList<>(links.length);
  List<PropertyContainer> mixed=new ArrayList<>(links.length * 2 + 1);
  nodes.add(node);
  mixed.add(node);
  Path path=mock(Path.class);
  when(path.startNode()).thenReturn(node);
  Relationship last=null;
  for (  Link link : links) {
    last=link.relationship;
    relationships.add(last);
    mixed.add(last);
    node=link.checkNode(node);
    nodes.add(node);
    mixed.add(node);
  }
  when(path.endNode()).thenReturn(node);
  when(path.iterator()).thenAnswer(withIteratorOf(mixed));
  when(path.nodes()).thenReturn(nodes);
  when(path.relationships()).thenReturn(relationships);
  when(path.lastRelationship()).thenReturn(last);
  when(path.length()).thenReturn(links.length);
  when(path.reverseNodes()).thenReturn(reverse(nodes));
  when(path.reverseRelationships()).thenReturn(reverse(relationships));
  return path;
}
