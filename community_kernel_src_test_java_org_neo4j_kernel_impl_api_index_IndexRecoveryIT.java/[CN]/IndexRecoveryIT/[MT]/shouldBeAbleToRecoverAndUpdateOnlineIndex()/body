{
  startDb();
  IndexPopulator populator=mock(IndexPopulator.class);
  when(mockedIndexProvider.getPopulator(anyLong(),any(IndexDescriptor.class),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenReturn(populator);
  when(populator.sampleResult()).thenReturn(new IndexSample());
  IndexAccessor mockedAccessor=mock(IndexAccessor.class);
  when(mockedAccessor.newUpdater(any(IndexUpdateMode.class))).thenReturn(SwallowingIndexUpdater.INSTANCE);
  when(mockedIndexProvider.getOnlineAccessor(anyLong(),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenReturn(mockedAccessor);
  createIndexAndAwaitPopulation(myLabel);
  rotateLogsAndCheckPoint();
  Set<NodePropertyUpdate> expectedUpdates=createSomeBananas(myLabel);
  killDb();
  when(mockedIndexProvider.getInitialState(anyLong())).thenReturn(InternalIndexState.ONLINE);
  GatheringIndexWriter writer=new GatheringIndexWriter();
  when(mockedIndexProvider.getOnlineAccessor(anyLong(),any(IndexConfiguration.class),any(IndexSamplingConfig.class))).thenReturn(writer);
  startDb();
  assertThat(getIndexes(db,myLabel),inTx(db,hasSize(1)));
  assertThat(getIndexes(db,myLabel),inTx(db,haveState(db,Schema.IndexState.ONLINE)));
  verify(mockedIndexProvider,times(1)).getPopulator(anyLong(),any(IndexDescriptor.class),any(IndexConfiguration.class),any(IndexSamplingConfig.class));
  int onlineAccessorInvocationCount=2;
  verify(mockedIndexProvider,times(onlineAccessorInvocationCount)).getOnlineAccessor(anyLong(),any(IndexConfiguration.class),any(IndexSamplingConfig.class));
  assertEquals(expectedUpdates,writer.batchedUpdates);
  for (  NodePropertyUpdate update : writer.batchedUpdates) {
    assertTrue(writer.recoveredNodes.contains(update.getNodeId()));
  }
}
