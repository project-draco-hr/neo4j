{
  if (start.equals(end)) {
    return Arrays.asList(PathImpl.singular(start));
  }
  Map<Integer,Collection<Hit>> hits=new HashMap<Integer,Collection<Hit>>();
  Collection<Long> sharedVisitedRels=new HashSet<Long>();
  ValueHolder<Integer> sharedFrozenDepth=new ValueHolder<Integer>(null);
  ValueHolder<Boolean> sharedStop=new ValueHolder<Boolean>(false);
  ValueHolder<Integer> sharedCurrentDepth=new ValueHolder<Integer>(0);
  final DirectionData startData=new DirectionData(start,sharedVisitedRels,sharedFrozenDepth,sharedStop,sharedCurrentDepth,stopAsap,false);
  final DirectionData endData=new DirectionData(end,sharedVisitedRels,sharedFrozenDepth,sharedStop,sharedCurrentDepth,stopAsap,true);
  while (startData.hasNext() || endData.hasNext()) {
    goOneStep(startData,endData,hits,stopAsap,startData);
    goOneStep(endData,startData,hits,stopAsap,startData);
  }
  return least(hits,start,end);
}
