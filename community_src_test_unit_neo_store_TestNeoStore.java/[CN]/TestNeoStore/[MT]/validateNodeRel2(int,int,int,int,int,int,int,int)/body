{
  assertTrue(nStore.loadLightNode(node));
  PropertyData data[]=nStore.getProperties(node);
  for (int i=0; i < data.length; i++) {
    data[i]=new PropertyData(data[i].getId(),data[i].getKey(),pStore.getPropertyValue(data[i].getId()),data[i].nextPropertyId());
  }
  assertEquals(3,data.length);
  for (int i=0; i < 3; i++) {
    if (data[i].getId() == prop1) {
      assertEquals("prop1",data[i].getKey());
      assertEquals("string2",data[i].getValue());
      nStore.changeProperty(node,prop1,"-string2");
    }
 else     if (data[i].getId() == prop2) {
      assertEquals("prop2",data[i].getKey());
      assertEquals(new Integer(2),data[i].getValue());
      nStore.changeProperty(node,prop2,new Integer(-2));
    }
 else     if (data[i].getId() == prop3) {
      assertEquals("prop3",data[i].getKey());
      assertEquals(new Boolean(false),data[i].getValue());
      nStore.changeProperty(node,prop3,new Boolean(true));
    }
 else {
      throw new IOException();
    }
  }
  RelationshipData rels[]=nStore.getRelationships(node);
  assertEquals(2,rels.length);
  for (int i=0; i < 2; i++) {
    if (rels[i].getId() == rel1) {
      assertEquals(node,rels[i].secondNode());
      assertEquals(relType1,rels[i].relationshipType());
    }
 else     if (rels[i].getId() == rel2) {
      assertEquals(node,rels[i].firstNode());
      assertEquals(relType2,rels[i].relationshipType());
    }
 else {
      throw new IOException();
    }
  }
}
