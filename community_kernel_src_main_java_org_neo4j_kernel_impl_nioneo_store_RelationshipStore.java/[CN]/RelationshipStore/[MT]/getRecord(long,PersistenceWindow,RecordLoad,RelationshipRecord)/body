{
  Buffer buffer=window.getOffsettedBuffer(id);
  long inUseByte=buffer.get();
  boolean inUse=(inUseByte & 0x1) == Record.IN_USE.intValue();
  if (!inUse) {
switch (load) {
case NORMAL:
      throw new InvalidRecordException("RelationshipRecord[" + id + "] not in use");
case CHECK:
    return null;
}
}
long firstNode=buffer.getUnsignedInt();
long firstNodeMod=(inUseByte & 0xEL) << 31;
long secondNode=buffer.getUnsignedInt();
long typeInt=buffer.getInt();
long secondNodeMod=(typeInt & 0x70000000L) << 4;
int type=(int)(typeInt & 0xFFFF);
record.setId(id);
record.setFirstNode(longFromIntAndMod(firstNode,firstNodeMod));
record.setSecondNode(longFromIntAndMod(secondNode,secondNodeMod));
record.setType(type);
record.setInUse(inUse);
long firstPrevRel=buffer.getUnsignedInt();
long firstPrevRelMod=(typeInt & 0xE000000L) << 7;
record.setFirstPrevRel(longFromIntAndMod(firstPrevRel,firstPrevRelMod));
long firstNextRel=buffer.getUnsignedInt();
long firstNextRelMod=(typeInt & 0x1C00000L) << 10;
record.setFirstNextRel(longFromIntAndMod(firstNextRel,firstNextRelMod));
long secondPrevRel=buffer.getUnsignedInt();
long secondPrevRelMod=(typeInt & 0x380000L) << 13;
record.setSecondPrevRel(longFromIntAndMod(secondPrevRel,secondPrevRelMod));
long secondNextRel=buffer.getUnsignedInt();
long secondNextRelMod=(typeInt & 0x70000L) << 16;
record.setSecondNextRel(longFromIntAndMod(secondNextRel,secondNextRelMod));
long nextProp=buffer.getUnsignedInt();
long nextPropMod=(inUseByte & 0xF0L) << 28;
byte extraByte=buffer.get();
record.setFirstInFirstChain((extraByte & 0x1) != 0);
record.setFirstInSecondChain((extraByte & 0x2) != 0);
record.setNextProp(longFromIntAndMod(nextProp,nextPropMod));
return record;
}
