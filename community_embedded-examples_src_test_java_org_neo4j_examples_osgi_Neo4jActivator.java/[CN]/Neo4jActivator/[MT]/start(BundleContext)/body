{
  System.out.print("Opening database in embedded mode: ");
  ArrayList<CacheProvider> cacheList=new ArrayList<CacheProvider>();
  cacheList.add(new SoftCacheProvider());
  IndexProvider lucene=new LuceneIndexProvider();
  ArrayList<IndexProvider> provs=new ArrayList<IndexProvider>();
  provs.add(lucene);
  ListIndexIterable providers=new ListIndexIterable();
  providers.setIndexProviders(provs);
  GraphDatabaseFactory gdbf=new GraphDatabaseFactory();
  gdbf.setIndexProviders(providers);
  gdbf.setCacheProviders(cacheList);
  db=gdbf.newEmbeddedDatabase("target/db");
  System.out.println("created database, db=" + db);
  serviceRegistration=context.registerService(GraphDatabaseService.class.getName(),db,new Properties());
  System.out.println("registered " + serviceRegistration.getReference());
  indexServiceRegistration=context.registerService(Index.class.getName(),db.index().forNodes("nodes"),new Properties());
  System.out.println("registered " + indexServiceRegistration.getReference());
  Transaction tx=db.beginTx();
  try {
    System.out.print("Populating it ... ");
    Node firstNode=db.createNode();
    Node secondNode=db.createNode();
    Relationship relationship=firstNode.createRelationshipTo(secondNode,DynamicRelationshipType.withName("KNOWS"));
    firstNode.setProperty("message","Hello, ");
    secondNode.setProperty("message","world!");
    relationship.setProperty("message","brave Neo4j ");
    db.index().forNodes("nodes").add(firstNode,"message","Hello");
    System.out.println("OK, db=" + db);
    System.out.print(firstNode.getProperty("message"));
    System.out.print(relationship.getProperty("message"));
    System.out.println(secondNode.getProperty("message"));
    tx.success();
  }
 catch (  Exception e) {
    System.out.println("KO: " + e.getMessage());
  }
 finally {
    tx.finish();
  }
}
