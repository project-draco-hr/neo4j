{
  Node nodeA=graph.makeNode("A","x",1d,"y",0d);
  Node nodeB=graph.makeNode("B","x",2d,"y",1d);
  Node nodeC=graph.makeNode("C","x",0d,"y",2d);
  Node nodeD=graph.makeNode("D","x",2d,"y",3d);
  Node nodeE=graph.makeNode("E","x",3d,"y",4d);
  Node nodeF=graph.makeNode("F","x",1d,"y",5d);
  graph.makeEdge("A","B","length",2d);
  graph.makeEdge("A","C","length",2.5d);
  graph.makeEdge("C","D","length",7.3d);
  graph.makeEdge("B","D","length",2.5d);
  graph.makeEdge("D","E","length",3d);
  graph.makeEdge("C","E","length",5d);
  graph.makeEdge("E","F","length",5d);
  graph.makeEdge("C","F","length",12d);
  graph.makeEdge("A","F","length",25d);
  PathFinder<WeightedPath> algo=newFinder();
  for (  Node[] nodes : new Node[][]{{nodeA,nodeF},{nodeF,nodeA}}) {
    int found=0;
    Iterator<WeightedPath> paths=algo.findAllPaths(nodes[0],nodes[1]).iterator();
    for (int foundCount=0; foundCount < 2; foundCount++) {
      assertTrue("expected more paths (found: " + foundCount + ")",paths.hasNext());
      Path path=paths.next();
      if (path.length() != found && path.length() == 3) {
        assertContains(path.nodes(),nodeA,nodeC,nodeE,nodeF);
      }
 else       if (path.length() != found && path.length() == 4) {
        assertContains(path.nodes(),nodeA,nodeB,nodeD,nodeE,nodeF);
      }
 else {
        fail("unexpected path length: " + path.length());
      }
      found=path.length();
    }
    assertFalse("expected at most two paths",paths.hasNext());
  }
}
