{
  Node nodeA=graph.makeNode("A","x",0d,"y",0d);
  Node nodeB=graph.makeNode("B","x",2d,"y",1d);
  Node nodeC=graph.makeNode("C","x",7d,"y",0d);
  graph.makeEdge("A","B","length",2d);
  graph.makeEdge("A","B","length",2d);
  graph.makeEdge("B","C","length",3d);
  graph.makeEdge("A","C","length",10d);
  final Map<Node,Double> seenBranchStates=new HashMap<Node,Double>();
  PathExpander<Double> expander=new PathExpander<Double>(){
    @Override public Iterable<Relationship> expand(    Path path,    BranchState<Double> state){
      double newState=state.getState();
      if (path.length() > 0) {
        newState+=(Double)path.lastRelationship().getProperty("length");
        state.setState(newState);
      }
      seenBranchStates.put(path.endNode(),newState);
      return path.endNode().getRelationships(OUTGOING);
    }
    @Override public PathExpander<Double> reverse(){
      throw new UnsupportedOperationException();
    }
  }
;
  double initialStateValue=0D;
  PathFinder<WeightedPath> traversalFinder=new TraversalAStar(expander,new InitialBranchState.State(initialStateValue,initialStateValue),doubleCostEvaluator("length"),ESTIMATE_EVALUATOR);
  WeightedPath path=traversalFinder.findSinglePath(nodeA,nodeC);
  assertEquals((Double)5.0D,(Double)path.weight());
  assertPathDef(path,"A","B","C");
  assertEquals(MapUtil.<Node,Double>genericMap(nodeA,0D,nodeB,2D,nodeC,5D),seenBranchStates);
}
