{
  Node nodeA=graph.makeNode("A","x",0d,"y",0d);
  Node nodeB=graph.makeNode("B","x",2d,"y",1d);
  Node nodeC=graph.makeNode("C","x",7d,"y",0d);
  Set<Relationship> expectedFirsts=new HashSet<Relationship>();
  expectedFirsts.add(graph.makeEdge("A","B","length",2d));
  expectedFirsts.add(graph.makeEdge("A","B","length",2d));
  Relationship expectedSecond=graph.makeEdge("B","C","length",6d);
  graph.makeEdge("A","C","length",10d);
  PathFinder<WeightedPath> algo=newFinder();
  Iterator<WeightedPath> paths=algo.findAllPaths(nodeA,nodeC).iterator();
  for (int foundCount=0; foundCount < 2; foundCount++) {
    assertTrue("expected more paths (found: " + foundCount + ")",paths.hasNext());
    Path path=paths.next();
    assertPath(path,nodeA,nodeB,nodeC);
    Iterator<Relationship> relationships=path.relationships().iterator();
    assertTrue("found shorter path than expected",relationships.hasNext());
    assertTrue("path contained unexpected relationship",expectedFirsts.remove(relationships.next()));
    assertTrue("found shorter path than expected",relationships.hasNext());
    assertEquals(expectedSecond,relationships.next());
    assertFalse("found longer path than expected",relationships.hasNext());
  }
  assertFalse("expected at most two paths",paths.hasNext());
}
