{
  final long relationshipId=10;
  final long lowId=3;
  final long highId=5;
{
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        RelationshipVisitor<RuntimeException> visitor=(RelationshipVisitor<RuntimeException>)invocation.getArguments()[2];
        visitor.visit(relationshipId,0,lowId,highId);
        return null;
      }
    }
).when(entityReadOps).relationshipVisit(any(KernelStatement.class),anyLong(),any(RelationshipVisitor.class));
    lockingOps.relationshipDelete(state,relationshipId);
    InOrder lockingOrder=inOrder(locks);
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.NODE,new long[]{lowId});
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.NODE,new long[]{highId});
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.RELATIONSHIP,new long[]{relationshipId});
    lockingOrder.verifyNoMoreInteractions();
    reset(locks);
  }
{
    doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        RelationshipVisitor<RuntimeException> visitor=(RelationshipVisitor<RuntimeException>)invocation.getArguments()[2];
        visitor.visit(relationshipId,0,highId,lowId);
        return null;
      }
    }
).when(entityReadOps).relationshipVisit(any(KernelStatement.class),anyLong(),any(RelationshipVisitor.class));
    lockingOps.relationshipDelete(state,relationshipId);
    InOrder lockingOrder=inOrder(locks);
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.NODE,new long[]{lowId});
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.NODE,new long[]{highId});
    lockingOrder.verify(locks).acquireExclusive(ResourceTypes.RELATIONSHIP,new long[]{relationshipId});
    lockingOrder.verifyNoMoreInteractions();
  }
}
