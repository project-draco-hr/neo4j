{
  ReentrantLockService.OwnerQueueElement<Integer> queue=new ReentrantLockService.OwnerQueueElement<>(0);
  ReentrantLockService.OwnerQueueElement<Integer> element1=new ReentrantLockService.OwnerQueueElement<>(1);
  ReentrantLockService.OwnerQueueElement<Integer> element2=new ReentrantLockService.OwnerQueueElement<>(2);
  ReentrantLockService.OwnerQueueElement<Integer> element3=new ReentrantLockService.OwnerQueueElement<>(3);
  ReentrantLockService.OwnerQueueElement<Integer> element4=new ReentrantLockService.OwnerQueueElement<>(4);
  queue.enqueue(element1);
  assertEquals(1,queue.dequeue().intValue());
  queue.enqueue(element2);
  queue.enqueue(element3);
  queue.enqueue(element4);
  assertEquals(2,queue.dequeue().intValue());
  assertEquals(3,queue.dequeue().intValue());
  assertEquals(4,queue.dequeue().intValue());
  assertEquals("should get the current element when dequeuing the current head",4,queue.dequeue().intValue());
  assertEquals("should get null when dequeuing from a dead list",null,queue.dequeue());
  assertEquals("should get null continuously when dequeuing from a dead list",null,queue.dequeue());
}
