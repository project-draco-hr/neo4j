{
  String name="log";
  LifeSupport life=new LifeSupport();
  PhysicalLogFiles logFiles=new PhysicalLogFiles(directory.directory(),name,fs);
  LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,50,transactionIdStore,logVersionRepository,mock(Monitor.class),new TransactionMetadataCache(10,100)));
  life.start();
  try {
    FlushablePositionAwareChannel writer=logFile.getWriter();
    LogPositionMarker positionMarker=new LogPositionMarker();
    writer.getCurrentPosition(positionMarker);
    LogPosition position1=positionMarker.newPosition();
    int intValue=45;
    long longValue=4854587;
    byte[] someBytes=someBytes(40);
    writer.putInt(intValue);
    writer.putLong(longValue);
    writer.put(someBytes,someBytes.length);
    writer.prepareForFlush().flush();
    writer.getCurrentPosition(positionMarker);
    LogPosition position2=positionMarker.newPosition();
    long longValue2=123456789L;
    writer.putLong(longValue2);
    writer.put(someBytes,someBytes.length);
    writer.prepareForFlush().flush();
    try (ReadableClosableChannel reader=logFile.getReader(position1)){
      assertEquals(intValue,reader.getInt());
      assertEquals(longValue,reader.getLong());
      assertArrayEquals(someBytes,readBytes(reader,40));
    }
     try (ReadableClosableChannel reader=logFile.getReader(position2)){
      assertEquals(longValue2,reader.getLong());
      assertArrayEquals(someBytes,readBytes(reader,40));
    }
   }
  finally {
    life.shutdown();
  }
}
