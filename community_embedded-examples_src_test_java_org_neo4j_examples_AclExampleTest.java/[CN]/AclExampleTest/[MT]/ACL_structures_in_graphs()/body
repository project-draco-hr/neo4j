{
  data.get();
  gen.get().addSnippet("graph1",createGraphViz("The Domain Structure",graphdb(),gen.get().getTitle()));
  gen.get().addGithubLink("github",this.getClass(),"neo4j/community","embedded-examples");
  String query="start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*0..]->()-[:leaf]->(file) return file";
  gen.get().addSnippet("query1",createCypherSnippet(query));
  String result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  gen.get().addSnippet("result1",createQueryResultSnippet(result));
  query="start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*0..]->()-[:leaf]->(file)<-[:owns]-(user) return file, user";
  gen.get().addSnippet("query2",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  assertTrue(result.contains("User1"));
  assertTrue(result.contains("User2"));
  assertTrue(result.contains("File2"));
  assertFalse(result.contains("Admin1"));
  assertFalse(result.contains("Admin2"));
  gen.get().addSnippet("result2",createQueryResultSnippet(result));
  query="START file=node:node_auto_index('name:File*') " + "MATCH " + "file<-[:leaf]-dir, "+ "dir<-[:contains*0..]-parent<-[?:canRead]-role-[:member]->readUser "+ "RETURN file, dir, role, readUser";
  gen.get().addSnippet("query3",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  assertTrue(result.contains("File2"));
  assertTrue(result.contains("Admin1"));
  assertTrue(result.contains("Admin2"));
  gen.get().addSnippet("result3",createQueryResultSnippet(result));
}
