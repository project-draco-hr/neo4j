{
  data.get();
  gen.get().addSnippet("graph1",createGraphViz("The Domain Structure",graphdb(),gen.get().getTitle()));
  gen.get().addGithubLink("github",this.getClass(),"neo4j/community","embedded-examples");
  String query="start root=(node_auto_index,name,'FileRoot') match (root)-[:contains*]->()-[:leaf]->(file) return file";
  gen.get().addSnippet("query1",createCypherSnippet(query));
  String result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  gen.get().addSnippet("result1",createOutputSnippet(result));
  query="start root=(node_auto_index,name, 'FileRoot') match (root)-[:contains*]->()-[:leaf]->(file)<-[:owns]-(user) return file, user";
  gen.get().addSnippet("query2",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  assertTrue(result.contains("User1"));
  assertTrue(result.contains("User2"));
  assertTrue(result.contains("File2"));
  assertFalse(result.contains("Admin1"));
  assertFalse(result.contains("Admin2"));
  gen.get().addSnippet("result2",createOutputSnippet(result));
  query="START file=(node_auto_index, 'name:File*') " + "MATCH " + "file<-[:leaf]-dir, "+ "path = dir<-[:contains*]-parent,"+ "parent<-[?:canRead]-role2-[:member]->readUserMoreThan1DirUp, "+ "dir<-[?:canRead]-role1-[:member]->readUser1DirUp "+ "RETURN path, file, role1, readUser1DirUp, role2, readUserMoreThan1DirUp";
  gen.get().addSnippet("query3",createCypherSnippet(query));
  result=engine.execute(parser.parse(query)).toString();
  assertTrue(result.contains("File1"));
  assertTrue(result.contains("File2"));
  assertTrue(result.contains("Admin1"));
  assertTrue(result.contains("Admin2"));
  gen.get().addSnippet("result3",createOutputSnippet(result));
}
