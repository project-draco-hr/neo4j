{
  if (!directionData.hasNext()) {
    return;
  }
  LevelData levelData=directionData.next();
  LevelData otherSideHit=otherSide.visitedNodes.get(levelData.node);
  if (otherSideHit != null) {
    int depth=directionData.currentDepth + otherSideHit.depth;
    if (directionData.sharedFrozenDepth.value == null) {
      directionData.sharedFrozenDepth.value=depth;
    }
    if (depth <= directionData.sharedFrozenDepth.value) {
      directionData.haveFoundSomething=true;
      if (depth < directionData.sharedFrozenDepth.value) {
        directionData.sharedFrozenDepth.value=depth;
        otherSide.stop=true;
        if (stopAsEarlyAsPossible) {
          directionData.sharedStop.value=true;
        }
      }
      Collection<Hit> depthHits=hits.get(depth);
      if (depthHits == null) {
        depthHits=new HashSet<Hit>();
        hits.put(depth,depthHits);
      }
      LevelData startSideData=directionData == startSide ? levelData : otherSideHit;
      LevelData endSideData=directionData == startSide ? otherSideHit : levelData;
      depthHits.add(new Hit(startSideData,endSideData));
    }
  }
}
