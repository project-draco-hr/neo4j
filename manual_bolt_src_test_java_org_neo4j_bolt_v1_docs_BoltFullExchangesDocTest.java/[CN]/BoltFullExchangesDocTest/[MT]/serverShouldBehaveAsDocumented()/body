{
  for (  DocExchangeExample.Event event : example) {
    if (event.from().equalsIgnoreCase("client")) {
switch (event.type()) {
case CONNECT:
        client.connect(address);
      break;
case DISCONNECT:
    client.disconnect();
  break;
case SEND:
if (event.hasHumanReadableValue()) {
  assertThat("'" + event.humanReadableMessage() + "' should serialize to the documented "+ "binary data.",hex(event.payload()),equalTo(hex(DocSerialization.packAndChunk(event.humanReadableMessage(),64))));
}
client.send(event.payload());
break;
default :
throw new RuntimeException("Unknown client event: " + event.type());
}
}
 else if (event.from().equalsIgnoreCase("server")) {
switch (event.type()) {
case DISCONNECT:
break;
case SEND:
if (event.hasHumanReadableValue()) {
assertThat("'" + event.humanReadableMessage() + "' should serialize to the documented "+ "binary data.",hex(event.payload()),equalTo(hex(DocSerialization.packAndChunk(event.humanReadableMessage(),1024 * 8))));
ResponseMessage serverMessage=receiveOneResponseMessage(client);
assertThat("The message received from the server should match the documented binary representation. " + "Human-readable message is <" + event.humanReadableMessage() + ">, received message was: "+ serverMessage,serverMessage,equalTo(unpackedResponseMessage(dechunk(event.payload()))));
}
 else {
assertThat("The data received from the server should match the documented binary representation.",hex(client.recv(event.payload().length)),equalTo(hex(event.payload())));
}
break;
default :
throw new RuntimeException("Unknown server event: " + event.type());
}
}
}
}
