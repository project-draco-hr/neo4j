{
  Logger log=Logger.getLogger(NodeManager.class.getName());
  Level level=log.getLevel();
  log.setLevel(Level.OFF);
  try {
    Node node1=getNeo().createNode();
    try {
      node1.setProperty(key,new Object());
    }
 catch (    IllegalValueException e) {
    }
    try {
      Transaction tx=getTransaction();
      tx.success();
      tx.finish();
      fail("Shouldn't validate");
    }
 catch (    Exception e) {
    }
    setTransaction(getNeo().beginTx());
    try {
      getNeo().getNodeById((int)node1.getId());
      fail("Node should not exist, previous tx didn't rollback");
    }
 catch (    NotFoundException e) {
    }
    node1=getNeo().createNode();
    Node node2=getNeo().createNode();
    Relationship rel=node1.createRelationshipTo(node2,MyRelTypes.TEST);
    try {
      rel.setProperty(key,new Object());
    }
 catch (    IllegalValueException e) {
    }
    try {
      Transaction tx=getTransaction();
      tx.success();
      tx.finish();
      fail("Shouldn't validate");
    }
 catch (    Exception e) {
    }
    setTransaction(getNeo().beginTx());
    try {
      getNeo().getNodeById((int)node1.getId());
      fail("Node should not exist, previous tx didn't rollback");
    }
 catch (    NotFoundException e) {
    }
    try {
      getNeo().getNodeById((int)node2.getId());
      fail("Node should not exist, previous tx didn't rollback");
    }
 catch (    NotFoundException e) {
    }
  }
  finally {
    log.setLevel(level);
  }
}
