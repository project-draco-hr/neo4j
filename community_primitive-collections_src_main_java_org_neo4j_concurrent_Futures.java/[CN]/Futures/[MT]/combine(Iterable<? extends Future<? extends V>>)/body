{
  return new Future<List<V>>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      boolean result=false;
      for (      Future<? extends V> future : futures) {
        result|=future.cancel(mayInterruptIfRunning);
      }
      return result;
    }
    @Override public boolean isCancelled(){
      boolean result=false;
      for (      Future<? extends V> future : futures) {
        result|=future.isCancelled();
      }
      return result;
    }
    @Override public boolean isDone(){
      boolean result=false;
      for (      Future<? extends V> future : futures) {
        result|=future.isDone();
      }
      return result;
    }
    @Override public List<V> get() throws InterruptedException, ExecutionException {
      List<V> result=new ArrayList<>();
      for (      Future<? extends V> future : futures) {
        result.add(future.get());
      }
      return result;
    }
    @Override public List<V> get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      List<V> result=new ArrayList<>();
      for (      Future<? extends V> future : futures) {
        long before=System.nanoTime();
        result.add(future.get(timeout,unit));
        timeout-=unit.convert(System.nanoTime() - before,TimeUnit.NANOSECONDS);
      }
      return result;
    }
  }
;
}
