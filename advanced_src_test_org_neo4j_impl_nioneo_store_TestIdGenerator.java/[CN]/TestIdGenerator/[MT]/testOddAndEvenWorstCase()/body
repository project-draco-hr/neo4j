{
  int capacity=1024 * 8 + 1;
  try {
    IdGeneratorImpl.createGenerator("testIdGenerator.id");
    IdGenerator idGenerator=new IdGeneratorImpl("testIdGenerator.id",128);
    for (int i=0; i < capacity; i++) {
      idGenerator.nextId();
    }
    Map<Long,Object> freedIds=new HashMap<Long,Object>();
    for (long i=1; i < capacity; i+=2) {
      idGenerator.freeId(i);
      freedIds.put(i,this);
    }
    idGenerator.close();
    idGenerator=new IdGeneratorImpl("testIdGenerator.id",2000);
    long oldId=-1;
    for (int i=0; i < capacity - 1; i+=2) {
      long id=idGenerator.nextId();
      if (freedIds.remove(id) == null) {
        throw new RuntimeException("Id=" + id + " prevId="+ oldId+ " list.size()="+ freedIds.size());
      }
      oldId=id;
    }
    assertTrue(freedIds.values().size() == 0);
    idGenerator.close();
  }
  finally {
    File file=new File("testIdGenerator.id");
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
  try {
    IdGeneratorImpl.createGenerator("testIdGenerator.id");
    IdGenerator idGenerator=new IdGeneratorImpl("testIdGenerator.id",128);
    for (int i=0; i < capacity; i++) {
      idGenerator.nextId();
    }
    Map<Long,Object> freedIds=new HashMap<Long,Object>();
    for (long i=0; i < capacity; i+=2) {
      idGenerator.freeId(i);
      freedIds.put(i,this);
    }
    idGenerator.close();
    idGenerator=new IdGeneratorImpl("testIdGenerator.id",2000);
    for (int i=0; i < capacity; i+=2) {
      assertEquals(this,freedIds.remove(idGenerator.nextId()));
    }
    assertEquals(0,freedIds.values().size());
    idGenerator.close();
  }
  finally {
    File file=new File("testIdGenerator.id");
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
}
