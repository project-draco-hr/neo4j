{
  int mappedFilesCount=mappedFiles.size();
  if (mappedFilesCount == 0) {
    return null;
  }
  final File file=mappedFiles.get(rng.nextInt(mappedFilesCount));
  List<Integer> recordsWritten=recordsWrittenTo.get(file);
  final int recordId=recordsWritten.isEmpty() ? rng.nextInt(maxRecordCount) : recordsWritten.get(rng.nextInt(recordsWritten.size()));
  final int pageId=recordId / recordsPerPage;
  final int pageOffset=(recordId % recordsPerPage) * recordFormat.getRecordSize();
  final Record expectedRecord=recordFormat.createRecord(file,recordId);
  return new Action(Command.ReadRecord,"[file=%s, recordId=%s, pageId=%s, pageOffset=%s, expectedRecord=%s]",file,recordId,pageId,pageOffset,expectedRecord){
    @Override public void perform() throws Exception {
      PagedFile pagedFile=fileMap.get(file);
      if (pagedFile != null) {
        try (PageCursor cursor=pagedFile.io(pageId,PagedFile.PF_SHARED_READ_LOCK)){
          if (cursor.next()) {
            cursor.setOffset(pageOffset);
            Record actualRecord=recordFormat.readRecord(cursor);
            assertThat(actualRecord,isOneOf(expectedRecord,recordFormat.zeroRecord()));
          }
        }
       }
    }
  }
;
}
