{
  try {
    while (nextTask != QUIT_TASK) {
switch (nextTask) {
case DO_NOTHING_TASK:
        wait(10);
      break;
case GET_WRITELOCK_TASK:
    try {
      lm.getWriteLock(this.resource);
      deadlockOnLastWait=false;
    }
 catch (    DeadlockDetectedException e) {
      deadlockOnLastWait=true;
    }
  taskCompleted=true;
nextTask=DO_NOTHING_TASK;
break;
case GET_READLOCK_TASK:
try {
lm.getReadLock(this.resource);
deadlockOnLastWait=false;
}
 catch (DeadlockDetectedException e) {
deadlockOnLastWait=true;
}
taskCompleted=true;
nextTask=DO_NOTHING_TASK;
break;
case RELEASE_WRITELOCK_TASK:
lm.releaseWriteLock(this.resource,null);
taskCompleted=true;
nextTask=DO_NOTHING_TASK;
break;
case RELEASE_READLOCK_TASK:
lm.releaseReadLock(this.resource,null);
taskCompleted=true;
nextTask=DO_NOTHING_TASK;
break;
case QUIT_TASK:
break;
default :
throw new RuntimeException("Unknown task " + nextTask);
}
}
}
 catch (Exception e) {
taskCompleted=true;
System.out.println("" + this + " unable to execute task, "+ e);
e.printStackTrace();
throw new RuntimeException(e);
}
}
