{
  Traverser traverser=TRAVERSAL.expand(expander).sourceSelector(new SelectorFactory(costEvaluator)).filter(new StopCondition(end)).traverse(start);
  return new IterableWrapper<WeightedPath,Path>(traverser.paths()){
    @Override protected WeightedPath underlyingObjectToObject(    Path path){
      return new WeightedPathImpl(costEvaluator,path);
    }
  }
;
}
