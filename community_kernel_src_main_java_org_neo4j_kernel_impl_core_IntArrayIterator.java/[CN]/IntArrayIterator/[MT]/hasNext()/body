{
  if (nextElement != null) {
    return true;
  }
  do {
    if (currentTypeIterator.hasNext(nodeManager)) {
      long nextId=currentTypeIterator.next(nodeManager);
      try {
        nextElement=new RelationshipProxy(nextId,nodeManager);
        return true;
      }
 catch (      NotFoundException e) {
      }
    }
    while (!currentTypeIterator.hasNext(nodeManager)) {
      if (typeIterator.hasNext()) {
        currentTypeIterator=typeIterator.next();
      }
 else       if (fromNode.getMoreRelationships(nodeManager)) {
        Map<String,RelTypeElementIterator> newRels=new HashMap<String,RelTypeElementIterator>();
        for (        RelTypeElementIterator itr : rels) {
          RelTypeElementIterator newItr=itr;
          if (itr.isSrcEmpty()) {
            DirectionedRelIdArray newSrc=fromNode.getRelationshipIds(itr.getType());
            if (newSrc != null) {
              newItr=itr.setSrc(direction.get(newSrc));
            }
          }
          newRels.put(newItr.getType(),newItr);
        }
        if (types.length == 0) {
          for (          Map.Entry<String,DirectionedRelIdArray> entry : fromNode.getRelationshipIds().entrySet()) {
            String type=entry.getKey();
            RelTypeElementIterator itr=newRels.get(type);
            if (itr == null || itr.isSrcEmpty()) {
              RelIdArray ids=direction.get(entry.getValue());
              itr=itr == null ? new FastRelTypeElement(type,fromNode,ids) : itr.setSrc(ids);
              newRels.put(type,itr);
            }
          }
        }
        rels.clear();
        rels.addAll(newRels.values());
        typeIterator=rels.iterator();
        currentTypeIterator=typeIterator.hasNext() ? typeIterator.next() : RelTypeElementIterator.EMPTY;
      }
 else {
        break;
      }
    }
  }
 while (currentTypeIterator.hasNext(nodeManager));
  return false;
}
