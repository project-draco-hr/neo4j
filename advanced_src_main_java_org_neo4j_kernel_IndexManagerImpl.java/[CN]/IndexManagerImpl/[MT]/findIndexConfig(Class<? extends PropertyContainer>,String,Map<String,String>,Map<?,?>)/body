{
  Map<String,String> storedConfig=indexStore.get(cls,indexName);
  if (storedConfig != null && suppliedConfig == null) {
    Map<String,String> newConfig=injectDefaultProviderIfMissing(cls,indexName,dbConfig,storedConfig);
    if (newConfig != storedConfig) {
      indexStore.set(cls,indexName,newConfig);
    }
    return Pair.of(newConfig,Boolean.FALSE);
  }
  Map<String,String> configToUse=suppliedConfig;
  String provider=null;
  IndexProvider indexProvider=null;
  if (configToUse == null) {
    provider=getDefaultProvider(indexName,dbConfig);
    indexProvider=getIndexProvider(provider);
    configToUse=indexProvider.fillInDefaults(MapUtil.stringMap(KEY_INDEX_PROVIDER,provider));
  }
 else {
    provider=configToUse.get(KEY_INDEX_PROVIDER);
    provider=provider == null ? getDefaultProvider(indexName,dbConfig) : provider;
    indexProvider=getIndexProvider(provider);
  }
  configToUse=injectDefaultProviderIfMissing(cls,indexName,dbConfig,configToUse);
  if (storedConfig != null) {
    if (suppliedConfig != null && !indexProvider.configMatches(storedConfig,suppliedConfig)) {
      throw new IllegalArgumentException("Supplied index configuration:\n" + suppliedConfig + "\ndoesn't match stored config in a valid way:\n"+ storedConfig+ "\nfor '"+ indexName+ "'");
    }
    Map<String,String> newConfig=injectDefaultProviderIfMissing(cls,indexName,dbConfig,storedConfig);
    if (newConfig != storedConfig) {
      indexStore.set(cls,indexName,newConfig);
    }
    configToUse=newConfig;
  }
  boolean created=indexStore.setIfNecessary(cls,indexName,configToUse);
  return Pair.of(Collections.unmodifiableMap(configToUse),created);
}
