{
  if (startNode == null || endNode == null) {
    throw new RuntimeException("Start or end node undefined.");
  }
  calculateMultiple();
  if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0) {
    return new LinkedList<List<PropertyContainer>>();
  }
  Set<List<PropertyContainer>> paths=new HashSet<List<PropertyContainer>>();
  for (  Node middleNode : foundPathsMiddleNodes) {
    List<List<PropertyContainer>> paths1=Util.constructAllPathsToNode(middleNode,predecessors1,true,false);
    List<List<PropertyContainer>> paths2=Util.constructAllPathsToNode(middleNode,predecessors2,false,true);
    for (    List<PropertyContainer> part1 : paths1) {
      for (      List<PropertyContainer> part2 : paths2) {
        LinkedList<PropertyContainer> path=new LinkedList<PropertyContainer>();
        path.addAll(part1);
        path.addAll(part2);
        paths.add(path);
      }
    }
  }
  return new LinkedList<List<PropertyContainer>>(paths);
}
