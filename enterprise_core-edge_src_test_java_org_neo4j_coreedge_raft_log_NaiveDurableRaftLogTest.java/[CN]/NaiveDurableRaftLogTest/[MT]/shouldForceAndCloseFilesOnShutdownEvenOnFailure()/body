{
  FileSystemAbstraction fsa=mock(FileSystemAbstraction.class);
  StoreFileChannel entriesChannel=mock(StoreFileChannel.class);
  StoreFileChannel contentChannel=mock(StoreFileChannel.class);
  StoreFileChannel commitChannel=mock(StoreFileChannel.class);
  doThrow(new IOException()).when(entriesChannel).force(anyBoolean());
  doThrow(new IOException()).when(contentChannel).force(anyBoolean());
  doThrow(new IOException()).when(commitChannel).force(anyBoolean());
  File directory=new File(".");
  File entriesFile=new File(directory,"entries.log");
  File contentFile=new File(directory,"content.log");
  File commitFile=new File(directory,"commit.log");
  when(fsa.open(Matchers.eq(entriesFile),anyString())).thenReturn(entriesChannel);
  when(fsa.open(Matchers.eq(contentFile),anyString())).thenReturn(contentChannel);
  when(fsa.open(Matchers.eq(commitFile),anyString())).thenReturn(commitChannel);
  NaiveDurableRaftLog log=new NaiveDurableRaftLog(fsa,directory,new DummyRaftableContentSerializer(),new Monitors());
  try {
    log.shutdown();
    fail("Should have thrown exception, by test design");
  }
 catch (  Exception e) {
    assertEquals(3,e.getSuppressed().length);
  }
  verify(entriesChannel).force(anyBoolean());
  verify(contentChannel).force(anyBoolean());
  verify(commitChannel).force(anyBoolean());
}
