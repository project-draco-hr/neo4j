{
  DependencyResolver resolver=targetDb.getDependencyResolver();
  ProgressTxHandler handler=new ProgressTxHandler();
  Config config=targetDb.getDependencyResolver().resolveDependency(Config.class);
  TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(resolver,100);
  Monitors monitors=resolver.resolveDependency(Monitors.class);
  BackupClient client=new BackupClient(sourceHostNameOrIp,sourcePort,resolver.resolveDependency(Logging.class),targetDb.storeId(),timeout,unpacker,monitors.newMonitor(ByteCounterMonitor.class,BackupClient.class),monitors.newMonitor(RequestMonitor.class,BackupClient.class));
  boolean consistent=false;
  try {
    client.start();
    unpacker.start();
    try (Response<Void> response=client.incrementalBackup(context)){
      unpacker.unpackResponse(response,handler);
    }
     consistent=true;
  }
 catch (  MismatchingStoreIdException e) {
    throw new RuntimeException(DIFFERENT_STORE,e);
  }
catch (  RuntimeException|IOException e) {
    if (e.getCause() != null && e.getCause() instanceof MissingLogDataException) {
      throw new IncrementalBackupNotPossibleException(TOO_OLD_BACKUP,e.getCause());
    }
    throw new RuntimeException("Failed to perform incremental backup.",e);
  }
catch (  Throwable throwable) {
    throw new RuntimeException("Unexpected error",throwable);
  }
 finally {
    try {
      client.stop();
      unpacker.stop();
    }
 catch (    Throwable throwable) {
      logger.warn("Unable to stop backup client",throwable);
    }
  }
  return new BackupOutcome(handler.getLastSeenTransactionId(),consistent);
}
