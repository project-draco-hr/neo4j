{
  DependencyResolver resolver=targetDb.getDependencyResolver();
  BackupClient client=new BackupClient(sourceHostNameOrIp,sourcePort,resolver.resolveDependency(Logging.class),resolver.resolveDependency(Monitors.class),targetDb.storeId());
  client.start();
  boolean consistent=false;
  ProgressTxHandler handler=new ProgressTxHandler();
  try {
    Response<Void> response=client.incrementalBackup(context);
    TransactionCommittingResponseUnpacker unpacker=new TransactionCommittingResponseUnpacker(resolver.resolveDependency(LogicalTransactionStore.class).getAppender(),resolver.resolveDependency(TransactionRepresentationStoreApplier.class));
    unpacker.unpackResponse(response,handler);
    consistent=true;
  }
 catch (  RuntimeException e) {
    if (e.getCause() != null && e.getCause() instanceof MissingLogDataException) {
      throw new IncrementalBackupNotPossibleException("It's been too long since this backup was last updated, and it has " + "fallen too far behind the database transaction stream for incremental backup to be possible. " + "You need to perform a full backup at this point. You can modify this time interval by setting "+ "the '" + GraphDatabaseSettings.keep_logical_logs.name() + "' configuration on the database to a "+ "higher value.",e.getCause());
    }
    throw new RuntimeException("Failed to perform incremental backup.",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Failed to perform incremental backup.",e);
  }
 finally {
    try {
      client.stop();
    }
 catch (    Throwable throwable) {
      throw new RuntimeException(throwable);
    }
  }
  return new BackupOutcome(handler.getLastSeenTransactionId(),consistent);
}
