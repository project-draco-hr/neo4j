{
  BackupClient client=new BackupClient(sourceHostNameOrIp,sourcePort,targetDb.getDependencyResolver().resolveDependency(Logging.class),targetDb.getDependencyResolver().resolveDependency(Monitors.class),targetDb.storeId());
  client.start();
  Map<String,Long> lastCommittedTxs;
  boolean successfullyReadLastCommittedTxs=false;
  try {
    lastCommittedTxs=unpackResponse(client.incrementalBackup(context),targetDb.getDependencyResolver().resolveDependency(XaDataSourceManager.class),new ProgressTxHandler());
    trimLogicalLogCount(targetDb);
    successfullyReadLastCommittedTxs=true;
  }
 catch (  MismatchingStoreIdException e) {
    throw new RuntimeException(DIFFERENT_STORE,e);
  }
catch (  RuntimeException e) {
    if (e.getCause() != null && e.getCause() instanceof NoSuchLogVersionException) {
      throw new IncrementalBackupNotPossibleException(TOO_OLD_BACKUP,e.getCause());
    }
 else {
      throw new RuntimeException("Failed to perform incremental backup.",e);
    }
  }
 finally {
    try {
      client.stop();
    }
 catch (    Throwable throwable) {
      if (successfullyReadLastCommittedTxs) {
        logger.warn("Unable to stop backup client",throwable);
      }
 else {
        throw new RuntimeException("Unable to stop backup client",throwable);
      }
    }
  }
  return new BackupOutcome(lastCommittedTxs,true);
}
