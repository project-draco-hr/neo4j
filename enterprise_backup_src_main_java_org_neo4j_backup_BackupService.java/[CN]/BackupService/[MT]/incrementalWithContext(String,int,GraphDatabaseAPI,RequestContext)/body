{
  BackupClient client=new BackupClient(sourceHostNameOrIp,sourcePort,targetDb.getDependencyResolver().resolveDependency(Logging.class),targetDb.getDependencyResolver().resolveDependency(Monitors.class),targetDb.getStoreId());
  client.start();
  Map<String,Long> lastCommittedTxs;
  boolean consistent=false;
  try {
    lastCommittedTxs=unpackResponse(client.incrementalBackup(context),targetDb.getDependencyResolver().resolveDependency(XaDataSourceManager.class),new ProgressTxHandler());
    trimLogicalLogCount(targetDb);
    consistent=true;
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof NoSuchLogVersionException) {
      throw new IncrementalBackupNotPossibleException("It's been too long since this backup was last updated, and it has " + "fallen too far behind the database transaction stream for incremental backup to be possible. " + "You need to perform a full backup at this point. You can modify this time interval by setting "+ "the '" + GraphDatabaseSettings.keep_logical_logs.name() + "' configuration on the database to a "+ "higher value.",e);
    }
 else {
      throw e;
    }
  }
 finally {
    try {
      client.stop();
    }
 catch (    Throwable throwable) {
      throw new RuntimeException(throwable);
    }
  }
  return new BackupOutcome(lastCommittedTxs,consistent);
}
