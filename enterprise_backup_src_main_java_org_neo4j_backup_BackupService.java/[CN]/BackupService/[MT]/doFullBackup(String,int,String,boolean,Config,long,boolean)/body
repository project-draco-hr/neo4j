{
  if (directoryContainsDb(targetDirectory)) {
    throw new RuntimeException(targetDirectory + " already contains a database");
  }
  Map<String,String> params=tuningConfiguration.getParams();
  params.put(GraphDatabaseSettings.store_dir.name(),targetDirectory);
  tuningConfiguration.applyChanges(params);
  long timestamp=System.currentTimeMillis();
  long lastCommittedTx=-1;
  boolean consistent=!checkConsistency;
  try (PageCache pageCache=createPageCache(fileSystem)){
    StoreCopyClient storeCopier=new StoreCopyClient(tuningConfiguration,loadKernelExtensions(),new ConsoleLogger(StringLogger.SYSTEM),new DevNullLoggingService(),new DefaultFileSystemAbstraction(),pageCache,monitors.newMonitor(StoreCopyClient.Monitor.class,getClass()));
    storeCopier.copyStore(new StoreCopyClient.StoreCopyRequester(){
      private BackupClient client;
      @Override public Response<?> copyStore(      StoreWriter writer){
        client=new BackupClient(sourceHostNameOrIp,sourcePort,null,new DevNullLoggingService(),StoreId.DEFAULT,timeout,ResponseUnpacker.NO_OP_RESPONSE_UNPACKER,monitors.newMonitor(ByteCounterMonitor.class),monitors.newMonitor(RequestMonitor.class));
        client.start();
        return client.fullBackup(writer,forensics);
      }
      @Override public void done(){
        client.stop();
      }
    }
,CancellationRequest.NEVER_CANCELLED);
    bumpMessagesDotLogFile(targetDirectory,timestamp);
    if (checkConsistency) {
      try {
        consistent=new ConsistencyCheckService().runFullConsistencyCheck(targetDirectory,tuningConfiguration,ProgressMonitorFactory.textual(System.err),logger,fileSystem,pageCache).isSuccessful();
      }
 catch (      ConsistencyCheckIncompleteException e) {
        logger.error("Consistency check incomplete",e);
      }
 finally {
        logger.flush();
      }
    }
    clearIdFiles(targetDirectory);
    return new BackupOutcome(lastCommittedTx,consistent);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
