{
  if (directoryContainsDb(targetDirectory)) {
    throw new RuntimeException(targetDirectory + " already contains a database");
  }
  Map<String,String> params=tuningConfiguration.getParams();
  params.put(GraphDatabaseSettings.store_dir.name(),targetDirectory);
  tuningConfiguration.applyChanges(params);
  long timestamp=System.currentTimeMillis();
  long lastCommittedTx=-1;
  boolean consistent=!checkConsistency;
  GraphDatabaseAPI targetDb=null;
  try {
    StoreCopyClient storeCopier=new StoreCopyClient(tuningConfiguration,loadKernelExtensions(),new ConsoleLogger(StringLogger.SYSTEM),new DefaultFileSystemAbstraction());
    storeCopier.copyStore(new StoreCopyClient.StoreCopyRequester(){
      private BackupClient client;
      @Override public Response<?> copyStore(      StoreWriter writer){
        client=new BackupClient(sourceHostNameOrIp,sourcePort,new DevNullLoggingService(),new Monitors(),null);
        client.start();
        return client.fullBackup(writer);
      }
      @Override public void done(){
        client.stop();
      }
    }
);
    targetDb=startTemporaryDb(targetDirectory);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (targetDb != null) {
      targetDb.shutdown();
    }
  }
  bumpMessagesDotLogFile(targetDirectory,timestamp);
  if (checkConsistency) {
    try {
      consistent=new ConsistencyCheckService().runFullConsistencyCheck(targetDirectory,tuningConfiguration,ProgressMonitorFactory.textual(System.err),logger).isSuccessful();
    }
 catch (    ConsistencyCheckIncompleteException e) {
      logger.error("Consistency check incomplete",e);
    }
 finally {
      logger.flush();
    }
  }
  return new BackupOutcome(lastCommittedTx,consistent);
}
