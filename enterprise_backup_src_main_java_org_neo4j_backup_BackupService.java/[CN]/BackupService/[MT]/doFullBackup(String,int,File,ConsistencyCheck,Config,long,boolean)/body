{
  if (!directoryIsEmpty(targetDirectory)) {
    throw new RuntimeException("Can only perform a full backup into an empty directory but " + targetDirectory + " is not empty");
  }
  long timestamp=System.currentTimeMillis();
  long lastCommittedTx=-1;
  try (PageCache pageCache=createPageCache(fileSystem)){
    StoreCopyClient storeCopier=new StoreCopyClient(targetDirectory,tuningConfiguration,loadKernelExtensions(),logProvider,new DefaultFileSystemAbstraction(),pageCache,monitors.newMonitor(StoreCopyClient.Monitor.class,getClass()),forensics);
    storeCopier.copyStore(new StoreCopyClient.StoreCopyRequester(){
      private BackupClient client;
      @Override public Response<?> copyStore(      StoreWriter writer){
        client=new BackupClient(sourceHostNameOrIp,sourcePort,NullLogProvider.getInstance(),StoreId.DEFAULT,timeout,ResponseUnpacker.NO_OP_RESPONSE_UNPACKER,monitors.newMonitor(ByteCounterMonitor.class),monitors.newMonitor(RequestMonitor.class));
        client.start();
        return client.fullBackup(writer,forensics);
      }
      @Override public void done(){
        client.stop();
      }
    }
,CancellationRequest.NEVER_CANCELLED);
    bumpMessagesDotLogFile(targetDirectory,timestamp);
    boolean consistent=false;
    try {
      consistent=consistencyCheck.runFull(targetDirectory,tuningConfiguration,ProgressMonitorFactory.textual(System.err),logProvider,fileSystem,pageCache,false);
    }
 catch (    ConsistencyCheckFailedException e) {
      log.error("Consistency check incomplete",e);
    }
    clearIdFiles(targetDirectory);
    return new BackupOutcome(lastCommittedTx,consistent);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
