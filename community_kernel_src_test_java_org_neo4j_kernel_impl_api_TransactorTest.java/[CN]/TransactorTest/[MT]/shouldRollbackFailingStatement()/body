{
  AbstractTransactionManager txManager=mock(AbstractTransactionManager.class);
  Transaction existingTransaction=mock(Transaction.class);
  when(txManager.suspend()).thenReturn(existingTransaction);
  TransactionContext txContext=mock(TransactionContext.class);
  when(txManager.getTransactionContext()).thenReturn(txContext);
  StatementContextParts stmtContext=mockedParts(txContext);
  when(txContext.newStatementContext()).thenReturn(stmtContext);
  @SuppressWarnings("unchecked") Transactor.Statement<Object,KernelException> statement=mock(Transactor.Statement.class);
  SpecificKernelException exception=new SpecificKernelException();
  when(statement.perform(any(StatementContextParts.class))).thenThrow(exception);
  Transactor transactor=new Transactor(txManager);
  try {
    transactor.execute(statement);
    fail("expected exception");
  }
 catch (  SpecificKernelException e) {
    assertSame(exception,e);
  }
  InOrder order=inOrder(txManager,txContext,stmtContext.lifecycleOperations(),statement);
  order.verify(txManager).suspend();
  order.verify(txManager).begin();
  order.verify(txManager).getTransactionContext();
  order.verify(txContext).newStatementContext();
  order.verify(statement).perform(stmtContext);
  order.verify(stmtContext.lifecycleOperations()).close();
  order.verify(txContext).rollback();
  order.verify(txManager).resume(existingTransaction);
  order.verifyNoMoreInteractions();
}
