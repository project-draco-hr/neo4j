{
  AbstractTransactionManager txManager=mock(AbstractTransactionManager.class);
  javax.transaction.Transaction existingTransaction=mock(javax.transaction.Transaction.class);
  when(txManager.suspend()).thenReturn(existingTransaction);
  StatementOperationParts operations=mock(StatementOperationParts.class);
  Statement statement=mock(Statement.class);
  StubKernelTransaction kernelTransaction=spy(new StubKernelTransaction(operations,statement));
  when(txManager.getKernelTransaction()).thenReturn(kernelTransaction);
  @SuppressWarnings("unchecked") Transactor.Work<Object,KernelException> work=mock(Transactor.Work.class);
  SpecificKernelException exception=new SpecificKernelException();
  when(work.perform(any(StatementOperationParts.class),any(StatementState.class))).thenThrow(exception);
  Transactor transactor=new Transactor(txManager);
  try {
    transactor.execute(work);
    fail("expected exception");
  }
 catch (  SpecificKernelException e) {
    assertSame(exception,e);
  }
  InOrder order=inOrder(txManager,kernelTransaction,operations,statement,work);
  order.verify(txManager).suspend();
  order.verify(txManager).begin();
  order.verify(txManager).getKernelTransaction();
  order.verify(kernelTransaction).newStatement();
  order.verify(work).perform(operations,statement);
  order.verify(statement).close();
  order.verify(kernelTransaction).rollback();
  order.verify(txManager).resume(existingTransaction);
  order.verifyNoMoreInteractions();
}
