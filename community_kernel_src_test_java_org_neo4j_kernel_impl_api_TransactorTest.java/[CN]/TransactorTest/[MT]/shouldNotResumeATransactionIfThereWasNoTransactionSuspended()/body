{
  AbstractTransactionManager txManager=mock(AbstractTransactionManager.class);
  KernelTransaction txContext=mock(KernelTransaction.class);
  when(txManager.getKernelTransaction()).thenReturn(txContext);
  StatementOperationParts stmtContext=mockedParts(txContext);
  when(txContext.newStatementOperations()).thenReturn(stmtContext);
  @SuppressWarnings("unchecked") Transactor.Statement<Object,KernelException> statement=mock(Transactor.Statement.class);
  Object expectedResult=new Object();
  when(statement.perform(eq(stmtContext),any(StatementState.class))).thenReturn(expectedResult);
  StatementState state=mock(StatementState.class);
  when(txContext.newStatementState()).thenReturn(state);
  Transactor transactor=new Transactor(txManager);
  Object result=transactor.execute(statement);
  assertEquals(expectedResult,result);
  InOrder order=inOrder(txManager,txContext,state,statement);
  order.verify(txManager).suspend();
  order.verify(txManager).begin();
  order.verify(txManager).getKernelTransaction();
  order.verify(txContext).newStatementOperations();
  order.verify(statement).perform(stmtContext,state);
  order.verify(state).close();
  order.verify(txContext).commit();
  order.verifyNoMoreInteractions();
}
