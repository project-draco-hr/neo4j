{
  createGraph("a FIRST d","a TO b","b TO c","d TO e","e TO f");
  try (Transaction tx=beginTx()){
    TraversalDescription firstTraverser=getGraphDb().traversalDescription().relationships(RelationshipType.withName("FIRST")).evaluator(Evaluators.toDepth(1));
    final Iterable<Path> firstResult=firstTraverser.traverse(getNodeWithName("a"));
    Iterable<Node> startNodesForNestedTraversal=new IterableWrapper<Node,Path>(firstResult){
      @Override protected Node underlyingObjectToObject(      Path path){
        return path.endNode();
      }
    }
;
    TraversalDescription nestedTraversal=getGraphDb().traversalDescription().evaluator(Evaluators.atDepth(2));
    expectPaths(nestedTraversal.traverse(startNodesForNestedTraversal),"a,b,c","d,e,f");
    tx.success();
  }
 }
