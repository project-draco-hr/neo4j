{
  this.recordChangeSet=new RecordChangeSet(neoStore);
  commands.clear();
  List<LogEntry> result=new ArrayList<>(from.size());
  LogEntry commit=null;
  LogEntry prepare=null;
  LogEntry done=null;
  for (  LogEntry logEntry : from) {
    if (logEntry.getVersion() == LogEntryVersions.CURRENT_LOG_ENTRY_VERSION) {
      throw new RuntimeException("crap");
    }
switch (logEntry.getType()) {
case LogEntryByteCodes.TX_START:
      result.add(logEntry);
    break;
case LogEntryByteCodes.TX_1P_COMMIT:
  commit=logEntry;
break;
case LogEntryByteCodes.COMMAND:
try {
if (!handleCommand((LogEntryCommand)logEntry)) {
  commands.add((LogEntryCommand)logEntry);
}
}
 catch (IOException e) {
throw new RuntimeException(e);
}
break;
default :
throw new IllegalStateException("Log Entry type " + logEntry.getType() + " is not recognizable");
}
}
translateRecordChangeSetToEntries(result,commands);
if (commit != null) {
result.add(commit);
}
if (prepare != null) {
result.add(prepare);
}
if (done != null) {
result.add(done);
}
return result;
}
