{
  final int numberOfTimesToTimeout=1;
  AtomicInteger timeoutCounter=new AtomicInteger(numberOfTimesToTimeout);
  CoreMember coreMember=new CoreMember(new AdvertisedSocketAddress("core:1"),new AdvertisedSocketAddress("raft:1"));
  TriggeredReplicator replicator=new TriggeredReplicator();
  StubCommittingTransactionsRegistry txFutures=new StubCommittingTransactionsRegistry(replicator,timeoutCounter);
  TransactionCommitProcess localCommitProcess=mock(TransactionCommitProcess.class);
  LocalSessionPool sessionPool=new LocalSessionPool(coreMember);
  ReplicatedLockTokenStateMachine<Object> lockState=lockState(0);
  RecoverTransactionLogState recoverTransactionLogState=mock(RecoverTransactionLogState.class);
  when(recoverTransactionLogState.findLastCommittedIndex()).thenReturn(-1L);
  final ReplicatedTransactionStateMachine stateMachine=new ReplicatedTransactionStateMachine<>(localCommitProcess,sessionPool.getGlobalSession(),lockState,txFutures,new InMemoryStateStorage<>(new GlobalSessionTrackerState<>()),NullLogProvider.getInstance(),recoverTransactionLogState);
  StateMachines stateMachines=new StateMachines(stateMachine);
  replicator.setStateMachines(stateMachines);
  ReplicatedTransactionCommitProcess commitProcess=new ReplicatedTransactionCommitProcess(replicator,sessionPool,new ExponentialBackoffStrategy(10,SECONDS),NullLogService.getInstance(),txFutures,new Monitors());
  commitProcess.commit(tx(),NULL,INTERNAL);
  assertEquals(2,replicator.timesReplicated());
}
