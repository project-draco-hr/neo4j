{
  Thread thread=Thread.currentThread();
  R resource=current.get(thread);
  if (resource == null) {
    List<R> garbage=null;
synchronized (unused) {
      for (; ; ) {
        resource=unused.poll();
        if (resource == null) {
          break;
        }
        if (isAlive(resource)) {
          break;
        }
        if (garbage == null) {
          garbage=new LinkedList<>();
        }
        garbage.add(resource);
      }
    }
    if (resource == null) {
      resource=create();
      monitor.created(resource);
    }
    current.put(thread,resource);
    monitor.acquired(resource);
    if (garbage != null) {
      for (      R dead : garbage) {
        dispose(dead);
        monitor.disposed(dead);
      }
    }
  }
  currentPeakSize=Math.max(currentPeakSize,current.size());
  if (checkStrategy.shouldCheck()) {
    targetSize=Math.max(minSize,currentPeakSize);
    monitor.updatedCurrentPeakSize(currentPeakSize);
    currentPeakSize=0;
    monitor.updatedTargetSize(targetSize);
  }
  return resource;
}
