{
  dbRule.setConfig(GraphDatabaseSettings.logical_log_rotation_threshold,"1M");
  db=dbRule.getGraphDatabaseAPI();
  executor=Executors.newCachedThreadPool();
  startLogRotationLatch=new CountDownLatch(1);
  completeLogRotationLatch=new CountDownLatch(1);
  writerStopped=new AtomicBoolean();
  monitors=db.getDependencyResolver().resolveDependency(Monitors.class);
  rotationListener=new LogRotation.Monitor(){
    @Override public void startedRotating(    long currentVersion){
      startLogRotationLatch.countDown();
      try {
        completeLogRotationLatch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void finishedRotating(    long currentVersion){
    }
  }
;
  monitors.addMonitorListener(rotationListener);
  label=DynamicLabel.label("Label");
  Runnable writerTask=new Runnable(){
    @Override public void run(){
      while (!writerStopped.get()) {
        try (Transaction tx=db.beginTx()){
          Node node=db.createNode(label);
          node.setProperty("a",1);
          tx.success();
        }
       }
    }
  }
;
  writerTaskFuture=executor.submit(writerTask);
  startLogRotationLatch.await();
}
