{
  if (value.equalsIgnoreCase("null")) {
    packer.packNull();
  }
 else   if (value.equalsIgnoreCase("true")) {
    packer.pack(true);
  }
 else   if (value.equalsIgnoreCase("false")) {
    packer.pack(false);
  }
 else   if (value.startsWith("\"")) {
    packer.pack(value.substring(1,value.length() - 1));
  }
 else   if (value.startsWith("[")) {
    if (value.equals("[]")) {
      packer.packListHeader(0);
    }
 else {
      String[] values=value.substring(1,value.length() - 1).split(",");
      packer.packListHeader(values.length);
      for (      String s : values) {
        pack(s,packer,writer);
      }
    }
  }
 else   if (value.startsWith("{")) {
    if (value.equals("{}")) {
      packer.packMapHeader(0);
    }
 else {
      String[] pairs=value.substring(1,value.length() - 1).split(",");
      packer.packMapHeader(pairs.length);
      for (      String pair : pairs) {
        String[] split=pair.split(":");
        packer.pack(split[0]);
        pack(split[1],packer,writer);
      }
    }
  }
 else   if (value.startsWith("Struct")) {
    DocStructExample struct=new DocStructExample(value);
    packer.packStructHeader(struct.size(),(byte)struct.signature());
    for (    String s : struct) {
      pack(s,packer,writer);
    }
  }
 else   if (value.matches("-?[0-9]+\\.[0-9]+")) {
    packer.pack(Double.parseDouble(value));
  }
 else   if (value.matches("-?[0-9]+")) {
    packer.pack(Long.parseLong(value));
  }
 else   if (value.equals("DISCARD_ALL")) {
    writer.handleIgnoredMessage();
  }
 else   if (value.equals("PULL_ALL")) {
    writer.handlePullAllMessage();
  }
 else   if (value.equals("ACK_FAILURE")) {
    writer.handleAckFailureMessage();
  }
 else   if (value.equals("IGNORED")) {
    writer.handleIgnoredMessage();
  }
 else   if (value.equals("RUN \"RETURN 1 AS num\" {}")) {
    writer.handleRunMessage("RETURN 1 AS num",Collections.<String,Object>emptyMap());
  }
 else   if (value.equals("RUN \"This will cause a syntax error\" {}")) {
    writer.handleRunMessage("This will cause a syntax error",Collections.<String,Object>emptyMap());
  }
 else   if (value.equals("RECORD [1,2,3]")) {
    writer.handleRecordMessage(new ImmutableRecord(new Object[]{1,2,3}));
  }
 else   if (value.equals("RECORD [1]")) {
    writer.handleRecordMessage(new ImmutableRecord(new Object[]{1}));
  }
 else   if (value.equals("SUCCESS {fields:[\"name\", \"age\"]}")) {
    writer.handleSuccessMessage(map("fields",asList("name","age")));
  }
 else   if (value.equals("SUCCESS { fields: ['num'] }")) {
    writer.handleSuccessMessage(map("fields",asList("num")));
  }
 else   if (value.equals("SUCCESS {}")) {
    writer.handleSuccessMessage(map());
  }
 else   if (value.equals("FAILURE {code:\"Neo.ClientError.Statement.InvalidSyntax\", " + "message:\"Invalid syntax.\"}")) {
    writer.handleFailureMessage(new Neo4jError(Status.Statement.InvalidSyntax,"Invalid syntax."));
  }
 else   if (value.equals("FAILURE {code:\"Neo.ClientError.Statement.InvalidSyntax\",")) {
    writer.handleFailureMessage(new Neo4jError(Status.Statement.InvalidSyntax,"Invalid input 'T': expected <init> (line 1, column 1 (offset: 0))\n" + "\"This will cause a syntax error\"\n" + " ^"));
  }
 else   if (value.equals("INITIALIZE \"MyClient/1.0\"")) {
    writer.handleInitializeMessage("MyClient/1.0");
  }
 else {
    throw new RuntimeException("Unknown value: " + value);
  }
}
