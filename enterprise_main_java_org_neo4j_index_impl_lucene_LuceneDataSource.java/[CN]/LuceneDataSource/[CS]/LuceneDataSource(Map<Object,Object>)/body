{
  super(params);
  caching=new Cache();
  String storeDir=(String)params.get("store_dir");
  this.baseStorePath=getStoreDir(storeDir);
  cleanWriteLocks(baseStorePath);
  this.indexStore=new IndexStore(storeDir);
  this.store=newIndexStore(storeDir);
  this.typeCache=new IndexTypeCache();
  boolean isReadOnly=false;
  if (params.containsKey("read_only")) {
    Object readOnly=params.get("read_only");
    if (readOnly instanceof Boolean) {
      isReadOnly=(Boolean)readOnly;
    }
 else {
      isReadOnly=Boolean.parseBoolean((String)readOnly);
    }
  }
  nodeEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      return IndexType.newBaseDocument((Long)entityId);
    }
    public Class<?> getType(){
      return Node.class;
    }
  }
;
  relationshipEntityType=new EntityType(){
    public Document newDocument(    Object entityId){
      RelationshipId relId=(RelationshipId)entityId;
      Document doc=IndexType.newBaseDocument(relId.id);
      doc.add(new Field(LuceneIndex.KEY_START_NODE_ID,"" + relId.startNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      doc.add(new Field(LuceneIndex.KEY_END_NODE_ID,"" + relId.endNode,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      return doc;
    }
    public Class<?> getType(){
      return Relationship.class;
    }
  }
;
  XaCommandFactory cf=new LuceneCommandFactory();
  XaTransactionFactory tf=new LuceneTransactionFactory(store);
  xaContainer=XaContainer.create(this,this.baseStorePath + "/lucene.log",cf,tf,params);
  if (!isReadOnly) {
    try {
      xaContainer.openLogicalLog();
    }
 catch (    IOException e) {
      throw new RuntimeException("Unable to open lucene log in " + this.baseStorePath,e);
    }
    xaContainer.getLogicalLog().setKeepLogs(shouldKeepLog((String)params.get(Config.KEEP_LOGICAL_LOGS),DEFAULT_NAME));
    setLogicalLogAtCreationTime(xaContainer.getLogicalLog());
  }
}
