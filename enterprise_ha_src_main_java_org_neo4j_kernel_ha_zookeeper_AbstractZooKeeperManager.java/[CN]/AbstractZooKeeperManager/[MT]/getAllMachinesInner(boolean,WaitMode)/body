{
  if (wait) {
    waitForSyncConnected(mode);
  }
  try {
    int mySequenceNumber=-1;
    try {
      mySequenceNumber=Integer.parseInt(getSequenceNr());
    }
 catch (    NumberFormatException e) {
    }
    writeFlush(getMyMachineId());
    Thread.sleep(100);
    Map<Integer,ZooKeeperMachine> result=new HashMap<Integer,ZooKeeperMachine>();
    String root=getRoot();
    List<String> children=getZooKeeper(true).getChildren(root,false);
    for (    String child : children) {
      Pair<Integer,Integer> parsedChild=parseChild(child);
      if (parsedChild == null) {
        continue;
      }
      try {
        int id=parsedChild.first();
        int seq=parsedChild.other();
        Pair<Long,Integer> instanceData=readDataRepresentingInstance(root + "/" + child);
        long lastCommittedTxId=instanceData.first();
        int masterId=instanceData.other();
        if (id == getMyMachineId() && mySequenceNumber == -1) {
          continue;
        }
        if (lastCommittedTxId == -2) {
          msgLog.logMessage("Couldn't read " + id + "_"+ seq+ ", retrying from scratch");
          return null;
        }
        if (!result.containsKey(id) || seq > result.get(id).getSequenceId()) {
          Machine haServer=getHaServer(id,wait);
          ZooKeeperMachine toAdd=new ZooKeeperMachine(id,seq,lastCommittedTxId,masterId,haServer.getServerAsString(),haServer.getBackupPort(),HA_SERVERS_CHILD + "/" + id);
          result.put(id,toAdd);
        }
      }
 catch (      KeeperException inner) {
        if (inner.code() != KeeperException.Code.NONODE) {
          throw new ZooKeeperException("Unable to get master.",inner);
        }
      }
    }
    return result;
  }
 catch (  KeeperException e) {
    throw new ZooKeeperException("Unable to get master",e);
  }
catch (  InterruptedException e) {
    Thread.interrupted();
    throw new ZooKeeperException("Interrupted.",e);
  }
 finally {
    writeFlush(STOP_FLUSHING);
  }
}
