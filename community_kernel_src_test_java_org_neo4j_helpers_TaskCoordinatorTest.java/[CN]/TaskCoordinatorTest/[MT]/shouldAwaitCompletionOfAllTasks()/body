{
  final TaskCoordinator coordinator=new TaskCoordinator(1,TimeUnit.MILLISECONDS);
  final AtomicReference<String> state=new AtomicReference<>();
  final List<String> states=new ArrayList<>();
  final Barrier.Control phaseA=new Barrier.Control();
  final Barrier.Control phaseB=new Barrier.Control();
  final Barrier.Control phaseC=new Barrier.Control();
  state.set("A");
  new Thread("awaitCompletion"){
    @Override public void run(){
      try {
        states.add(state.get());
        phaseA.reached();
        states.add(state.get());
        phaseB.await();
        phaseB.release();
        coordinator.awaitCompletion();
        states.add(state.get());
        phaseC.reached();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
.start();
  try (TaskControl task1=coordinator.newInstance();TaskControl task2=coordinator.newInstance()){
    phaseA.await();
    state.set("B");
    phaseA.release();
    phaseC.release();
    phaseB.reached();
    state.set("C");
  }
   phaseC.await();
  assertEquals(Arrays.asList("A","B","C"),states);
}
