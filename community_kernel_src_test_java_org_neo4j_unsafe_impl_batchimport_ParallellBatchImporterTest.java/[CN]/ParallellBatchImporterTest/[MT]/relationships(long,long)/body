{
  return new Iterable<InputRelationship>(){
    @Override public Iterator<InputRelationship> iterator(){
      return new PrefetchingIterator<InputRelationship>(){
        private final Random random=new Random(seed);
        private int cursor=0;
        private final Object[] properties=new Object[]{"age",10};
        @Override protected InputRelationship fetchNextOrNull(){
          if (cursor < count) {
            try {
              return new InputRelationship(cursor,properties,null,Math.abs(random.nextLong() % maxNodeId),Math.abs(random.nextLong() % maxNodeId),"TYPE" + random.nextInt(3),null);
            }
  finally {
              cursor++;
            }
          }
          return null;
        }
      }
;
    }
  }
;
}
