{
  if (maxNrIterations <= 0) {
    return 0;
  }
  int localIterations=0;
  while (true) {
    ++localIterations;
    ++totalIterations;
    Map<Node,Double> tempVector=new HashMap<Node,Double>();
    double lambda=0.0;
    for (    Relationship relationship : relationshipSet) {
      if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.OUTGOING)) {
        processRelationship(tempVector,relationship,true);
      }
      if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.INCOMING)) {
        processRelationship(tempVector,relationship,false);
      }
    }
    for (    Node node : tempVector.keySet()) {
      Double other=values.get(node);
      if (other == null) {
        continue;
      }
      lambda+=other * tempVector.get(node);
    }
    DoubleMatrix matrix=new DoubleMatrix();
    Map<Node,Integer> indices=new HashMap<Node,Integer>();
    int index=0;
    for (    Node node : nodeSet) {
      indices.put(node,index++);
    }
    for (    Relationship relationship : relationshipSet) {
      if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.OUTGOING)) {
        matrix.set(indices.get(relationship.getEndNode()),indices.get(relationship.getStartNode()),costEvaluator.getCost(relationship,true));
      }
      if (relationDirection.equals(Direction.BOTH) || relationDirection.equals(Direction.INCOMING)) {
        matrix.set(indices.get(relationship.getStartNode()),indices.get(relationship.getEndNode()),costEvaluator.getCost(relationship,false));
      }
    }
    for (    Node node : values.keySet()) {
      int i=indices.get(node);
      matrix.incrementValue(i,i,-lambda);
    }
    DoubleVector newValuesVector=new DoubleVector();
    for (    Node node : values.keySet()) {
      newValuesVector.set(indices.get(node),values.get(node));
    }
    MatrixUtil.LinearSolve(matrix,newValuesVector);
    Map<Node,Double> newValues=new HashMap<Node,Double>();
    for (    Node node : values.keySet()) {
      Double value=newValuesVector.get(indices.get(node));
      if (value != null) {
        newValues.put(node,value);
      }
    }
    normalize(newValues);
    if (timeToStop(values,newValues)) {
      values=newValues;
      break;
    }
    values=newValues;
    if (localIterations >= maxNrIterations) {
      break;
    }
  }
  if (values.keySet().size() > 0) {
    if (values.get(values.keySet().iterator().next()) < 0) {
      for (      Node node : values.keySet()) {
        values.put(node,-values.get(node));
      }
    }
  }
  return localIterations;
}
