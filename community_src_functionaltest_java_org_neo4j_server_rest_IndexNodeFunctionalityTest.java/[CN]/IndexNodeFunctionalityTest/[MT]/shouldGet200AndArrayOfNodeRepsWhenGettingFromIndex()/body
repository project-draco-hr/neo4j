{
  String key="key_get";
  String value="value";
  String name1="Thomas Anderson";
  String name2="Agent Smith";
  String indexName="matrix";
  String location1=Client.create().resource(functionalTestHelper.nodeUri()).accept(MediaType.APPLICATION_JSON).entity("{\"name\":\"" + name1 + "\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class).getHeaders().getFirst(HttpHeaders.LOCATION);
  String location2=Client.create().resource(functionalTestHelper.nodeUri()).accept(MediaType.APPLICATION_JSON).entity("{\"name\":\"" + name2 + "\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class).getHeaders().getFirst(HttpHeaders.LOCATION);
  String indexLocation1=Client.create().resource(functionalTestHelper.indexUri() + "/node/" + indexName+ "/"+ key+ "/"+ value).entity(JsonHelper.createJsonFrom(location1),MediaType.APPLICATION_JSON).post(ClientResponse.class).getHeaders().getFirst(HttpHeaders.LOCATION);
  String indexLocation2=Client.create().resource(functionalTestHelper.indexUri() + "/node/" + indexName+ "/"+ key+ "/"+ value).entity(JsonHelper.createJsonFrom(location2),MediaType.APPLICATION_JSON).post(ClientResponse.class).getHeaders().getFirst(HttpHeaders.LOCATION);
  Map<String,String> uriToName=new HashMap<String,String>();
  uriToName.put(indexLocation1.toString(),name1);
  uriToName.put(indexLocation2.toString(),name2);
  ClientResponse response=Client.create().resource(functionalTestHelper.indexUri() + "/node/" + indexName+ "/"+ key+ "/"+ value).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(200,response.getStatus());
  Collection<?> items=(Collection<?>)JsonHelper.jsonToSingleValue(response.getEntity(String.class));
  int counter=0;
  for (  Object item : items) {
    Map<?,?> map=(Map<?,?>)item;
    Map<?,?> properties=(Map<?,?>)map.get("data");
    assertNotNull(map.get("self"));
    String indexedUri=(String)map.get("indexed");
    assertEquals(uriToName.get(indexedUri),properties.get("name"));
    counter++;
  }
  assertEquals(2,counter);
}
