{
  Map<String,Node> nodeMap=data.get();
  Node user1=nodeMap.get("User1");
  PatternNode u1=new PatternNode("U1");
  PatternNode u2=new PatternNode("U2");
  PatternNode hyperEdge1=new PatternNode("UGR1");
  PatternNode hyperEdge2=new PatternNode("UGR2");
  PatternNode group=new PatternNode("G");
  PatternNode role=new PatternNode("R");
  u1.createRelationshipTo(hyperEdge1,MyRelTypes.hasRoleInGroup,Direction.OUTGOING);
  u2.createRelationshipTo(hyperEdge2,MyRelTypes.hasRoleInGroup,Direction.OUTGOING);
  hyperEdge1.createRelationshipTo(group,MyRelTypes.hasGroup,Direction.OUTGOING);
  hyperEdge1.createRelationshipTo(role,MyRelTypes.hasRole,Direction.OUTGOING);
  hyperEdge2.createRelationshipTo(group,MyRelTypes.hasGroup,Direction.OUTGOING);
  hyperEdge2.createRelationshipTo(role,MyRelTypes.hasRole,Direction.OUTGOING);
  u1.setAssociation(nodeMap.get("User1"));
  u2.setAssociation(nodeMap.get("User2"));
  List<Node> expected=new ArrayList<Node>(asList(nodeMap.get("Group1"),nodeMap.get("Group2")));
  for (  PatternMatch match : doMatch(u1,nodeMap.get("User1"))) {
    Node matchedNode=match.getNodeFor(group);
    boolean remove=expected.remove(matchedNode);
    assertTrue("Unexpected node matched: " + matchedNode.getProperty("name"),remove);
  }
  assertTrue("Not all nodes were found",expected.isEmpty());
}
