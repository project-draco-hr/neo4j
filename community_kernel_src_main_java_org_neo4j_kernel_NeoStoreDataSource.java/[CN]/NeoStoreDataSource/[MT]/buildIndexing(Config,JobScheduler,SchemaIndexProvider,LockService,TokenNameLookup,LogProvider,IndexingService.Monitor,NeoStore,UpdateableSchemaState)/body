{
  final DefaultSchemaIndexProviderMap providerMap=new DefaultSchemaIndexProviderMap(indexProvider);
  final IndexingService indexingService=IndexingService.create(new IndexSamplingConfig(config),scheduler,providerMap,new NeoStoreIndexStoreView(lockService,neoStore),tokenNameLookup,updateableSchemaState,toList(new SchemaStorage(neoStore.getSchemaStore()).allIndexRules()),logProvider,indexingServiceMonitor);
  final IntegrityValidator integrityValidator=new IntegrityValidator(neoStore,indexingService);
  final IndexUpdatesValidator indexUpdatesValidator=dependencies.satisfyDependency(new IndexUpdatesValidator(neoStore,new PropertyLoader(neoStore),indexingService));
  final LabelScanStore labelScanStore=dependencyResolver.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore();
  life.add(indexingService);
  life.add(labelScanStore);
  return new IndexingModule(){
    @Override public IndexingService indexingService(){
      return indexingService;
    }
    @Override public IndexUpdatesValidator indexUpdatesValidator(){
      return indexUpdatesValidator;
    }
    @Override public LabelScanStore labelScanStore(){
      return labelScanStore;
    }
    @Override public IntegrityValidator integrityValidator(){
      return integrityValidator;
    }
    @Override public SchemaIndexProviderMap schemaIndexProviderMap(){
      return providerMap;
    }
  }
;
}
