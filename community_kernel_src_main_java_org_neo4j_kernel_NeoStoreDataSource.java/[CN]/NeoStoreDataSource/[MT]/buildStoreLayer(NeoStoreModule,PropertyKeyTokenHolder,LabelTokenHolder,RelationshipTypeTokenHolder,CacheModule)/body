{
  final NeoStores neoStores=neoStoresModule.neoStores();
  final DefaultSchemaIndexProviderMap providerMap=new DefaultSchemaIndexProviderMap(indexProvider);
  final IndexingService indexingService=IndexingService.create(new IndexSamplingConfig(config),scheduler,providerMap,new NeoStoreIndexStoreView(lockService,neoStores),tokenNameLookup,cacheModule.updateableSchemaState(),toList(new SchemaStorage(neoStores.getSchemaStore()).allIndexRules()),logProvider,indexingServiceMonitor);
  final IntegrityValidator integrityValidator=new IntegrityValidator(neoStores,indexingService);
  final IndexUpdatesValidator indexUpdatesValidator=dependencies.satisfyDependency(new OnlineIndexUpdatesValidator(neoStores,kernelHealth,new PropertyLoader(neoStores),indexingService,IndexUpdateMode.ONLINE));
  final LabelScanStore labelScanStore=dependencyResolver.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED).getLabelScanStore();
  life.add(indexingService);
  life.add(labelScanStore);
  SchemaCache schemaCache=cacheModule.schemaCache();
  ProcedureCache procedureCache=cacheModule.procedureCache();
  SchemaStorage schemaStorage=new SchemaStorage(neoStores.getSchemaStore());
  DiskLayer diskLayer=new DiskLayer(propertyKeyTokenHolder,labelTokens,relationshipTypeTokens,schemaStorage,neoStores,indexingService,storeStatementFactory(neoStores));
  final StoreReadLayer storeLayer=new CacheLayer(diskLayer,schemaCache,procedureCache);
  return new StoreLayerModule(){
    @Override public StoreReadLayer storeLayer(){
      return storeLayer;
    }
    @Override public NeoStores neoStores(){
      return neoStores;
    }
    @Override public MetaDataStore metaDataStore(){
      return neoStores.getMetaDataStore();
    }
    @Override public IndexingService indexingService(){
      return indexingService;
    }
    @Override public IndexUpdatesValidator indexUpdatesValidator(){
      return indexUpdatesValidator;
    }
    @Override public LabelScanStore labelScanStore(){
      return labelScanStore;
    }
    @Override public IntegrityValidator integrityValidator(){
      return integrityValidator;
    }
    @Override public SchemaIndexProviderMap schemaIndexProviderMap(){
      return providerMap;
    }
  }
;
}
