{
class Module extends RecordStorageEngine implements StoreLayerModule {
    public Module(    File storeDir,    Config config,    IdGeneratorFactory idGeneratorFactory,    PageCache pageCache,    FileSystemAbstraction fs,    LogProvider logProvider,    PropertyKeyTokenHolder propertyKeyTokenHolder,    LabelTokenHolder labelTokens,    RelationshipTypeTokenHolder relationshipTypeTokens,    Runnable schemaStateChangeCallback,    ConstraintSemantics constraintSemantics,    JobScheduler scheduler,    TokenNameLookup tokenNameLookup,    LockService lockService,    SchemaIndexProvider indexProvider,    IndexingService.Monitor indexingServiceMonitor,    KernelHealth kernelHealth,    LabelScanStoreProvider labelScanStoreProvider){
      super(storeDir,config,idGeneratorFactory,pageCache,fs,logProvider,propertyKeyTokenHolder,labelTokens,relationshipTypeTokens,schemaStateChangeCallback,constraintSemantics,scheduler,tokenNameLookup,lockService,indexProvider,indexingServiceMonitor,kernelHealth,labelScanStoreProvider);
    }
    @Override public NeoStores neoStores(){
      return neoStores;
    }
    @Override public MetaDataStore metaDataStore(){
      return neoStores.getMetaDataStore();
    }
    @Override public IndexingService indexingService(){
      return indexingService;
    }
    @Override public IndexUpdatesValidator indexUpdatesValidator(){
      return indexUpdatesValidator;
    }
    @Override public LabelScanStore labelScanStore(){
      return labelScanStore;
    }
    @Override public IntegrityValidator integrityValidator(){
      return integrityValidator;
    }
    @Override public SchemaIndexProviderMap schemaIndexProviderMap(){
      return providerMap;
    }
    @Override public CacheAccessBackDoor cacheAccess(){
      return cacheAccess;
    }
    @Override public ProcedureCache procedureCache(){
      return procedureCache;
    }
  }
  LabelScanStoreProvider labelScanStore=dependencyResolver.resolveDependency(LabelScanStoreProvider.class,LabelScanStoreProvider.HIGHEST_PRIORITIZED);
  return life.add(new Module(storeDir,config,idGeneratorFactory,pageCache,fs,logProvider,propertyKeyTokenHolder,labelTokens,relationshipTypeTokens,schemaStateChangeCallback,constraintSemantics,scheduler,tokenNameLookup,lockService,indexProvider,indexingServiceMonitor,kernelHealth,labelScanStore));
}
