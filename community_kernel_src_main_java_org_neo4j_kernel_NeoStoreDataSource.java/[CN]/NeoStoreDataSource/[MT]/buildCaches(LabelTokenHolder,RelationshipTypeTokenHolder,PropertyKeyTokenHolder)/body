{
  final UpdateableSchemaState updateableSchemaState=new KernelSchemaStateStore(logProvider);
  final SchemaCache schemaCache=new SchemaCache(constraintSemantics,Collections.<SchemaRule>emptyList());
  final CacheAccessBackDoor cacheAccess=new BridgingCacheAccess(schemaCache,updateableSchemaState,propertyKeyTokenHolder,relationshipTypeTokens,labelTokens);
  final ProcedureCache procedureCache=new ProcedureCache();
  life.add(new LifecycleAdapter(){
    @Override public void start() throws Throwable {
      loadSchemaCache();
    }
  }
);
  return new CacheModule(){
    @Override public SchemaCache schemaCache(){
      return schemaCache;
    }
    @Override public ProcedureCache procedureCache(){
      return procedureCache;
    }
    @Override public UpdateableSchemaState updateableSchemaState(){
      return updateableSchemaState;
    }
    @Override public CacheAccessBackDoor cacheAccess(){
      return cacheAccess;
    }
  }
;
}
