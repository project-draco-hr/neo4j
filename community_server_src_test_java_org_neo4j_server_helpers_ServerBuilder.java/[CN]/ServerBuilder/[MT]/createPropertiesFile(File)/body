{
  Map<String,String> properties=MapUtil.stringMap(Configurator.DATABASE_LOCATION_PROPERTY_KEY,dbDir,Configurator.MANAGEMENT_PATH_PROPERTY_KEY,webAdminUri,Configurator.REST_API_PATH_PROPERTY_KEY,webAdminDataUri);
  if (portNo != null) {
    properties.put(Configurator.WEBSERVER_PORT_PROPERTY_KEY,portNo);
  }
  if (host != null) {
    properties.put(Configurator.WEBSERVER_ADDRESS_PROPERTY_KEY,host);
  }
  if (maxThreads != null) {
    properties.put(Configurator.WEBSERVER_MAX_THREADS_PROPERTY_KEY,maxThreads);
  }
  if (thirdPartyPackages.keySet().size() > 0) {
    properties.put(Configurator.THIRD_PARTY_PACKAGES_KEY,asOneLine(thirdPartyPackages));
  }
  if (autoIndexedNodeKeys != null && autoIndexedNodeKeys.length > 0) {
    properties.put("node_auto_indexing","true");
    String propertyKeys=org.apache.commons.lang.StringUtils.join(autoIndexedNodeKeys,",");
    properties.put("node_keys_indexable",propertyKeys);
  }
  if (autoIndexedRelationshipKeys != null && autoIndexedRelationshipKeys.length > 0) {
    properties.put("relationship_auto_indexing","true");
    String propertyKeys=org.apache.commons.lang.StringUtils.join(autoIndexedRelationshipKeys,",");
    properties.put("relationship_keys_indexable",propertyKeys);
  }
  if (securityRuleClassNames != null && securityRuleClassNames.length > 0) {
    String propertyKeys=org.apache.commons.lang.StringUtils.join(securityRuleClassNames,",");
    properties.put(Configurator.SECURITY_RULES_KEY,propertyKeys);
  }
  if (httpsEnabled != null) {
    if (httpsEnabled) {
      properties.put(Configurator.WEBSERVER_SSL_ENABLED_PROPERTY_KEY,"true");
    }
 else {
      properties.put(Configurator.WEBSERVER_SSL_ENABLED_PROPERTY_KEY,"false");
    }
  }
  ServerTestUtils.writePropertiesToFile(properties,temporaryConfigFile);
}
