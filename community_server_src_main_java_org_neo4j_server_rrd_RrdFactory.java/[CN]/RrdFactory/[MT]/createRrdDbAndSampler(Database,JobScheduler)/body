{
  NeoStoreProvider neoStore=db.getGraph().getDependencyResolver().resolveDependency(NeoStoreProvider.class);
  AvailabilityGuard guard=db.getGraph().getDependencyResolver().resolveDependency(AvailabilityGuard.class);
  Sampleable[] primitives={new NodeIdsInUseSampleable(neoStore,guard),new PropertyCountSampleable(neoStore,guard),new RelationshipCountSampleable(neoStore,guard)};
  Sampleable[] usage={};
  File oldRrdFile=new File(db.getGraph().getStoreDir(),"rrd");
  if (oldRrdFile.exists()) {
    oldRrdFile.delete();
  }
  File rrdDir=config.get(ServerSettings.rrdb_location);
  if (rrdDir == null) {
    Map<String,String> params=config.getParams();
    String rrdPath=config.get(ServerInternalSettings.rrd_store).getAbsolutePath();
    params.put(ServerSettings.rrdb_location.name(),rrdPath);
    config.applyChanges(params);
    rrdDir=config.get(ServerSettings.rrdb_location);
  }
  File rrdFile=getRrdFile(db.getGraph(),rrdDir);
  final RrdDbWrapper rrdb=createRrdb(rrdFile,isEphemereal(db.getGraph()),join(primitives,usage));
  scheduler.scheduleAtFixedRate(new RrdJob(new RrdSamplerImpl(rrdb.get(),primitives)),RRD_THREAD_NAME + "[primitives]",SECONDS.toMillis(0),SECONDS.toMillis(3));
  return rrdb;
}
