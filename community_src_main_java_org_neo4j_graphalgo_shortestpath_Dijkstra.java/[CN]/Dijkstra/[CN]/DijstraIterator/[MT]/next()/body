{
  Node currentNode=queue.extractMin();
  CostType currentCost=mySeen.get(currentNode);
  if (myDistances.containsKey(currentNode)) {
    return null;
  }
  if (maxCostEvaluator.maxCostExceeded(currentCost)) {
    return null;
  }
  if (limitReached()) {
    return null;
  }
  ++numberOfNodesTraversed;
  myDistances.put(currentNode,currentCost);
  checkForPath(currentNode,currentCost,otherSeen);
  if (otherDistances.containsKey(currentNode)) {
    oneShortestPathHasBeenFound=true;
  }
 else {
    for (    RelationshipType costRelationType : costRelationTypes) {
      for (      Relationship relationship : currentNode.getRelationships(costRelationType,getDirection())) {
        if (limitReached()) {
          break;
        }
        ++numberOfTraversedRelationShips;
        Node target=relationship.getOtherNode(currentNode);
        boolean backwardsEdge=relationship.getEndNode().equals(currentNode) ^ backwards;
        CostType newCost=costAccumulator.addCosts(currentCost,costEvaluator.getCost(relationship,backwardsEdge));
        if (myDistances.containsKey(target)) {
          if (costComparator.compare(myDistances.get(target),newCost) > 0) {
            throw new RuntimeException("Cycle with negative costs found.");
          }
 else           if (calculateAllShortestPaths && costComparator.compare(myDistances.get(target),newCost) == 0) {
            List<Relationship> myPredecessors=predecessors.get(currentNode);
            if (myPredecessors == null || !myPredecessors.contains(relationship)) {
              List<Relationship> predList=predecessors.get(target);
              if (predList == null) {
              }
 else {
                predList.add(relationship);
              }
            }
          }
          continue;
        }
        if (!mySeen.containsKey(target) || costComparator.compare(mySeen.get(target),newCost) > 0) {
          if (!mySeen.containsKey(target)) {
            queue.insertValue(target,newCost);
          }
 else {
            queue.decreaseValue(target,newCost);
          }
          mySeen.put(target,newCost);
          List<Relationship> predList=new LinkedList<Relationship>();
          predList.add(relationship);
          predecessors.put(target,predList);
        }
 else         if (calculateAllShortestPaths && costComparator.compare(mySeen.get(target),newCost) == 0) {
          List<Relationship> predList=predecessors.get(target);
          predList.add(relationship);
        }
      }
    }
  }
  if (calculateAllShortestPaths && oneShortestPathHasBeenFound) {
    allShortestPathsHasBeenFound=queue.isEmpty() || costComparator.compare(mySeen.get(queue.peek()),currentCost) > 0;
  }
  return currentNode;
}
