{
  Result result=checkUpgradeableFor(storeDirectory,Legacy19Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy19Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy20Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy20Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy21Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy21Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy22Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy22Store.LEGACY_VERSION;
  }
  String path=new File(storeDirectory,result.storeFilename).getAbsolutePath();
switch (result.outcome) {
case missingStoreFile:
    throw new StoreUpgrader.UpgradeMissingStoreFilesException(path);
case storeVersionNotFound:
  throw new StoreUpgrader.UpgradingStoreVersionNotFoundException(path);
case unexpectedUpgradingStoreVersion:
throw new StoreUpgrader.UnexpectedUpgradingStoreVersionException(path,Legacy21Store.LEGACY_VERSION,result.actualVersion);
default :
throw new IllegalArgumentException("Unexpected outcome: " + result.outcome.name());
}
}
