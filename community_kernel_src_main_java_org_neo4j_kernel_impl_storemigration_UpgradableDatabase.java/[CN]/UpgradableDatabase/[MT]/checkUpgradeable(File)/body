{
  Result result=checkUpgradeableFor(storeDirectory,Legacy19Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy19Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy20Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy20Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy21Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy21Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy22Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy22Store.LEGACY_VERSION;
  }
  result=checkUpgradeableFor(storeDirectory,Legacy23Store.LEGACY_VERSION);
  if (result.outcome.isSuccessful()) {
    return Legacy23Store.LEGACY_VERSION;
  }
switch (result.outcome) {
case missingStoreFile:
    throw new StoreUpgrader.UpgradeMissingStoreFilesException(getPathToStoreFile(storeDirectory,result));
case storeVersionNotFound:
  throw new StoreUpgrader.UpgradingStoreVersionNotFoundException(getPathToStoreFile(storeDirectory,result));
case unexpectedUpgradingStoreVersion:
throw new StoreUpgrader.UnexpectedUpgradingStoreVersionException(getPathToStoreFile(storeDirectory,result),Legacy23Store.LEGACY_VERSION,result.actualVersion);
case storeNotCleanlyShutDown:
throw new StoreUpgrader.DatabaseNotCleanlyShutDown();
default :
throw new IllegalArgumentException("Unexpected outcome: " + result.outcome.name());
}
}
