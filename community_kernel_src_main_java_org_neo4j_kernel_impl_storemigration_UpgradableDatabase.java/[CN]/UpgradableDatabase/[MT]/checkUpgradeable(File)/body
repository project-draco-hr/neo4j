{
  Result result=storeVersionCheck.hasVersion(new File(storeDirectory,MetaDataStore.DEFAULT_NAME),format.storeVersion());
  if (result.outcome.isSuccessful()) {
    return format;
  }
  if (StoreVersion.isEnterpriseStoreVersion(result.actualVersion) && StoreVersion.isCommunityStoreVersion(format.storeVersion())) {
    throw new StoreUpgrader.UnexpectedUpgradingStoreFormatException();
  }
  RecordFormats fromFormat;
  try {
    fromFormat=RecordFormatSelector.selectForVersion(result.actualVersion);
    if (fromFormat.generation() > format.generation()) {
      result=new Result(Outcome.unexpectedUpgradingStoreVersion,fromFormat.storeVersion(),new File(storeDirectory,MetaDataStore.DEFAULT_NAME).getAbsolutePath());
    }
 else {
      result=fromFormat.hasCapability(Capability.VERSION_TRAILERS) ? checkCleanShutDownByVersionTrailer(storeDirectory,fromFormat) : checkCleanShutDownByCheckPoint(storeDirectory);
      if (result.outcome.isSuccessful()) {
        return fromFormat;
      }
    }
  }
 catch (  IllegalArgumentException e) {
    result=new Result(Outcome.unexpectedUpgradingStoreVersion,result.actualVersion,result.storeFilename);
  }
switch (result.outcome) {
case missingStoreFile:
    throw new StoreUpgrader.UpgradeMissingStoreFilesException(getPathToStoreFile(storeDirectory,result));
case storeVersionNotFound:
  throw new StoreUpgrader.UpgradingStoreVersionNotFoundException(getPathToStoreFile(storeDirectory,result));
case unexpectedUpgradingStoreVersion:
throw new StoreUpgrader.UnexpectedUpgradingStoreVersionException(getPathToStoreFile(storeDirectory,result),result.actualVersion);
case storeNotCleanlyShutDown:
throw new StoreUpgrader.DatabaseNotCleanlyShutDownException();
default :
throw new IllegalArgumentException("Unexpected outcome: " + result.outcome.name());
}
}
