{
  final DechunkingChannelBuffer dechunkingBuffer=new DechunkingChannelBuffer(reader,timeout,internalProtocolVersion,applicationProtocolVersion);
  PAYLOAD response=payloadDeserializer.read(dechunkingBuffer,input);
  StoreId storeId=readStoreId(dechunkingBuffer,input);
  byte responseType=dechunkingBuffer.readByte();
  if (responseType == TransactionObligationResponse.RESPONSE_TYPE) {
    long obligationTxId=dechunkingBuffer.readLong();
    return new TransactionObligationResponse<>(response,storeId,obligationTxId,channelReleaser);
  }
  TransactionStream transactions=new TransactionStream(){
    @Override public void accept(    Visitor<CommittedTransactionRepresentation,Exception> visitor) throws Exception {
      NetworkReadableLogChannel channel=new NetworkReadableLogChannel(dechunkingBuffer);
      try (PhysicalTransactionCursor cursor=new PhysicalTransactionCursor(channel,entryReader)){
        while (cursor.next() && !visitor.visit(cursor.get())) {
        }
      }
     }
  }
;
  return new TransactionStreamResponse<>(response,storeId,transactions,channelReleaser);
}
