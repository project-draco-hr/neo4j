{
  List<Map<String,Object>> result=r.stream().collect(Collectors.toList());
  assertEquals("Results for should have size " + expected.size() + " but was "+ result.size(),expected.size(),result.size());
  for (  Map<String,Object> row : result) {
    String key=(String)row.get(keyKey);
    assertTrue("Unexpected key '" + key + "'",expected.containsKey(key));
    Object objectValue=row.get(valueKey);
    if (objectValue instanceof List) {
      List<String> value=(List<String>)objectValue;
      List<String> expectedValues=(List<String>)expected.get(key);
      assertEquals("Results for '" + key + "' should have size "+ expectedValues.size()+ " but was "+ value.size(),value.size(),expectedValues.size());
      assertThat(value,containsInAnyOrder(expectedValues.toArray()));
    }
 else {
      String value=objectValue.toString();
      String expectedValue=expected.get(key).toString();
      assertTrue(String.format("Wrong value for '%s', expected '%s', got '%s'",key,expectedValue,value),value.equals(expectedValue));
    }
  }
}
