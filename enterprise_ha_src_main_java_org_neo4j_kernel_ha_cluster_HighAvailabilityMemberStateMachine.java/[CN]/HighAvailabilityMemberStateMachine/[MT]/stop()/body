{
  events.removeClusterMemberListener(eventsListener);
  HighAvailabilityMemberState oldState=state;
  state=HighAvailabilityMemberState.PENDING;
  final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,null,null);
  Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
    @Override public void notify(    HighAvailabilityMemberListener listener){
      listener.instanceStops(event);
    }
  }
);
  if (oldState == HighAvailabilityMemberState.MASTER || oldState == HighAvailabilityMemberState.SLAVE) {
    availabilityGuard.deny();
  }
  context.setAvailableHaMasterId(null);
}
