{
  try {
    HighAvailabilityMemberState oldState=state;
    InstanceId previousElected=context.getElectedMasterId();
{
      state=state.masterIsElected(context,coordinatorId);
      context.setElectedMasterId(coordinatorId);
      final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,coordinatorId,null);
      Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
        @Override public void notify(        HighAvailabilityMemberListener listener){
          listener.masterIsElected(event);
        }
      }
);
      context.setAvailableHaMasterId(null);
      if (oldState.isAccessAllowed() && oldState != state) {
        availabilityGuard.deny(HighAvailabilityMemberStateMachine.this);
      }
      logger.debug("Got masterIsElected(" + coordinatorId + "), changed "+ oldState+ " -> "+ state+ ". Previous elected master is "+ previousElected);
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
