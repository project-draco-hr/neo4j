{
  try {
    HighAvailabilityMemberState oldState=state;
    InstanceId previousElected=context.getElectedMasterId();
    context.setAvailableHaMasterId(null);
    if (!acceptNewState(state.masterIsElected(context,coordinatorId))) {
      return;
    }
    context.setElectedMasterId(coordinatorId);
    final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,coordinatorId,null);
    Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
      @Override public void notify(      HighAvailabilityMemberListener listener){
        listener.masterIsElected(event);
      }
    }
);
    if (oldState.isAccessAllowed() && oldState != state) {
      availabilityGuard.require(AVAILABILITY_REQUIREMENT);
    }
    log.debug("Got masterIsElected(" + coordinatorId + "), moved to "+ state+ " from "+ oldState+ ". Previous elected master is "+ previousElected);
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
