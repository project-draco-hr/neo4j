{
  try {
    if (role.equals(HighAvailabilityModeSwitcher.MASTER)) {
      HighAvailabilityMemberState oldState=state;
      context.setAvailableHaMasterId(roleUri);
      state=state.masterIsAvailable(context,instanceId,roleUri);
      log.debug("Got masterIsAvailable(" + instanceId + "), moved to "+ state+ " from "+ oldState);
      final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,instanceId,roleUri);
      Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
        @Override public void notify(        HighAvailabilityMemberListener listener){
          listener.masterIsAvailable(event);
        }
      }
);
      if (oldState == HighAvailabilityMemberState.TO_MASTER && state == HighAvailabilityMemberState.MASTER) {
        availabilityGuard.fulfill(AVAILABILITY_REQUIREMENT);
      }
    }
 else     if (role.equals(HighAvailabilityModeSwitcher.SLAVE)) {
      HighAvailabilityMemberState oldState=state;
      state=state.slaveIsAvailable(context,instanceId,roleUri);
      log.debug("Got slaveIsAvailable(" + instanceId + "), "+ "moved to "+ state+ " from "+ oldState);
      final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,instanceId,roleUri);
      Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
        @Override public void notify(        HighAvailabilityMemberListener listener){
          listener.slaveIsAvailable(event);
        }
      }
);
      if (oldState == HighAvailabilityMemberState.TO_SLAVE && state == HighAvailabilityMemberState.SLAVE) {
        availabilityGuard.fulfill(AVAILABILITY_REQUIREMENT);
      }
    }
  }
 catch (  Throwable throwable) {
    log.warn("Exception while receiving member availability notification",throwable);
  }
}
