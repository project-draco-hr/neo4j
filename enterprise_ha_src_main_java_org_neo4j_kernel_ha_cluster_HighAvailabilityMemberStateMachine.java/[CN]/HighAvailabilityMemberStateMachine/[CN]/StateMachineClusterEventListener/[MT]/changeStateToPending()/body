{
  if (state.isAccessAllowed()) {
    availabilityGuard.require(AVAILABILITY_REQUIREMENT);
  }
  final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(state,HighAvailabilityMemberState.PENDING,null,null);
  state=HighAvailabilityMemberState.PENDING;
  Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
    @Override public void notify(    HighAvailabilityMemberListener listener){
      listener.instanceStops(event);
    }
  }
);
  context.setAvailableHaMasterId(null);
  context.setElectedMasterId(null);
}
