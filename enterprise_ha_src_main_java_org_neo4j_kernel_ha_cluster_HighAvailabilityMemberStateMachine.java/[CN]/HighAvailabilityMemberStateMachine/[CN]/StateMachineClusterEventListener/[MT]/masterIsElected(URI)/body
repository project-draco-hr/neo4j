{
  try {
    HighAvailabilityMemberState oldState=state;
    URI previousElected=context.getElectedMasterId();
    state=state.masterIsElected(context,masterUri);
    context.setElectedMasterId(masterUri);
    final HighAvailabilityMemberChangeEvent event=new HighAvailabilityMemberChangeEvent(oldState,state,masterUri,null);
    Listeners.notifyListeners(memberListeners,new Listeners.Notification<HighAvailabilityMemberListener>(){
      @Override public void notify(      HighAvailabilityMemberListener listener){
        listener.masterIsElected(event);
      }
    }
);
    context.setAvailableHaMasterId(null);
    accessGuard.setState(state);
    logger.debug("Got masterIsElected(" + masterUri + "), changed "+ oldState+ " -> "+ state+ ". Previous elected master is "+ previousElected);
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
