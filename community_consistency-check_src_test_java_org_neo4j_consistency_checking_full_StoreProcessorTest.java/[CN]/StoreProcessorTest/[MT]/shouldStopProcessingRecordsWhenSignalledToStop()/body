{
  ConsistencyReport.Reporter reporter=mock(ConsistencyReport.Reporter.class);
  StoreProcessor processor=new StoreProcessor(CheckDecorator.NONE,reporter,Stage.SEQUENTIAL_FORWARD,CacheAccess.EMPTY);
  RecordStore<NodeRecord> nodeStore=new RecordStore.Delegator<NodeRecord>(stores.open().getNodeStore()){
    @Override public RecordCursor<NodeRecord> newRecordCursor(    NodeRecord record){
      return new RecordCursor.Delegator<NodeRecord>(super.newRecordCursor(record)){
        @Override public boolean next(        long id){
          if (id == 3) {
            processor.stop();
          }
          return super.next(id);
        }
      }
;
    }
  }
;
  nodeStore.updateRecord(node(0,false,0,0));
  nodeStore.updateRecord(node(1,false,0,0));
  nodeStore.updateRecord(node(2,false,0,0));
  nodeStore.updateRecord(node(3,false,0,0));
  nodeStore.updateRecord(node(4,false,0,0));
  nodeStore.setHighestPossibleIdInUse(4);
  processor.applyFiltered(nodeStore);
  verify(reporter,times(3)).forNode(any(NodeRecord.class),any(RecordCheck.class));
}
