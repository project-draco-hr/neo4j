{
  long sizeBefore=currentSize.get();
  if (sizeBefore <= closeToMaxSize) {
    return;
  }
  long startTime=System.currentTimeMillis();
  purgeCount++;
  int numberOfEntitiesPurged=0;
  try {
    int index=1;
    do {
      int minusPos=pos - index;
      if (minusPos >= 0) {
        if (remove(minusPos) != null) {
          numberOfEntitiesPurged++;
          if (currentSize.get() <= purgeStopSize) {
            return;
          }
        }
      }
      int plusPos=pos + index;
      if (plusPos < cache.length()) {
        if (remove(plusPos) != null) {
          numberOfEntitiesPurged++;
          if (currentSize.get() <= purgeStopSize) {
            return;
          }
        }
      }
      index++;
    }
 while ((pos - index) >= 0 || (pos + index) < cache.length());
    remove(pos);
  }
  finally {
    long timestamp=System.currentTimeMillis();
    purgeTime+=(timestamp - startTime);
    if (timestamp - lastPurgeLogTimestamp > minLogInterval) {
      lastPurgeLogTimestamp=timestamp;
      long sizeAfter=currentSize.get();
      String sizeBeforeStr=getSize(sizeBefore);
      String sizeAfterStr=getSize(sizeAfter);
      String diffStr=getSize(sizeBefore - sizeAfter);
      String missPercentage=((float)missCount / (float)(hitCount + missCount) * 100.0f) + "%";
      String colPercentage=((float)collisions / (float)totalPuts * 100.0f) + "%";
      logger.logMessage(name + " purge (nr " + purgeCount+ ") "+ sizeBeforeStr+ " -> "+ sizeAfterStr+ " ("+ diffStr+ ") "+ missPercentage+ " misses, "+ colPercentage+ " collisions ("+ collisions+ ").",true);
      printAccurateStatistics();
    }
    monitor.purged(sizeBefore,currentSize.get(),numberOfEntitiesPurged);
  }
}
