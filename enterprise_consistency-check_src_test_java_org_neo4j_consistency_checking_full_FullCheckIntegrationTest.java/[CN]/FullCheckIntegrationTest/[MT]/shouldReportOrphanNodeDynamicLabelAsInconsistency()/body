{
  final List<DynamicRecord> chain=chainOfDynamicRecordsWithLabelsForANode(130);
  assertEquals(3,chain.size());
  fixture.apply(new GraphStoreFixture.Transaction(){
    @Override protected void transactionData(    GraphStoreFixture.TransactionDataBuilder tx,    GraphStoreFixture.IdGenerator next){
      DynamicRecord record1=inUse(new DynamicRecord(chain.get(0).getId()));
      DynamicRecord record2=notInUse(new DynamicRecord(chain.get(1).getId()));
      long[] data=(long[])getRightArray(readFullByteArrayFromHeavyRecords(chain,ARRAY));
      PreAllocatedRecords allocator=new PreAllocatedRecords(60);
      allocateFromNumbers(Arrays.copyOf(data,11),asIterator(record1),allocator);
      NodeRecord before=inUse(new NodeRecord(data[0],-1,-1));
      NodeRecord after=inUse(new NodeRecord(data[0],-1,-1));
      before.setLabelField(dynamicPointer(asList(record1)),chain);
      after.setLabelField(dynamicPointer(asList(record1)),asList(record1,record2));
      tx.update(before,after);
    }
  }
);
  ConsistencySummaryStatistics stats=check();
  verifyInconsistency(RecordType.NODE_DYNAMIC_LABEL,stats);
}
