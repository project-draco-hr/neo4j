{
  try {
    IdGeneratorImpl.createGenerator(null);
    fail("Null filename should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    IdGeneratorImpl.createGenerator(idGeneratorFile());
    new IdGeneratorImpl(idGeneratorFile(),0,100).close();
    fail("Zero grab size should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new IdGeneratorImpl("testIdGenerator.id",-1,100).close();
    fail("Negative grab size should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    IdGenerator idGenerator=new IdGeneratorImpl(idGeneratorFile(),1008,1000);
    try {
      IdGeneratorImpl.createGenerator(idGeneratorFile());
      fail("Creating a id generator with existing file name " + "should throw exception");
    }
 catch (    IllegalStateException e) {
    }
    idGenerator.close();
    FileChannel fileChannel=new FileInputStream(idGeneratorFile()).getChannel();
    ByteBuffer buffer=ByteBuffer.allocate(9);
    assertEquals(9,fileChannel.read(buffer));
    buffer.flip();
    assertEquals((byte)0,buffer.get());
    assertEquals(0l,buffer.getLong());
    buffer.flip();
    int readCount=fileChannel.read(buffer);
    if (readCount != -1 && readCount != 0) {
      fail("Id generator header not ok read 9 + " + readCount + " bytes from file");
    }
    fileChannel.close();
  }
  finally {
    File file=new File(idGeneratorFile());
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
}
