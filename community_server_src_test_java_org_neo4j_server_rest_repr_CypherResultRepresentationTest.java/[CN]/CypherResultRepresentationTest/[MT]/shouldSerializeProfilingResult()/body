{
  String name="Kalle";
  ExecutionPlanDescription plan=getMockDescription(name);
  ExecutionPlanDescription childPlan=getMockDescription("child");
  when(plan.getChildren()).thenReturn(asList(childPlan));
  when(plan.hasProfilerStatistics()).thenReturn(true);
  ExecutionPlanDescription.ProfilerStatistics stats=mock(ExecutionPlanDescription.ProfilerStatistics.class);
  when(stats.getDbHits()).thenReturn(13l);
  when(stats.getRows()).thenReturn(25l);
  when(plan.getProfilerStatistics()).thenReturn(stats);
  Result result=mock(Result.class);
  when(result.hasNext()).thenReturn(false);
  when(result.columns()).thenReturn(new ArrayList<String>());
  when(result.getExecutionPlanDescription()).thenReturn(plan);
  Map<String,Object> serialized=serializeToStringThenParseAsToMap(new CypherResultRepresentation(result,false,true));
  Map<String,Object> serializedPlan=(Map<String,Object>)serialized.get("plan");
  assertThat((String)serializedPlan.get("name"),equalTo(name));
  assertThat((Integer)serializedPlan.get("rows"),is(25));
  assertThat((Integer)serializedPlan.get("dbHits"),is(13));
  List<Map<String,Object>> children=(List<Map<String,Object>>)serializedPlan.get("children");
  assertThat(children.size(),is(1));
  Map<String,Object> args=(Map<String,Object>)serializedPlan.get("args");
  assertThat((String)args.get("argumentKey"),is("argumentValue"));
}
