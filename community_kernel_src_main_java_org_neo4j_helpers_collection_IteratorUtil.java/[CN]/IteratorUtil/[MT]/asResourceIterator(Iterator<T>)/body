{
  return new ResourceIterator<T>(){
    boolean hasNext=iterator.hasNext();
    @Override public void close(){
      assertHasNext();
      hasNext=false;
    }
    @Override public boolean hasNext(){
      return hasNext;
    }
    @Override public T next(){
      assertHasNext();
      T result=iterator.next();
      hasNext=iterator.hasNext();
      return result;
    }
    @Override public void remove(){
      assertHasNext();
      try {
        iterator.remove();
      }
  finally {
        hasNext=iterator.hasNext();
      }
    }
    private void assertHasNext(){
      if (!hasNext)       throw new IllegalArgumentException("Iterator already closed");
    }
  }
;
}
