{
  this.config=config;
  this.kernelExtensionFactories=Iterables.addAll(new ArrayList<KernelExtensionFactory<?>>(),kernelExtensionFactories);
  this.dependencyResolver=dependencyResolver;
  life.addLifecycleListener(new LifecycleListener(){
    @Override public void notifyStatusChanged(    final Object instance,    LifecycleStatus from,    LifecycleStatus to){
      if (to.equals(LifecycleStatus.STARTED)) {
        Listeners.notifyListeners(listeners,new Listeners.Notification<KernelExtensionListener>(){
          @Override public void notify(          KernelExtensionListener listener){
            listener.startedKernelExtension(instance);
          }
        }
);
      }
 else       if (to.equals(LifecycleStatus.STOPPING)) {
        Listeners.notifyListeners(listeners,new Listeners.Notification<KernelExtensionListener>(){
          @Override public void notify(          KernelExtensionListener listener){
            listener.stoppingKernelExtension(instance);
          }
        }
);
      }
    }
  }
);
}
