{
  long transactionId=-1;
  int phase=0;
  boolean logRotated=logRotation.rotateLogIfNeeded(logAppendEvent);
  logAppendEvent.setLogRotated(logRotated);
  TransactionCommitment commitment;
  try {
synchronized (logFile) {
      try (SerializeTransactionEvent serialiseEvent=logAppendEvent.beginSerializeTransaction()){
        transactionId=transactionIdStore.nextCommittingTransactionId();
        phase=1;
        commitment=appendToLog(transaction,transactionId);
      }
     }
    forceAfterAppend(logAppendEvent);
    commitment.publishAsCommitted();
    orderLegacyIndexChanges(commitment);
    phase=2;
    return commitment;
  }
  finally {
    if (phase == 1) {
      transactionIdStore.transactionClosed(transactionId,0l,0l);
    }
  }
}
