{
  long transactionId=-1;
  int phase=0;
  boolean logRotated=logRotation.rotateLogIfNeeded(logAppendEvent);
  logAppendEvent.setLogRotated(logRotated);
  checkPointer.checkPointIfNeeded(logAppendEvent);
  TransactionCommitment commit;
  try {
synchronized (logFile) {
      try (SerializeTransactionEvent serialiseEvent=logAppendEvent.beginSerializeTransaction()){
        transactionId=transactionIdStore.nextCommittingTransactionId();
        phase=1;
        commit=appendToLog(transaction,transactionId);
      }
     }
    forceAfterAppend(logAppendEvent);
    commit.publishAsCommitted();
    orderLegacyIndexChanges(commit);
    phase=2;
    transactionCommitConsumer.accept(transactionId);
    return transactionId;
  }
  finally {
    if (phase == 1) {
      transactionIdStore.transactionClosed(transactionId);
    }
  }
}
