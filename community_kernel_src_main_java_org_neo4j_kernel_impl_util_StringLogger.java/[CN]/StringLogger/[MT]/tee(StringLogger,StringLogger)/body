{
  return new StringLogger(){
    @Override protected void doDebug(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      logger1.doDebug(msg,cause,flush,logMarker);
      logger2.doDebug(msg,cause,flush,logMarker);
    }
    @Override public void info(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      logger1.info(msg,cause,flush,logMarker);
      logger2.info(msg,cause,flush,logMarker);
    }
    @Override public void warn(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      logger1.warn(msg,cause,flush,logMarker);
      logger2.warn(msg,cause,flush,logMarker);
    }
    @Override public void error(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      logger1.error(msg,cause,flush,logMarker);
      logger2.error(msg,cause,flush,logMarker);
    }
    @Override public void logLongMessage(    String msg,    Visitor<LineLogger,RuntimeException> source,    boolean flush){
      logger1.logLongMessage(msg,source,flush);
      logger2.logLongMessage(msg,source,flush);
    }
    @Override public void addRotationListener(    Runnable listener){
      logger1.addRotationListener(listener);
      logger2.addRotationListener(listener);
    }
    @Override public void flush(){
      logger1.flush();
      logger2.flush();
    }
    @Override public void close(){
      logger1.close();
      logger2.close();
    }
    @Override protected void logLine(    String line){
      logger1.logLine(line);
      logger2.logLine(line);
    }
  }
;
}
