{
  return new StringLogger(){
    StringLogger logger=null;
    @Override public void doDebug(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      createLogger();
      logger.doDebug(msg,cause,flush,logMarker);
    }
    @Override public void info(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      createLogger();
      logger.info(msg,cause,flush,logMarker);
    }
    @Override public void warn(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      createLogger();
      logger.warn(msg,cause,flush,logMarker);
    }
    @Override public void error(    String msg,    Throwable cause,    boolean flush,    LogMarker logMarker){
      createLogger();
      logger.error(msg,cause,flush,logMarker);
    }
    @Override public void logLongMessage(    String msg,    Visitor<LineLogger,RuntimeException> source,    boolean flush){
      createLogger();
      logger.logLongMessage(msg,source,flush);
    }
    @Override public void addRotationListener(    Runnable listener){
      createLogger();
      logger.addRotationListener(listener);
    }
    @Override public void flush(){
      createLogger();
      logger.flush();
    }
    @Override public void close(){
      if (logger != null) {
        logger.close();
      }
    }
    @Override protected void logLine(    String line){
      createLogger();
      logger.logLine(line);
    }
    private synchronized void createLogger(){
      if (logger == null) {
        logger=logger(logFile);
      }
    }
  }
;
}
