{
  ByteBuffer scratch=ByteBuffer.allocate(1024);
  LogBackedXaDataSource ds=new LogBackedXaDataSource("irrelephant".getBytes(),"irrelephant"){
    private XaLogicalLog logicalLog=new XaLogicalLog(new File(testDir.directory(),"my.log"),null,null,mock(XaCommandWriterFactory.class),null,new DefaultFileSystemAbstraction(),new Monitors(),new TestLogging(),null,null,100,null,null);
    @Override public XaConnection getXaConnection(){
      return null;
    }
    @Override public LogBufferFactory createLogBufferFactory(){
      return logicalLog.createLogWriter(new Function<Config,File>(){
        @Override public File apply(        Config config){
          return new File(testDir.directory(),"my.log");
        }
      }
);
    }
  }
;
  LogBufferFactory logBufferFactory=ds.createLogBufferFactory();
  LogBuffer logFile=null;
  try {
    logFile=logBufferFactory.createActiveLogFile(new Config(stringMap(store_dir.name(),testDir.absolutePath())),-1);
    logFile.putLong(1337l);
    logFile.force();
    StoreChannel channel=logFile.getFileChannel();
    channel.position(0);
    long[] headerLongs=VersionAwareLogEntryReader.readLogHeader(scratch,channel,true);
    assertThat(headerLongs[0],equalTo(0l));
    assertThat(headerLongs[1],equalTo(-1l));
    scratch.clear();
    channel.read(scratch);
    scratch.flip();
    assertThat(scratch.getLong(),equalTo(1337l));
  }
  finally {
    if (logFile != null)     logFile.getFileChannel().close();
  }
}
