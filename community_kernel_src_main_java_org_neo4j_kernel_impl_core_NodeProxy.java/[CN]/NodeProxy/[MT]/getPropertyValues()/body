{
  final StatementOperationParts context=statementCtxProvider.getCtxForReading();
  StatementState state=statementCtxProvider.statementForReading();
  try {
    return asSet(map(new Function<Property,Object>(){
      @Override public Object apply(      Property prop){
        try {
          return prop.value();
        }
 catch (        PropertyNotFoundException e) {
          throw new ThisShouldNotHappenError("Jake","Property key retrieved through kernel API should exist.");
        }
      }
    }
,context.entityReadOperations().nodeGetAllProperties(state,getId())));
  }
 catch (  EntityNotFoundException e) {
    throw new NotFoundException("Node not found",e);
  }
 finally {
    state.close();
  }
}
