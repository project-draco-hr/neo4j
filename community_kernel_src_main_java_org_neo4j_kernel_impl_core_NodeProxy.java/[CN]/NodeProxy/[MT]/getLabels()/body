{
  return new ResourceIterable<Label>(){
    @Override public ResourceIterator<Label> iterator(){
      PrimitiveLongIterator labels;
      final Statement statement=statementContextProvider.statement();
      try {
        labels=statement.readOperations().nodeGetLabels(getId());
      }
 catch (      EntityNotFoundException e) {
        statement.close();
        throw new NotFoundException("No node with id " + getId() + " found.",e);
      }
      return nodeLookup.getCleanupService().resourceIterator(map(new FunctionFromPrimitiveLong<Label>(){
        @Override public Label apply(        long labelId){
          try {
            return label(statement.readOperations().labelGetName(labelId));
          }
 catch (          LabelNotFoundKernelException e) {
            throw new ThisShouldNotHappenError("Mattias","Listed labels for node " + nodeId + ", but the returned label "+ labelId+ " doesn't exist anymore");
          }
        }
      }
,labels),statement);
    }
  }
;
}
