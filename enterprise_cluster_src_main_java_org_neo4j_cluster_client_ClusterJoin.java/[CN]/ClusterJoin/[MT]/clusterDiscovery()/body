{
  determineUri();
  readClustersXml();
  if (clusters != null) {
    Clusters.Cluster clusterConfig=clusters.getCluster(config.getClusterName());
    if (clusterConfig != null) {
      URI[] memberURIs=Iterables.toArray(URI.class,Iterables.filter(new Predicate<URI>(){
        @Override public boolean accept(        URI uri){
          return !uri.equals(serverId);
        }
      }
,Iterables.map(new Function<Clusters.Member,URI>(){
        @Override public URI apply(        Clusters.Member member){
          return URI.create("cluster://" + member.getHost());
        }
      }
,clusterConfig.getMembers())));
      Future<ClusterConfiguration> config=cluster.join(this.config.getClusterName(),memberURIs);
      try {
        logger.debug("Joined cluster:" + config.get());
        try {
          updateMyInfo();
        }
 catch (        TransformerException e) {
          throw new RuntimeException(e);
        }
        return;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      ExecutionException e) {
        logger.debug("Could not join cluster " + this.config.getClusterName());
      }
    }
    if (config.isAllowedToCreateCluster()) {
      if (clusterConfig == null) {
        clusterConfig=new Clusters.Cluster(config.getClusterName());
        clusters.getClusters().add(clusterConfig);
      }
      cluster.create(clusterConfig.getName());
      if (clusterConfig.getByUri(serverId) == null) {
        clusterConfig.getMembers().add(new Clusters.Member(serverId.toString()));
        try {
          updateMyInfo();
        }
 catch (        TransformerException e) {
          logger.warn("Could not update cluster discovery file:" + clustersUri,e);
        }
      }
    }
 else {
      logger.warn("Could not join cluster, and is not allowed to create one");
    }
  }
}
