{
  List<HostnamePort> hosts=config.getInitialHosts();
  cluster.addClusterListener(new UnknownJoiningMemberWarning(hosts));
  if (hosts == null || hosts.size() == 0) {
    console.log("No cluster hosts specified. Creating cluster " + config.getClusterName());
    cluster.create(config.getClusterName());
  }
 else {
    URI[] memberURIs=Iterables.toArray(URI.class,Iterables.filter(new Predicate<URI>(){
      @Override public boolean accept(      URI uri){
        return !serverUri.equals(uri);
      }
    }
,Iterables.map(new Function<HostnamePort,URI>(){
      @Override public URI apply(      HostnamePort member){
        return URI.create("cluster://" + resolvePortOnlyHost(member));
      }
    }
,hosts)));
    while (true) {
      console.log("Attempting to join cluster of " + hosts.toString());
      Future<ClusterConfiguration> clusterConfig=cluster.join(this.config.getClusterName(),memberURIs);
      try {
        console.log("Joined cluster:" + clusterConfig.get());
        return;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      ExecutionException e) {
        logger.debug("Could not join cluster " + this.config.getClusterName());
        if (e.getCause() instanceof IllegalStateException) {
          throw ((IllegalStateException)e.getCause());
        }
      }
      if (config.isAllowedToCreateCluster()) {
        cluster.create(config.getClusterName());
        break;
      }
      console.log("Could not join cluster, timeout happened.");
    }
  }
}
