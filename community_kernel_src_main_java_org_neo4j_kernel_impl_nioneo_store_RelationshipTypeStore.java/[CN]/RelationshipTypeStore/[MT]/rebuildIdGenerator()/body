{
  stringLogger.debug("Rebuilding id generator for[" + getStorageFileName() + "] ...");
  closeIdGenerator();
  if (fileSystemAbstraction.fileExists(getStorageFileName() + ".id")) {
    boolean success=fileSystemAbstraction.deleteFile(getStorageFileName() + ".id");
    assert success;
  }
  createIdGenerator(getStorageFileName() + ".id");
  openIdGenerator(false);
  FileChannel fileChannel=getFileChannel();
  long highId=-1;
  int recordSize=getRecordSize();
  try {
    long fileSize=fileChannel.size();
    ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[recordSize]);
    for (int i=0; i * recordSize < fileSize; i++) {
      fileChannel.read(byteBuffer,i * recordSize);
      byteBuffer.flip();
      byte inUse=byteBuffer.get();
      byteBuffer.flip();
      if (inUse != Record.IN_USE.byteValue()) {
        byteBuffer.clear();
        byteBuffer.put(Record.IN_USE.byteValue()).putInt(Record.RESERVED.intValue());
        byteBuffer.flip();
        fileChannel.write(byteBuffer,i * recordSize);
        byteBuffer.clear();
      }
 else {
        highId=i;
      }
    }
    highId++;
    fileChannel.truncate(highId * recordSize);
  }
 catch (  IOException e) {
    throw new UnderlyingStorageException("Unable to rebuild id generator " + getStorageFileName(),e);
  }
  setHighId(highId);
  stringLogger.debug("[" + getStorageFileName() + "] high id="+ getHighId());
  closeIdGenerator();
  openIdGenerator(false);
}
