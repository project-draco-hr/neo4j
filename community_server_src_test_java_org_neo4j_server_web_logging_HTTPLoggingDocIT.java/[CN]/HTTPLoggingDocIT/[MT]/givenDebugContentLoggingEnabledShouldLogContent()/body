{
  final File logDirectory=testDirectory.directory("givenDebugContentLoggingEnabledShouldLogContent-logdir");
  FileUtils.forceMkdir(logDirectory);
  final File confDir=testDirectory.directory("givenDebugContentLoggingEnabledShouldLogContent-confdir");
  FileUtils.forceMkdir(confDir);
  final File configFile=HTTPLoggingPreparednessRuleTest.createConfigFile(HTTPLoggingPreparednessRuleTest.createLogbackConfigXml(logDirectory,"$requestContent\n%responseContent"),confDir);
  NeoServer server=CommunityServerBuilder.server().withDefaultDatabaseTuning().withProperty(ServerSettings.http_logging_enabled.name(),"true").withProperty(ServerSettings.http_content_logging_enabled.name(),"true").withProperty(ServerSettings.http_log_config_file.name(),configFile.getPath()).usingDatabaseDir(testDirectory.directory("givenDebugContentLoggingEnabledShouldLogContent-dbdir").getAbsolutePath()).build();
  try {
    server.start();
    HTTP.Response req=HTTP.POST(server.baseUri().resolve("/db/data/node").toString(),rawPayload("{\"name\":\"Hello, world!\"}"));
    assertThat(req.status(),is(201));
    File httpLog=new File(logDirectory,"http.log");
    assertEventually("request appears in log",fileContentSupplier(httpLog),containsString("Hello, world!"),5,TimeUnit.SECONDS);
    assertEventually("request appears in log",fileContentSupplier(httpLog),containsString("metadata"),5,TimeUnit.SECONDS);
  }
  finally {
    server.stop();
  }
}
