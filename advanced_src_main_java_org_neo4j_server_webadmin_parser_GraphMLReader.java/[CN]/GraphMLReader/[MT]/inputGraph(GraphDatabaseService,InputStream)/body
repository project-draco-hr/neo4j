{
  XMLInputFactory inputFactory=XMLInputFactory.newInstance();
  XMLStreamReader reader=inputFactory.createXMLStreamReader(graphMLInputStream);
  Map<String,String> keyIdMap=new HashMap<String,String>();
  Map<String,String> keyTypesMaps=new HashMap<String,String>();
  Map<String,Object> vertexIdMap=new HashMap<String,Object>();
  Node currentVertex=null;
  Relationship currentEdge=null;
  Transaction tx=graph.beginTx();
  int ops=0;
  try {
    while (reader.hasNext()) {
      if ((ops++) % OPERATIONS_PER_COMMIT == 0) {
        tx.success();
        tx.finish();
        tx=graph.beginTx();
      }
      Integer eventType=reader.next();
      if (eventType.equals(XMLEvent.START_ELEMENT)) {
        String elementName=reader.getName().getLocalPart();
        if (elementName.equals(GraphMLTokens.KEY)) {
          String id=reader.getAttributeValue(null,GraphMLTokens.ID);
          String attributeName=reader.getAttributeValue(null,GraphMLTokens.ATTR_NAME);
          String attributeType=reader.getAttributeValue(null,GraphMLTokens.ATTR_TYPE);
          keyIdMap.put(id,attributeName);
          keyTypesMaps.put(attributeName,attributeType);
        }
 else         if (elementName.equals(GraphMLTokens.NODE)) {
          String vertexStringId=reader.getAttributeValue(null,GraphMLTokens.ID);
          Object vertexObjectId=vertexIdMap.get(vertexStringId);
          if (vertexObjectId != null)           currentVertex=graph.getNodeById((Long)vertexObjectId);
 else {
            currentVertex=graph.createNode();
            vertexIdMap.put(vertexStringId,currentVertex.getId());
          }
        }
 else         if (elementName.equals(GraphMLTokens.EDGE)) {
          String edgeLabel=reader.getAttributeValue(null,GraphMLTokens.LABEL);
          edgeLabel=edgeLabel == null ? GraphMLTokens._DEFAULT : edgeLabel;
          String outStringId=reader.getAttributeValue(null,GraphMLTokens.SOURCE);
          String inStringId=reader.getAttributeValue(null,GraphMLTokens.TARGET);
          Object outObjectId=vertexIdMap.get(outStringId);
          Object inObjectId=vertexIdMap.get(inStringId);
          Node outVertex=null;
          if (null != outObjectId)           outVertex=graph.getNodeById((Long)outObjectId);
          Node inVertex=null;
          if (null != inObjectId)           inVertex=graph.getNodeById((Long)inObjectId);
          if (null == outVertex) {
            graph.createNode();
            outVertex=graph.createNode();
            vertexIdMap.put(outStringId,outVertex.getId());
          }
          if (null == inVertex) {
            inVertex=graph.createNode();
            vertexIdMap.put(inStringId,inVertex.getId());
          }
          currentEdge=outVertex.createRelationshipTo(inVertex,DynamicRelationshipType.withName(edgeLabel));
        }
 else         if (elementName.equals(GraphMLTokens.DATA)) {
          String key=reader.getAttributeValue(null,GraphMLTokens.KEY);
          String attributeName=keyIdMap.get(key);
          if (attributeName != null) {
            String value=reader.getElementText();
            if (currentVertex != null) {
              currentVertex.setProperty(key,typeCastValue(key,value,keyTypesMaps));
            }
 else             if (currentEdge != null) {
              currentEdge.setProperty(key,typeCastValue(key,value,keyTypesMaps));
            }
          }
        }
      }
 else       if (eventType.equals(XMLEvent.END_ELEMENT)) {
        String elementName=reader.getName().getLocalPart();
        if (elementName.equals(GraphMLTokens.NODE))         currentVertex=null;
 else         if (elementName.equals(GraphMLTokens.EDGE))         currentEdge=null;
      }
    }
  }
  finally {
    reader.close();
    tx.success();
    tx.finish();
  }
}
