{
  super(SERVICE_NAME);
  this.graphDb=graphDb;
  Config config=getGraphDbConfig();
  TxModule txModule=config.getTxModule();
  boolean isReadOnly=isReadOnly(graphDb);
  Map<Object,Object> params=new HashMap<Object,Object>(config.getParams());
  params.put("read_only",isReadOnly);
  params.put("index_config",new HashMap<String,Map<String,String>>());
  dataSource=(LuceneDataSource)txModule.registerDataSource(DATA_SOURCE_NAME,LuceneDataSource.class.getName(),LuceneDataSource.DEFAULT_BRANCH_ID,params,true);
  broker=isReadOnly ? new ReadOnlyConnectionBroker(txModule.getTxManager(),dataSource) : new ConnectionBroker(txModule.getTxManager(),dataSource);
  nodeEntityType=new EntityType(){
    public Document newDocument(    long entityId){
      return IndexType.newBaseDocument(entityId);
    }
    public Class<?> getType(){
      return Node.class;
    }
  }
;
  relationshipEntityType=new EntityType(){
    public Document newDocument(    long entityId){
      Document doc=IndexType.newBaseDocument(entityId);
      Relationship rel=graphDb.getRelationshipById(entityId);
      doc.add(new Field(LuceneIndex.KEY_START_NODE_ID,"" + rel.getStartNode().getId(),Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      doc.add(new Field(LuceneIndex.KEY_END_NODE_ID,"" + rel.getEndNode().getId(),Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED));
      return doc;
    }
    public Class<?> getType(){
      return Relationship.class;
    }
  }
;
}
