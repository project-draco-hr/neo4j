{
  File relTypeStore=new File(storeName);
  if (!relTypeStore.exists()) {
    throw new IOException("Couldn't find relationship type store " + storeName);
  }
  File idGenerator=new File(storeName + ".id");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> startBlocks=checkDynamicStore(storeName + ".names");
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(5);
  FileChannel fileChannel=new RandomAccessFile(storeName,"r").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / 5 / 20;
  int i=0;
  int inUseCount=0;
  Set<Integer> relTypeSet=new java.util.HashSet<Integer>();
  while (fileChannel.read(buffer) == 5) {
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int block=buffer.getInt();
      if (block != RESERVED && !startBlocks.remove(block)) {
        throw new IOException("start block[" + block + "] not found for record "+ i);
      }
      relTypeSet.add(i);
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println("Unkown record at: " + i);
      System.out.println("In use flag was: " + inUse);
    }
    i++;
    if (dot != 0 && i % dot == 0) {
      System.out.print(".");
    }
    buffer.clear();
  }
  System.out.print(" high id:" + i + " count:"+ inUseCount);
  if (!startBlocks.isEmpty()) {
    System.out.println("Stray type name blocks found " + startBlocks.size());
  }
  fileChannel.close();
  System.out.println(".ok");
  return relTypeSet;
}
