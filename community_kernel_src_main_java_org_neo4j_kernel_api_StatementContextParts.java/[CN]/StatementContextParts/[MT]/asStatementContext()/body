{
  return new StatementContext(){
    @Override public long labelGetForName(    String labelName) throws LabelNotFoundKernelException {
      assertStillOpen();
      return keyReadOperations.labelGetForName(labelName);
    }
    @Override public String labelGetName(    long labelId) throws LabelNotFoundKernelException {
      assertStillOpen();
      return keyReadOperations.labelGetName(labelId);
    }
    @Override public long propertyKeyGetForName(    String propertyKeyName) throws PropertyKeyNotFoundException {
      assertStillOpen();
      return keyReadOperations.propertyKeyGetForName(propertyKeyName);
    }
    @Override public String propertyKeyGetName(    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      assertStillOpen();
      return keyReadOperations.propertyKeyGetName(propertyKeyId);
    }
    @Override public Iterator<Token> labelsGetAllTokens(){
      assertStillOpen();
      return keyReadOperations.labelsGetAllTokens();
    }
    @Override public long labelGetOrCreateForName(    String labelName) throws SchemaKernelException {
      assertStillOpen();
      return keyWriteOperations.labelGetOrCreateForName(labelName);
    }
    @Override public long propertyKeyGetOrCreateForName(    String propertyKeyName) throws SchemaKernelException {
      assertStillOpen();
      return keyWriteOperations.propertyKeyGetOrCreateForName(propertyKeyName);
    }
    @Override public Iterator<Long> nodesGetForLabel(    long labelId){
      assertStillOpen();
      return entityReadOperations.nodesGetForLabel(labelId);
    }
    @Override public Iterator<Long> nodesGetFromIndexLookup(    IndexDescriptor index,    Object value) throws IndexNotFoundKernelException {
      assertStillOpen();
      return entityReadOperations.nodesGetFromIndexLookup(index,value);
    }
    @Override public boolean nodeHasLabel(    long nodeId,    long labelId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeHasLabel(nodeId,labelId);
    }
    @Override public Iterator<Long> nodeGetLabels(    long nodeId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeGetLabels(nodeId);
    }
    @Override public Property nodeGetProperty(    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeGetProperty(nodeId,propertyKeyId);
    }
    @Override public Property relationshipGetProperty(    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.relationshipGetProperty(relationshipId,propertyKeyId);
    }
    @Override public Property graphGetProperty(    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      assertStillOpen();
      return entityReadOperations.graphGetProperty(propertyKeyId);
    }
    @Override public boolean nodeHasProperty(    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeHasProperty(nodeId,propertyKeyId);
    }
    @Override public boolean relationshipHasProperty(    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.relationshipHasProperty(relationshipId,propertyKeyId);
    }
    @Override public boolean graphHasProperty(    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      assertStillOpen();
      return entityReadOperations.graphHasProperty(propertyKeyId);
    }
    @Override public Iterator<Long> nodeGetPropertyKeys(    long nodeId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeGetPropertyKeys(nodeId);
    }
    @Override public Iterator<Property> nodeGetAllProperties(    long nodeId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.nodeGetAllProperties(nodeId);
    }
    @Override public Iterator<Long> relationshipGetPropertyKeys(    long relationshipId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.relationshipGetPropertyKeys(relationshipId);
    }
    @Override public Iterator<Property> relationshipGetAllProperties(    long relationshipId) throws EntityNotFoundException {
      assertStillOpen();
      return entityReadOperations.relationshipGetAllProperties(relationshipId);
    }
    @Override public Iterator<Long> graphGetPropertyKeys(){
      assertStillOpen();
      return entityReadOperations.graphGetPropertyKeys();
    }
    @Override public Iterator<Property> graphGetAllProperties(){
      assertStillOpen();
      return entityReadOperations.graphGetAllProperties();
    }
    @Override public void nodeDelete(    long nodeId){
      assertStillOpen();
      entityWriteOperations.nodeDelete(nodeId);
    }
    @Override public void relationshipDelete(    long relationshipId){
      assertStillOpen();
      entityWriteOperations.relationshipDelete(relationshipId);
    }
    @Override public boolean nodeAddLabel(    long nodeId,    long labelId) throws EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.nodeAddLabel(nodeId,labelId);
    }
    @Override public boolean nodeRemoveLabel(    long nodeId,    long labelId) throws EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.nodeRemoveLabel(nodeId,labelId);
    }
    @Override public Property nodeSetProperty(    long nodeId,    Property property) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.nodeSetProperty(nodeId,property);
    }
    @Override public Property relationshipSetProperty(    long relationshipId,    Property property) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.relationshipSetProperty(relationshipId,property);
    }
    @Override public Property graphSetProperty(    Property property) throws PropertyKeyIdNotFoundException {
      assertStillOpen();
      return entityWriteOperations.graphSetProperty(property);
    }
    @Override public Property nodeRemoveProperty(    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.nodeRemoveProperty(nodeId,propertyKeyId);
    }
    @Override public Property relationshipRemoveProperty(    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      assertStillOpen();
      return entityWriteOperations.relationshipRemoveProperty(relationshipId,propertyKeyId);
    }
    @Override public Property graphRemoveProperty(    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      assertStillOpen();
      return entityWriteOperations.graphRemoveProperty(propertyKeyId);
    }
    @Override public IndexDescriptor indexesGetForLabelAndPropertyKey(    long labelId,    long propertyKey) throws SchemaRuleNotFoundException {
      assertStillOpen();
      return schemaReadOperations.indexesGetForLabelAndPropertyKey(labelId,propertyKey);
    }
    @Override public Iterator<IndexDescriptor> indexesGetForLabel(    long labelId){
      assertStillOpen();
      return schemaReadOperations.indexesGetForLabel(labelId);
    }
    @Override public Iterator<IndexDescriptor> indexesGetAll(){
      assertStillOpen();
      return schemaReadOperations.indexesGetAll();
    }
    @Override public Iterator<IndexDescriptor> uniqueIndexesGetForLabel(    long labelId){
      assertStillOpen();
      return schemaReadOperations.uniqueIndexesGetForLabel(labelId);
    }
    @Override public Iterator<IndexDescriptor> uniqueIndexesGetAll(){
      assertStillOpen();
      return schemaReadOperations.uniqueIndexesGetAll();
    }
    @Override public InternalIndexState indexGetState(    IndexDescriptor descriptor) throws IndexNotFoundKernelException {
      assertStillOpen();
      return schemaReadOperations.indexGetState(descriptor);
    }
    @Override public String indexGetFailure(    IndexDescriptor descriptor) throws IndexNotFoundKernelException {
      assertStillOpen();
      return schemaReadOperations.indexGetFailure(descriptor);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetForLabelAndPropertyKey(    long labelId,    long propertyKeyId){
      assertStillOpen();
      return schemaReadOperations.constraintsGetForLabelAndPropertyKey(labelId,propertyKeyId);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetForLabel(    long labelId){
      assertStillOpen();
      return schemaReadOperations.constraintsGetForLabel(labelId);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetAll(){
      assertStillOpen();
      return schemaReadOperations.constraintsGetAll();
    }
    @Override public Long indexGetOwningUniquenessConstraintId(    IndexDescriptor index) throws SchemaRuleNotFoundException {
      assertStillOpen();
      return schemaReadOperations.indexGetOwningUniquenessConstraintId(index);
    }
    @Override public long indexGetCommittedId(    IndexDescriptor index) throws SchemaRuleNotFoundException {
      assertStillOpen();
      return schemaReadOperations.indexGetCommittedId(index);
    }
    @Override public IndexDescriptor indexCreate(    long labelId,    long propertyKeyId) throws SchemaKernelException {
      assertStillOpen();
      return schemaWriteOperations.indexCreate(labelId,propertyKeyId);
    }
    @Override public IndexDescriptor uniqueIndexCreate(    long labelId,    long propertyKey) throws SchemaKernelException {
      assertStillOpen();
      return schemaWriteOperations.uniqueIndexCreate(labelId,propertyKey);
    }
    @Override public void indexDrop(    IndexDescriptor descriptor) throws DropIndexFailureException {
      assertStillOpen();
      schemaWriteOperations.indexDrop(descriptor);
    }
    @Override public void uniqueIndexDrop(    IndexDescriptor descriptor) throws DropIndexFailureException {
      assertStillOpen();
      schemaWriteOperations.uniqueIndexDrop(descriptor);
    }
    @Override public UniquenessConstraint uniquenessConstraintCreate(    long labelId,    long propertyKeyId) throws SchemaKernelException {
      assertStillOpen();
      return schemaWriteOperations.uniquenessConstraintCreate(labelId,propertyKeyId);
    }
    @Override public void constraintDrop(    UniquenessConstraint constraint){
      assertStillOpen();
      schemaWriteOperations.constraintDrop(constraint);
    }
    @Override public <K,V>V schemaStateGetOrCreate(    K key,    Function<K,V> creator){
      assertStillOpen();
      return schemaStateOperations.schemaStateGetOrCreate(key,creator);
    }
    @Override public <K>boolean schemaStateContains(    K key){
      assertStillOpen();
      return schemaStateOperations.schemaStateContains(key);
    }
    @Override public boolean isOpen(){
      return lifecycleOperations.isOpen();
    }
    @Override public void close(){
      assertStillOpen();
      lifecycleOperations.close();
    }
    private void assertStillOpen(){
      if (!lifecycleOperations.isOpen()) {
        throw new IllegalStateException("This StatementContext has been closed. No more interaction allowed");
      }
    }
  }
;
}
