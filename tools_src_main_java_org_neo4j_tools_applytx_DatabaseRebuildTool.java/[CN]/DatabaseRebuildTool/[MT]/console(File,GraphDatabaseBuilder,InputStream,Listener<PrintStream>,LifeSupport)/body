{
  final AtomicReference<Store> store=new AtomicReference<>(new Store(dbBuilder));
  final Provider<StoreAccess> storeAccess=new Provider<StoreAccess>(){
    @Override public StoreAccess instance(){
      return store.get().access;
    }
  }
;
  final Provider<GraphDatabaseAPI> dbAccess=new Provider<GraphDatabaseAPI>(){
    @Override public GraphDatabaseAPI instance(){
      return store.get().db;
    }
  }
;
  ConsoleInput consoleInput=life.add(new ConsoleInput(in,out,prompt));
  consoleInput.add("apply",new ApplyTransactionsCommand(fromPath,dbAccess));
  consoleInput.add(DumpRecordsCommand.NAME,new DumpRecordsCommand(storeAccess));
  consoleInput.add("cc",new ArgsCommand(){
    @Override public void run(    Args action,    PrintStream out) throws Exception {
      File storeDir=store.get().storeDir;
      store.get().shutdown();
      try {
        Result result=new ConsistencyCheckService().runFullConsistencyCheck(storeDir.getAbsolutePath(),new Config(),ProgressMonitorFactory.textual(out),StringLogger.SYSTEM);
        out.println((result.isSuccessful() ? "consistent" : "INCONSISTENT"));
      }
  finally {
        store.set(new Store(dbBuilder));
      }
    }
    @Override public String toString(){
      return "Runs consistency check on the database for data that has been applied up to this point";
    }
  }
);
  life.add(new LifecycleAdapter(){
    @Override public void shutdown(){
      store.get().shutdown();
    }
  }
);
  return consoleInput;
}
