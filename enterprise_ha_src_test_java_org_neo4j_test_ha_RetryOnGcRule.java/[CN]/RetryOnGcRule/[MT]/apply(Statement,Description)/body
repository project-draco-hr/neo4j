{
  return new Statement(){
    @Override public void evaluate() throws Throwable {
      final AtomicLong periodGcDuration=new AtomicLong();
      NotificationListener listener=new NotificationListener(){
        public void handleNotification(        Notification notification,        Object handback){
          if (notification.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
            GarbageCollectionNotificationInfo info=GarbageCollectionNotificationInfo.from((CompositeData)notification.getUserData());
            long duration=info.getGcInfo().getDuration();
            periodGcDuration.addAndGet(duration);
          }
        }
      }
;
      List<GarbageCollectorMXBean> gcbeans=ManagementFactory.getGarbageCollectorMXBeans();
      for (      GarbageCollectorMXBean gcbean : gcbeans) {
        NotificationEmitter emitter=(NotificationEmitter)gcbean;
        emitter.addNotificationListener(listener,null,null);
      }
      try {
        Throwable e=null;
        for (int i=0; i < 5; i++) {
          try {
            base.evaluate();
            return;
          }
 catch (          Throwable ex) {
            e=ex;
            ex.printStackTrace();
            if (periodGcDuration.get() < TimeUnit.SECONDS.toMillis(5)) {
              throw ex;
            }
          }
          periodGcDuration.set(0);
        }
        throw e;
      }
  finally {
        for (        GarbageCollectorMXBean gcbean : gcbeans) {
          NotificationEmitter emitter=(NotificationEmitter)gcbean;
          emitter.removeNotificationListener(listener,null,null);
        }
      }
    }
  }
;
}
