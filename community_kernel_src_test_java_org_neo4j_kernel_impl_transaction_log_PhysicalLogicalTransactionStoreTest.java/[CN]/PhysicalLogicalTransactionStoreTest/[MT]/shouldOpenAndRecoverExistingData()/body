{
  TransactionIdStore transactionIdStore=new DeadSimpleTransactionIdStore();
  TransactionMetadataCache positionCache=new TransactionMetadataCache(10,100);
  final byte[] additionalHeader=new byte[]{1,2,5};
  final int masterId=2, authorId=1;
  final long timeStarted=12345, latestCommittedTxWhenStarted=4545, timeCommitted=timeStarted + 10;
  LifeSupport life=new LifeSupport();
  final PhysicalLogFiles logFiles=new PhysicalLogFiles(testDir,DEFAULT_NAME,fs);
  Monitor monitor=new Monitors().newMonitor(PhysicalLogFile.Monitor.class);
  LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,1000,transactionIdStore,mock(LogVersionRepository.class),monitor,positionCache));
  life.start();
  try {
    addATransactionAndRewind(life,logFile,positionCache,transactionIdStore,additionalHeader,masterId,authorId,timeStarted,latestCommittedTxWhenStarted,timeCommitted);
  }
  finally {
    life.shutdown();
  }
  life=new LifeSupport();
  final AtomicBoolean recoveryRequired=new AtomicBoolean();
  final FakeRecoveryVisitor visitor=new FakeRecoveryVisitor(additionalHeader,masterId,authorId,timeStarted,timeCommitted,latestCommittedTxWhenStarted);
  logFile=life.add(new PhysicalLogFile(fs,logFiles,1000,transactionIdStore,mock(LogVersionRepository.class),monitor,positionCache));
  final LogicalTransactionStore txStore=new PhysicalLogicalTransactionStore(logFile,positionCache);
  life.add(new BatchingTransactionAppender(logFile,NO_ROTATION,positionCache,transactionIdStore,BYPASS,kernelHealth));
  life.add(new Recovery(new Recovery.SPI(){
    @Override public void forceEverything(){
    }
    @Override public Visitor<CommittedTransactionRepresentation,Exception> getRecoveryVisitor(){
      recoveryRequired.set(true);
      return visitor;
    }
    @Override public LogPosition getPositionToRecoverFrom() throws IOException {
      return LogPosition.start(0);
    }
    @Override public TransactionCursor getTransactions(    LogPosition position) throws IOException {
      return txStore.getTransactions(position);
    }
    @Override public void allTransactionsRecovered(    CommittedTransactionRepresentation lastRecoveredTransaction,    LogPosition positionAfterLastRecoveredTransaction) throws Exception {
    }
  }
,mock(Recovery.Monitor.class)));
  try {
    life.start();
  }
  finally {
    life.shutdown();
  }
  assertEquals(1,visitor.getVisitedTransactions());
  assertTrue(recoveryRequired.get());
}
