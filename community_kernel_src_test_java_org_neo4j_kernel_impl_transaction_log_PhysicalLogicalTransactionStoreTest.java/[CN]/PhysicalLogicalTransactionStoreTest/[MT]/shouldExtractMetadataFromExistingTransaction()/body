{
  TransactionIdStore txIdStore=new DeadSimpleTransactionIdStore();
  TransactionMetadataCache positionCache=new TransactionMetadataCache(10,100);
  final byte[] additionalHeader=new byte[]{1,2,5};
  final int masterId=2, authorId=1;
  final long timeStarted=12345, latestCommittedTxWhenStarted=4545, timeCommitted=timeStarted + 10;
  LifeSupport life=new LifeSupport();
  PhysicalLogFiles logFiles=new PhysicalLogFiles(testDir,DEFAULT_NAME,fs);
  Monitor monitor=new Monitors().newMonitor(PhysicalLogFile.Monitor.class);
  LogFile logFile=life.add(new PhysicalLogFile(fs,logFiles,1000,txIdStore,mock(LogVersionRepository.class),monitor,positionCache));
  life.start();
  try {
    addATransactionAndRewind(life,logFile,positionCache,txIdStore,additionalHeader,masterId,authorId,timeStarted,latestCommittedTxWhenStarted,timeCommitted);
  }
  finally {
    life.shutdown();
  }
  life=new LifeSupport();
  logFile=life.add(new PhysicalLogFile(fs,logFiles,1000,txIdStore,mock(LogVersionRepository.class),monitor,positionCache));
  final LogicalTransactionStore store=new PhysicalLogicalTransactionStore(logFile,positionCache);
  life.start();
  try {
    TransactionMetadata expectedMetadata;
    try (TransactionCursor cursor=store.getTransactions(TransactionIdStore.BASE_TX_ID + 1)){
      boolean hasNext=cursor.next();
      assertTrue(hasNext);
      CommittedTransactionRepresentation tx=cursor.get();
      TransactionRepresentation transaction=tx.getTransactionRepresentation();
      assertArrayEquals(additionalHeader,transaction.additionalHeader());
      assertEquals(masterId,transaction.getMasterId());
      assertEquals(authorId,transaction.getAuthorId());
      assertEquals(timeStarted,transaction.getTimeStarted());
      assertEquals(timeCommitted,transaction.getTimeCommitted());
      assertEquals(latestCommittedTxWhenStarted,transaction.getLatestCommittedTxWhenStarted());
      expectedMetadata=new TransactionMetadata(masterId,authorId,tx.getStartEntry().getStartPosition(),tx.getStartEntry().checksum(),timeCommitted);
    }
     positionCache.clear();
    TransactionMetadata actualMetadata=store.getMetadataFor(txIdStore.getLastCommittedTransactionId());
    assertEquals(expectedMetadata,actualMetadata);
  }
  finally {
    life.shutdown();
  }
}
