{
  for (  Object key : value.keySet()) {
    Object val=value.get(key);
    String keyString=key == null ? "null" : key.toString();
    if (val instanceof Number) {
      serializer.putNumber(keyString,(Number)val);
    }
 else     if (val instanceof Boolean) {
      serializer.putBoolean(keyString,(Boolean)val);
    }
 else     if (val instanceof String) {
      serializer.putString(keyString,(String)val);
    }
 else     if (val instanceof Path) {
      PathRepresentation<Path> representation=new PathRepresentation<>((Path)val);
      serializer.putMapping(keyString,representation);
    }
 else     if (val instanceof Iterable) {
      serializer.putList(keyString,ObjectToRepresentationConverter.getListRepresentation((Iterable)val));
    }
 else     if (val instanceof Map) {
      serializer.putMapping(keyString,ObjectToRepresentationConverter.getMapRepresentation((Map)val));
    }
 else     if (val == null) {
      serializer.putString(keyString,null);
    }
 else     if (val.getClass().isArray()) {
      Object[] objects=toArray(val);
      serializer.putList(keyString,ObjectToRepresentationConverter.getListRepresentation(asList(objects)));
    }
 else     if (val instanceof Node || val instanceof Relationship) {
      Representation representation=ObjectToRepresentationConverter.getSingleRepresentation(val);
      serializer.putMapping(keyString,(MappingRepresentation)representation);
    }
 else {
      throw new IllegalArgumentException("Unsupported value type: " + val.getClass());
    }
  }
}
