{
  Map<Long,List<Long>> labelsForEachNode=new HashMap<>();
  for (int i=0; i < labelIds.length; i++) {
    long labelId=labelIds[i];
    for (int j=0; j < nodeIdsByLabelIndex[i].length; j++) {
      long nodeId=nodeIdsByLabelIndex[i][j];
      List<Long> labelIdList=labelsForEachNode.get(nodeId);
      if (labelIdList == null) {
        labelsForEachNode.put(nodeId,labelIdList=new ArrayList<>());
      }
      labelIdList.add(labelId);
    }
  }
  Set<Long> nodeIdSet=labelsForEachNode.keySet();
  long[] nodeIds=new long[nodeIdSet.size()];
  long[][] labelIdsByNodeIndex=new long[nodeIdSet.size()][];
  int nodeIndex=0;
  for (  long nodeId : nodeIdSet) {
    nodeIds[nodeIndex]=nodeId;
    List<Long> labelIdList=labelsForEachNode.get(nodeId);
    long[] nodeLabelIds=new long[labelIdList.size()];
    int labelIndex=0;
    for (    long labelId : labelIdList) {
      nodeLabelIds[labelIndex]=labelId;
      labelIndex++;
    }
    labelIdsByNodeIndex[nodeIndex]=nodeLabelIds;
    nodeIndex++;
  }
  return new LuceneNodeLabelRange(id,nodeIds,labelIdsByNodeIndex);
}
