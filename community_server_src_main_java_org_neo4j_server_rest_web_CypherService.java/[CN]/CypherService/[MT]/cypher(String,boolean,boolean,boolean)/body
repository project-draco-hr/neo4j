{
  Map<String,Object> command=input.readMap(body);
  if (!command.containsKey(QUERY_KEY)) {
    return output.badRequest(new BadInputException("You have to provide the 'query' parameter."));
  }
  String query=(String)command.get(QUERY_KEY);
  Map<String,Object> params;
  try {
    params=(Map<String,Object>)(command.containsKey(PARAMS_KEY) && command.get(PARAMS_KEY) != null ? command.get(PARAMS_KEY) : new HashMap<String,Object>());
  }
 catch (  ClassCastException e) {
    return output.badRequest(new IllegalArgumentException("Parameters must be a JSON map"));
  }
  try {
    ServerExecutionEngine executionEngine=cypherExecutor.getExecutionEngine();
    boolean periodicCommitQuery=executionEngine.isPeriodicCommitQuery(query);
    CommitOnSuccessfulStatusCodeRepresentationWriteHandler handler=(CommitOnSuccessfulStatusCodeRepresentationWriteHandler)this.output.getRepresentationWriteHandler();
    if (periodicCommitQuery) {
      handler.closeTransaction();
    }
    ExecutionResult result;
    if (profile) {
      result=executionEngine.profile(query,params);
      includePlan=true;
    }
 else {
      result=executionEngine.execute(query,params);
    }
    if (periodicCommitQuery) {
      handler.setTransaction(database.beginTx());
    }
    return output.ok(new CypherResultRepresentation(result,includeStats,includePlan));
  }
 catch (  Throwable e) {
    if (e.getCause() instanceof CypherException) {
      return output.badRequest(e.getCause());
    }
 else {
      return output.badRequest(e);
    }
  }
}
