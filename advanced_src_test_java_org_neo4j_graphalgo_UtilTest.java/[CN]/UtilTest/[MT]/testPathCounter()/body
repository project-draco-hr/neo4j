{
  Node a=neo.createNode();
  Node b=neo.createNode();
  Node c=neo.createNode();
  Node d=neo.createNode();
  Node e=neo.createNode();
  Node f=neo.createNode();
  List<Relationship> ap=new LinkedList<Relationship>();
  List<Relationship> bp=new LinkedList<Relationship>();
  List<Relationship> cp=new LinkedList<Relationship>();
  List<Relationship> dp=new LinkedList<Relationship>();
  List<Relationship> ep=new LinkedList<Relationship>();
  List<Relationship> fp=new LinkedList<Relationship>();
  Map<Node,List<Relationship>> predecessors=new HashMap<Node,List<Relationship>>();
  predecessors.put(a,ap);
  predecessors.put(b,bp);
  predecessors.put(c,cp);
  predecessors.put(d,dp);
  predecessors.put(e,ep);
  predecessors.put(f,fp);
  fp.add(f.createRelationshipTo(c,MyRelTypes.R1));
  fp.add(f.createRelationshipTo(e,MyRelTypes.R1));
  ep.add(e.createRelationshipTo(b,MyRelTypes.R1));
  ep.add(e.createRelationshipTo(d,MyRelTypes.R1));
  dp.add(d.createRelationshipTo(a,MyRelTypes.R1));
  cp.add(c.createRelationshipTo(b,MyRelTypes.R1));
  bp.add(b.createRelationshipTo(a,MyRelTypes.R1));
  PathCounter counter=new Util.PathCounter(predecessors);
  assertTrue(counter.getNumberOfPathsToNode(a) == 1);
  assertTrue(counter.getNumberOfPathsToNode(b) == 1);
  assertTrue(counter.getNumberOfPathsToNode(c) == 1);
  assertTrue(counter.getNumberOfPathsToNode(d) == 1);
  assertTrue(counter.getNumberOfPathsToNode(e) == 2);
  assertTrue(counter.getNumberOfPathsToNode(f) == 3);
  counter=new Util.PathCounter(Util.reversedPredecessors(predecessors));
  assertTrue(counter.getNumberOfPathsToNode(a) == 3);
  assertTrue(counter.getNumberOfPathsToNode(b) == 2);
  assertTrue(counter.getNumberOfPathsToNode(c) == 1);
  assertTrue(counter.getNumberOfPathsToNode(d) == 1);
  assertTrue(counter.getNumberOfPathsToNode(e) == 1);
  assertTrue(counter.getNumberOfPathsToNode(f) == 1);
}
