{
  if (value instanceof String) {
    String string=(String)value;
    if (LongerShortString.encode(keyId,string,block,PropertyType.getPayloadSize()))     return;
    Bits bits=bits32WithKeyAndType(keyId,PropertyType.STRING);
    long stringBlockId=nextStringBlockId();
    bits.put(stringBlockId,36);
    block.setSingleBlock(bits.getLongs()[0]);
    byte[] encodedString=getBestSuitedEncoding(string);
    Collection<DynamicRecord> valueRecords=allocateStringRecords(stringBlockId,encodedString);
    for (    DynamicRecord valueRecord : valueRecords) {
      valueRecord.setType(PropertyType.STRING.intValue());
      block.addValueRecord(valueRecord);
    }
  }
 else   if (value instanceof Integer)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.INT).put(((Integer)value).intValue()).getLongs()[0]);
 else   if (value instanceof Boolean)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.BOOL).put(((Boolean)value).booleanValue() ? 1 : 0).getLongs()[0]);
 else   if (value instanceof Float)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.FLOAT).put(Float.floatToRawIntBits(((Float)value).floatValue())).getLongs()[0]);
 else   if (value instanceof Long) {
    if (ShortArray.LONG.getRequiredBits(value) <= 35) {
      block.setValueBlocks(bits32WithKeyAndType(keyId,PropertyType.LONG).put((byte)1,1).put(((Long)value).longValue(),35).getLongs());
    }
 else {
      block.setValueBlocks(bits64WithKeyAndType(keyId,PropertyType.LONG).put(((Long)value).longValue()).getLongs());
    }
  }
 else   if (value instanceof Double)   block.setValueBlocks(bits64WithKeyAndType(keyId,PropertyType.DOUBLE).put(Double.doubleToRawLongBits(((Double)value).doubleValue())).getLongs());
 else   if (value instanceof Byte)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.BYTE).put(((Byte)value).byteValue()).getLongs()[0]);
 else   if (value instanceof Character)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.CHAR).put(((Character)value).charValue()).getLongs()[0]);
 else   if (value instanceof Short)   block.setSingleBlock(bits32WithKeyAndType(keyId,PropertyType.SHORT).put(((Short)value).shortValue()).getLongs()[0]);
 else   if (value.getClass().isArray()) {
    if (ShortArray.encode(keyId,value,block,DEFAULT_PAYLOAD_SIZE))     return;
    long arrayBlockId=nextArrayBlockId();
    Bits bits=bits32WithKeyAndType(keyId,PropertyType.ARRAY);
    bits.put(arrayBlockId,36);
    block.setSingleBlock(bits.getLongs()[0]);
    Collection<DynamicRecord> arrayRecords=allocateArrayRecords(arrayBlockId,value);
    for (    DynamicRecord valueRecord : arrayRecords) {
      valueRecord.setType(PropertyType.ARRAY.intValue());
      block.addValueRecord(valueRecord);
    }
  }
 else {
    throw new IllegalArgumentException("Unknown property type on: " + value + ", "+ value.getClass());
  }
}
