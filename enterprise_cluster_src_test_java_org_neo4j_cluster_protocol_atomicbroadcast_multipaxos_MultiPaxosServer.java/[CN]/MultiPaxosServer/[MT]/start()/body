{
  broadcastSerializer=new AtomicBroadcastSerializer(new ObjectStreamFactory(),new ObjectStreamFactory());
  final LifeSupport life=new LifeSupport();
  try {
    MessageTimeoutStrategy timeoutStrategy=new MessageTimeoutStrategy(new FixedTimeoutStrategy(5000)).timeout(HeartbeatMessage.sendHeartbeat,200);
    NetworkedServerFactory serverFactory=new NetworkedServerFactory(life,new MultiPaxosServerFactory(new ClusterConfiguration("default"),new LogbackService(null,null)),timeoutStrategy,new LogbackService(null,null),new ObjectStreamFactory(),new ObjectStreamFactory());
    ServerIdElectionCredentialsProvider electionCredentialsProvider=new ServerIdElectionCredentialsProvider();
    server=serverFactory.newNetworkedServer(new Config(MapUtil.stringMap(),ClusterSettings.class),new InMemoryAcceptorInstanceStore(),electionCredentialsProvider);
    server.addBindingListener(electionCredentialsProvider);
    server.addBindingListener(new BindingListener(){
      @Override public void listeningAt(      URI me){
        System.out.println("Listening at:" + me);
      }
    }
);
    cluster=server.newClient(Cluster.class);
    cluster.addClusterListener(new ClusterListener(){
      @Override public void enteredCluster(      ClusterConfiguration clusterConfiguration){
        System.out.println("Entered cluster:" + clusterConfiguration);
      }
      @Override public void joinedCluster(      InstanceId instanceId,      URI member){
        System.out.println("Joined cluster:" + instanceId + " (at URI "+ member+ ")");
      }
      @Override public void leftCluster(      InstanceId instanceId){
        System.out.println("Left cluster:" + instanceId);
      }
      @Override public void leftCluster(){
        System.out.println("Left cluster");
      }
      @Override public void elected(      String role,      InstanceId instanceId,      URI electedMember){
        System.out.println(instanceId + " at URI " + electedMember+ " was elected as "+ role);
      }
      @Override public void unelected(      String role,      InstanceId instanceId,      URI electedMember){
        System.out.println(instanceId + " at URI " + electedMember+ " was removed from "+ role);
      }
    }
);
    Heartbeat heartbeat=server.newClient(Heartbeat.class);
    heartbeat.addHeartbeatListener(new HeartbeatListener(){
      @Override public void failed(      InstanceId server){
        System.out.println(server + " failed");
      }
      @Override public void alive(      InstanceId server){
        System.out.println(server + " alive");
      }
    }
);
    election=server.newClient(Election.class);
    broadcast=server.newClient(AtomicBroadcast.class);
    broadcast.addAtomicBroadcastListener(new AtomicBroadcastListener(){
      @Override public void receive(      Payload value){
        try {
          System.out.println(broadcastSerializer.receive(value));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
catch (        ClassNotFoundException e) {
          e.printStackTrace();
        }
      }
    }
);
    life.start();
    String command;
    BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
    while (!(command=reader.readLine()).equals("quit")) {
      String[] arguments=command.split(" ");
      Method method=getCommandMethod(arguments[0]);
      if (method != null) {
        String[] realArgs=new String[arguments.length - 1];
        System.arraycopy(arguments,1,realArgs,0,realArgs.length);
        try {
          method.invoke(this,realArgs);
        }
 catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        IllegalArgumentException e) {
          e.printStackTrace();
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
      }
    }
    cluster.leave();
  }
  finally {
    life.shutdown();
    System.out.println("Done");
  }
}
