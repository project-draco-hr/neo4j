{
  return new StatementOperations(){
    @Override public long labelGetForName(    StatementState state,    String labelName){
      return keyReadOperations.labelGetForName(state,labelName);
    }
    @Override public String labelGetName(    StatementState state,    long labelId) throws LabelNotFoundKernelException {
      return keyReadOperations.labelGetName(state,labelId);
    }
    @Override public long propertyKeyGetForName(    StatementState state,    String propertyKeyName){
      return keyReadOperations.propertyKeyGetForName(state,propertyKeyName);
    }
    @Override public String propertyKeyGetName(    StatementState state,    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      return keyReadOperations.propertyKeyGetName(state,propertyKeyId);
    }
    @Override public Iterator<Token> labelsGetAllTokens(    StatementState state){
      return keyReadOperations.labelsGetAllTokens(state);
    }
    @Override public long labelGetOrCreateForName(    StatementState state,    String labelName) throws SchemaKernelException {
      return keyWriteOperations.labelGetOrCreateForName(state,labelName);
    }
    @Override public long propertyKeyGetOrCreateForName(    StatementState state,    String propertyKeyName) throws SchemaKernelException {
      return keyWriteOperations.propertyKeyGetOrCreateForName(state,propertyKeyName);
    }
    @Override public PrimitiveLongIterator nodesGetForLabel(    StatementState state,    long labelId){
      return entityReadOperations.nodesGetForLabel(state,labelId);
    }
    @Override public PrimitiveLongIterator nodesGetFromIndexLookup(    StatementState state,    IndexDescriptor index,    Object value) throws IndexNotFoundKernelException {
      return entityReadOperations.nodesGetFromIndexLookup(state,index,value);
    }
    @Override public boolean nodeHasLabel(    StatementState state,    long nodeId,    long labelId) throws EntityNotFoundException {
      return entityReadOperations.nodeHasLabel(state,nodeId,labelId);
    }
    @Override public PrimitiveLongIterator nodeGetLabels(    StatementState state,    long nodeId) throws EntityNotFoundException {
      return entityReadOperations.nodeGetLabels(state,nodeId);
    }
    @Override public Property nodeGetProperty(    StatementState state,    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityReadOperations.nodeGetProperty(state,nodeId,propertyKeyId);
    }
    @Override public Property relationshipGetProperty(    StatementState state,    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityReadOperations.relationshipGetProperty(state,relationshipId,propertyKeyId);
    }
    @Override public Property graphGetProperty(    StatementState state,    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      return entityReadOperations.graphGetProperty(state,propertyKeyId);
    }
    @Override public boolean nodeHasProperty(    StatementState state,    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityReadOperations.nodeHasProperty(state,nodeId,propertyKeyId);
    }
    @Override public boolean relationshipHasProperty(    StatementState state,    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityReadOperations.relationshipHasProperty(state,relationshipId,propertyKeyId);
    }
    @Override public boolean graphHasProperty(    StatementState state,    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      return entityReadOperations.graphHasProperty(state,propertyKeyId);
    }
    @Override public PrimitiveLongIterator nodeGetPropertyKeys(    StatementState state,    long nodeId) throws EntityNotFoundException {
      return entityReadOperations.nodeGetPropertyKeys(state,nodeId);
    }
    @Override public Iterator<Property> nodeGetAllProperties(    StatementState state,    long nodeId) throws EntityNotFoundException {
      return entityReadOperations.nodeGetAllProperties(state,nodeId);
    }
    @Override public PrimitiveLongIterator relationshipGetPropertyKeys(    StatementState state,    long relationshipId) throws EntityNotFoundException {
      return entityReadOperations.relationshipGetPropertyKeys(state,relationshipId);
    }
    @Override public Iterator<Property> relationshipGetAllProperties(    StatementState state,    long relationshipId) throws EntityNotFoundException {
      return entityReadOperations.relationshipGetAllProperties(state,relationshipId);
    }
    @Override public PrimitiveLongIterator graphGetPropertyKeys(    StatementState state){
      return entityReadOperations.graphGetPropertyKeys(state);
    }
    @Override public Iterator<Property> graphGetAllProperties(    StatementState state){
      return entityReadOperations.graphGetAllProperties(state);
    }
    @Override public void nodeDelete(    StatementState state,    long nodeId){
      entityWriteOperations.nodeDelete(state,nodeId);
    }
    @Override public void relationshipDelete(    StatementState state,    long relationshipId){
      entityWriteOperations.relationshipDelete(state,relationshipId);
    }
    @Override public boolean nodeAddLabel(    StatementState state,    long nodeId,    long labelId) throws EntityNotFoundException {
      return entityWriteOperations.nodeAddLabel(state,nodeId,labelId);
    }
    @Override public boolean nodeRemoveLabel(    StatementState state,    long nodeId,    long labelId) throws EntityNotFoundException {
      return entityWriteOperations.nodeRemoveLabel(state,nodeId,labelId);
    }
    @Override public Property nodeSetProperty(    StatementState state,    long nodeId,    Property property) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityWriteOperations.nodeSetProperty(state,nodeId,property);
    }
    @Override public Property relationshipSetProperty(    StatementState state,    long relationshipId,    Property property) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityWriteOperations.relationshipSetProperty(state,relationshipId,property);
    }
    @Override public Property graphSetProperty(    StatementState state,    Property property) throws PropertyKeyIdNotFoundException {
      return entityWriteOperations.graphSetProperty(state,property);
    }
    @Override public Property nodeRemoveProperty(    StatementState state,    long nodeId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityWriteOperations.nodeRemoveProperty(state,nodeId,propertyKeyId);
    }
    @Override public Property relationshipRemoveProperty(    StatementState state,    long relationshipId,    long propertyKeyId) throws PropertyKeyIdNotFoundException, EntityNotFoundException {
      return entityWriteOperations.relationshipRemoveProperty(state,relationshipId,propertyKeyId);
    }
    @Override public Property graphRemoveProperty(    StatementState state,    long propertyKeyId) throws PropertyKeyIdNotFoundException {
      return entityWriteOperations.graphRemoveProperty(state,propertyKeyId);
    }
    @Override public IndexDescriptor indexesGetForLabelAndPropertyKey(    StatementState state,    long labelId,    long propertyKey) throws SchemaRuleNotFoundException {
      return schemaReadOperations.indexesGetForLabelAndPropertyKey(state,labelId,propertyKey);
    }
    @Override public Iterator<IndexDescriptor> indexesGetForLabel(    StatementState state,    long labelId){
      return schemaReadOperations.indexesGetForLabel(state,labelId);
    }
    @Override public Iterator<IndexDescriptor> indexesGetAll(    StatementState state){
      return schemaReadOperations.indexesGetAll(state);
    }
    @Override public Iterator<IndexDescriptor> uniqueIndexesGetForLabel(    StatementState state,    long labelId){
      return schemaReadOperations.uniqueIndexesGetForLabel(state,labelId);
    }
    @Override public Iterator<IndexDescriptor> uniqueIndexesGetAll(    StatementState state){
      return schemaReadOperations.uniqueIndexesGetAll(state);
    }
    @Override public InternalIndexState indexGetState(    StatementState state,    IndexDescriptor descriptor) throws IndexNotFoundKernelException {
      return schemaReadOperations.indexGetState(state,descriptor);
    }
    @Override public String indexGetFailure(    StatementState state,    IndexDescriptor descriptor) throws IndexNotFoundKernelException {
      return schemaReadOperations.indexGetFailure(state,descriptor);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetForLabelAndPropertyKey(    StatementState state,    long labelId,    long propertyKeyId){
      return schemaReadOperations.constraintsGetForLabelAndPropertyKey(state,labelId,propertyKeyId);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetForLabel(    StatementState state,    long labelId){
      return schemaReadOperations.constraintsGetForLabel(state,labelId);
    }
    @Override public Iterator<UniquenessConstraint> constraintsGetAll(    StatementState state){
      return schemaReadOperations.constraintsGetAll(state);
    }
    @Override public Long indexGetOwningUniquenessConstraintId(    StatementState state,    IndexDescriptor index) throws SchemaRuleNotFoundException {
      return schemaReadOperations.indexGetOwningUniquenessConstraintId(state,index);
    }
    @Override public long indexGetCommittedId(    StatementState state,    IndexDescriptor index) throws SchemaRuleNotFoundException {
      return schemaReadOperations.indexGetCommittedId(state,index);
    }
    @Override public IndexDescriptor indexCreate(    StatementState state,    long labelId,    long propertyKeyId) throws SchemaKernelException {
      return schemaWriteOperations.indexCreate(state,labelId,propertyKeyId);
    }
    @Override public void indexDrop(    StatementState state,    IndexDescriptor descriptor) throws DropIndexFailureException {
      schemaWriteOperations.indexDrop(state,descriptor);
    }
    @Override public void uniqueIndexDrop(    StatementState state,    IndexDescriptor descriptor) throws DropIndexFailureException {
      schemaWriteOperations.uniqueIndexDrop(state,descriptor);
    }
    @Override public UniquenessConstraint uniquenessConstraintCreate(    StatementState state,    long labelId,    long propertyKeyId) throws SchemaKernelException {
      return schemaWriteOperations.uniquenessConstraintCreate(state,labelId,propertyKeyId);
    }
    @Override public void constraintDrop(    StatementState state,    UniquenessConstraint constraint){
      schemaWriteOperations.constraintDrop(state,constraint);
    }
    @Override public <K,V>V schemaStateGetOrCreate(    StatementState state,    K key,    Function<K,V> creator){
      return schemaStateOperations.schemaStateGetOrCreate(state,key,creator);
    }
    @Override public <K>boolean schemaStateContains(    StatementState state,    K key){
      return schemaStateOperations.schemaStateContains(state,key);
    }
  }
;
}
