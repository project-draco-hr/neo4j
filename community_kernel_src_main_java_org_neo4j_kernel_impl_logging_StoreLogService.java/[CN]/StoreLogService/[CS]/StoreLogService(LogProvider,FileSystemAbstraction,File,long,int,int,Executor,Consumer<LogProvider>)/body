{
  if (!internalLog.getParentFile().exists()) {
    internalLog.getParentFile().mkdirs();
  }
  FormattedLogProvider internalLogProvider;
  if (internalLogRotationThreshold == 0) {
    OutputStream outputStream=createOrOpenAsOuputStream(fileSystem,internalLog,true);
    internalLogProvider=FormattedLogProvider.withUTCTimeZone().toOutputStream(outputStream);
    rotationListener.accept(internalLogProvider);
    this.closeable=outputStream;
  }
 else {
    RotatingFileOutputStreamSupplier rotatingSupplier=new RotatingFileOutputStreamSupplier(fileSystem,internalLog,internalLogRotationThreshold,internalLogRotationDelay,maxInternalLogArchives,rotationExecutor,new RotatingFileOutputStreamSupplier.RotationListener(){
      @Override public void outputFileCreated(      OutputStream newStream,      OutputStream oldStream){
        FormattedLogProvider logProvider=FormattedLogProvider.withUTCTimeZone().toOutputStream(newStream);
        logProvider.getLog(StoreLogService.class).info("Opened new internal log file");
        rotationListener.accept(logProvider);
        logProvider.getLog(StoreLogService.class).info("Rotated internal log file");
      }
    }
);
    internalLogProvider=FormattedLogProvider.withUTCTimeZone().toOutputStream(rotatingSupplier);
    this.closeable=rotatingSupplier;
  }
  this.logService=new SimpleLogService(userLogProvider,internalLogProvider);
}
