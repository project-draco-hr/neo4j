{
  return new GraphDatabaseFacadeFactory(){
    @Override protected PlatformModule createPlatform(    File storeDir,    Map<String,String> params,    Dependencies dependencies,    GraphDatabaseFacade graphDatabaseFacade){
      final LifeSupport lifeMock=mock(LifeSupport.class);
      doThrow(startupError).when(lifeMock).start();
      doAnswer(new Answer(){
        @Override public Object answer(        InvocationOnMock invocationOnMock) throws Throwable {
          return invocationOnMock.getArguments()[0];
        }
      }
).when(lifeMock).add(any(Lifecycle.class));
      return new PlatformModule(storeDir,params,dependencies,graphDatabaseFacade){
        @Override public LifeSupport createLife(){
          return lifeMock;
        }
      }
;
    }
    @Override protected EditionModule createEdition(    PlatformModule platformModule){
      return null;
    }
    @Override protected DataSourceModule createDataSource(    Dependencies dependencies,    PlatformModule platformModule,    EditionModule editionModule){
      return null;
    }
  }
;
}
