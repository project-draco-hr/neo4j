{
  File actors=file("ops","actors10.csv");
  try (PrintStream out=new PrintStream(actors)){
    out.println("personId:ID,name,:LABEL");
    out.println("keanu,\"Keanu Reeves\",Actor");
    out.println("laurence,\"Laurence Fishburne\",Actor");
    out.println("carrieanne,\"Carrie-Anne Moss\",Actor");
    out.println("laurence,\"Laurence Harvey\",Actor");
  }
   File badFile=new File(directory.directory(),Configuration.BAD_FILE_NAME);
  String[] arguments=arguments("--into",directory.absolutePath(),"--nodes",actors.getAbsolutePath(),"--skip-duplicate-nodes");
  importTool(arguments);
  assertTrue(badFile.exists());
  String realDir=actors.getParentFile().getAbsolutePath();
  printFileWithPathsRemoved(badFile,realDir,"bad-duplicate-nodes-default-not-imported.bad.adoc");
  printCommandToFile(arguments,realDir,"bad-duplicate-nodes-default.adoc");
  GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabase(directory.absolutePath());
  try (Transaction tx=db.beginTx();ResourceIterator<Node> nodes=db.findNodes(Label.label("Actor"))){
    assertEquals(asSet("Keanu Reeves","Laurence Fishburne","Carrie-Anne Moss"),namesOf(nodes));
    tx.success();
  }
 }
