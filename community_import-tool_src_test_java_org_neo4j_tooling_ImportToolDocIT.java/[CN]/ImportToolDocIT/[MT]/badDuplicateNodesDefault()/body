{
  File actors=file("ops","actors10.csv");
  try (PrintStream out=new PrintStream(actors)){
    out.println("personId:ID,name,:LABEL");
    out.println("keanu,\"Keanu Reeves\",Actor");
    out.println("laurence,\"Laurence Fishburne\",Actor");
    out.println("carrieanne,\"Carrie-Anne Moss\",Actor");
    out.println("laurence,\"Laurence Harvey\",Actor");
  }
   File badFile=file("ops","bad-duplicate-nodes-default-not-imported.bad.adoc").getAbsoluteFile();
  String[] arguments=arguments("--into",directory.absolutePath(),"--nodes",actors.getAbsolutePath(),"--skip-duplicate-nodes","--bad",badFile.getAbsolutePath());
  importTool(arguments);
  assertTrue(badFile.exists());
  String realDir=actors.getParentFile().getAbsolutePath();
  printCommandToFile(arguments,realDir,"bad-duplicate-nodes-default.adoc");
  GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabase(directory.absolutePath());
  try (Transaction tx=db.beginTx();ResourceIterator<Node> nodes=db.findNodes(DynamicLabel.label("Actor"))){
    assertEquals(asSet("Keanu Reeves","Laurence Fishburne","Carrie-Anne Moss"),namesOf(nodes));
    tx.success();
  }
 }
