{
  File movies=file("ops","movies.csv");
  try (PrintStream out=new PrintStream(movies)){
    out.println(":ID,title,year:int,s:LABEL");
    out.println("tt0133093,\"The Matrix\",1999,Movie");
    out.println("tt0234215,\"The Matrix Reloaded\",2003,Movie;Sequel");
    out.println("tt0242653,\"The Matrix Revolutions\",2003,Movie;Sequel");
  }
   File actors=file("ops","actors.csv");
  try (PrintStream out=new PrintStream(actors)){
    out.println(":ID,name,:LABEL");
    out.println("keanu,\"Keanu Reeves\",Actor");
    out.println("laurence,\"Laurence Fishburne\",Actor");
    out.println("carrieanne,\"Carrie-Anne Moss\",Actor");
  }
   File roles=file("ops","roles.csv");
  try (PrintStream out=new PrintStream(roles)){
    out.println(":START_ID,role,:END_ID,:TYPE");
    out.println("keanu,\"Neo\",tt0133093,ACTS_IN");
    out.println("keanu,\"Neo\",tt0234215,ACTS_IN");
    out.println("keanu,\"Neo\",tt0242653,ACTS_IN");
    out.println("laurence,\"Morpheus\",tt0133093,ACTS_IN");
    out.println("laurence,\"Morpheus\",tt0234215,ACTS_IN");
    out.println("laurence,\"Morpheus\",tt0242653,ACTS_IN");
    out.println("carrieanne,\"Trinity\",tt0133093,ACTS_IN");
    out.println("carrieanne,\"Trinity\",tt0234215,ACTS_IN");
    out.println("carrieanne,\"Trinity\",tt0242653,ACTS_IN");
  }
   String[] arguments=arguments("--into",directory.absolutePath(),"--nodes",movies.getAbsolutePath(),"--nodes",actors.getAbsolutePath(),"--relationships",roles.getAbsolutePath());
  ImportTool.main(arguments);
  GraphDatabaseService db=new GraphDatabaseFactory().newEmbeddedDatabase(directory.absolutePath());
  try (Transaction tx=db.beginTx()){
    int nodeCount=0, relationshipCount=0, sequelCount=0;
    for (    Node node : GlobalGraphOperations.at(db).getAllNodes()) {
      nodeCount++;
    }
    assertEquals(NODE_COUNT,nodeCount);
    for (    Relationship relationship : GlobalGraphOperations.at(db).getAllRelationships()) {
      assertTrue(relationship.hasProperty("role"));
      relationshipCount++;
    }
    assertEquals(RELATIONSHIP_COUNT,relationshipCount);
    ResourceIterator<Node> movieSequels=db.findNodes(DynamicLabel.label("Sequel"));
    while (movieSequels.hasNext()) {
      Node sequel=movieSequels.next();
      assertTrue(sequel.hasProperty("title"));
      sequelCount++;
    }
    assertEquals(SEQUEL_COUNT,sequelCount);
    tx.success();
  }
  finally {
    db.shutdown();
  }
  String documentationArgs=StringUtils.join(arguments," ");
  String realDir=movies.getParentFile().getAbsolutePath();
  documentationArgs=documentationArgs.replace(realDir + File.separator,"").replace(directory.absolutePath(),"path_to_target_directory");
  String docsCommand="neo4j-import " + documentationArgs;
  try (PrintStream out=new PrintStream(file("ops","example-command.adoc"))){
    out.println(docsCommand);
  }
 }
