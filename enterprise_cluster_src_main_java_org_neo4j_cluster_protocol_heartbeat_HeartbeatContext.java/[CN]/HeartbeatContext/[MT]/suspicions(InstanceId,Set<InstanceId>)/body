{
  Set<InstanceId> serverSuspicions=getSuspicionsFor(from);
  Iterator<InstanceId> suspicionsIterator=serverSuspicions.iterator();
  while (suspicionsIterator.hasNext()) {
    InstanceId currentSuspicion=suspicionsIterator.next();
    if (!suspicions.contains(currentSuspicion)) {
      logger.info(from + " is no longer suspecting " + currentSuspicion);
      suspicionsIterator.remove();
    }
  }
  for (  InstanceId suspicion : suspicions) {
    if (!serverSuspicions.contains(suspicion)) {
      logger.info(from + " is now suspecting " + suspicion);
      serverSuspicions.add(suspicion);
    }
  }
  for (  final InstanceId node : suspicions) {
    if (isFailed(node) && !failed.contains(node)) {
      failed.add(node);
      Listeners.notifyListeners(listeners,executor,new Listeners.Notification<HeartbeatListener>(){
        @Override public void notify(        HeartbeatListener listener){
          listener.failed(node);
        }
      }
);
    }
  }
}
