{
  Machine machine=new Machine();
  PackStream.Packer packer=machine.packer();
  packer.packStructHeader(3,'N');
  packer.pack(12);
  packer.pack(asList("Person","Employee"));
  packer.pack(asMap("name","Alice","age",33));
  packer.flush();
  byte[] bytes=machine.output();
  byte[] expected=new byte[]{PackStream.TINY_STRUCT | 3,'N',12,PackStream.TINY_LIST | 2,PackStream.TINY_TEXT | 6,'P','e','r','s','o','n',PackStream.TINY_TEXT | 8,'E','m','p','l','o','y','e','e',PackStream.TINY_MAP | 2,PackStream.TINY_TEXT | 4,'n','a','m','e',PackStream.TINY_TEXT | 5,'A','l','i','c','e',PackStream.TINY_TEXT | 3,'a','g','e',33};
  assertThat(bytes,equalTo(expected));
  PackValue value=newUnpacker(bytes).unpack();
  assertThat(value.isStruct(),equalTo(true));
  assertThat(value.size(),equalTo(3));
  assertThat(value.signature(),equalTo('N'));
  PackValue identity=value.get(0);
  assertThat(identity.isInteger(),equalTo(true));
  assertThat(identity.intValue(),equalTo(12));
  PackValue labels=value.get(1);
  assertThat(labels.isList(),equalTo(true));
  List<PackValue> labelList=labels.listValue();
  assertThat(labelList.size(),equalTo(2));
  assertThat(labelList.get(0).stringValue(),equalTo("Person"));
  assertThat(labelList.get(1).stringValue(),equalTo("Employee"));
  PackValue properties=value.get(2);
  assertThat(properties.isMap(),equalTo(true));
  Map<String,PackValue> propertyMap=properties.mapValue();
  assertThat(propertyMap.size(),equalTo(2));
  assertThat(propertyMap.get("name").stringValue(),equalTo("Alice"));
  assertThat(propertyMap.get("age").intValue(),equalTo(33));
}
