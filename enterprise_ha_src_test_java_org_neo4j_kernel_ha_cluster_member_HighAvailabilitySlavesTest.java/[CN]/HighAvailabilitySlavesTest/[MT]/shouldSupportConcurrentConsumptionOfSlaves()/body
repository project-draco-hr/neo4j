{
  LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader=new VersionAwareLogEntryReader<>(new RecordStorageCommandReaderFactory());
  HighAvailabilitySlaves haSlaves=new HighAvailabilitySlaves(clusterMembersOfSize(1000),mock(Cluster.class),new DefaultSlaveFactory(NullLogProvider.getInstance(),new Monitors(),42,Suppliers.singleton(logEntryReader)));
  ExecutorService executor=Executors.newFixedThreadPool(5);
  for (int i=0; i < 5; i++) {
    executor.submit(slavesConsumingRunnable(haSlaves));
  }
  executor.shutdown();
  executor.awaitTermination(30,SECONDS);
  int slavesCount=0;
  LifeSupport life=ReflectionUtil.getPrivateField(haSlaves,"life",LifeSupport.class);
  for (  Lifecycle lifecycle : life.getLifecycleInstances()) {
    if (lifecycle instanceof Slave) {
      slavesCount++;
    }
  }
  assertEquals("Unexpected number of slaves",1000 - 1,slavesCount);
}
