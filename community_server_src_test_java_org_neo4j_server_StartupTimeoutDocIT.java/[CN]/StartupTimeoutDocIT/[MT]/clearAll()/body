{
  new Transactor(dbRule.getGraphDatabaseService(),new UnitOfWork(){
    @Override public void doWork(){
      deleteAllNodesAndRelationships(dbRule.getGraphDatabaseService());
      deleteAllIndexes(dbRule.getGraphDatabaseService());
    }
    private void deleteAllNodesAndRelationships(    final GraphDatabaseService db){
      Iterable<Node> allNodes=GlobalGraphOperations.at(db).getAllNodes();
      for (      Node n : allNodes) {
        Iterable<Relationship> relationships=n.getRelationships();
        for (        Relationship rel : relationships) {
          rel.delete();
        }
        if (n.getId() != 0) {
          n.delete();
        }
 else {
          for (          String key : n.getPropertyKeys()) {
            n.removeProperty(key);
          }
        }
      }
    }
    private void deleteAllIndexes(    final GraphDatabaseService db){
      IndexManager indexManager=db.index();
      for (      String indexName : indexManager.nodeIndexNames()) {
        try {
          db.index().forNodes(indexName).delete();
        }
 catch (        UnsupportedOperationException e) {
        }
      }
      for (      String indexName : indexManager.relationshipIndexNames()) {
        try {
          db.index().forRelationships(indexName).delete();
        }
 catch (        UnsupportedOperationException e) {
        }
      }
      for (      String k : indexManager.getNodeAutoIndexer().getAutoIndexedProperties()) {
        indexManager.getNodeAutoIndexer().stopAutoIndexingProperty(k);
      }
      indexManager.getNodeAutoIndexer().setEnabled(false);
      for (      String k : indexManager.getRelationshipAutoIndexer().getAutoIndexedProperties()) {
        indexManager.getRelationshipAutoIndexer().stopAutoIndexingProperty(k);
      }
      indexManager.getRelationshipAutoIndexer().setEnabled(false);
    }
  }
).execute();
}
