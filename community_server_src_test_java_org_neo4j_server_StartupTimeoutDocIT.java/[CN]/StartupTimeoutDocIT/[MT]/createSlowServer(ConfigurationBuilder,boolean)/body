{
  final AtomicReference<Runnable> timerStartSignal=new AtomicReference<>();
  CommunityNeoServer server=new CommunityNeoServer(configurator,GraphDatabaseDependencies.newDependencies().userLogProvider(NullLogProvider.getInstance()),NullLogProvider.getInstance()){
    @Override protected InterruptThreadTimer createInterruptStartupTimer(){
      InterruptThreadTimer realTimer=super.createInterruptStartupTimer();
      return timerThatStartsWhenModulesStartsLoading(realTimer);
    }
    private InterruptThreadTimer timerThatStartsWhenModulesStartsLoading(    final InterruptThreadTimer realTimer){
      return new InterruptThreadTimer(){
        @Override public boolean wasTriggered(){
          return realTimer.wasTriggered();
        }
        @Override public void stopCountdown(){
          realTimer.stopCountdown();
        }
        @Override public void startCountdown(){
          timerStartSignal.set(new Runnable(){
            @Override public void run(){
              realTimer.startCountdown();
            }
          }
);
        }
        @Override public long getTimeoutMillis(){
          return realTimer.getTimeoutMillis();
        }
        @Override public State getState(){
          return realTimer.getState();
        }
      }
;
    }
    @Override protected Iterable<ServerModule> createServerModules(){
      ServerModule slowModule=new ServerModule(){
        @Override public void start(){
          timerStartSignal.get().run();
          try {
            Thread.sleep(1000 * 5);
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
          if (preventMovingFurtherThanStartingModules) {
            fail("Should not get here");
          }
        }
        @Override public void stop(){
        }
      }
;
      return Arrays.asList(slowModule);
    }
  }
;
  return server;
}
