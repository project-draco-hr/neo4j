{
  now+=tickDuration;
  Iterator<MessageDelivery> iter=messageDeliveries.iterator();
  while (iter.hasNext()) {
    MessageDelivery messageDelivery=iter.next();
    if (messageDelivery.getMessageDeliveryTime() <= now) {
      long delay=strategy.messageDelay(messageDelivery.getMessage(),messageDelivery.getServer().getServer().boundAt().toString());
      if (delay != NetworkLatencyStrategy.LOST) {
        messageDelivery.getServer().process(messageDelivery.getMessage());
      }
      iter.remove();
    }
  }
  for (  TestProtocolServer testServer : participants.values()) {
    testServer.tick(now);
  }
  List<Message> messages=new ArrayList<Message>();
  for (  TestProtocolServer testServer : participants.values()) {
    testServer.sendMessages(messages);
  }
  for (  Message message : messages) {
    String to=message.getHeader(Message.TO);
    long delay=0;
    if (message.getHeader(Message.TO).equals(message.getHeader(Message.FROM))) {
      log.debug("Sending message to itself; zero latency");
    }
 else {
      delay=strategy.messageDelay(message,to);
    }
    if (delay == NetworkLatencyStrategy.LOST) {
      log.debug("Send message to " + to + " was lost");
    }
 else {
      TestProtocolServer server=participants.get(to);
      log.debug("Send to " + to + ": "+ message);
      messageDeliveries.add(new MessageDelivery(now + delay,message,server));
    }
  }
  Iterator<Pair<Future<?>,Runnable>> waiters=futureWaiter.iterator();
  while (waiters.hasNext()) {
    Pair<Future<?>,Runnable> next=waiters.next();
    if (next.first().isDone()) {
      next.other().run();
      waiters.remove();
    }
  }
  return messageDeliveries.size();
}
