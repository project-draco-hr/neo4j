{
  if (relationshipTypesAndDirections.length % 2 != 0) {
    throw new IllegalArgumentException("Not as many directions as relationship types.");
  }
  RelationshipType[] relationshipTypes=new RelationshipType[relationshipTypesAndDirections.length / 2];
  Direction[] directions=new Direction[relationshipTypesAndDirections.length / 2];
  for (int i=0, j=0; j < directions.length; i+=2, j++) {
    try {
      relationshipTypes[j]=(RelationshipType)relationshipTypesAndDirections[i];
    }
 catch (    ClassCastException ex) {
      throw new IllegalArgumentException("Not a RelationshipType: " + relationshipTypesAndDirections[i]);
    }
    try {
      directions[j]=(Direction)relationshipTypesAndDirections[i + 1];
    }
 catch (    ClassCastException ex) {
      throw new IllegalArgumentException("Not a Direction: " + relationshipTypesAndDirections[i + 1]);
    }
  }
  return traversal(traversalOrder,stopEvaluator,returnableEvaluator,relationshipTypes,directions);
}
