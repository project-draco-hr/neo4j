{
  final Iterable<TraversalPosition> positions=engine.current().traverse(this,traversalOrder,stopEvaluator,returnableEvaluator,relationshipTypes,directions);
  return new Traverser(){
    Iterator<TraversalPosition> iter=positions.iterator();
    TraversalPosition last=null;
    TraversalPosition current=null;
    public TraversalPosition currentPosition(){
      return last;
    }
    public Collection<Node> getAllNodes(){
      Collection<Node> result=new LinkedList<Node>();
      for (      Node node : this) {
        result.add(node);
      }
      return result;
    }
    public Iterator<Node> iterator(){
      return new Iterator<Node>(){
        public boolean hasNext(){
          if (current != null) {
            return true;
          }
 else           if (iter.hasNext()) {
            current=iter.next();
            return true;
          }
 else {
            return false;
          }
        }
        public Node next(){
          if (hasNext()) {
            last=current;
            current=null;
            return last.currentNode();
          }
 else {
            throw new NoSuchElementException();
          }
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
