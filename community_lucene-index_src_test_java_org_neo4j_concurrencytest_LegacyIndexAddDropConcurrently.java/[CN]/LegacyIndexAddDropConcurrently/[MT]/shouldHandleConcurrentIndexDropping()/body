{
  ExecutorService exec=Executors.newFixedThreadPool(4);
  final GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
  List<Callable<Object>> jobs=new ArrayList<>();
  for (int i=0; i < 4; i++) {
    jobs.add(new Callable<Object>(){
      private final Random rand=ThreadLocalRandom.current();
      @Override public Object call() throws Exception {
        for (int j=0; j < 1000; j++) {
switch (rand.nextInt(5)) {
case 4:
            try (Transaction tx=db.beginTx()){
              db.index().forNodes("users").delete();
              tx.success();
            }
 catch (            NotFoundException e) {
            }
          break;
default :
        try (Transaction tx=db.beginTx()){
          db.index().forNodes("users").add(db.createNode(),"name","steve");
          tx.success();
        }
 catch (        NotFoundException e) {
        }
      break;
  }
}
return null;
}
}
);
}
for (Future<Object> objectFuture : exec.invokeAll(jobs)) {
objectFuture.get();
}
}
