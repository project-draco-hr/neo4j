{
  long nodeId=0;
  int labelId=5, propertyKeyId=7;
  NodePropertyUpdate expectedUpdate=NodePropertyUpdate.add(nodeId,propertyKeyId,"Neo",new long[]{labelId});
  long ruleId=0;
  TransactionRecordState tx=newWriteTransaction().first();
  SchemaRule rule=indexRule(ruleId,labelId,propertyKeyId,PROVIDER_DESCRIPTOR);
  tx.createSchemaRule(rule);
  try (LockGroup locks=new LockGroup()){
    commitProcess().commit(transactionRepresentationOf(tx),locks,commitEvent,INTERNAL);
  }
   IteratorCollector<NodePropertyUpdate> indexUpdates=new IteratorCollector<>(0);
  doAnswer(indexUpdates).when(mockIndexing).validate(any(Iterable.class));
  tx=newWriteTransaction().first();
  tx.nodeCreate(nodeId);
  tx.addLabelToNode(labelId,nodeId);
  tx.nodeAddProperty(nodeId,propertyKeyId,"Neo");
  PhysicalTransactionRepresentation representation=transactionRepresentationOf(tx);
  RecoveryCreatingCopyingNeoCommandHandler recoverer=new RecoveryCreatingCopyingNeoCommandHandler();
  representation.accept(recoverer);
  try (LockGroup locks=new LockGroup()){
    commitProcess().commit(representation,locks,commitEvent,INTERNAL);
  }
   verify(mockIndexing,times(1)).validate(any(Iterable.class));
  indexUpdates.assertContent(expectedUpdate);
  reset(mockIndexing);
  indexUpdates=new IteratorCollector<>(0);
  doAnswer(indexUpdates).when(mockIndexing).validate(any(Iterable.class));
  commit(recoverer.getAsRecovered(),TransactionApplicationMode.RECOVERY);
  verify(mockIndexing,times(1)).addRecoveredNodeIds(PrimitiveLongCollections.setOf(nodeId));
  verify(mockIndexing,never()).validate(any(Iterable.class));
}
