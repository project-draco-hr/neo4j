{
  config=new Config(stringMap(GraphDatabaseSettings.dense_node_threshold.name(),"" + denseNodeThreshold));
  File storeDir=new File("dir");
  fs.mkdir(storeDir);
  storeFactory=new StoreFactory(storeDir,config,idGeneratorFactory,pageCache,fs,NULL_LOG_PROVIDER);
  neoStores=storeFactory.openNeoStores(SF_CREATE);
  neoStores.rebuildCountStoreIfNeeded();
  lockMocks.clear();
  locks=mock(LockService.class,new Answer(){
    @Override public synchronized Object answer(    final InvocationOnMock invocation) throws Throwable {
      if (invocation.getMethod().getName().equals("acquireNodeLock")) {
        final Lock mock=mock(Lock.class,new Answer(){
          @Override public Object answer(          InvocationOnMock invocationOnMock) throws Throwable {
            return null;
          }
        }
);
        lockMocks.add(mock);
        return mock;
      }
 else {
        return null;
      }
    }
  }
);
  cacheAccessBackDoor=mock(CacheAccessBackDoor.class);
  mockIndexing=mock(IndexingService.class);
  doReturn(ValidatedIndexUpdates.NONE).when(mockIndexing).validate(any(Iterable.class),any(IndexUpdateMode.class));
}
