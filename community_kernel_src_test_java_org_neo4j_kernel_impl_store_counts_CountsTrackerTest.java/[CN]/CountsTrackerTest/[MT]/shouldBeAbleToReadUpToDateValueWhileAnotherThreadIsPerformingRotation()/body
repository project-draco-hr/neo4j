{
  CountsOracle oracle=someData();
  int newTxId=2;
  try (Lifespan life=new Lifespan()){
    CountsTracker tracker=life.add(newTracker());
    oracle.update(tracker);
    tracker.rotate(newTxId);
  }
   final CountsOracle delta=new CountsOracle();
{
    CountsOracle.Node n1=delta.node(1);
    CountsOracle.Node n2=delta.node(1,4);
    delta.relationship(n1,1,n2);
    delta.relationship(n2,2,n1);
  }
  delta.update(oracle);
  final Barrier.Control barrier=new Barrier.Control();
  try (Lifespan life=new Lifespan()){
    CountsTracker tracker=life.add(new CountsTracker(the.logger(),the.fileSystem(),the.pageCache(),the.testPath()){
      @Override protected boolean include(      CountsKey countsKey,      ReadableBuffer value){
        barrier.reached();
        return super.include(countsKey,value);
      }
    }
);
    Future<Void> task=threading.execute(new Function<CountsTracker,Void>(){
      @Override public Void apply(      CountsTracker tracker){
        try {
          delta.update(tracker);
          tracker.rotate(2);
        }
 catch (        IOException e) {
          throw new AssertionError(e);
        }
        return null;
      }
    }
,tracker);
    barrier.await();
    oracle.verify(tracker);
    barrier.release();
    task.get();
    oracle.verify(tracker);
  }
 }
