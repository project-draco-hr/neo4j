{
  super();
  this.addValueType("o",new OptionContext(OptionValueType.MUST,"The traversal order [BREADTH_FIRST/DEPTH_FIRST/breadth/depth]"));
  this.addValueType("r",new OptionContext(OptionValueType.MUST,"The relationship type(s) expressed as a JSON string " + "(supports regex\n" + "matching of the types) f.ex. "+ "\"MY_REL_TYPE:out,.*_HAS_.*:both\".\n"+ "Matching is case-insensitive."));
  this.addValueType("f",new OptionContext(OptionValueType.MUST,"Filters node property keys/values. Supplied either as a single " + "value\n" + "or as a JSON string where both keys and values can "+ "contain regex.\n"+ "Starting/ending {} brackets are optional. Examples:\n"+ "\"username\"\n"+ "   nodes which has property 'username' gets listed\n"+ "\".*name: ma.*, age: ''\"\n"+ "   nodes which has any key matching '.*name' where the "+ "property value\n"+ "   for that key matches 'ma.*' AND has the 'age' property "+ "gets listed"));
  this.addValueType("i",new OptionContext(OptionValueType.NONE,"Filters are case-insensitive (case-sensitive by default)"));
  this.addValueType("l",new OptionContext(OptionValueType.NONE,"Filters matches more loosely, i.e. it's considered a match if " + "just\n" + "a part of a value matches the pattern, not necessarily "+ "the whole value"));
  this.addValueType("c",new OptionContext(OptionValueType.MUST,"Command to run for each returned node. Use $n as a node-id " + "replacement.\n" + "Example: -c \"ls -f name $n\". Multiple commands "+ "can be supplied with\n"+ "&& in between"));
}
