{
  final CoreTopologyService coreTopologyService=mock(CoreTopologyService.class);
  LeaderLocator leaderLocator=mock(LeaderLocator.class);
  when(leaderLocator.getLeader()).thenReturn(member(0));
  Map<MemberId,CoreAddresses> coreMembers=new HashMap<>();
  coreMembers.put(member(0),coreAddresses(0));
  final CoreTopology clusterTopology=new CoreTopology(clusterId,false,coreMembers);
  when(coreTopologyService.coreServers()).thenReturn(clusterTopology);
  when(coreTopologyService.edgeServers()).thenReturn(new EdgeTopology(clusterId,emptySet()));
  final GetServersProcedure proc=new GetServersProcedure(coreTopologyService,leaderLocator,config,getInstance());
  final List<Object[]> results=asList(proc.apply(null,new Object[0]));
  Object[] rows=results.get(0);
  long ttl=(long)rows[0];
  assertEquals((long)config.get(CoreEdgeClusterSettings.cluster_routing_ttl),ttl);
  List<Map<String,Object[]>> servers=(List<Map<String,Object[]>>)rows[1];
  Map<String,Object[]> writeServers=servers.get(0);
  assertThat(writeServers.get("role"),equalTo("WRITE"));
  assertThat(asList(writeServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString()));
  Map<String,Object[]> readServers=servers.get(1);
  assertThat(readServers.get("role"),equalTo("READ"));
  assertThat(asList(readServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString()));
  Map<String,Object[]> routingServers=servers.get(2);
  assertThat(routingServers.get("role"),equalTo("ROUTE"));
  assertThat(asList(routingServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString()));
}
