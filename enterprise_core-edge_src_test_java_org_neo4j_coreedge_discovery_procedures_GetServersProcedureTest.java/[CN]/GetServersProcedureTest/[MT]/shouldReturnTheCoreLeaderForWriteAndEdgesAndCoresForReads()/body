{
  final CoreTopologyService topologyService=mock(CoreTopologyService.class);
  Map<MemberId,CoreAddresses> coreMembers=new HashMap<>();
  MemberId theLeader=member(0);
  coreMembers.put(theLeader,coreAddresses(0));
  when(topologyService.coreServers()).thenReturn(new CoreTopology(clusterId,false,coreMembers));
  when(topologyService.edgeServers()).thenReturn(new EdgeTopology(clusterId,addresses(1)));
  LeaderLocator leaderLocator=mock(LeaderLocator.class);
  when(leaderLocator.getLeader()).thenReturn(theLeader);
  GetServersProcedure procedure=new GetServersProcedure(topologyService,leaderLocator,config,getInstance());
  final List<Object[]> results=asList(procedure.apply(null,new Object[0]));
  Object[] rows=results.get(0);
  long ttl=(long)rows[0];
  assertEquals((long)config.get(CoreEdgeClusterSettings.cluster_routing_ttl),ttl);
  List<Map<String,Object[]>> servers=(List<Map<String,Object[]>>)rows[1];
  Map<String,Object[]> writeServers=servers.get(0);
  assertThat(writeServers.get("role"),equalTo("WRITE"));
  assertThat(asList(writeServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString()));
  Map<String,Object[]> readServers=servers.get(1);
  assertThat(readServers.get("role"),equalTo("READ"));
  assertThat(asList(readServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString(),edgeAddresses(1).getBoltAddress().toString()));
  Map<String,Object[]> routingServers=servers.get(2);
  assertThat(routingServers.get("role"),equalTo("ROUTE"));
  assertThat(asList(routingServers.get("addresses")),containsInAnyOrder(coreAddresses(0).getRaftServer().toString()));
}
